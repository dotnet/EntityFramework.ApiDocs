<Type Name="DbSetMigrationsExtensions" FullName="System.Data.Entity.Migrations.DbSetMigrationsExtensions">
  <TypeSignature Language="C#" Value="public static class DbSetMigrationsExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DbSetMigrationsExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DbSetMigrationsExtensions" />
  <TypeSignature Language="F#" Value="type DbSetMigrationsExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A set of extension methods for <see cref="T:System.Data.Entity.IDbSet`1" /></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddOrUpdate&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static void AddOrUpdate&lt;TEntity&gt; (this System.Data.Entity.IDbSet&lt;TEntity&gt; set, params TEntity[] entities) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOrUpdate&lt;class TEntity&gt;(class System.Data.Entity.IDbSet`1&lt;!!TEntity&gt; set, !!TEntity[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddOrUpdate(Of TEntity As Class) (set As IDbSet(Of TEntity), ParamArray entities As TEntity())" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate : System.Data.Entity.IDbSet&lt;'Entity (requires 'Entity : null)&gt; * 'Entity[] -&gt; unit (requires 'Entity : null)" Usage="System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate (set, entities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="set" Type="System.Data.Entity.IDbSet&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="entities" Type="TEntity[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The type of entities to add or update.</typeparam>
        <param name="set">The set to which the entities belong.</param>
        <param name="entities"> The entities to add or update. </param>
        <summary>
            Adds or updates entities by key when SaveChanges is called.
            Equivalent to an "upsert" operation from database terminology.
            This method can be useful when seeding data using Migrations.
            </summary>
        <remarks>
            When the <paramref name="set" /> parameter is a custom or fake IDbSet implementation, this method will
            attempt to locate and invoke a public, instance method with the same signature as this extension method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static void AddOrUpdate&lt;TEntity&gt; (this System.Data.Entity.IDbSet&lt;TEntity&gt; set, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; identifierExpression, params TEntity[] entities) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOrUpdate&lt;class TEntity&gt;(class System.Data.Entity.IDbSet`1&lt;!!TEntity&gt; set, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; identifierExpression, !!TEntity[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddOrUpdate(Of TEntity As Class) (set As IDbSet(Of TEntity), identifierExpression As Expression(Of Func(Of TEntity, Object)), ParamArray entities As TEntity())" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate : System.Data.Entity.IDbSet&lt;'Entity (requires 'Entity : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * 'Entity[] -&gt; unit (requires 'Entity : null)" Usage="System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate (set, identifierExpression, entities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="set" Type="System.Data.Entity.IDbSet&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="identifierExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
        <Parameter Name="entities" Type="TEntity[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The type of entities to add or update.</typeparam>
        <param name="set">The set to which the entities belong.</param>
        <param name="identifierExpression"> An expression specifying the properties that should be used when determining whether an Add or Update operation should be performed. </param>
        <param name="entities"> The entities to add or update. </param>
        <summary>
            Adds or updates entities by a custom identification expression when SaveChanges is called.
            Equivalent to an "upsert" operation from database terminology.
            This method can be useful when seeding data using Migrations.
            </summary>
        <remarks>
            When the <paramref name="set" /> parameter is a custom or fake IDbSet implementation, this method will
            attempt to locate and invoke a public, instance method with the same signature as this extension method.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
