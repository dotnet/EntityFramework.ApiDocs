<Type Name="FromSqlExpression" FullName="Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression">
  <TypeSignature Language="C#" Value="public class FromSqlExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FromSqlExpression extends Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class FromSqlExpression&#xA;Inherits TableExpressionBase" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type FromSqlExpression = class&#xA;    inherit TableExpressionBase" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="C#" Value="public class FromSqlExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, Microsoft.EntityFrameworkCore.Query.SqlExpressions.IClonableTableExpressionBase" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FromSqlExpression extends Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase implements class Microsoft.EntityFrameworkCore.Query.SqlExpressions.IClonableTableExpressionBase" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Class FromSqlExpression&#xA;Inherits TableExpressionBase&#xA;Implements IClonableTableExpressionBase" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="F#" Value="type FromSqlExpression = class&#xA;    inherit TableExpressionBase&#xA;    interface IClonableTableExpressionBase" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="C#" Value="public class FromSqlExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, Microsoft.EntityFrameworkCore.Query.SqlExpressions.IClonableTableExpressionBase, Microsoft.EntityFrameworkCore.Query.SqlExpressions.ITableBasedExpression" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FromSqlExpression extends Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase implements class Microsoft.EntityFrameworkCore.Query.SqlExpressions.IClonableTableExpressionBase, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ITableBasedExpression" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class FromSqlExpression&#xA;Inherits TableExpressionBase&#xA;Implements IClonableTableExpressionBase, ITableBasedExpression" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="F#" Value="type FromSqlExpression = class&#xA;    inherit TableExpressionBase&#xA;    interface ITableBasedExpression&#xA;    interface IClonableTableExpressionBase" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.SqlExpressions.IClonableTableExpressionBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.SqlExpressions.ITableBasedExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    An expression that represents a subquery table source with user-provided custom SQL.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FromSqlExpression (Microsoft.EntityFrameworkCore.Metadata.ITableBase defaultTableBase, string sql, System.Linq.Expressions.Expression arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.ITableBase defaultTableBase, string sql, class System.Linq.Expressions.Expression arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.ITableBase,System.String,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultTableBase As ITableBase, sql As String, arguments As Expression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression : Microsoft.EntityFrameworkCore.Metadata.ITableBase * string * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" Usage="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression (defaultTableBase, sql, arguments)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultTableBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITableBase" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="defaultTableBase">A default table base associated with this table source.</param>
        <param name="sql">A user-provided custom SQL for the table source.</param>
        <param name="arguments">A user-provided parameters to pass to the custom SQL.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FromSqlExpression (string sql, System.Linq.Expressions.Expression arguments, string alias);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string sql, class System.Linq.Expressions.Expression arguments, string alias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.#ctor(System.String,System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sql As String, arguments As Expression, alias As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression : string * System.Linq.Expressions.Expression * string -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" Usage="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression (sql, arguments, alias)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the constructor which takes alias as first argument.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the constructor which takes alias as first argument.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sql" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="alias" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="sql">A user-provided custom SQL for the table source.</param>
        <param name="arguments">A user-provided parameters to pass to the custom SQL.</param>
        <param name="alias">A string alias for the table source.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FromSqlExpression (string alias, string sql, System.Linq.Expressions.Expression arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string alias, string sql, class System.Linq.Expressions.Expression arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.#ctor(System.String,System.String,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (alias As String, sql As String, arguments As Expression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression : string * string * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" Usage="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression (alias, sql, arguments)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alias" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="alias">An alias to use for this table source.</param>
        <param name="sql">A user-provided custom SQL for the table source.</param>
        <param name="arguments">A user-provided parameters to pass to the custom SQL.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Alias">
      <MemberSignature Language="C#" Value="public override string? Alias { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Alias" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Alias" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Alias As String" />
      <MemberSignature Language="F#" Value="member this.Alias : string" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Alias" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The alias assigned to this table source.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Arguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Arguments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Arguments As Expression" />
      <MemberSignature Language="F#" Value="member this.Arguments : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The user-provided parameters passed to the custom SQL.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As TableExpressionBase" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&#xA;override this.Clone : unit -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Usage="fromSqlExpression.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.IClonableTableExpressionBase.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateWithAnnotations">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase CreateWithAnnotations (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase CreateWithAnnotations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.CreateWithAnnotations(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateWithAnnotations (annotations As IEnumerable(Of IAnnotation)) As TableExpressionBase" />
      <MemberSignature Language="F#" Value="override this.CreateWithAnnotations : seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Usage="fromSqlExpression.CreateWithAnnotations annotations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="fromSqlExpression.Equals obj" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="fromSqlExpression.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public override void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Print (expressionPrinter As ExpressionPrinter)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="override this.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="fromSqlExpression.Print expressionPrinter" />
      <MemberSignature Language="C#" Value="protected override void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Print (expressionPrinter As ExpressionPrinter)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Sql">
      <MemberSignature Language="C#" Value="public virtual string Sql { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Sql" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Sql" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Sql As String" />
      <MemberSignature Language="F#" Value="member this.Sql : string" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Sql" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The user-provided custom SQL for the table source.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ITableBase? Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.ITableBase Table" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Table" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Table As ITableBase" />
      <MemberSignature Language="F#" Value="member this.Table : Microsoft.EntityFrameworkCore.Metadata.ITableBase" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Table" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-8.0">P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ITableBasedExpression.Table</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITableBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITableBase" /> associated with given table source if any, <see langword="null" /> otherwise.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression Update (System.Linq.Expressions.Expression arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression Update(class System.Linq.Expressions.Expression arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Update(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (arguments As Expression) As FromSqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression&#xA;override this.Update : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" Usage="fromSqlExpression.Update arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="arguments">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Arguments" /> property of the result.</param>
        <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
        <returns>This expression if no children changed, or an expression with the updated children.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="fromSqlExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
