<Type Name="SelectExpression" FullName="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression">
  <TypeSignature Language="C#" Value="public class SelectExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SelectExpression extends Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class SelectExpression&#xA;Inherits TableExpressionBase" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="F#" Value="type SelectExpression = class&#xA;    inherit TableExpressionBase" />
  <TypeSignature Language="C#" Value="public sealed class SelectExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SelectExpression extends Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SelectExpression&#xA;Inherits TableExpressionBase" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-8.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{PrintShortSql(), nq}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{PrintShortSql(), nq}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>
                    An expression that represents a SELECT in a SQL tree.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
                This class is not publicly constructable. If this is a problem for your application or provider, then please file
                an issue at <see href="https://github.com/dotnet/efcore">github.com/dotnet/efcore</see>.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SelectExpression (Microsoft.EntityFrameworkCore.Query.JsonQueryExpression jsonQueryExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpressionBase, string identifierColumnName, Type identifierColumnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping identifierColumnTypeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.JsonQueryExpression jsonQueryExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpressionBase, string identifierColumnName, class System.Type identifierColumnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping identifierColumnTypeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.#ctor(Microsoft.EntityFrameworkCore.Query.JsonQueryExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonQueryExpression As JsonQueryExpression, tableExpressionBase As TableExpressionBase, identifierColumnName As String, identifierColumnType As Type, identifierColumnTypeMapping As RelationalTypeMapping)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression : Microsoft.EntityFrameworkCore.Query.JsonQueryExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase * string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression (jsonQueryExpression, tableExpressionBase, identifierColumnName, identifierColumnType, identifierColumnTypeMapping)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="jsonQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.JsonQueryExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="tableExpressionBase" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="identifierColumnName" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="identifierColumnType" Type="System.Type" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="identifierColumnTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="4" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="jsonQueryExpression">To be added.</param>
        <param name="tableExpressionBase">To be added.</param>
        <param name="identifierColumnName">To be added.</param>
        <param name="identifierColumnType">To be added.</param>
        <param name="identifierColumnTypeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SelectExpression (Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpression, string columnName, Type columnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? columnTypeMapping, bool? isColumnNullable = default, string? identifierColumnName = default, Type? identifierColumnType = default, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? identifierColumnTypeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpression, string columnName, class System.Type columnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping columnTypeMapping, valuetype System.Nullable`1&lt;bool&gt; isColumnNullable, string identifierColumnName, class System.Type identifierColumnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping identifierColumnTypeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Nullable{System.Boolean},System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tableExpression As TableExpressionBase, columnName As String, columnType As Type, columnTypeMapping As RelationalTypeMapping, Optional isColumnNullable As Nullable(Of Boolean) = Nothing, Optional identifierColumnName As String = Nothing, Optional identifierColumnType As Type = Nothing, Optional identifierColumnTypeMapping As RelationalTypeMapping = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase * string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * Nullable&lt;bool&gt; * string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="new Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression (tableExpression, columnName, columnType, columnTypeMapping, isColumnNullable, identifierColumnName, identifierColumnType, identifierColumnTypeMapping)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="columnName" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="columnType" Type="System.Type" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="columnTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="isColumnNullable" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="identifierColumnName" Type="System.String" Index="5" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="identifierColumnType" Type="System.Type" Index="6" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="identifierColumnTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="7" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="tableExpression">To be added.</param>
        <param name="columnName">To be added.</param>
        <param name="columnType">To be added.</param>
        <param name="columnTypeMapping">To be added.</param>
        <param name="isColumnNullable">To be added.</param>
        <param name="identifierColumnName">To be added.</param>
        <param name="identifierColumnType">To be added.</param>
        <param name="identifierColumnTypeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotation">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase AddAnnotation (string name, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase AddAnnotation(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddAnnotation (name As String, value As Object) As TableExpressionBase" />
      <MemberSignature Language="F#" Value="override this.AddAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Usage="selectExpression.AddAnnotation (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="AddCollectionProjection">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression AddCollectionProjection (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Type elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression AddCollectionProjection(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Type elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCollectionProjection(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddCollectionProjection (shapedQueryExpression As ShapedQueryExpression, navigation As INavigation, elementType As Type) As CollectionShaperExpression" />
      <MemberSignature Language="F#" Value="member this.AddCollectionProjection : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Type -&gt; Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression" Usage="selectExpression.AddCollectionProjection (shapedQueryExpression, navigation, elementType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapedQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="elementType" Type="System.Type" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="shapedQueryExpression">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="elementType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCollectionProjection">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression AddCollectionProjection (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, Type elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression AddCollectionProjection(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, class System.Type elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCollectionProjection(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddCollectionProjection (shapedQueryExpression As ShapedQueryExpression, navigation As INavigationBase, elementType As Type) As CollectionShaperExpression" />
      <MemberSignature Language="F#" Value="member this.AddCollectionProjection : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Type -&gt; Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression" Usage="selectExpression.AddCollectionProjection (shapedQueryExpression, navigation, elementType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapedQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="elementType" Type="System.Type" Index="2" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="shapedQueryExpression"> A shaped query expression for the subquery producing collection result. </param>
        <param name="navigation"> A navigation associated with this collection, if any. </param>
        <param name="elementType"> The type of the element in the collection. </param>
        <summary>
                Adds a collection to the projection of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <returns> A <see cref="T:Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression" /> which represents shaping of this collection. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossApply">
      <MemberSignature Language="C#" Value="public void AddCrossApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCrossApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCrossApply (innerSelectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="member this.AddCrossApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit" Usage="selectExpression.AddCrossApply innerSelectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using CROSS APPLY.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossApply">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression AddCrossApply (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, System.Linq.Expressions.Expression outerShaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression AddCrossApply(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, class System.Linq.Expressions.Expression outerShaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossApply(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddCrossApply (innerSource As ShapedQueryExpression, outerShaper As Expression) As Expression" />
      <MemberSignature Language="F#" Value="member this.AddCrossApply : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.AddCrossApply (innerSource, outerShaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSource" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerShaper" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSource">A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with.</param>
        <param name="outerShaper">An expression for outer shaper.</param>
        <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using CROSS APPLY and combine shapers.
            </summary>
        <returns>An expression which shapes the result of this join.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossApply">
      <MemberSignature Language="C#" Value="public void AddCrossApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Type transparentIdentifierType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCrossApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCrossApply (innerSelectExpression As SelectExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddCrossApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Type -&gt; unit" Usage="selectExpression.AddCrossApply (innerSelectExpression, transparentIdentifierType)" />
      <MemberSignature Language="C#" Value="public void AddCrossApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Type? transparentIdentifierType);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the other overloads.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the other overloads.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <param name="transparentIdentifierType">The type of the result generated after performing the join.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using CROSS APPLY.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossJoin">
      <MemberSignature Language="C#" Value="public void AddCrossJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCrossJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCrossJoin (innerSelectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="member this.AddCrossJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit" Usage="selectExpression.AddCrossJoin innerSelectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using CROSS JOIN.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossJoin">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression AddCrossJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, System.Linq.Expressions.Expression outerShaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression AddCrossJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, class System.Linq.Expressions.Expression outerShaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddCrossJoin (innerSource As ShapedQueryExpression, outerShaper As Expression) As Expression" />
      <MemberSignature Language="F#" Value="member this.AddCrossJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.AddCrossJoin (innerSource, outerShaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSource" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerShaper" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSource">A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with.</param>
        <param name="outerShaper">An expression for outer shaper.</param>
        <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using CROSS JOIN and combine shapers.
            </summary>
        <returns>An expression which shapes the result of this join.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossJoin">
      <MemberSignature Language="C#" Value="public void AddCrossJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Type transparentIdentifierType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCrossJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCrossJoin (innerSelectExpression As SelectExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddCrossJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Type -&gt; unit" Usage="selectExpression.AddCrossJoin (innerSelectExpression, transparentIdentifierType)" />
      <MemberSignature Language="C#" Value="public void AddCrossJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Type? transparentIdentifierType);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the other overloads.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the other overloads.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <param name="transparentIdentifierType">The type of the result generated after performing the join.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using CROSS JOIN.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInnerJoin">
      <MemberSignature Language="C#" Value="public void AddInnerJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInnerJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddInnerJoin (innerSelectExpression As SelectExpression, joinPredicate As SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.AddInnerJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; unit" Usage="selectExpression.AddInnerJoin (innerSelectExpression, joinPredicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="joinPredicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <param name="joinPredicate">A predicate to use for the join.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using INNER JOIN.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInnerJoin">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression AddInnerJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, System.Linq.Expressions.Expression outerShaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression AddInnerJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, class System.Linq.Expressions.Expression outerShaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddInnerJoin (innerSource As ShapedQueryExpression, joinPredicate As SqlExpression, outerShaper As Expression) As Expression" />
      <MemberSignature Language="F#" Value="member this.AddInnerJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.AddInnerJoin (innerSource, joinPredicate, outerShaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSource" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="joinPredicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerShaper" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSource">A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with.</param>
        <param name="joinPredicate">A predicate to use for the join.</param>
        <param name="outerShaper">An expression for outer shaper.</param>
        <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using INNER JOIN and combine shapers.
            </summary>
        <returns>An expression which shapes the result of this join.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInnerJoin">
      <MemberSignature Language="C#" Value="public void AddInnerJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, Type transparentIdentifierType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInnerJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddInnerJoin (innerSelectExpression As SelectExpression, joinPredicate As SqlExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddInnerJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Type -&gt; unit" Usage="selectExpression.AddInnerJoin (innerSelectExpression, joinPredicate, transparentIdentifierType)" />
      <MemberSignature Language="C#" Value="public void AddInnerJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, Type? transparentIdentifierType);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the other overloads.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the other overloads.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="joinPredicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <param name="joinPredicate">A predicate to use for the join.</param>
        <param name="transparentIdentifierType">The type of the result generated after performing the join.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using INNER JOIN.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLeftJoin">
      <MemberSignature Language="C#" Value="public void AddLeftJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLeftJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLeftJoin (innerSelectExpression As SelectExpression, joinPredicate As SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.AddLeftJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; unit" Usage="selectExpression.AddLeftJoin (innerSelectExpression, joinPredicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="joinPredicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <param name="joinPredicate">A predicate to use for the join.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using LEFT JOIN.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLeftJoin">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression AddLeftJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, System.Linq.Expressions.Expression outerShaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression AddLeftJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, class System.Linq.Expressions.Expression outerShaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddLeftJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddLeftJoin (innerSource As ShapedQueryExpression, joinPredicate As SqlExpression, outerShaper As Expression) As Expression" />
      <MemberSignature Language="F#" Value="member this.AddLeftJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.AddLeftJoin (innerSource, joinPredicate, outerShaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSource" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="joinPredicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerShaper" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSource">A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with.</param>
        <param name="joinPredicate">A predicate to use for the join.</param>
        <param name="outerShaper">An expression for outer shaper.</param>
        <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using LEFT JOIN and combine shapers.
            </summary>
        <returns>An expression which shapes the result of this join.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLeftJoin">
      <MemberSignature Language="C#" Value="public void AddLeftJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, Type transparentIdentifierType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLeftJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLeftJoin (innerSelectExpression As SelectExpression, joinPredicate As SqlExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddLeftJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Type -&gt; unit" Usage="selectExpression.AddLeftJoin (innerSelectExpression, joinPredicate, transparentIdentifierType)" />
      <MemberSignature Language="C#" Value="public void AddLeftJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, Type? transparentIdentifierType);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the other overloads.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the other overloads.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="joinPredicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <param name="joinPredicate">A predicate to use for the join.</param>
        <param name="transparentIdentifierType">The type of the result generated after performing the join.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using LEFT JOIN.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOuterApply">
      <MemberSignature Language="C#" Value="public void AddOuterApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOuterApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOuterApply (innerSelectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="member this.AddOuterApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit" Usage="selectExpression.AddOuterApply innerSelectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using OUTER APPLY.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOuterApply">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression AddOuterApply (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, System.Linq.Expressions.Expression outerShaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression AddOuterApply(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression innerSource, class System.Linq.Expressions.Expression outerShaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddOuterApply(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOuterApply (innerSource As ShapedQueryExpression, outerShaper As Expression) As Expression" />
      <MemberSignature Language="F#" Value="member this.AddOuterApply : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.AddOuterApply (innerSource, outerShaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSource" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="outerShaper" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="innerSource">A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with.</param>
        <param name="outerShaper">An expression for outer shaper.</param>
        <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using OUTER APPLY and combine shapers.
            </summary>
        <returns>An expression which shapes the result of this join.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOuterApply">
      <MemberSignature Language="C#" Value="public void AddOuterApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Type transparentIdentifierType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOuterApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOuterApply (innerSelectExpression As SelectExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddOuterApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Type -&gt; unit" Usage="selectExpression.AddOuterApply (innerSelectExpression, transparentIdentifierType)" />
      <MemberSignature Language="C#" Value="public void AddOuterApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Type? transparentIdentifierType);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the other overloads.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the other overloads.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with.</param>
        <param name="transparentIdentifierType">The type of the result generated after performing the join.</param>
        <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using OUTER APPLY.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSingleProjection">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression AddSingleProjection (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression AddSingleProjection(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddSingleProjection(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSingleProjection (shapedQueryExpression As ShapedQueryExpression) As Expression" />
      <MemberSignature Language="F#" Value="member this.AddSingleProjection : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.AddSingleProjection shapedQueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapedQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="shapedQueryExpression"> A shaped query expression for the subquery producing single non-scalar result. </param>
        <summary>
                Adds a non-scalar single result to the projection of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <returns> A shaper expression to shape the result of this projection. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,int&gt; AddToProjection (Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression entityProjection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, int32&gt; AddToProjection(class Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression entityProjection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddToProjection(Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddToProjection (entityProjection As EntityProjectionExpression) As IDictionary(Of IProperty, Integer)" />
      <MemberSignature Language="F#" Value="member this.AddToProjection : Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression -&gt; System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, int&gt;" Usage="selectExpression.AddToProjection entityProjection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityProjection" Type="Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityProjection"> An entity projection to add. </param>
        <summary>
                Adds given <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression" /> to the projection.
            </summary>
        <returns> A dictionary of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> to int indicating properties and their corresponding indexes in the projection list. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public int AddToProjection (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 AddToProjection(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddToProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddToProjection (sqlExpression As SqlExpression) As Integer" />
      <MemberSignature Language="F#" Value="member this.AddToProjection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; int" Usage="selectExpression.AddToProjection sqlExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">An expression to add.</param>
        <summary>
                Adds given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to the projection.
            </summary>
        <returns>An int value indicating the index at which the expression was added in the projection list.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendOrdering">
      <MemberSignature Language="C#" Value="public void AppendOrdering (Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendOrdering(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AppendOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendOrdering (orderingExpression As OrderingExpression)" />
      <MemberSignature Language="F#" Value="member this.AppendOrdering : Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression -&gt; unit" Usage="selectExpression.AppendOrdering orderingExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderingExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression" />
      </Parameters>
      <Docs>
        <param name="orderingExpression">An ordering expression to use for ordering.</param>
        <summary>
                Appends ordering to the existing orderings of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyCollectionJoin">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ApplyCollectionJoin (int collectionIndex, int collectionId, System.Linq.Expressions.Expression innerShaper, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Type elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ApplyCollectionJoin(int32 collectionIndex, int32 collectionId, class System.Linq.Expressions.Expression innerShaper, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Type elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyCollectionJoin(System.Int32,System.Int32,System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyCollectionJoin (collectionIndex As Integer, collectionId As Integer, innerShaper As Expression, navigation As INavigation, elementType As Type) As Expression" />
      <MemberSignature Language="F#" Value="member this.ApplyCollectionJoin : int * int * System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Type -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.ApplyCollectionJoin (collectionIndex, collectionId, innerShaper, navigation, elementType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionIndex" Type="System.Int32" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="collectionId" Type="System.Int32" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="innerShaper" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="elementType" Type="System.Type" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="collectionIndex">To be added.</param>
        <param name="collectionId">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="elementType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyCollectionJoin">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ApplyCollectionJoin (int collectionIndex, int collectionId, System.Linq.Expressions.Expression innerShaper, Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, Type elementType, bool splitQuery = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ApplyCollectionJoin(int32 collectionIndex, int32 collectionId, class System.Linq.Expressions.Expression innerShaper, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, class System.Type elementType, bool splitQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyCollectionJoin(System.Int32,System.Int32,System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyCollectionJoin (collectionIndex As Integer, collectionId As Integer, innerShaper As Expression, navigation As INavigationBase, elementType As Type, Optional splitQuery As Boolean = false) As Expression" />
      <MemberSignature Language="F#" Value="member this.ApplyCollectionJoin : int * int * System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Type * bool -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.ApplyCollectionJoin (collectionIndex, collectionId, innerShaper, navigation, elementType, splitQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionIndex" Type="System.Int32" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="collectionId" Type="System.Int32" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="innerShaper" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="3" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="elementType" Type="System.Type" Index="4" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="splitQuery" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="collectionIndex"> An int value specifing which collection from pending collection to apply. </param>
        <param name="collectionId"> An int value of unique collection id associated with this collection projection. </param>
        <param name="innerShaper"> A shaper expression to use for shaping the elements of this collection. </param>
        <param name="navigation"> A navigation associated with this collection, if any. </param>
        <param name="elementType"> The type of the element in the collection. </param>
        <param name="splitQuery"> A value indicating whether the collection query would be run with a different DbCommand. </param>
        <summary>
                Applies previously added collection projection.
            </summary>
        <returns> An expression which represents shaping of this collection. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDefaultIfEmpty">
      <MemberSignature Language="C#" Value="public void ApplyDefaultIfEmpty (Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyDefaultIfEmpty(class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyDefaultIfEmpty(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyDefaultIfEmpty (sqlExpressionFactory As ISqlExpressionFactory)" />
      <MemberSignature Language="F#" Value="member this.ApplyDefaultIfEmpty : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; unit" Usage="selectExpression.ApplyDefaultIfEmpty sqlExpressionFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">A factory to use for generating required sql expressions.</param>
        <summary>
                Applies <see cref="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})" /> on the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDistinct">
      <MemberSignature Language="C#" Value="public void ApplyDistinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyDistinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyDistinct" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyDistinct ()" />
      <MemberSignature Language="F#" Value="member this.ApplyDistinct : unit -&gt; unit" Usage="selectExpression.ApplyDistinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Applies DISTINCT operator to the projections of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyExcept">
      <MemberSignature Language="C#" Value="public void ApplyExcept (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyExcept(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyExcept(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyExcept (source2 As SelectExpression, distinct As Boolean)" />
      <MemberSignature Language="F#" Value="member this.ApplyExcept : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; unit" Usage="selectExpression.ApplyExcept (source2, distinct)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="distinct" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source2">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to perform the operation.</param>
        <param name="distinct">A bool value indicating if resulting table source should remove duplicates.</param>
        <summary>
                Applies EXCEPT operation to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyGrouping">
      <MemberSignature Language="C#" Value="public void ApplyGrouping (System.Linq.Expressions.Expression keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyGrouping(class System.Linq.Expressions.Expression keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyGrouping(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyGrouping (keySelector As Expression)" />
      <MemberSignature Language="F#" Value="member this.ApplyGrouping : System.Linq.Expressions.Expression -&gt; unit" Usage="selectExpression.ApplyGrouping keySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="keySelector">An key selector expression for the GROUP BY.</param>
        <summary>
                Applies grouping from given key selector.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyGrouping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression ApplyGrouping (System.Linq.Expressions.Expression keySelector, System.Linq.Expressions.Expression shaperExpression, Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression ApplyGrouping(class System.Linq.Expressions.Expression keySelector, class System.Linq.Expressions.Expression shaperExpression, class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyGrouping(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyGrouping (keySelector As Expression, shaperExpression As Expression, sqlExpressionFactory As ISqlExpressionFactory) As GroupByShaperExpression" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.ApplyGrouping : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression" Usage="selectExpression.ApplyGrouping (keySelector, shaperExpression, sqlExpressionFactory)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.RelationalGroupByShaperExpression ApplyGrouping (System.Linq.Expressions.Expression keySelector, System.Linq.Expressions.Expression shaperExpression, Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.RelationalGroupByShaperExpression ApplyGrouping(class System.Linq.Expressions.Expression keySelector, class System.Linq.Expressions.Expression shaperExpression, class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyGrouping (keySelector As Expression, shaperExpression As Expression, sqlExpressionFactory As ISqlExpressionFactory) As RelationalGroupByShaperExpression" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.ApplyGrouping : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; Microsoft.EntityFrameworkCore.Query.RelationalGroupByShaperExpression" Usage="selectExpression.ApplyGrouping (keySelector, shaperExpression, sqlExpressionFactory)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-6.0">Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression</ReturnType>
        <ReturnType FrameworkAlternate="efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Query.RelationalGroupByShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keySelector">An key selector expression for the GROUP BY.</param>
        <param name="shaperExpression">The shaper expression for current query.</param>
        <param name="sqlExpressionFactory">The sql expression factory to use.</param>
        <summary>
                Applies grouping from given key selector and generate <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalGroupByShaperExpression" /> to shape results.
            </summary>
        <returns>A <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalGroupByShaperExpression" /> which represents the result of the grouping operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyIntersect">
      <MemberSignature Language="C#" Value="public void ApplyIntersect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyIntersect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyIntersect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyIntersect (source2 As SelectExpression, distinct As Boolean)" />
      <MemberSignature Language="F#" Value="member this.ApplyIntersect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; unit" Usage="selectExpression.ApplyIntersect (source2, distinct)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="distinct" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source2">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to perform the operation.</param>
        <param name="distinct">A bool value indicating if resulting table source should remove duplicates.</param>
        <summary>
                Applies INTERSECT operation to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyLimit">
      <MemberSignature Language="C#" Value="public void ApplyLimit (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyLimit(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyLimit(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyLimit (sqlExpression As SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.ApplyLimit : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; unit" Usage="selectExpression.ApplyLimit sqlExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">An expression representing limit row count.</param>
        <summary>
                Applies limit to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to limit the number of rows returned in the result set.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOffset">
      <MemberSignature Language="C#" Value="public void ApplyOffset (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyOffset(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyOffset(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyOffset (sqlExpression As SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.ApplyOffset : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; unit" Usage="selectExpression.ApplyOffset sqlExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">An expression representing offset row count.</param>
        <summary>
                Applies offset to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to skip the number of rows in the result set.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOrdering">
      <MemberSignature Language="C#" Value="public void ApplyOrdering (Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyOrdering(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyOrdering (orderingExpression As OrderingExpression)" />
      <MemberSignature Language="F#" Value="member this.ApplyOrdering : Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression -&gt; unit" Usage="selectExpression.ApplyOrdering orderingExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderingExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression" />
      </Parameters>
      <Docs>
        <param name="orderingExpression">An ordering expression to use for ordering.</param>
        <summary>
                Applies ordering to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />. This overwrites any previous ordering specified.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyPredicate">
      <MemberSignature Language="C#" Value="public void ApplyPredicate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression expression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPredicate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression expression) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyPredicate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPredicate (expression As SqlExpression)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.ApplyPredicate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; unit" Usage="selectExpression.ApplyPredicate expression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void ApplyPredicate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPredicate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPredicate (sqlExpression As SqlExpression)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.ApplyPredicate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; unit" Usage="selectExpression.ApplyPredicate sqlExpression" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression"> An expression to use for filtering. </param>
        <param name="sqlExpression">An expression to use for filtering.</param>
        <summary>
                Applies filter predicate to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyProjection">
      <MemberSignature Language="C#" Value="public void ApplyProjection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyProjection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyProjection" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyProjection ()" />
      <MemberSignature Language="F#" Value="member this.ApplyProjection : unit -&gt; unit" Usage="selectExpression.ApplyProjection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Adds expressions from projection mapping to projection ignoring the shaper expression. This method should only be used
                when populating projection in subquery.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyProjection">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ApplyProjection (System.Linq.Expressions.Expression shaperExpression, Microsoft.EntityFrameworkCore.Query.ResultCardinality resultCardinality, Microsoft.EntityFrameworkCore.QuerySplittingBehavior querySplittingBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ApplyProjection(class System.Linq.Expressions.Expression shaperExpression, valuetype Microsoft.EntityFrameworkCore.Query.ResultCardinality resultCardinality, valuetype Microsoft.EntityFrameworkCore.QuerySplittingBehavior querySplittingBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyProjection(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.ResultCardinality,Microsoft.EntityFrameworkCore.QuerySplittingBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyProjection (shaperExpression As Expression, resultCardinality As ResultCardinality, querySplittingBehavior As QuerySplittingBehavior) As Expression" />
      <MemberSignature Language="F#" Value="member this.ApplyProjection : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.ResultCardinality * Microsoft.EntityFrameworkCore.QuerySplittingBehavior -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.ApplyProjection (shaperExpression, resultCardinality, querySplittingBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="resultCardinality" Type="Microsoft.EntityFrameworkCore.Query.ResultCardinality" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="querySplittingBehavior" Type="Microsoft.EntityFrameworkCore.QuerySplittingBehavior" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="shaperExpression">Current shaper expression which will shape results of this select expression.</param>
        <param name="resultCardinality">The result cardinality of this query expression.</param>
        <param name="querySplittingBehavior">The query splitting behavior to use when applying projection for nested collections.</param>
        <summary>
                Adds expressions from projection mapping to projection and generate updated shaper expression for materialization.
            </summary>
        <returns>Returns modified shaper expression to shape results of this select expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTags">
      <MemberSignature Language="C#" Value="public void ApplyTags (System.Collections.Generic.ISet&lt;string&gt; tags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyTags(class System.Collections.Generic.ISet`1&lt;string&gt; tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyTags(System.Collections.Generic.ISet{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyTags (tags As ISet(Of String))" />
      <MemberSignature Language="F#" Value="member this.ApplyTags : System.Collections.Generic.ISet&lt;string&gt; -&gt; unit" Usage="selectExpression.ApplyTags tags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="tags">A list of tags to apply.</param>
        <summary>
                Applies a given set of tags.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyUnion">
      <MemberSignature Language="C#" Value="public void ApplyUnion (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyUnion(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyUnion(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyUnion (source2 As SelectExpression, distinct As Boolean)" />
      <MemberSignature Language="F#" Value="member this.ApplyUnion : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; unit" Usage="selectExpression.ApplyUnion (source2, distinct)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="distinct" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source2">A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to perform the operation.</param>
        <param name="distinct">A bool value indicating if resulting table source should remove duplicates.</param>
        <summary>
                Applies UNION operation to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignUniqueAliases">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression AssignUniqueAliases (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression AssignUniqueAliases(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AssignUniqueAliases(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssignUniqueAliases (expression As SqlExpression) As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.AssignUniqueAliases : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="selectExpression.AssignUniqueAliases expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOrdering">
      <MemberSignature Language="C#" Value="public void ClearOrdering ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOrdering() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ClearOrdering" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOrdering ()" />
      <MemberSignature Language="F#" Value="member this.ClearOrdering : unit -&gt; unit" Usage="selectExpression.ClearOrdering " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Clears existing orderings.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearProjection">
      <MemberSignature Language="C#" Value="public void ClearProjection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearProjection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ClearProjection" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearProjection ()" />
      <MemberSignature Language="F#" Value="member this.ClearProjection : unit -&gt; unit" Usage="selectExpression.ClearProjection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use ReplaceProjection with empty list to clear out projections and associated bindings.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use ReplaceProjection with empty list to clear out projections and associated bindings.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Clears all existing projections.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As SelectExpression" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="selectExpression.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateColumnExpression">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression CreateColumnExpression (Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpression, string columnName, Type type, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? typeMapping, bool? columnNullable = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression CreateColumnExpression(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpression, string columnName, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping, valuetype System.Nullable`1&lt;bool&gt; columnNullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.CreateColumnExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateColumnExpression (tableExpression As TableExpressionBase, columnName As String, type As Type, typeMapping As RelationalTypeMapping, Optional columnNullable As Nullable(Of Boolean) = Nothing) As ColumnExpression" />
      <MemberSignature Language="F#" Value="member this.CreateColumnExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase * string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression" Usage="selectExpression.CreateColumnExpression (tableExpression, columnName, type, typeMapping, columnNullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="columnName" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="columnNullable" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="tableExpression">The table expression referenced by the column.</param>
        <param name="columnName">The column name.</param>
        <param name="type">The column CLR type.</param>
        <param name="typeMapping">The column's type mapping.</param>
        <param name="columnNullable">Whether the column is nullable.</param>
        <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression" /> that references a table on this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithAnnotations">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase CreateWithAnnotations (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase CreateWithAnnotations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.CreateWithAnnotations(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateWithAnnotations (annotations As IEnumerable(Of IAnnotation)) As TableExpressionBase" />
      <MemberSignature Language="F#" Value="override this.CreateWithAnnotations : seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Usage="selectExpression.CreateWithAnnotations annotations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="DebugView">
      <MemberSignature Language="C#" Value="public string DebugView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugView" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.DebugView" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DebugView As String" />
      <MemberSignature Language="F#" Value="member this.DebugView : string" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.DebugView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Expand this property in the debugger for a human-readable representation of this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
                </para>
          <para>
                    Warning: Do not rely on the format of the debug strings.
                    They are designed for debugging only and may change arbitrarily between releases.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="selectExpression.Equals obj" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="FindAnnotation">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation? FindAnnotation (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation FindAnnotation(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.FindAnnotation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindAnnotation (name As String) As IAnnotation" />
      <MemberSignature Language="F#" Value="override this.FindAnnotation : string -&gt; Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Usage="selectExpression.FindAnnotation name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateComplexPropertyShaperExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression GenerateComplexPropertyShaperExpression (Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression containerProjection, Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression GenerateComplexPropertyShaperExpression(class Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression containerProjection, class Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GenerateComplexPropertyShaperExpression(Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression,Microsoft.EntityFrameworkCore.Metadata.IComplexProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenerateComplexPropertyShaperExpression (containerProjection As StructuralTypeProjectionExpression, complexProperty As IComplexProperty) As StructuralTypeShaperExpression" />
      <MemberSignature Language="F#" Value="static member GenerateComplexPropertyShaperExpression : Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression * Microsoft.EntityFrameworkCore.Metadata.IComplexProperty -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GenerateComplexPropertyShaperExpression (containerProjection, complexProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerProjection" Type="Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="containerProjection">To be added.</param>
        <param name="complexProperty">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOwnedReferenceEntityProjectionExpression">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.EntityShaperExpression GenerateOwnedReferenceEntityProjectionExpression (Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression principalEntityProjection, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression GenerateOwnedReferenceEntityProjectionExpression(class Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression principalEntityProjection, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GenerateOwnedReferenceEntityProjectionExpression(Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateOwnedReferenceEntityProjectionExpression (principalEntityProjection As EntityProjectionExpression, navigation As INavigation, sqlExpressionFactory As ISqlExpressionFactory) As EntityShaperExpression" />
      <MemberSignature Language="F#" Value="member this.GenerateOwnedReferenceEntityProjectionExpression : Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; Microsoft.EntityFrameworkCore.Query.EntityShaperExpression" Usage="selectExpression.GenerateOwnedReferenceEntityProjectionExpression (principalEntityProjection, navigation, sqlExpressionFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.EntityShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityProjection" Type="Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="1" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" Index="2" FrameworkAlternate="efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityProjection">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="sqlExpressionFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOwnedReferenceEntityProjectionExpression">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression GenerateOwnedReferenceEntityProjectionExpression (Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression principalEntityProjection, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression GenerateOwnedReferenceEntityProjectionExpression(class Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression principalEntityProjection, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GenerateOwnedReferenceEntityProjectionExpression(Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateOwnedReferenceEntityProjectionExpression (principalEntityProjection As StructuralTypeProjectionExpression, navigation As INavigation, sqlExpressionFactory As ISqlExpressionFactory) As StructuralTypeShaperExpression" />
      <MemberSignature Language="F#" Value="member this.GenerateOwnedReferenceEntityProjectionExpression : Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="selectExpression.GenerateOwnedReferenceEntityProjectionExpression (principalEntityProjection, navigation, sqlExpressionFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityProjection" Type="Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntityProjection">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="sqlExpressionFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateWeakEntityProjectionExpression">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression? GenerateWeakEntityProjectionExpression (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.ITableBase table, string? columnName, Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpressionBase, bool nullable = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression GenerateWeakEntityProjectionExpression(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.ITableBase table, string columnName, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase tableExpressionBase, bool nullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GenerateWeakEntityProjectionExpression(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.ITableBase,System.String,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateWeakEntityProjectionExpression (entityType As IEntityType, table As ITableBase, columnName As String, tableExpressionBase As TableExpressionBase, Optional nullable As Boolean = true) As EntityProjectionExpression" />
      <MemberSignature Language="F#" Value="member this.GenerateWeakEntityProjectionExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.ITableBase * string * Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase * bool -&gt; Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression" Usage="selectExpression.GenerateWeakEntityProjectionExpression (entityType, table, columnName, tableExpressionBase, nullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="table" Type="Microsoft.EntityFrameworkCore.Metadata.ITableBase" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="columnName" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="tableExpressionBase" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Index="3" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="nullable" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="table">To be added.</param>
        <param name="columnName">To be added.</param>
        <param name="tableExpressionBase">To be added.</param>
        <param name="nullable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnnotations">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; GetAnnotations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; GetAnnotations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GetAnnotations" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAnnotations () As IEnumerable(Of IAnnotation)" />
      <MemberSignature Language="F#" Value="override this.GetAnnotations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Usage="selectExpression.GetAnnotations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="selectExpression.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetMappedProjection">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetMappedProjection (Microsoft.EntityFrameworkCore.Query.ProjectionMember projectionMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression GetMappedProjection(class Microsoft.EntityFrameworkCore.Query.ProjectionMember projectionMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GetMappedProjection(Microsoft.EntityFrameworkCore.Query.ProjectionMember)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMappedProjection (projectionMember As ProjectionMember) As Expression" />
      <MemberSignature Language="F#" Value="member this.GetMappedProjection : Microsoft.EntityFrameworkCore.Query.ProjectionMember -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.GetMappedProjection projectionMember" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use GetProjection method using ProjectionBindingExpression to get mapped projection.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GetProjection method using ProjectionBindingExpression to get mapped projection.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionMember" Type="Microsoft.EntityFrameworkCore.Query.ProjectionMember" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="projectionMember">A projection member to search in the mapping.</param>
        <summary>
                Gets the projection mapped to the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ProjectionMember" />.
            </summary>
        <returns>The mapped projection for given projection member.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProjection">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetProjection (Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression projectionBindingExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression GetProjection(class Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression projectionBindingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GetProjection(Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProjection (projectionBindingExpression As ProjectionBindingExpression) As Expression" />
      <MemberSignature Language="F#" Value="member this.GetProjection : Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.GetProjection projectionBindingExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionBindingExpression" Type="Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="projectionBindingExpression">A projection binding to search.</param>
        <summary>
                Gets the projection mapped to the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression" />.
            </summary>
        <returns>The mapped projection for given projection binding.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; GroupBy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; GroupBy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupBy As IReadOnlyList(Of SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.GroupBy : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The SQL GROUP BY clause for the SELECT.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Having">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Having { get; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Having" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Having As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.Having : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? Having { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The HAVING predicate for the SELECT when <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" /> clause exists.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDistinct">
      <MemberSignature Language="C#" Value="public bool IsDistinct { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDistinct" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsDistinct" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDistinct As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDistinct : bool" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsDistinct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                A bool value indicating if DISTINCT is applied to projection of this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonComposedFromSql">
      <MemberSignature Language="C#" Value="public bool IsNonComposedFromSql ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNonComposedFromSql() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsNonComposedFromSql" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonComposedFromSql () As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNonComposedFromSql : unit -&gt; bool" Usage="selectExpression.IsNonComposedFromSql " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Checks whether this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> represents a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" /> which is not composed upon.
            </summary>
        <returns>A bool value indicating a non-composed <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Limit">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Limit { get; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Limit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Limit As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.Limit : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? Limit { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The limit applied to the number of rows in the result set.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Offset { get; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Offset" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.Offset : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? Offset { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The offset to skip rows from the result set.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Orderings">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; Orderings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; Orderings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Orderings As IReadOnlyList(Of OrderingExpression)" />
      <MemberSignature Language="F#" Value="member this.Orderings : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The list of orderings used to sort the result set.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Predicate">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Predicate { get; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Predicate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Predicate As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.Predicate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? Predicate { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The WHERE predicate for the SELECT.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForAggregate">
      <MemberSignature Language="C#" Value="public void PrepareForAggregate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrepareForAggregate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.PrepareForAggregate" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrepareForAggregate ()" />
      <MemberSignature Language="F#" Value="member this.PrepareForAggregate : unit -&gt; unit" Usage="selectExpression.PrepareForAggregate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Prepares the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to apply aggregate operation over it.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForAggregate">
      <MemberSignature Language="C#" Value="public void PrepareForAggregate (bool liftOrderings = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrepareForAggregate(bool liftOrderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.PrepareForAggregate(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrepareForAggregate (Optional liftOrderings As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.PrepareForAggregate : bool -&gt; unit" Usage="selectExpression.PrepareForAggregate liftOrderings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="liftOrderings" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="liftOrderings">To be added.</param>
        <summary>
                Prepares the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to apply aggregate operation over it.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public override void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Print (expressionPrinter As ExpressionPrinter)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="override this.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="selectExpression.Print expressionPrinter" />
      <MemberSignature Language="C#" Value="protected override void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Print (expressionPrinter As ExpressionPrinter)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Projection">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; Projection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; Projection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Projection As IReadOnlyList(Of ProjectionExpression)" />
      <MemberSignature Language="F#" Value="member this.Projection : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The list of expressions being projected out from the result set.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prune">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Prune ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Prune() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Prune" />
      <MemberSignature Language="VB.NET" Value="Public Function Prune () As SelectExpression" />
      <MemberSignature Language="F#" Value="member this.Prune : unit -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="selectExpression.Prune " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushdownIntoSubquery">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt; PushdownIntoSubquery ();" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt; PushdownIntoSubquery() cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.PushdownIntoSubquery" />
      <MemberSignature Language="VB.NET" Value="Public Function PushdownIntoSubquery () As IDictionary(Of SqlExpression, ColumnExpression)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.PushdownIntoSubquery : unit -&gt; System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt;" Usage="selectExpression.PushdownIntoSubquery " FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void PushdownIntoSubquery ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushdownIntoSubquery() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushdownIntoSubquery ()" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.PushdownIntoSubquery : unit -&gt; unit" Usage="selectExpression.PushdownIntoSubquery " FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Pushes down the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> into a subquery.
            </summary>
        <returns> A mapping of projections before pushdown to <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression" />s after pushdown. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProjection">
      <MemberSignature Language="C#" Value="public void ReplaceProjection (System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt; projectionMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceProjection(class System.Collections.Generic.IReadOnlyDictionary`2&lt;class Microsoft.EntityFrameworkCore.Query.ProjectionMember, class System.Linq.Expressions.Expression&gt; projectionMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ReplaceProjection(System.Collections.Generic.IReadOnlyDictionary{Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceProjection (projectionMapping As IReadOnlyDictionary(Of ProjectionMember, Expression))" />
      <MemberSignature Language="F#" Value="member this.ReplaceProjection : System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember, System.Linq.Expressions.Expression&gt; -&gt; unit" Usage="selectExpression.ReplaceProjection projectionMapping" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionMapping" Type="System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="projectionMapping">A new projection mapping.</param>
        <summary>
                Replaces current projection mapping with a new one to change what is being projected out from this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProjection">
      <MemberSignature Language="C#" Value="public void ReplaceProjection (System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; clientProjections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceProjection(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; clientProjections) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ReplaceProjection(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceProjection (clientProjections As IReadOnlyList(Of Expression))" />
      <MemberSignature Language="F#" Value="member this.ReplaceProjection : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; -&gt; unit" Usage="selectExpression.ReplaceProjection clientProjections" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientProjections" Type="System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="clientProjections">A new projection mapping.</param>
        <summary>
                Replaces current projection mapping with a new one to change what is being projected out from this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProjectionMapping">
      <MemberSignature Language="C#" Value="public void ReplaceProjectionMapping (System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt; projectionMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceProjectionMapping(class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Query.ProjectionMember, class System.Linq.Expressions.Expression&gt; projectionMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ReplaceProjectionMapping(System.Collections.Generic.IDictionary{Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceProjectionMapping (projectionMapping As IDictionary(Of ProjectionMember, Expression))" />
      <MemberSignature Language="F#" Value="member this.ReplaceProjectionMapping : System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember, System.Linq.Expressions.Expression&gt; -&gt; unit" Usage="selectExpression.ReplaceProjectionMapping projectionMapping" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use ReplaceProjection method instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use ReplaceProjection method instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionMapping" Type="System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="projectionMapping">A new projection mapping.</param>
        <summary>
                Replaces current projection mapping with a new one to change what is being projected out from this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseOrderings">
      <MemberSignature Language="C#" Value="public void ReverseOrderings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReverseOrderings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ReverseOrderings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReverseOrderings ()" />
      <MemberSignature Language="F#" Value="member this.ReverseOrderings : unit -&gt; unit" Usage="selectExpression.ReverseOrderings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Reverses the existing orderings on the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; Tables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As IReadOnlyList(Of TableExpressionBase)" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The list of tables sources used to generate the result set.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tags">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ISet&lt;string&gt; Tags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ISet`1&lt;string&gt; Tags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tags As ISet(Of String)" />
      <MemberSignature Language="F#" Value="member this.Tags : System.Collections.Generic.ISet&lt;string&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ISet&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The list of tags applied to this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? predicate, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? having, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? limit, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression having, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Update(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (projections As IReadOnlyList(Of ProjectionExpression), tables As IReadOnlyList(Of TableExpressionBase), predicate As SqlExpression, groupBy As IReadOnlyList(Of SqlExpression), having As SqlExpression, orderings As IReadOnlyList(Of OrderingExpression), limit As SqlExpression, offset As SqlExpression) As SelectExpression" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="selectExpression.Update (projections, tables, predicate, groupBy, having, orderings, limit, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projections" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="tables" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="predicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="groupBy" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="having" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="4" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="orderings" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt;" Index="5" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="limit" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="6" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="offset" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="7" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="projections">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" /> property of the result.</param>
        <param name="tables">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" /> property of the result.</param>
        <param name="predicate">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" /> property of the result.</param>
        <param name="groupBy">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" /> property of the result.</param>
        <param name="having">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" /> property of the result.</param>
        <param name="orderings">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" /> property of the result.</param>
        <param name="limit">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" /> property of the result.</param>
        <param name="offset">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" /> property of the result.</param>
        <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
        <returns>This expression if no children changed, or an expression with the updated children.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update (System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression having, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update(class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression having, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Update(System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (projections As List(Of ProjectionExpression), tables As List(Of TableExpressionBase), predicate As SqlExpression, groupBy As List(Of SqlExpression), having As SqlExpression, orderings As List(Of OrderingExpression), limit As SqlExpression, offset As SqlExpression) As SelectExpression" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="selectExpression.Update (projections, tables, predicate, groupBy, having, orderings, limit, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projections" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt;" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="tables" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt;" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="predicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="2" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="groupBy" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="3" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="having" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="4" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="orderings" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt;" Index="5" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="limit" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="6" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="offset" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="7" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="projections"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" /> property of the result. </param>
        <param name="tables"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" /> property of the result. </param>
        <param name="predicate"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" /> property of the result. </param>
        <param name="groupBy"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" /> property of the result. </param>
        <param name="having"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" /> property of the result. </param>
        <param name="orderings"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" /> property of the result. </param>
        <param name="limit"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" /> property of the result. </param>
        <param name="offset"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" /> property of the result. </param>
        <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
        <returns> This expression if no children changed, or an expression with the updated children. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? predicate, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? having, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? limit, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? offset, bool distinct, string? alias);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression having, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset, bool distinct, string alias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Update(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (projections As IReadOnlyList(Of ProjectionExpression), tables As IReadOnlyList(Of TableExpressionBase), predicate As SqlExpression, groupBy As IReadOnlyList(Of SqlExpression), having As SqlExpression, orderings As IReadOnlyList(Of OrderingExpression), limit As SqlExpression, offset As SqlExpression, distinct As Boolean, alias As String) As SelectExpression" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * bool * string -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="selectExpression.Update (projections, tables, predicate, groupBy, having, orderings, limit, offset, distinct, alias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload which does not require distinct &amp; alias parameter.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload which does not require distinct &amp; alias parameter.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projections" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt;" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="tables" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt;" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="predicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="2" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="groupBy" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="3" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="having" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="4" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="orderings" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt;" Index="5" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="limit" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="6" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="offset" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="7" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="distinct" Type="System.Boolean" Index="8" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="alias" Type="System.String" Index="9" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="projections">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" /> property of the result.</param>
        <param name="tables">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" /> property of the result.</param>
        <param name="predicate">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" /> property of the result.</param>
        <param name="groupBy">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" /> property of the result.</param>
        <param name="having">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" /> property of the result.</param>
        <param name="orderings">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" /> property of the result.</param>
        <param name="limit">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" /> property of the result.</param>
        <param name="offset">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" /> property of the result.</param>
        <param name="distinct">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsDistinct" /> property of the result.</param>
        <param name="alias">The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.Alias" /> property of the result.</param>
        <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
        <returns>This expression if no children changed, or an expression with the updated children.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update (System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression havingExpression, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset, bool distinct, string alias);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update(class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression havingExpression, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset, bool distinct, string alias) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Update(System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (projections As List(Of ProjectionExpression), tables As List(Of TableExpressionBase), predicate As SqlExpression, groupBy As List(Of SqlExpression), havingExpression As SqlExpression, orderings As List(Of OrderingExpression), limit As SqlExpression, offset As SqlExpression, distinct As Boolean, alias As String) As SelectExpression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * bool * string -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="selectExpression.Update (projections, tables, predicate, groupBy, havingExpression, orderings, limit, offset, distinct, alias)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update (System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression having, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset, bool distinct, string alias);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update(class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression having, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset, bool distinct, string alias) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (projections As List(Of ProjectionExpression), tables As List(Of TableExpressionBase), predicate As SqlExpression, groupBy As List(Of SqlExpression), having As SqlExpression, orderings As List(Of OrderingExpression), limit As SqlExpression, offset As SqlExpression, distinct As Boolean, alias As String) As SelectExpression" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * bool * string -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="selectExpression.Update (projections, tables, predicate, groupBy, having, orderings, limit, offset, distinct, alias)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload which does not require distinct &amp; alias parameter.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload which does not require distinct &amp; alias parameter.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projections" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="tables" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="predicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="groupBy" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="havingExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="having" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="4" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="orderings" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt;" Index="5" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="limit" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="6" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="offset" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="7" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="distinct" Type="System.Boolean" Index="8" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="alias" Type="System.String" Index="9" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="havingExpression">To be added.</param>
        <param name="projections"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" /> property of the result. </param>
        <param name="tables"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" /> property of the result. </param>
        <param name="predicate"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" /> property of the result. </param>
        <param name="groupBy"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" /> property of the result. </param>
        <param name="having"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" /> property of the result. </param>
        <param name="orderings"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" /> property of the result. </param>
        <param name="limit"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" /> property of the result. </param>
        <param name="offset"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" /> property of the result. </param>
        <param name="distinct"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsDistinct" /> property of the result. </param>
        <param name="alias"> The <see cref="P:Alias" /> property of the result. </param>
        <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
        <returns> This expression if no children changed, or an expression with the updated children. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
