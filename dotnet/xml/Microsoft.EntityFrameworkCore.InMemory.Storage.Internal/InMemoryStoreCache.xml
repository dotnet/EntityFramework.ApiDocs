<Type Name="InMemoryStoreCache" FullName="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache">
  <TypeSignature Language="C#" Value="public class InMemoryStoreCache : Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InMemoryStoreCache extends System.Object implements class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache" />
  <TypeSignature Language="VB.NET" Value="Public Class InMemoryStoreCache&#xA;Implements IInMemoryStoreCache" />
  <TypeSignature Language="F#" Value="type InMemoryStoreCache = class&#xA;    interface IInMemoryStoreCache" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemoryStoreCache (Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory tableFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory tableFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache.#ctor(Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tableFactory As IInMemoryTableFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache : Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory -&gt; Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache" Usage="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache tableFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use the constructor that also accepts options.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the constructor that also accepts options.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="tableFactory" Type="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="tableFactory">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemoryStoreCache (Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory tableFactory, Microsoft.EntityFrameworkCore.InMemory.Infrastructure.Internal.IInMemorySingletonOptions options);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory tableFactory, class Microsoft.EntityFrameworkCore.InMemory.Infrastructure.Internal.IInMemorySingletonOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache.#ctor(Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory,Microsoft.EntityFrameworkCore.InMemory.Infrastructure.Internal.IInMemorySingletonOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tableFactory As IInMemoryTableFactory, options As IInMemorySingletonOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache : Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory * Microsoft.EntityFrameworkCore.InMemory.Infrastructure.Internal.IInMemorySingletonOptions -&gt; Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache" Usage="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache (tableFactory, options)" />
      <MemberSignature Language="C#" Value="public InMemoryStoreCache (Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory tableFactory, Microsoft.EntityFrameworkCore.InMemory.Infrastructure.Internal.IInMemorySingletonOptions? options);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tableFactory" Type="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryTableFactory" />
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.InMemory.Infrastructure.Internal.IInMemorySingletonOptions" />
      </Parameters>
      <Docs>
        <param name="tableFactory">To be added.</param>
        <param name="options">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore GetStore (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore GetStore(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryStoreCache.GetStore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStore (name As String) As IInMemoryStore" />
      <MemberSignature Language="F#" Value="abstract member GetStore : string -&gt; Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore&#xA;override this.GetStore : string -&gt; Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore" Usage="inMemoryStoreCache.GetStore name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStoreCache.GetStore(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
