<Type Name="InMemoryTypeMapping" FullName="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping">
  <TypeSignature Language="C#" Value="public class InMemoryTypeMapping : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InMemoryTypeMapping extends Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping" />
  <TypeSignature Language="VB.NET" Value="Public Class InMemoryTypeMapping&#xA;Inherits CoreTypeMapping" />
  <TypeSignature Language="F#" Value="type InMemoryTypeMapping = class&#xA;    inherit CoreTypeMapping" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemoryTypeMapping (Type clrType, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer = default, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer keyComparer = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type clrType, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer keyComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping.#ctor(System.Type,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (clrType As Type, Optional comparer As ValueComparer = Nothing, Optional keyComparer As ValueComparer = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping : Type * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping" Usage="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping (clrType, comparer, keyComparer)" />
      <MemberSignature Language="C#" Value="public InMemoryTypeMapping (Type clrType, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? comparer = default, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? keyComparer = default);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="keyComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="clrType">To be added.</param>
        <param name="comparer">To be added.</param>
        <param name="keyComparer">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemoryTypeMapping (Type clrType, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer = default, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer keyComparer = default, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer structuralComparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type clrType, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer keyComparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer structuralComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping.#ctor(System.Type,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (clrType As Type, Optional comparer As ValueComparer = Nothing, Optional keyComparer As ValueComparer = Nothing, Optional structuralComparer As ValueComparer = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping : Type * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping" Usage="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping (clrType, comparer, keyComparer, structuralComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="1" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="keyComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="2" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="structuralComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="3" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="clrType">To be added.</param>
        <param name="comparer">To be added.</param>
        <param name="keyComparer">To be added.</param>
        <param name="structuralComparer">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemoryTypeMapping (Type clrType, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? comparer = default, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? keyComparer = default, Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter? jsonValueReaderWriter = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type clrType, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer keyComparer, class Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter jsonValueReaderWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping.#ctor(System.Type,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (clrType As Type, Optional comparer As ValueComparer = Nothing, Optional keyComparer As ValueComparer = Nothing, Optional jsonValueReaderWriter As JsonValueReaderWriter = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping : Type * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter -&gt; Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping" Usage="new Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping (clrType, comparer, keyComparer, jsonValueReaderWriter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="keyComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="jsonValueReaderWriter" Type="Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" Index="3" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="clrType">To be added.</param>
        <param name="comparer">To be added.</param>
        <param name="keyComparer">To be added.</param>
        <param name="jsonValueReaderWriter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping Clone (Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping Clone(valuetype Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping/CoreTypeMappingParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Clone (parameters As CoreTypeMapping.CoreTypeMappingParameters) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="override this.Clone : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="inMemoryTypeMapping.Clone parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping+CoreTypeMappingParameters" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping Clone (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter);" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping Clone(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Clone (converter As ValueConverter) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="override this.Clone : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="inMemoryTypeMapping.Clone converter" />
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping Clone (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? converter);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="converter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping Default" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As InMemoryTypeMapping" />
      <MemberSignature Language="F#" Value="static member Default : Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping" Usage="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithComposedConverter">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping WithComposedConverter (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? converter, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? comparer = default, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? keyComparer = default, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? elementMapping = default, Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter? jsonValueReaderWriter = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping WithComposedConverter(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer keyComparer, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping elementMapping, class Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter jsonValueReaderWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.InMemoryTypeMapping.WithComposedConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WithComposedConverter (converter As ValueConverter, Optional comparer As ValueComparer = Nothing, Optional keyComparer As ValueComparer = Nothing, Optional elementMapping As CoreTypeMapping = Nothing, Optional jsonValueReaderWriter As JsonValueReaderWriter = Nothing) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="override this.WithComposedConverter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="inMemoryTypeMapping.WithComposedConverter (converter, comparer, keyComparer, elementMapping, jsonValueReaderWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="keyComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="elementMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="jsonValueReaderWriter" Type="Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" Index="4" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="converter">To be added.</param>
        <param name="comparer">To be added.</param>
        <param name="keyComparer">To be added.</param>
        <param name="elementMapping">To be added.</param>
        <param name="jsonValueReaderWriter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
