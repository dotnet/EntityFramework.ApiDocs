<Type Name="CoreTypeMapperDependencies" FullName="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies">
  <TypeSignature Language="C#" Value="public sealed class CoreTypeMapperDependencies" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CoreTypeMapperDependencies extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CoreTypeMapperDependencies" />
  <TypeSignature Language="F#" Value="type CoreTypeMapperDependencies = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
      <AttributeName Language="C#">[System.Obsolete("Use TypeMappingSource")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Use TypeMappingSource")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper" /></para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
      <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CoreTypeMapperDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper" />.
                </para>
          <para>
                    Do not call this constructor directly from either provider or application code as it may change 
                    as new dependencies are added. Instead, use this type in your constructor so that an instance 
                    will be created and injected automatically by the dependency injection container. To create 
                    an instance with some dependent services replaced, first resolve the object from the dependency 
                    injection container, then replace selected services using the 'With...' methods. Do not call 
                    the constructor at any point in this process.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CoreTypeMapperDependencies (Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector valueConverterSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector valueConverterSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueConverterSelector As IValueConverterSelector)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies : Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies" Usage="new Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies valueConverterSelector" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueConverterSelector" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="valueConverterSelector"> The registry of known <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />s. </param>
        <summary>
          <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapper" />.
                </para>
          <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueConverterSelector">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector ValueConverterSelector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector ValueConverterSelector" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies.ValueConverterSelector" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueConverterSelector As IValueConverterSelector" />
      <MemberSignature Language="F#" Value="member this.ValueConverterSelector : Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector" Usage="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies.ValueConverterSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The registry of known <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />s.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="With">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies With (Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector valueConverterSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies With(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector valueConverterSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies.With(Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector)" />
      <MemberSignature Language="VB.NET" Value="Public Function With (valueConverterSelector As IValueConverterSelector) As CoreTypeMapperDependencies" />
      <MemberSignature Language="F#" Value="member this.With : Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies" Usage="coreTypeMapperDependencies.With valueConverterSelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapperDependencies</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueConverterSelector" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="valueConverterSelector"> A replacement for the current dependency of this type. </param>
        <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
        <returns> A new parameter object with the given service replaced. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
