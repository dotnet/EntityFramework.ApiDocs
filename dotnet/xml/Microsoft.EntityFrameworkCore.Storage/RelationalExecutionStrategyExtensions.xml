<Type Name="RelationalExecutionStrategyExtensions" FullName="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions">
  <TypeSignature Language="C#" Value="public static class RelationalExecutionStrategyExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RelationalExecutionStrategyExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RelationalExecutionStrategyExtensions" />
  <TypeSignature Language="F#" Value="type RelationalExecutionStrategyExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> that can only be used with a
                relational database provider.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteInTransaction">
      <MemberSignature Language="C#" Value="public static void ExecuteInTransaction (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Action operation, Func&lt;bool&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecuteInTransaction(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Action operation, class System.Func`1&lt;bool&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action,System.Func{System.Boolean},System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ExecuteInTransaction (strategy As IExecutionStrategy, operation As Action, verifySucceeded As Func(Of Boolean), isolationLevel As IsolationLevel)" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Action * Func&lt;bool&gt; * System.Data.IsolationLevel -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded, isolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Action" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="isolationLevel">The isolation level to use for the transaction.</param>
        <param name="operation">
                A delegate representing an executable operation.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TResult&gt; operation, Func&lt;bool&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;!!TResult&gt; operation, class System.Func`1&lt;bool&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0},System.Func{System.Boolean},System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransaction(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of TResult), verifySucceeded As Func(Of Boolean), isolationLevel As IsolationLevel) As TResult" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'Result&gt; * Func&lt;bool&gt; * System.Data.IsolationLevel -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded, isolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="isolationLevel">The isolation level to use for the transaction.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>The result from the operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static void ExecuteInTransaction&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Action&lt;TState&gt; operation, Func&lt;TState,bool&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecuteInTransaction&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Action`1&lt;!!TState&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0},System.Func{``0,System.Boolean},System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ExecuteInTransaction(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Action(Of TState), verifySucceeded As Func(Of TState, Boolean), isolationLevel As IsolationLevel)" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Action&lt;'State&gt; * Func&lt;'State, bool&gt; * System.Data.IsolationLevel -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction (strategy, state, operation, verifySucceeded, isolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="operation" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" />
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A delegate representing an executable operation.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="isolationLevel">The isolation level to use for the transaction.</param>
        <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,TResult&gt; operation, Func&lt;TState,bool&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean},System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransaction(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, Boolean), isolationLevel As IsolationLevel) As TResult" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, 'Result&gt; * Func&lt;'State, bool&gt; * System.Data.IsolationLevel -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction (strategy, state, operation, verifySucceeded, isolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" />
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="isolationLevel">The isolation level to use for the transaction.</param>
        <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>The result from the operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.Tasks.Task&gt; operation, Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; operation, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync (strategy As IExecutionStrategy, operation As Func(Of Task), verifySucceeded As Func(Of Task(Of Boolean)), isolationLevel As IsolationLevel) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.Tasks.Task&gt; * Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, isolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="isolationLevel">The isolation level to use for the transaction.</param>
        <param name="operation">
                A function that returns a started task.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync (strategy As IExecutionStrategy, operation As Func(Of CancellationToken, Task), verifySucceeded As Func(Of CancellationToken, Task(Of Boolean)), isolationLevel As IsolationLevel, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, isolationLevel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="isolationLevel">The isolation level to use for the transaction.</param>
        <param name="operation">
                A function that returns a started task.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of CancellationToken, Task(Of TResult)), verifySucceeded As Func(Of CancellationToken, Task(Of Boolean)), isolationLevel As IsolationLevel, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, isolationLevel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="isolationLevel">The isolation level to use for the transaction.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, CancellationToken, Task), verifySucceeded As Func(Of TState, CancellationToken, Task(Of Boolean)), isolationLevel As IsolationLevel, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, state, operation, verifySucceeded, isolationLevel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A function that returns a started task.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="isolationLevel">The isolation level to use for the transaction.</param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Data.IsolationLevel isolationLevel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, CancellationToken, Task(Of TResult)), verifySucceeded As Func(Of TState, CancellationToken, Task(Of Boolean)), isolationLevel As IsolationLevel, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Data.IsolationLevel * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, state, operation, verifySucceeded, isolationLevel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="isolationLevel">The isolation level to use for the transaction.</param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
