<Type Name="TypeMappingSourceBase" FullName="Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase">
  <TypeSignature Language="C#" Value="public abstract class TypeMappingSourceBase : Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeMappingSourceBase extends System.Object implements class Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeMappingSourceBase&#xA;Implements ITypeMappingSource" />
  <TypeSignature Language="F#" Value="type TypeMappingSourceBase = class&#xA;    interface ITypeMappingSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    The base class for non-relational type mapping source. Non-relational providers
                    should derive from this class and override <see cref="O:TypeMappingSourceBase.FindMapping" /></para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeMappingSourceBase (Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As TypeMappingSourceDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase : Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies -&gt; Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase" Usage="new Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">Parameter object containing dependencies for this service.</param>
        <summary>
                Initializes a new instance of this class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As TypeMappingSourceDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies" Usage="Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? FindMapping (Microsoft.EntityFrameworkCore.Metadata.IElementType elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class Microsoft.EntityFrameworkCore.Metadata.IElementType elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IElementType)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FindMapping (elementType As IElementType) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Microsoft.EntityFrameworkCore.Metadata.IElementType -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping elementType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IElementType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.EntityFrameworkCore.Metadata.IElementType" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="elementType">The collection element.</param>
        <summary>
                Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IElementType" />.
            </summary>
        <returns>The type mapping, or <see langword="null" /> if none was found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FindMapping (property As IProperty) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping property" />
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? FindMapping (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property">The property.</param>
        <summary>
                Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
            </summary>
        <returns>The type mapping, or <see langword="null" /> if none was found.</returns>
        <remarks>
                Note: providers should typically not need to override this method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (in Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo mappingInfo);" FrameworkAlternate="efcore-2.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping([in]valuetype Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo mappingInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function FindMapping (mappingInfo As TypeMappingInfo) As CoreTypeMapping" FrameworkAlternate="efcore-2.1" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : TypeMappingInfo -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping mappingInfo" FrameworkAlternate="efcore-2.1" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (in Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo mappingInfo);" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function FindMapping (mappingInfo As TypeMappingInfo) As CoreTypeMapping" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : TypeMappingInfo -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping&#xA;override this.FindMapping : TypeMappingInfo -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping mappingInfo" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? FindMapping (in Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo? mappingInfo);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappingInfo" Type="Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-3.0;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mappingInfo">The mapping info to use to create the mapping.</param>
        <summary>
                Overridden by database providers to find a type mapping for the given info.
            </summary>
        <returns>The type mapping, or <see langword="null" /> if none could be found.</returns>
        <remarks>
                The mapping info is populated with as much information about the required type mapping as
                is available. Use all the information necessary to create the best mapping. Return <see langword="null" />
                if no mapping is available.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (System.Reflection.MemberInfo member);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FindMapping (member As MemberInfo) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping member" />
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? FindMapping (System.Reflection.MemberInfo member);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Reflection.MemberInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="member">The field or property.</param>
        <summary>
                Finds the type mapping for a given <see cref="T:System.Reflection.MemberInfo" /> representing
                a field or a property of a CLR type.
            </summary>
        <returns>The type mapping, or <see langword="null" /> if none was found.</returns>
        <remarks>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /></para>
          <para>
                    Note: providers should typically not need to override this method.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping (Type type);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FindMapping (type As Type) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Type -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping type" />
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? FindMapping (Type type);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The CLR type.</param>
        <summary>
                Finds the type mapping for a given <see cref="T:System.Type" />.
            </summary>
        <returns>The type mapping, or <see langword="null" /> if none was found.</returns>
        <remarks>
                Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                or <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> available, otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                or <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Type,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? FindMapping (Type type, Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Type type, class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Type,Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FindMapping (type As Type, model As IModel) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Type * Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping (type, model)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Type,Microsoft.EntityFrameworkCore.Metadata.IModel)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="type">The CLR type.</param>
        <param name="model">The model.</param>
        <summary>
                Finds the type mapping for a given <see cref="T:System.Type" />, taking pre-convention configuration into the account.
            </summary>
        <returns>The type mapping, or <see langword="null" /> if none was found.</returns>
        <remarks>
                Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />,
                otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? FindMapping (Type type, Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? elementMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindMapping(class System.Type type, class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping elementMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(System.Type,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FindMapping (type As Type, model As IModel, Optional elementMapping As CoreTypeMapping = Nothing) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Type * Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="typeMappingSourceBase.FindMapping (type, model, elementMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource.FindMapping(System.Type,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="elementMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">The CLR type.</param>
        <param name="model">The model.</param>
        <param name="elementMapping">The element mapping to use, if known.</param>
        <summary>
                Finds the type mapping for a given <see cref="T:System.Type" />, taking pre-convention configuration into the account.
            </summary>
        <returns>The type mapping, or <see langword="null" /> if none was found.</returns>
        <remarks>
                Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />,
                otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFindJsonCollectionMapping">
      <MemberSignature Language="C#" Value="protected virtual bool TryFindJsonCollectionMapping (Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo mappingInfo, Type modelClrType, Type? providerClrType, ref Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? elementMapping, out Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? elementComparer, out Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter? collectionReaderWriter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryFindJsonCollectionMapping(valuetype Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo mappingInfo, class System.Type modelClrType, class System.Type providerClrType, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping&amp; elementMapping, [out] class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&amp; elementComparer, [out] class Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter&amp; collectionReaderWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.TryFindJsonCollectionMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo,System.Type,System.Type,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping@,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer@,Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryFindJsonCollectionMapping (mappingInfo As TypeMappingInfo, modelClrType As Type, providerClrType As Type, ByRef elementMapping As CoreTypeMapping, ByRef elementComparer As ValueComparer, ByRef collectionReaderWriter As JsonValueReaderWriter) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryFindJsonCollectionMapping : Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo * Type * Type * CoreTypeMapping * ValueComparer * JsonValueReaderWriter -&gt; bool&#xA;override this.TryFindJsonCollectionMapping : Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo * Type * Type * CoreTypeMapping * ValueComparer * JsonValueReaderWriter -&gt; bool" Usage="typeMappingSourceBase.TryFindJsonCollectionMapping (mappingInfo, modelClrType, providerClrType, elementMapping, elementComparer, collectionReaderWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mappingInfo" Type="Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="modelClrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="providerClrType" Type="System.Type" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="elementMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" RefType="ref" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="elementComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" RefType="out" Index="4" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="collectionReaderWriter" Type="Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" RefType="out" Index="5" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="mappingInfo">The mapping info being used.</param>
        <param name="modelClrType">The model CLR type.</param>
        <param name="providerClrType">The provider CLR type.</param>
        <param name="elementMapping">The type mapping for elements of the collection.</param>
        <param name="elementComparer">The element comparer.</param>
        <param name="collectionReaderWriter">The reader/writer for the collection.</param>
        <summary>
                Attempts to find a JSON-based type mapping for a collection of primitive types.
            </summary>
        <returns>
          <see langword="true" /> if a collection mapping was found; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateMapping">
      <MemberSignature Language="C#" Value="protected virtual void ValidateMapping (Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping mapping, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateMapping(class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping mapping, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase.ValidateMapping(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateMapping (mapping As CoreTypeMapping, property As IProperty)" />
      <MemberSignature Language="F#" Value="abstract member ValidateMapping : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit&#xA;override this.ValidateMapping : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="typeMappingSourceBase.ValidateMapping (mapping, property)" />
      <MemberSignature Language="C#" Value="protected virtual void ValidateMapping (Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? mapping, Microsoft.EntityFrameworkCore.Metadata.IProperty? property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="mapping">The mapping, if any.</param>
        <param name="property">The property, if any.</param>
        <summary>
                Called after a mapping has been found so that it can be validated for the given property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
