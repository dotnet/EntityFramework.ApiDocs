<Type Name="CoreTypeMapping" FullName="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping">
  <TypeSignature Language="C#" Value="public abstract class CoreTypeMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CoreTypeMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CoreTypeMapping" />
  <TypeSignature Language="F#" Value="type CoreTypeMapping = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    Represents the mapping between a .NET type and a database type.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                for more information.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CoreTypeMapping (Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping/CoreTypeMappingParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parameters As CoreTypeMapping.CoreTypeMappingParameters)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="new Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping parameters" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping+CoreTypeMappingParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">The parameters for this mapping.</param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping Clone (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping Clone(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Clone (converter As ValueConverter) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member Clone : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="coreTypeMapping.Clone converter" />
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping Clone (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? converter);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
      </Parameters>
      <Docs>
        <param name="converter">The converter to use.</param>
        <summary>
                Returns a new copy of this type mapping with the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
                added.
            </summary>
        <returns>A new type mapping</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClrType">
      <MemberSignature Language="C#" Value="public virtual Type ClrType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ClrType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.ClrType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ClrType As Type" />
      <MemberSignature Language="F#" Value="member this.ClrType : Type" Usage="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.ClrType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the .NET type used in the EF model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer Comparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Comparer As ValueComparer" />
      <MemberSignature Language="F#" Value="member this.Comparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> adds custom value snapshotting and comparison for
                CLR types that cannot be compared with <see cref="M:System.Object.Equals(System.Object,System.Object)" />
                and/or need a deep copy when taking a snapshot.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Converter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter Converter { get; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter Converter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Converter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Converter As ValueConverter" />
      <MemberSignature Language="F#" Value="member this.Converter : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Usage="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Converter" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? Converter { get; }" FrameworkAlternate="efcore-6.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Converts types to and from the store whenever this mapping is used.
                May be null if no conversion is needed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeLiteral">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression GenerateCodeLiteral (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GenerateCodeLiteral(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.GenerateCodeLiteral(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateCodeLiteral (value As Object) As Expression" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeLiteral : obj -&gt; System.Linq.Expressions.Expression&#xA;override this.GenerateCodeLiteral : obj -&gt; System.Linq.Expressions.Expression" Usage="coreTypeMapping.GenerateCodeLiteral value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="value">The value for which a literal is needed.</param>
        <summary>
                Creates a an expression tree that can be used to generate code for the literal value.
                Currently, only very basic expressions such as constructor calls and factory methods taking
                simple constants are supported.
            </summary>
        <returns>An expression tree that can be used to generate code for the literal value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyComparer">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer KeyComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer KeyComparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.KeyComparer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyComparer As ValueComparer" />
      <MemberSignature Language="F#" Value="member this.KeyComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.KeyComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> adds custom value comparison for use when
                comparing key values to each other. For example, when comparing a PK to and FK.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping/CoreTypeMappingParameters Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Parameters" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Parameters As CoreTypeMapping.CoreTypeMappingParameters" />
      <MemberSignature Language="F#" Value="member this.Parameters : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters" Usage="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping+CoreTypeMappingParameters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns the parameters used to create this type mapping.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructuralComparer">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer StructuralComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer StructuralComparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.StructuralComparer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructuralComparer As ValueComparer" />
      <MemberSignature Language="F#" Value="member this.StructuralComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.StructuralComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use KeyComparer. Key comparers must implement structural comparisons and deep copies.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use KeyComparer. Key comparers must implement structural comparisons and deep copies.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> adds custom value comparison for use when
                a deep/structural copy and/or comparison is needed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueGeneratorFactory">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; ValueGeneratorFactory { get; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; ValueGeneratorFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.ValueGeneratorFactory" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ValueGeneratorFactory As Func(Of IProperty, IEntityType, ValueGenerator)" />
      <MemberSignature Language="F#" Value="member this.ValueGeneratorFactory : Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.ValueGeneratorFactory" />
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;? ValueGeneratorFactory { get; }" FrameworkAlternate="efcore-6.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An optional factory for creating a specific <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> to use with
                this mapping.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
