<Type Name="IDbContextTransaction" FullName="Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction">
  <TypeSignature Language="C#" Value="public interface IDbContextTransaction : IDisposable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbContextTransaction implements class System.IDisposable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbContextTransaction&#xA;Implements IDisposable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type IDbContextTransaction = interface&#xA;    interface IDisposable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public interface IDbContextTransaction : IAsyncDisposable, IDisposable" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbContextTransaction implements class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbContextTransaction&#xA;Implements IAsyncDisposable, IDisposable" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type IDbContextTransaction = interface&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDbContextTransaction implements class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                A transaction against the database.
            </summary>
    <remarks>
      <para>
                    Instances of this class are typically obtained from <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransaction" /> and it is not designed
                    to be directly constructed in your application code.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="F#" Value="abstract member Commit : unit -&gt; unit" Usage="iDbContextTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Commits all changes made to the database in the current transaction.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CommitAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CommitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.CommitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CommitAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member CommitAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iDbContextTransaction.CommitAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Commits all changes made to the database in the current transaction asynchronously.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSavepoint">
      <MemberSignature Language="C#" Value="public virtual void CreateSavepoint (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateSavepoint(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.CreateSavepoint(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateSavepoint (name As String)" />
      <MemberSignature Language="F#" Value="abstract member CreateSavepoint : string -&gt; unit&#xA;override this.CreateSavepoint : string -&gt; unit" Usage="iDbContextTransaction.CreateSavepoint name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the savepoint to be created.</param>
        <summary>
                Creates a savepoint in the transaction. This allows all commands that are executed after the savepoint
                was established to be rolled back, restoring the transaction state to what it was at the time of the
                savepoint.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSavepointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateSavepointAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateSavepointAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.CreateSavepointAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSavepointAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateSavepointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateSavepointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iDbContextTransaction.CreateSavepointAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the savepoint to be created.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Creates a savepoint in the transaction. This allows all commands that are executed after the savepoint
                was established to be rolled back, restoring the transaction state to what it was at the time of the
                savepoint.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseSavepoint">
      <MemberSignature Language="C#" Value="public virtual void ReleaseSavepoint (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseSavepoint(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.ReleaseSavepoint(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseSavepoint (name As String)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseSavepoint : string -&gt; unit&#xA;override this.ReleaseSavepoint : string -&gt; unit" Usage="iDbContextTransaction.ReleaseSavepoint name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the savepoint to release.</param>
        <summary>
                Destroys a savepoint previously defined in the current transaction. This allows the system to
                reclaim some resources before the transaction ends.
            </summary>
        <remarks>
          <para>
                    If savepoint release isn't supported, <see cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.ReleaseSavepoint(System.String)" /> and <see cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.ReleaseSavepointAsync(System.String,System.Threading.CancellationToken)" /> should
                    do nothing rather than throw. This is the default behavior.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseSavepointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ReleaseSavepointAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReleaseSavepointAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.ReleaseSavepointAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReleaseSavepointAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member ReleaseSavepointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.ReleaseSavepointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iDbContextTransaction.ReleaseSavepointAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the savepoint to release.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Destroys a savepoint previously defined in the current transaction. This allows the system to
                reclaim some resources before the transaction ends.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>
          <para>
                    If savepoint release isn't supported, <see cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.ReleaseSavepoint(System.String)" /> and <see cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.ReleaseSavepointAsync(System.String,System.Threading.CancellationToken)" /> should
                    do nothing rather than throw. This is the default behavior.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
        </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.Rollback" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rollback ()" />
      <MemberSignature Language="F#" Value="abstract member Rollback : unit -&gt; unit" Usage="iDbContextTransaction.Rollback " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Discards all changes made to the database in the current transaction.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RollbackAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RollbackAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RollbackAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.RollbackAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function RollbackAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member RollbackAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iDbContextTransaction.RollbackAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Discards all changes made to the database in the current transaction asynchronously.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="RollbackToSavepoint">
      <MemberSignature Language="C#" Value="public virtual void RollbackToSavepoint (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RollbackToSavepoint(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.RollbackToSavepoint(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RollbackToSavepoint (name As String)" />
      <MemberSignature Language="F#" Value="abstract member RollbackToSavepoint : string -&gt; unit&#xA;override this.RollbackToSavepoint : string -&gt; unit" Usage="iDbContextTransaction.RollbackToSavepoint name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the savepoint to roll back to.</param>
        <summary>
                Rolls back all commands that were executed after the specified savepoint was established.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RollbackToSavepointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RollbackToSavepointAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RollbackToSavepointAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RollbackToSavepointAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member RollbackToSavepointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.RollbackToSavepointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iDbContextTransaction.RollbackToSavepointAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the savepoint to roll back to.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Rolls back all commands that were executed after the specified savepoint was established.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsSavepoints">
      <MemberSignature Language="C#" Value="public virtual bool SupportsSavepoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsSavepoints" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.SupportsSavepoints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsSavepoints As Boolean" />
      <MemberSignature Language="F#" Value="member this.SupportsSavepoints : bool" Usage="Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.SupportsSavepoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value that indicates whether this <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> instance supports
                database savepoints. If <see langword="false" />, the methods <see cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.CreateSavepointAsync(System.String,System.Threading.CancellationToken)" />,
                <see cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)" />
                and <see cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.ReleaseSavepointAsync(System.String,System.Threading.CancellationToken)" /> as well as their synchronous counterparts are expected to throw
                <see cref="T:System.NotSupportedException" />.
            </summary>
        <value>
          <see langword="true" /> if this <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> instance supports database savepoints;
                otherwise, <see langword="false" />.
            </value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransactionId">
      <MemberSignature Language="C#" Value="public Guid TransactionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid TransactionId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.TransactionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransactionId As Guid" />
      <MemberSignature Language="F#" Value="member this.TransactionId : Guid" Usage="Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.TransactionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the transaction identifier.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
