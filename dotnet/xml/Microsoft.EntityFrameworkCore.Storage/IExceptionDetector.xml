<Type Name="IExceptionDetector" FullName="Microsoft.EntityFrameworkCore.Storage.IExceptionDetector">
  <TypeSignature Language="C#" Value="public interface IExceptionDetector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExceptionDetector" FrameworkAlternate="efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.IExceptionDetector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IExceptionDetector" />
  <TypeSignature Language="F#" Value="type IExceptionDetector = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IExceptionDetector" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                Used by EF internal code and database providers to detect various types of exceptions.
            </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsCancellation">
      <MemberSignature Language="C#" Value="public bool IsCancellation (Exception exception, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsCancellation(class System.Exception exception, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IExceptionDetector.IsCancellation(System.Exception,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCancellation (exception As Exception, Optional cancellationToken As CancellationToken = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsCancellation : Exception * System.Threading.CancellationToken -&gt; bool" Usage="iExceptionDetector.IsCancellation (exception, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="exception">The exception to be checked for cancellation.</param>
        <param name="cancellationToken">
                If <paramref name="exception" /> is insufficient for identifying a cancellation, this is the cancellation token passed to the
                asynchronous operation; it can be checked instead as a fallback mechanism.
            </param>
        <summary>
                Returns whether the provided exception represents a cancellation event for the current provider.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
