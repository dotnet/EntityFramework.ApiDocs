<Type Name="NullConditionalExpression" FullName="Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression">
  <TypeSignature Language="C#" Value="public class NullConditionalExpression : System.Linq.Expressions.Expression" FrameworkAlternate="efcore-1.1;efcore-2.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NullConditionalExpression extends System.Linq.Expressions.Expression" FrameworkAlternate="efcore-1.1;efcore-2.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class NullConditionalExpression&#xA;Inherits Expression" FrameworkAlternate="efcore-1.1;efcore-2.0" />
  <TypeSignature Language="F#" Value="type NullConditionalExpression = class&#xA;    inherit Expression" FrameworkAlternate="efcore-1.1;efcore-2.0" />
  <TypeSignature Language="C#" Value="public class NullConditionalExpression : System.Linq.Expressions.Expression, Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NullConditionalExpression extends System.Linq.Expressions.Expression implements class Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <TypeSignature Language="VB.NET" Value="Public Class NullConditionalExpression&#xA;Inherits Expression&#xA;Implements IPrintable" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type NullConditionalExpression = class&#xA;    inherit Expression&#xA;    interface IPrintable" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-2.1;efcore-2.2">
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Expression representing null-conditional access.
                Logic in this file is based on https://github.com/bartdesmet/ExpressionFutures
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NullConditionalExpression (System.Linq.Expressions.Expression caller, System.Linq.Expressions.Expression accessOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression caller, class System.Linq.Expressions.Expression accessOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (caller As Expression, accessOperation As Expression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression (caller, accessOperation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="caller" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="accessOperation" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="caller"> Expression representing potentially nullable caller that needs to be tested for it's nullability. </param>
        <param name="accessOperation"> Expression representing access operation. </param>
        <summary>
                Creates a new instance of NullConditionalExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NullConditionalExpression (System.Linq.Expressions.Expression nullableCaller, System.Linq.Expressions.Expression caller, System.Linq.Expressions.Expression accessOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression nullableCaller, class System.Linq.Expressions.Expression caller, class System.Linq.Expressions.Expression accessOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nullableCaller As Expression, caller As Expression, accessOperation As Expression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression (nullableCaller, caller, accessOperation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nullableCaller" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="caller" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="accessOperation" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="nullableCaller">
                Expression representing potentially nullable caller that
                needs to be tested for it's nullability.
            </param>
        <param name="caller"> Expression representing actual caller for the access operation. </param>
        <param name="accessOperation"> Expression representing access operation. </param>
        <summary>
                Creates a new instance of NullConditionalExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessOperation">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression AccessOperation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression AccessOperation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.AccessOperation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AccessOperation As Expression" />
      <MemberSignature Language="F#" Value="member this.AccessOperation : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.AccessOperation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Expression representing access operation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Caller">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Caller { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Caller" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Caller" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Caller As Expression" />
      <MemberSignature Language="F#" Value="member this.Caller : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Caller" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Expression representing potentially nullable caller that needs to be tested for it's nullability.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public override bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanReduce : bool" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Indicates that the node can be reduced to a simpler node. If this returns true,
                Reduce() can be called to produce the reduced form.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the node type of this expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullableCaller">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression NullableCaller { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression NullableCaller" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.NullableCaller" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NullableCaller As Expression" />
      <MemberSignature Language="F#" Value="member this.NullableCaller : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.NullableCaller" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Expression representing potentially nullable caller that needs to be tested for it's nullability.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public virtual void Print (Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Print(Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Print (expressionPrinter As ExpressionPrinter)" />
      <MemberSignature Language="F#" Value="abstract member Print : Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter -&gt; unit&#xA;override this.Print : Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter -&gt; unit" Usage="nullConditionalExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable.Print(Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Reduce () As Expression" />
      <MemberSignature Language="F#" Value="override this.Reduce : unit -&gt; System.Linq.Expressions.Expression" Usage="nullConditionalExpression.Reduce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Reduces this node to a simpler expression. If CanReduce returns true, this should
                return a valid expression. This method can return another node which itself must
                be reduced.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="nullConditionalExpression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
        <returns>
                A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the static type of the expression that this expression represents.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.NullConditionalExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="nullConditionalExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">An instance of <see cref="T:System.Func`2" />.</param>
        <summary>
                Reduces the node and then calls the visitor delegate on the reduced expression.
                The method throws an exception if the node is not
                reducible.
            </summary>
        <returns>
                The expression being visited, or an expression which should replace it in the tree.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
