<Type Name="CompiledQueryBase&lt;TContext,TResult&gt;" FullName="Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase&lt;TContext,TResult&gt;">
  <TypeSignature Language="C#" Value="public abstract class CompiledQueryBase&lt;TContext,TResult&gt; where TContext : DbContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CompiledQueryBase`2&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, TResult&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CompiledQueryBase(Of TContext, TResult)" />
  <TypeSignature Language="F#" Value="type CompiledQueryBase&lt;'Context, 'Result (requires 'Context :&gt; DbContext)&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TContext">
      <Constraints>
        <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TContext">To be added.</typeparam>
    <typeparam name="TResult">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CompiledQueryBase (System.Linq.Expressions.LambdaExpression queryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.LambdaExpression queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.#ctor(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (queryExpression As LambdaExpression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase&lt;'Context, 'Result (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; : System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase&lt;'Context, 'Result (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase&lt;'Context, 'Result (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; queryExpression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="queryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompiledQuery">
      <MemberSignature Language="C#" Value="protected abstract Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt; CreateCompiledQuery (Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler queryCompiler, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, !TResult&gt; CreateCompiledQuery(class Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler queryCompiler, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.CreateCompiledQuery(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateCompiledQuery (queryCompiler As IQueryCompiler, expression As Expression) As Func(Of QueryContext, TResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiledQuery : Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler * System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Result&gt;" Usage="compiledQueryBase.CreateCompiledQuery (queryCompiler, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryCompiler" Type="Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="queryCompiler">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCore">
      <MemberSignature Language="C#" Value="protected virtual TResult ExecuteCore (TContext context, params object[] parameters);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TResult ExecuteCore(!TContext context, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.ExecuteCore(`0,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteCore (context As TContext, ParamArray parameters As Object()) As TResult" />
      <MemberSignature Language="F#" Value="abstract member ExecuteCore : 'Context * obj[] -&gt; 'Result&#xA;override this.ExecuteCore : 'Context * obj[] -&gt; 'Result" Usage="compiledQueryBase.ExecuteCore (context, parameters)" />
      <MemberSignature Language="C#" Value="protected virtual TResult ExecuteCore (TContext context, params object?[] parameters);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCore">
      <MemberSignature Language="C#" Value="protected virtual TResult ExecuteCore (TContext context, System.Threading.CancellationToken cancellationToken, params object[] parameters);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TResult ExecuteCore(!TContext context, valuetype System.Threading.CancellationToken cancellationToken, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2.ExecuteCore(`0,System.Threading.CancellationToken,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteCore (context As TContext, cancellationToken As CancellationToken, ParamArray parameters As Object()) As TResult" />
      <MemberSignature Language="F#" Value="abstract member ExecuteCore : 'Context * System.Threading.CancellationToken * obj[] -&gt; 'Result&#xA;override this.ExecuteCore : 'Context * System.Threading.CancellationToken * obj[] -&gt; 'Result" Usage="compiledQueryBase.ExecuteCore (context, cancellationToken, parameters)" />
      <MemberSignature Language="C#" Value="protected virtual TResult ExecuteCore (TContext context, System.Threading.CancellationToken cancellationToken, params object?[] parameters);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
