<Type Name="CSharpToLinqTranslator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator">
  <TypeSignature Language="C#" Value="public class CSharpToLinqTranslator : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.Linq.Expressions.Expression&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CSharpToLinqTranslator extends Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1&lt;class System.Linq.Expressions.Expression&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator" />
  <TypeSignature Language="VB.NET" Value="Public Class CSharpToLinqTranslator&#xA;Inherits CSharpSyntaxVisitor(Of Expression)" />
  <TypeSignature Language="F#" Value="type CSharpToLinqTranslator = class&#xA;    inherit CSharpSyntaxVisitor&lt;Expression&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;System.Linq.Expressions.Expression&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">System.Linq.Expressions.Expression</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                Translates a Roslyn syntax tree into a LINQ expression tree.
            </summary>
    <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CSharpToLinqTranslator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultVisit">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression DefaultVisit (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression DefaultVisit(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DefaultVisit (node As SyntaxNode) As Expression" />
      <MemberSignature Language="F#" Value="override this.DefaultVisit : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.DefaultVisit node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (Microsoft.CodeAnalysis.Compilation compilation, Microsoft.EntityFrameworkCore.DbContext userDbContext, System.Reflection.Assembly? additionalAssembly = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class Microsoft.CodeAnalysis.Compilation compilation, class Microsoft.EntityFrameworkCore.DbContext userDbContext, class System.Reflection.Assembly additionalAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.Load(Microsoft.CodeAnalysis.Compilation,Microsoft.EntityFrameworkCore.DbContext,System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Load (compilation As Compilation, userDbContext As DbContext, Optional additionalAssembly As Assembly = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member Load : Microsoft.CodeAnalysis.Compilation * Microsoft.EntityFrameworkCore.DbContext * System.Reflection.Assembly -&gt; unit&#xA;override this.Load : Microsoft.CodeAnalysis.Compilation * Microsoft.EntityFrameworkCore.DbContext * System.Reflection.Assembly -&gt; unit" Usage="cSharpToLinqTranslator.Load (compilation, userDbContext, additionalAssembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" />
        <Parameter Name="userDbContext" Type="Microsoft.EntityFrameworkCore.DbContext" />
        <Parameter Name="additionalAssembly" Type="System.Reflection.Assembly">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="compilation">A <see cref="T:Microsoft.CodeAnalysis.Compilation" /> containing the syntax nodes to be translated.</param>
        <param name="userDbContext">An instance of the user's <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.</param>
        <param name="additionalAssembly">An optional additional assemblies to resolve CLR types from.</param>
        <summary>
                Loads the given <see cref="T:Microsoft.CodeAnalysis.Compilation" /> and prepares to translate queries using the given <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Translate (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SemanticModel semanticModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Translate(class Microsoft.CodeAnalysis.SyntaxNode node, class Microsoft.CodeAnalysis.SemanticModel semanticModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.Translate(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (node As SyntaxNode, semanticModel As SemanticModel) As Expression" />
      <MemberSignature Language="F#" Value="abstract member Translate : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SemanticModel -&gt; System.Linq.Expressions.Expression&#xA;override this.Translate : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SemanticModel -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.Translate (node, semanticModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" />
      </Parameters>
      <Docs>
        <param name="node">The Roslyn syntax node to be translated.</param>
        <param name="semanticModel">
                The <see cref="T:Microsoft.CodeAnalysis.SemanticModel" /> for the Roslyn <see cref="T:Microsoft.CodeAnalysis.SyntaxTree" /> of which <paramref name="node" /> is a part.
            </param>
        <summary>
                Translates a Roslyn syntax tree into a LINQ expression tree.
            </summary>
        <returns>A LINQ expression tree translated from the provided <paramref name="node" />.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateType">
      <MemberSignature Language="C#" Value="public virtual Type TranslateType (Microsoft.CodeAnalysis.ITypeSymbol typeSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type TranslateType(class Microsoft.CodeAnalysis.ITypeSymbol typeSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.TranslateType(Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateType (typeSymbol As ITypeSymbol) As Type" />
      <MemberSignature Language="F#" Value="abstract member TranslateType : Microsoft.CodeAnalysis.ITypeSymbol -&gt; Type&#xA;override this.TranslateType : Microsoft.CodeAnalysis.ITypeSymbol -&gt; Type" Usage="cSharpToLinqTranslator.TranslateType typeSymbol" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeSymbol" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="typeSymbol">The type symbol to be translated.</param>
        <summary>
                Given a Roslyn type symbol, returns a .NET reflection <see cref="T:System.Type" />.
            </summary>
        <returns>A .NET reflection <see cref="T:System.Type" /> that corresponds to <paramref name="typeSymbol" />.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression? Visit (Microsoft.CodeAnalysis.SyntaxNode? node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Visit(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.Visit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Visit (node As SyntaxNode) As Expression" />
      <MemberSignature Language="F#" Value="override this.Visit : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.Visit node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullIfNotNull("node")]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullIfNotNull("node")&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitAnonymousObjectCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax anonymousObjectCreation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitAnonymousObjectCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax anonymousObjectCreation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitAnonymousObjectCreationExpression (anonymousObjectCreation As AnonymousObjectCreationExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitAnonymousObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitAnonymousObjectCreationExpression anonymousObjectCreation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anonymousObjectCreation" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="anonymousObjectCreation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArgument">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitArgument (Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitArgument(class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitArgument (argument As ArgumentSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitArgument : Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitArgument argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="argument">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax arrayCreation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax arrayCreation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitArrayCreationExpression (arrayCreation As ArrayCreationExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitArrayCreationExpression arrayCreation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayCreation" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="arrayCreation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinaryExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitBinaryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax binary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitBinaryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax binary) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitBinaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitBinaryExpression (binary As BinaryExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitBinaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitBinaryExpression binary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binary" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="binary">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCastExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitCastExpression (Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax cast);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitCastExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax cast) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitCastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitCastExpression (cast As CastExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitCastExpression : Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitCastExpression cast" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cast" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="cast">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditionalExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitConditionalExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax conditional);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitConditionalExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax conditional) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitConditionalExpression (conditional As ConditionalExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitConditionalExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitConditionalExpression conditional" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditional" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="conditional">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElementAccessExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitElementAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax elementAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitElementAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax elementAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitElementAccessExpression (elementAccessExpression As ElementAccessExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitElementAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitElementAccessExpression elementAccessExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementAccessExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="elementAccessExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIdentifierName">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitIdentifierName (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax identifierName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitIdentifierName(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax identifierName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitIdentifierName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitIdentifierName (identifierName As IdentifierNameSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitIdentifierName : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitIdentifierName identifierName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifierName" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="identifierName">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImplicitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitImplicitArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax implicitArrayCreation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitImplicitArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax implicitArrayCreation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitImplicitArrayCreationExpression (implicitArrayCreation As ImplicitArrayCreationExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitImplicitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitImplicitArrayCreationExpression implicitArrayCreation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implicitArrayCreation" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="implicitArrayCreation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitInterpolatedStringExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax interpolatedString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitInterpolatedStringExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax interpolatedString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitInterpolatedStringExpression (interpolatedString As InterpolatedStringExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitInterpolatedStringExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitInterpolatedStringExpression interpolatedString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interpolatedString" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="interpolatedString">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInvocationExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitInvocationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax invocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitInvocationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax invocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitInvocationExpression (invocation As InvocationExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitInvocationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitInvocationExpression invocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invocation" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="invocation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLiteralExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitLiteralExpression (Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitLiteralExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitLiteralExpression(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitLiteralExpression (literal As LiteralExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLiteralExpression : Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitLiteralExpression literal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="literal">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberAccessExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitMemberAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax memberAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitMemberAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax memberAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitMemberAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitMemberAccessExpression (memberAccess As MemberAccessExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMemberAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitMemberAccessExpression memberAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberAccess" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="memberAccess">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitObjectCreationExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitObjectCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax objectCreation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitObjectCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax objectCreation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitObjectCreationExpression (objectCreation As ObjectCreationExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitObjectCreationExpression objectCreation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectCreation" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="objectCreation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesizedExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitParenthesizedExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax parenthesized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitParenthesizedExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax parenthesized) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitParenthesizedExpression (parenthesized As ParenthesizedExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitParenthesizedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitParenthesizedExpression parenthesized" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parenthesized" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="parenthesized">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesizedLambdaExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitParenthesizedLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax lambda);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitParenthesizedLambdaExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax lambda) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitParenthesizedLambdaExpression (lambda As ParenthesizedLambdaExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitParenthesizedLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitParenthesizedLambdaExpression lambda" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambda" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="lambda">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPostfixUnaryExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitPostfixUnaryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax unary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitPostfixUnaryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax unary) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitPostfixUnaryExpression (unary As PostfixUnaryExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitPostfixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitPostfixUnaryExpression unary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unary" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="unary">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPredefinedType">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitPredefinedType (Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax predefinedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitPredefinedType(class Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax predefinedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitPredefinedType(Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitPredefinedType (predefinedType As PredefinedTypeSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitPredefinedType : Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitPredefinedType predefinedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predefinedType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="predefinedType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPrefixUnaryExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitPrefixUnaryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax unary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitPrefixUnaryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax unary) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitPrefixUnaryExpression (unary As PrefixUnaryExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitPrefixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitPrefixUnaryExpression unary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unary" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="unary">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitQueryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitQueryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitQueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitQueryExpression (node As QueryExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitQueryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitQueryExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleLambdaExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitSimpleLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax lambda);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitSimpleLambdaExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax lambda) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitSimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitSimpleLambdaExpression (lambda As SimpleLambdaExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSimpleLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitSimpleLambdaExpression lambda" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambda" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="lambda">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeOfExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression VisitTypeOfExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax typeOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression VisitTypeOfExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax typeOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.CSharpToLinqTranslator.VisitTypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function VisitTypeOfExpression (typeOf As TypeOfExpressionSyntax) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitTypeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax -&gt; System.Linq.Expressions.Expression" Usage="cSharpToLinqTranslator.VisitTypeOfExpression typeOf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeOf" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="typeOf">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
