<Type Name="RelationalProjectionBindingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class RelationalProjectionBindingExpressionVisitor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RelationalProjectionBindingExpressionVisitor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class RelationalProjectionBindingExpressionVisitor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type RelationalProjectionBindingExpressionVisitor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelationalProjectionBindingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor, Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor sqlTranslatingExpressionVisitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor, class Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor sqlTranslatingExpressionVisitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor,Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryableMethodTranslatingExpressionVisitor As RelationalQueryableMethodTranslatingExpressionVisitor, sqlTranslatingExpressionVisitor As RelationalSqlTranslatingExpressionVisitor)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor * Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor -&gt; Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor (queryableMethodTranslatingExpressionVisitor, sqlTranslatingExpressionVisitor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryableMethodTranslatingExpressionVisitor" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" />
        <Parameter Name="sqlTranslatingExpressionVisitor" Type="Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="queryableMethodTranslatingExpressionVisitor">To be added.</param>
        <param name="sqlTranslatingExpressionVisitor">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Translate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Translate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (selectExpression As SelectExpression, expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member Translate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.Translate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.Translate (selectExpression, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Visit (System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Visit(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Visit (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.Visit : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.Visit expression" />
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression? Visit (System.Linq.Expressions.Expression? expression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression binaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression binaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitBinary (binaryExpression As BinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.VisitBinary binaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryExpression" Type="System.Linq.Expressions.BinaryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="binaryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditional">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConditional (System.Linq.Expressions.ConditionalExpression conditionalExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConditional(class System.Linq.Expressions.ConditionalExpression conditionalExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConditional (conditionalExpression As ConditionalExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitConditional : System.Linq.Expressions.ConditionalExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.VisitConditional conditionalExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditionalExpression" Type="System.Linq.Expressions.ConditionalExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="conditionalExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElementInit">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.ElementInit VisitElementInit (System.Linq.Expressions.ElementInit elementInit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.ElementInit VisitElementInit(class System.Linq.Expressions.ElementInit elementInit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitElementInit (elementInit As ElementInit) As ElementInit" />
      <MemberSignature Language="F#" Value="override this.VisitElementInit : System.Linq.Expressions.ElementInit -&gt; System.Linq.Expressions.ElementInit" Usage="relationalProjectionBindingExpressionVisitor.VisitElementInit elementInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementInit" Type="System.Linq.Expressions.ElementInit" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="elementInit">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression extensionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression extensionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (extensionExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.VisitExtension extensionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="extensionExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMember">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMember (System.Linq.Expressions.MemberExpression memberExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMember(class System.Linq.Expressions.MemberExpression memberExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMember (memberExpression As MemberExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMember : System.Linq.Expressions.MemberExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.VisitMember memberExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberAssignment">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.MemberAssignment VisitMemberAssignment (System.Linq.Expressions.MemberAssignment memberAssignment);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.MemberAssignment VisitMemberAssignment(class System.Linq.Expressions.MemberAssignment memberAssignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMemberAssignment (memberAssignment As MemberAssignment) As MemberAssignment" />
      <MemberSignature Language="F#" Value="override this.VisitMemberAssignment : System.Linq.Expressions.MemberAssignment -&gt; System.Linq.Expressions.MemberAssignment" Usage="relationalProjectionBindingExpressionVisitor.VisitMemberAssignment memberAssignment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberAssignment" Type="System.Linq.Expressions.MemberAssignment" />
      </Parameters>
      <Docs>
        <param name="memberAssignment">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberInit">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMemberInit (System.Linq.Expressions.MemberInitExpression memberInitExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMemberInit(class System.Linq.Expressions.MemberInitExpression memberInitExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMemberInit (memberInitExpression As MemberInitExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMemberInit : System.Linq.Expressions.MemberInitExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.VisitMemberInit memberInitExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInitExpression" Type="System.Linq.Expressions.MemberInitExpression" />
      </Parameters>
      <Docs>
        <param name="memberInitExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMethodCall (methodCallExpression As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.VisitMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNew">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitNew (System.Linq.Expressions.NewExpression newExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitNew(class System.Linq.Expressions.NewExpression newExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitNew (newExpression As NewExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitNew : System.Linq.Expressions.NewExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.VisitNew newExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
      </Parameters>
      <Docs>
        <param name="newExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNewArray">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitNewArray (System.Linq.Expressions.NewArrayExpression newArrayExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitNewArray(class System.Linq.Expressions.NewArrayExpression newArrayExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitNewArray (newArrayExpression As NewArrayExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitNewArray : System.Linq.Expressions.NewArrayExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.VisitNewArray newArrayExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newArrayExpression" Type="System.Linq.Expressions.NewArrayExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="newArrayExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUnary (System.Linq.Expressions.UnaryExpression unaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUnary(class System.Linq.Expressions.UnaryExpression unaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitUnary (unaryExpression As UnaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitUnary : System.Linq.Expressions.UnaryExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalProjectionBindingExpressionVisitor.VisitUnary unaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryExpression" Type="System.Linq.Expressions.UnaryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="unaryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
