<Type Name="RuntimeModelLinqToCSharpSyntaxTranslator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator">
  <TypeSignature Language="C#" Value="public class RuntimeModelLinqToCSharpSyntaxTranslator : Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RuntimeModelLinqToCSharpSyntaxTranslator extends Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="VB.NET" Value="Public Class RuntimeModelLinqToCSharpSyntaxTranslator&#xA;Inherits LinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="F#" Value="type RuntimeModelLinqToCSharpSyntaxTranslator = class&#xA;    inherit LinqToCSharpSyntaxTranslator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuntimeModelLinqToCSharpSyntaxTranslator (Microsoft.CodeAnalysis.Editing.SyntaxGenerator syntaxGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.CodeAnalysis.Editing.SyntaxGenerator syntaxGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator.#ctor(Microsoft.CodeAnalysis.Editing.SyntaxGenerator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (syntaxGenerator As SyntaxGenerator)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator : Microsoft.CodeAnalysis.Editing.SyntaxGenerator -&gt; Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator syntaxGenerator" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="syntaxGenerator" Type="Microsoft.CodeAnalysis.Editing.SyntaxGenerator" />
      </Parameters>
      <Docs>
        <param name="syntaxGenerator">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateValue">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax GenerateValue (object? value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax GenerateValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator.GenerateValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GenerateValue (value As Object) As ExpressionSyntax" />
      <MemberSignature Language="F#" Value="override this.GenerateValue : obj -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" Usage="runtimeModelLinqToCSharpSyntaxTranslator.GenerateValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateExpression">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode TranslateExpression (System.Linq.Expressions.Expression node, System.Collections.Generic.IReadOnlyDictionary&lt;object,string&gt;? constantReplacements, System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt;? memberAccessReplacements, System.Collections.Generic.ISet&lt;string&gt; collectedNamespaces, System.Collections.Generic.ISet&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt; unsafeAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TranslateExpression(class System.Linq.Expressions.Expression node, class System.Collections.Generic.IReadOnlyDictionary`2&lt;object, string&gt; constantReplacements, class System.Collections.Generic.IReadOnlyDictionary`2&lt;class System.Reflection.MemberInfo, valuetype Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt; memberAccessReplacements, class System.Collections.Generic.ISet`1&lt;string&gt; collectedNamespaces, class System.Collections.Generic.ISet`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt; unsafeAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator.TranslateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.Object,System.String},System.Collections.Generic.IReadOnlyDictionary{System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName},System.Collections.Generic.ISet{System.String},System.Collections.Generic.ISet{Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateExpression (node As Expression, constantReplacements As IReadOnlyDictionary(Of Object, String), memberAccessReplacements As IReadOnlyDictionary(Of MemberInfo, QualifiedName), collectedNamespaces As ISet(Of String), unsafeAccessors As ISet(Of MethodDeclarationSyntax)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.TranslateExpression : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;obj, string&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo, Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt; * System.Collections.Generic.ISet&lt;string&gt; * System.Collections.Generic.ISet&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="runtimeModelLinqToCSharpSyntaxTranslator.TranslateExpression (node, constantReplacements, memberAccessReplacements, collectedNamespaces, unsafeAccessors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="constantReplacements" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.Object,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="memberAccessReplacements" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="collectedNamespaces" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
        <Parameter Name="unsafeAccessors" Type="System.Collections.Generic.ISet&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="constantReplacements">To be added.</param>
        <param name="memberAccessReplacements">To be added.</param>
        <param name="collectedNamespaces">To be added.</param>
        <param name="unsafeAccessors">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateNonPublicMemberAccess">
      <MemberSignature Language="C#" Value="protected override void TranslateNonPublicMemberAccess (System.Linq.Expressions.MemberExpression memberExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TranslateNonPublicMemberAccess(class System.Linq.Expressions.MemberExpression memberExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator.TranslateNonPublicMemberAccess(System.Linq.Expressions.MemberExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TranslateNonPublicMemberAccess (memberExpression As MemberExpression)" />
      <MemberSignature Language="F#" Value="override this.TranslateNonPublicMemberAccess : System.Linq.Expressions.MemberExpression -&gt; unit" Usage="runtimeModelLinqToCSharpSyntaxTranslator.TranslateNonPublicMemberAccess memberExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
      </Parameters>
      <Docs>
        <param name="memberExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateNonPublicMemberAssignment">
      <MemberSignature Language="C#" Value="protected override void TranslateNonPublicMemberAssignment (System.Linq.Expressions.MemberExpression memberExpression, System.Linq.Expressions.Expression value, Microsoft.CodeAnalysis.CSharp.SyntaxKind assignmentKind);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TranslateNonPublicMemberAssignment(class System.Linq.Expressions.MemberExpression memberExpression, class System.Linq.Expressions.Expression value, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind assignmentKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator.TranslateNonPublicMemberAssignment(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TranslateNonPublicMemberAssignment (memberExpression As MemberExpression, value As Expression, assignmentKind As SyntaxKind)" />
      <MemberSignature Language="F#" Value="override this.TranslateNonPublicMemberAssignment : System.Linq.Expressions.MemberExpression * System.Linq.Expressions.Expression * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; unit" Usage="runtimeModelLinqToCSharpSyntaxTranslator.TranslateNonPublicMemberAssignment (memberExpression, value, assignmentKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="assignmentKind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="memberExpression">To be added.</param>
        <param name="value">To be added.</param>
        <param name="assignmentKind">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateStatement">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode TranslateStatement (System.Linq.Expressions.Expression node, System.Collections.Generic.IReadOnlyDictionary&lt;object,string&gt;? constantReplacements, System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt;? memberAccessReplacements, System.Collections.Generic.ISet&lt;string&gt; collectedNamespaces, System.Collections.Generic.ISet&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt; unsafeAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TranslateStatement(class System.Linq.Expressions.Expression node, class System.Collections.Generic.IReadOnlyDictionary`2&lt;object, string&gt; constantReplacements, class System.Collections.Generic.IReadOnlyDictionary`2&lt;class System.Reflection.MemberInfo, valuetype Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt; memberAccessReplacements, class System.Collections.Generic.ISet`1&lt;string&gt; collectedNamespaces, class System.Collections.Generic.ISet`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt; unsafeAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RuntimeModelLinqToCSharpSyntaxTranslator.TranslateStatement(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.Object,System.String},System.Collections.Generic.IReadOnlyDictionary{System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName},System.Collections.Generic.ISet{System.String},System.Collections.Generic.ISet{Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateStatement (node As Expression, constantReplacements As IReadOnlyDictionary(Of Object, String), memberAccessReplacements As IReadOnlyDictionary(Of MemberInfo, QualifiedName), collectedNamespaces As ISet(Of String), unsafeAccessors As ISet(Of MethodDeclarationSyntax)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.TranslateStatement : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;obj, string&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo, Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt; * System.Collections.Generic.ISet&lt;string&gt; * System.Collections.Generic.ISet&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="runtimeModelLinqToCSharpSyntaxTranslator.TranslateStatement (node, constantReplacements, memberAccessReplacements, collectedNamespaces, unsafeAccessors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="constantReplacements" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.Object,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="memberAccessReplacements" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="collectedNamespaces" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
        <Parameter Name="unsafeAccessors" Type="System.Collections.Generic.ISet&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="constantReplacements">To be added.</param>
        <param name="memberAccessReplacements">To be added.</param>
        <param name="collectedNamespaces">To be added.</param>
        <param name="unsafeAccessors">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
