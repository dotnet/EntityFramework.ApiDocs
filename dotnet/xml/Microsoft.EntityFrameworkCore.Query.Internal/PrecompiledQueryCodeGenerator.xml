<Type Name="PrecompiledQueryCodeGenerator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator">
  <TypeSignature Language="C#" Value="public class PrecompiledQueryCodeGenerator : Microsoft.EntityFrameworkCore.Query.IPrecompiledQueryCodeGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PrecompiledQueryCodeGenerator extends System.Object implements class Microsoft.EntityFrameworkCore.Design.ILanguageBasedService, class Microsoft.EntityFrameworkCore.Query.IPrecompiledQueryCodeGenerator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class PrecompiledQueryCodeGenerator&#xA;Implements IPrecompiledQueryCodeGenerator" />
  <TypeSignature Language="F#" Value="type PrecompiledQueryCodeGenerator = class&#xA;    interface IPrecompiledQueryCodeGenerator&#xA;    interface ILanguageBasedService" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Design.ILanguageBasedService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IPrecompiledQueryCodeGenerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrecompiledQueryCodeGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CompileQuery (System.Linq.Expressions.Expression penultimateOperator, System.Linq.Expressions.MethodCallExpression terminatingOperator);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CompileQuery(class System.Linq.Expressions.Expression penultimateOperator, class System.Linq.Expressions.MethodCallExpression terminatingOperator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.CompileQuery(System.Linq.Expressions.Expression,System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CompileQuery (penultimateOperator As Expression, terminatingOperator As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CompileQuery : System.Linq.Expressions.Expression * System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.CompileQuery : System.Linq.Expressions.Expression * System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="precompiledQueryCodeGenerator.CompileQuery (penultimateOperator, terminatingOperator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="penultimateOperator" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="terminatingOperator" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="penultimateOperator">To be added.</param>
        <param name="terminatingOperator">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratePrecompiledQueries">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt; GeneratePrecompiledQueries (Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.Editing.SyntaxGenerator syntaxGenerator, Microsoft.EntityFrameworkCore.DbContext dbContext, System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt; memberAccessReplacements, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError&gt; precompilationErrors, System.Collections.Generic.ISet&lt;string&gt; generatedFileNames, System.Reflection.Assembly? additionalAssembly = default, string? suffix = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt; GeneratePrecompiledQueries(class Microsoft.CodeAnalysis.Compilation compilation, class Microsoft.CodeAnalysis.Editing.SyntaxGenerator syntaxGenerator, class Microsoft.EntityFrameworkCore.DbContext dbContext, class System.Collections.Generic.IReadOnlyDictionary`2&lt;class System.Reflection.MemberInfo, valuetype Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt; memberAccessReplacements, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator/QueryPrecompilationError&gt; precompilationErrors, class System.Collections.Generic.ISet`1&lt;string&gt; generatedFileNames, class System.Reflection.Assembly additionalAssembly, string suffix, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.GeneratePrecompiledQueries(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.EntityFrameworkCore.DbContext,System.Collections.Generic.IReadOnlyDictionary{System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError},System.Collections.Generic.ISet{System.String},System.Reflection.Assembly,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GeneratePrecompiledQueries (compilation As Compilation, syntaxGenerator As SyntaxGenerator, dbContext As DbContext, memberAccessReplacements As IReadOnlyDictionary(Of MemberInfo, QualifiedName), precompilationErrors As List(Of PrecompiledQueryCodeGenerator.QueryPrecompilationError), generatedFileNames As ISet(Of String), Optional additionalAssembly As Assembly = Nothing, Optional suffix As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IReadOnlyList(Of ScaffoldedFile)" />
      <MemberSignature Language="F#" Value="abstract member GeneratePrecompiledQueries : Microsoft.CodeAnalysis.Compilation * Microsoft.CodeAnalysis.Editing.SyntaxGenerator * Microsoft.EntityFrameworkCore.DbContext * System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo, Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError&gt; * System.Collections.Generic.ISet&lt;string&gt; * System.Reflection.Assembly * string * System.Threading.CancellationToken -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt;&#xA;override this.GeneratePrecompiledQueries : Microsoft.CodeAnalysis.Compilation * Microsoft.CodeAnalysis.Editing.SyntaxGenerator * Microsoft.EntityFrameworkCore.DbContext * System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo, Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError&gt; * System.Collections.Generic.ISet&lt;string&gt; * System.Reflection.Assembly * string * System.Threading.CancellationToken -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt;" Usage="precompiledQueryCodeGenerator.GeneratePrecompiledQueries (compilation, syntaxGenerator, dbContext, memberAccessReplacements, precompilationErrors, generatedFileNames, additionalAssembly, suffix, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IPrecompiledQueryCodeGenerator.GeneratePrecompiledQueries(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.EntityFrameworkCore.DbContext,System.Collections.Generic.IReadOnlyDictionary{System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError},System.Collections.Generic.ISet{System.String},System.Reflection.Assembly,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" />
        <Parameter Name="syntaxGenerator" Type="Microsoft.CodeAnalysis.Editing.SyntaxGenerator" />
        <Parameter Name="dbContext" Type="Microsoft.EntityFrameworkCore.DbContext" />
        <Parameter Name="memberAccessReplacements" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Design.Internal.QualifiedName&gt;" />
        <Parameter Name="precompilationErrors" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator+QueryPrecompilationError&gt;" />
        <Parameter Name="generatedFileNames" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
        <Parameter Name="additionalAssembly" Type="System.Reflection.Assembly">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="suffix" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="compilation">To be added.</param>
        <param name="syntaxGenerator">To be added.</param>
        <param name="dbContext">To be added.</param>
        <param name="memberAccessReplacements">To be added.</param>
        <param name="precompilationErrors">To be added.</param>
        <param name="generatedFileNames">To be added.</param>
        <param name="additionalAssembly">To be added.</param>
        <param name="suffix">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string? Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.Language" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Language As String" />
      <MemberSignature Language="F#" Value="member this.Language : string" Usage="Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.Language" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Design.ILanguageBasedService.Language</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="PrepareQueryForCompilation">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression PrepareQueryForCompilation (System.Linq.Expressions.Expression penultimateOperator, System.Linq.Expressions.MethodCallExpression terminatingOperator);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression PrepareQueryForCompilation(class System.Linq.Expressions.Expression penultimateOperator, class System.Linq.Expressions.MethodCallExpression terminatingOperator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.PrepareQueryForCompilation(System.Linq.Expressions.Expression,System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function PrepareQueryForCompilation (penultimateOperator As Expression, terminatingOperator As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member PrepareQueryForCompilation : System.Linq.Expressions.Expression * System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.PrepareQueryForCompilation : System.Linq.Expressions.Expression * System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="precompiledQueryCodeGenerator.PrepareQueryForCompilation (penultimateOperator, terminatingOperator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="penultimateOperator" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="terminatingOperator" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="penultimateOperator">To be added.</param>
        <param name="terminatingOperator">To be added.</param>
        <summary>
                Performs processing of a query's terminating operator before handing the query off for EF compilation.
                This involves removing the operator when it shouldn't be in the tree (e.g. ToList()), and rewriting async terminating operators
                to their sync counterparts (e.g. MaxAsync() -&gt; Max()). This only needs to be modified/overridden if a new terminating operator
                is introduced which needs to be rewritten.
            </summary>
        <returns>To be added.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessSyntaxTree">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile? ProcessSyntaxTree (Microsoft.CodeAnalysis.SyntaxTree syntaxTree, Microsoft.CodeAnalysis.SemanticModel semanticModel, System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt; locatedQueries, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError&gt; precompilationErrors, string suffix, System.Collections.Generic.ISet&lt;string&gt; generatedFileNames, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile ProcessSyntaxTree(class Microsoft.CodeAnalysis.SyntaxTree syntaxTree, class Microsoft.CodeAnalysis.SemanticModel semanticModel, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt; locatedQueries, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator/QueryPrecompilationError&gt; precompilationErrors, string suffix, class System.Collections.Generic.ISet`1&lt;string&gt; generatedFileNames, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.ProcessSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SemanticModel,System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError},System.String,System.Collections.Generic.ISet{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessSyntaxTree (syntaxTree As SyntaxTree, semanticModel As SemanticModel, locatedQueries As IReadOnlyList(Of InvocationExpressionSyntax), precompilationErrors As List(Of PrecompiledQueryCodeGenerator.QueryPrecompilationError), suffix As String, generatedFileNames As ISet(Of String), cancellationToken As CancellationToken) As ScaffoldedFile" />
      <MemberSignature Language="F#" Value="abstract member ProcessSyntaxTree : Microsoft.CodeAnalysis.SyntaxTree * Microsoft.CodeAnalysis.SemanticModel * System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError&gt; * string * System.Collections.Generic.ISet&lt;string&gt; * System.Threading.CancellationToken -&gt; Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile&#xA;override this.ProcessSyntaxTree : Microsoft.CodeAnalysis.SyntaxTree * Microsoft.CodeAnalysis.SemanticModel * System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError&gt; * string * System.Collections.Generic.ISet&lt;string&gt; * System.Threading.CancellationToken -&gt; Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile" Usage="precompiledQueryCodeGenerator.ProcessSyntaxTree (syntaxTree, semanticModel, locatedQueries, precompilationErrors, suffix, generatedFileNames, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Scaffolding.ScaffoldedFile</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syntaxTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" />
        <Parameter Name="locatedQueries" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt;" />
        <Parameter Name="precompilationErrors" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator+QueryPrecompilationError&gt;" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="generatedFileNames" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syntaxTree">To be added.</param>
        <param name="semanticModel">To be added.</param>
        <param name="locatedQueries">To be added.</param>
        <param name="precompilationErrors">To be added.</param>
        <param name="suffix">To be added.</param>
        <param name="generatedFileNames">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
