<Type Name="QueryCompiler" FullName="Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler">
  <TypeSignature Language="C#" Value="public class QueryCompiler : Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QueryCompiler extends System.Object implements class Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler" />
  <TypeSignature Language="VB.NET" Value="Public Class QueryCompiler&#xA;Implements IQueryCompiler" />
  <TypeSignature Language="F#" Value="type QueryCompiler = class&#xA;    interface IQueryCompiler" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryCompiler (Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase database, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext, Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator queryModelGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, class Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, class Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, class Microsoft.EntityFrameworkCore.Storage.IDatabase database, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger, class Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext, class Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator queryModelGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryContextFactory As IQueryContextFactory, compiledQueryCache As ICompiledQueryCache, compiledQueryCacheKeyGenerator As ICompiledQueryCacheKeyGenerator, database As IDatabase, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query), currentContext As ICurrentDbContext, queryModelGenerator As IQueryModelGenerator)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler : Microsoft.EntityFrameworkCore.Query.IQueryContextFactory * Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache * Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator * Microsoft.EntityFrameworkCore.Storage.IDatabase * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext * Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator -&gt; Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler (queryContextFactory, compiledQueryCache, compiledQueryCacheKeyGenerator, database, logger, currentContext, queryModelGenerator)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryContextFactory" Type="Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="compiledQueryCache" Type="Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="compiledQueryCacheKeyGenerator" Type="Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Storage.IDatabase" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" Index="4" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="currentContext" Type="Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext" Index="5" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="queryModelGenerator" Type="Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator" Index="6" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="queryContextFactory">To be added.</param>
        <param name="compiledQueryCache">To be added.</param>
        <param name="compiledQueryCacheKeyGenerator">To be added.</param>
        <param name="database">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="currentContext">To be added.</param>
        <param name="queryModelGenerator">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryCompiler (Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase database, Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger&lt;Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler&gt; logger, Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry methodInfoBasedNodeTypeRegistry, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, class Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, class Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, class Microsoft.EntityFrameworkCore.Storage.IDatabase database, class Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler&gt; logger, class Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry methodInfoBasedNodeTypeRegistry, class Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger{Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler},Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryContextFactory As IQueryContextFactory, compiledQueryCache As ICompiledQueryCache, compiledQueryCacheKeyGenerator As ICompiledQueryCacheKeyGenerator, database As IDatabase, logger As ISensitiveDataLogger(Of QueryCompiler), methodInfoBasedNodeTypeRegistry As MethodInfoBasedNodeTypeRegistry, currentContext As ICurrentDbContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler : Microsoft.EntityFrameworkCore.Query.IQueryContextFactory * Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache * Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator * Microsoft.EntityFrameworkCore.Storage.IDatabase * Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger&lt;Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler&gt; * Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry * Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext -&gt; Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler (queryContextFactory, compiledQueryCache, compiledQueryCacheKeyGenerator, database, logger, methodInfoBasedNodeTypeRegistry, currentContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryContextFactory" Type="Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="compiledQueryCache" Type="Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="compiledQueryCacheKeyGenerator" Type="Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Storage.IDatabase" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger&lt;Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler&gt;" Index="4" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="methodInfoBasedNodeTypeRegistry" Type="Remotion.Linq.Parsing.Structure.NodeTypeProviders.MethodInfoBasedNodeTypeRegistry" Index="5" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="currentContext" Type="Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext" Index="6" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="queryContextFactory">To be added.</param>
        <param name="compiledQueryCache">To be added.</param>
        <param name="compiledQueryCacheKeyGenerator">To be added.</param>
        <param name="database">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="methodInfoBasedNodeTypeRegistry">To be added.</param>
        <param name="currentContext">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryCompiler (Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase database, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger, Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext currentContext, Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter evaluatableExpressionFilter, Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, class Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, class Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, class Microsoft.EntityFrameworkCore.Storage.IDatabase database, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger, class Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext currentContext, class Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter evaluatableExpressionFilter, class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext,Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter,Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryContextFactory As IQueryContextFactory, compiledQueryCache As ICompiledQueryCache, compiledQueryCacheKeyGenerator As ICompiledQueryCacheKeyGenerator, database As IDatabase, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query), currentContext As ICurrentDbContext, evaluatableExpressionFilter As IEvaluatableExpressionFilter, model As IModel)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler : Microsoft.EntityFrameworkCore.Query.IQueryContextFactory * Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache * Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator * Microsoft.EntityFrameworkCore.Storage.IDatabase * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext * Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter * Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler (queryContextFactory, compiledQueryCache, compiledQueryCacheKeyGenerator, database, logger, currentContext, evaluatableExpressionFilter, model)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryContextFactory" Type="Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="compiledQueryCache" Type="Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="compiledQueryCacheKeyGenerator" Type="Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Storage.IDatabase" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="currentContext" Type="Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext" Index="5" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="evaluatableExpressionFilter" Type="Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter" Index="6" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="7" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="queryContextFactory">To be added.</param>
        <param name="compiledQueryCache">To be added.</param>
        <param name="compiledQueryCacheKeyGenerator">To be added.</param>
        <param name="database">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="currentContext">To be added.</param>
        <param name="evaluatableExpressionFilter">To be added.</param>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryCompiler (Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase database, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger, Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory nodeTypeProviderFactory, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext, Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.IQueryContextFactory queryContextFactory, class Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache compiledQueryCache, class Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, class Microsoft.EntityFrameworkCore.Storage.IDatabase database, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger, class Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory nodeTypeProviderFactory, class Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext, class Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter evaluatableExpressionFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryContextFactory As IQueryContextFactory, compiledQueryCache As ICompiledQueryCache, compiledQueryCacheKeyGenerator As ICompiledQueryCacheKeyGenerator, database As IDatabase, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query), nodeTypeProviderFactory As INodeTypeProviderFactory, currentContext As ICurrentDbContext, evaluatableExpressionFilter As IEvaluatableExpressionFilter)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler : Microsoft.EntityFrameworkCore.Query.IQueryContextFactory * Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache * Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator * Microsoft.EntityFrameworkCore.Storage.IDatabase * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory * Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext * Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter -&gt; Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler (queryContextFactory, compiledQueryCache, compiledQueryCacheKeyGenerator, database, logger, nodeTypeProviderFactory, currentContext, evaluatableExpressionFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryContextFactory" Type="Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" Index="0" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="compiledQueryCache" Type="Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache" Index="1" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="compiledQueryCacheKeyGenerator" Type="Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator" Index="2" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Storage.IDatabase" Index="3" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" Index="4" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="nodeTypeProviderFactory" Type="Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory" Index="5" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="currentContext" Type="Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext" Index="6" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="evaluatableExpressionFilter" Type="Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" Index="7" FrameworkAlternate="efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="queryContextFactory">To be added.</param>
        <param name="compiledQueryCache">To be added.</param>
        <param name="compiledQueryCacheKeyGenerator">To be added.</param>
        <param name="database">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="nodeTypeProviderFactory">To be added.</param>
        <param name="currentContext">To be added.</param>
        <param name="evaluatableExpressionFilter">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAsyncQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="protected virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt; CompileAsyncQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt;&gt; CompileAsyncQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CompileAsyncQuery(Of TResult) (query As Expression) As Func(Of QueryContext, IAsyncEnumerable(Of TResult))" />
      <MemberSignature Language="F#" Value="abstract member CompileAsyncQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&gt;&#xA;override this.CompileAsyncQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&gt;" Usage="queryCompiler.CompileAsyncQuery query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="protected virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt; CompileQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, !!TResult&gt; CompileQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CompileQuery(Of TResult) (query As Expression) As Func(Of QueryContext, TResult)" />
      <MemberSignature Language="F#" Value="abstract member CompileQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Result&gt;&#xA;override this.CompileQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Result&gt;" Usage="queryCompiler.CompileQuery query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileQueryCore&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt; CompileQueryCore&lt;TResult&gt; (Microsoft.EntityFrameworkCore.Storage.IDatabase database, System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Metadata.IModel model, bool async);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, !!TResult&gt; CompileQueryCore&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IDatabase database, class System.Linq.Expressions.Expression query, class Microsoft.EntityFrameworkCore.Metadata.IModel model, bool async) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore``1(Microsoft.EntityFrameworkCore.Storage.IDatabase,System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IModel,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileQueryCore(Of TResult) (database As IDatabase, query As Expression, model As IModel, async As Boolean) As Func(Of QueryContext, TResult)" />
      <MemberSignature Language="F#" Value="abstract member CompileQueryCore : Microsoft.EntityFrameworkCore.Storage.IDatabase * System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IModel * bool -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Result&gt;&#xA;override this.CompileQueryCore : Microsoft.EntityFrameworkCore.Storage.IDatabase * System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IModel * bool -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Result&gt;" Usage="queryCompiler.CompileQueryCore (database, query, model, async)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="database" Type="Microsoft.EntityFrameworkCore.Storage.IDatabase" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="async" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="database">To be added.</param>
        <param name="query">To be added.</param>
        <param name="model">To be added.</param>
        <param name="async">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompiledAsyncEnumerableQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt; CreateCompiledAsyncEnumerableQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt;&gt; CreateCompiledAsyncEnumerableQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledAsyncEnumerableQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCompiledAsyncEnumerableQuery(Of TResult) (query As Expression) As Func(Of QueryContext, IAsyncEnumerable(Of TResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiledAsyncEnumerableQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&gt;&#xA;override this.CreateCompiledAsyncEnumerableQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&gt;" Usage="queryCompiler.CreateCompiledAsyncEnumerableQuery query" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.CreateCompiledAsyncEnumerableQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompiledAsyncQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt; CreateCompiledAsyncQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, !!TResult&gt; CreateCompiledAsyncQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledAsyncQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCompiledAsyncQuery(Of TResult) (query As Expression) As Func(Of QueryContext, TResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiledAsyncQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Result&gt;&#xA;override this.CreateCompiledAsyncQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Result&gt;" Usage="queryCompiler.CreateCompiledAsyncQuery query" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.CreateCompiledAsyncQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompiledAsyncTaskQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Threading.Tasks.Task&lt;TResult&gt;&gt; CreateCompiledAsyncTaskQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; CreateCompiledAsyncTaskQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledAsyncTaskQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCompiledAsyncTaskQuery(Of TResult) (query As Expression) As Func(Of QueryContext, Task(Of TResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiledAsyncTaskQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Threading.Tasks.Task&lt;'Result&gt;&gt;&#xA;override this.CreateCompiledAsyncTaskQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Threading.Tasks.Task&lt;'Result&gt;&gt;" Usage="queryCompiler.CreateCompiledAsyncTaskQuery query" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.CreateCompiledAsyncTaskQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCompiledQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt; CreateCompiledQuery&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, !!TResult&gt; CreateCompiledQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CreateCompiledQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCompiledQuery(Of TResult) (query As Expression) As Func(Of QueryContext, TResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiledQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Result&gt;&#xA;override this.CreateCompiledQuery : System.Linq.Expressions.Expression -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Result&gt;" Usage="queryCompiler.CreateCompiledQuery query" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.CreateCompiledQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.IDatabase Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IDatabase Database" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Database" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Database As IDatabase" />
      <MemberSignature Language="F#" Value="member this.Database : Microsoft.EntityFrameworkCore.Storage.IDatabase" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IDatabase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult Execute&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Execute(Of TResult) (query As Expression) As TResult" />
      <MemberSignature Language="F#" Value="abstract member Execute : System.Linq.Expressions.Expression -&gt; 'Result&#xA;override this.Execute : System.Linq.Expressions.Expression -&gt; 'Result" Usage="queryCompiler.Execute query" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; ExecuteAsync&lt;TResult&gt; (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; ExecuteAsync&lt;TResult&gt;(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteAsync(Of TResult) (query As Expression) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAsync : System.Linq.Expressions.Expression -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&#xA;override this.ExecuteAsync : System.Linq.Expressions.Expression -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="queryCompiler.ExecuteAsync query" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TResult&gt; (System.Linq.Expressions.Expression query, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TResult&gt;(class System.Linq.Expressions.Expression query, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteAsync(Of TResult) (query As Expression, cancellationToken As CancellationToken) As Task(Of TResult)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;&#xA;override this.ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="queryCompiler.ExecuteAsync (query, cancellationToken)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual TResult ExecuteAsync&lt;TResult&gt; (System.Linq.Expressions.Expression query, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult ExecuteAsync&lt;TResult&gt;(class System.Linq.Expressions.Expression query, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteAsync(Of TResult) (query As Expression, Optional cancellationToken As CancellationToken = Nothing) As TResult" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; 'Result&#xA;override this.ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; 'Result" Usage="queryCompiler.ExecuteAsync (query, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="query">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression query, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExtractParameters (query As Expression, queryContext As QueryContext) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.QueryContext -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.QueryContext -&gt; System.Linq.Expressions.Expression" Usage="queryCompiler.ExtractParameters (query, queryContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="queryContext">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, bool parameterize = true);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression query, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, bool parameterize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExtractParameters (query As Expression, queryContext As QueryContext, Optional parameterize As Boolean = true) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.QueryContext * bool -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.QueryContext * bool -&gt; System.Linq.Expressions.Expression" Usage="queryCompiler.ExtractParameters (query, queryContext, parameterize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" Index="1" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="parameterize" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="parameterize">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger, bool parameterize = true, bool generateContextAccessors = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression query, class Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger, bool parameterize, bool generateContextAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtractParameters (query As Expression, parameterValues As IParameterValues, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query), Optional parameterize As Boolean = true, Optional generateContextAccessors As Boolean = false) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * bool * bool -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * bool * bool -&gt; System.Linq.Expressions.Expression" Usage="queryCompiler.ExtractParameters (query, parameterValues, logger, parameterize, generateContextAccessors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="parameterValues" Type="Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="parameterize" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="generateContextAccessors" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="parameterValues">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="parameterize">To be added.</param>
        <param name="generateContextAccessors">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Query.IParameterValues parameterValues, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger, bool parameterize = true, bool generateContextAccessors = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression query, class Microsoft.EntityFrameworkCore.Query.IParameterValues parameterValues, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger, bool parameterize, bool generateContextAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.IParameterValues,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtractParameters (query As Expression, parameterValues As IParameterValues, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query), Optional parameterize As Boolean = true, Optional generateContextAccessors As Boolean = false) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.IParameterValues * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * bool * bool -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.IParameterValues * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * bool * bool -&gt; System.Linq.Expressions.Expression" Usage="queryCompiler.ExtractParameters (query, parameterValues, logger, parameterize, generateContextAccessors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="parameterValues" Type="Microsoft.EntityFrameworkCore.Query.IParameterValues" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="parameterize" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="generateContextAccessors" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <param name="parameterValues">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="parameterize">To be added.</param>
        <param name="generateContextAccessors">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
