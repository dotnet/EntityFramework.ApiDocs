<Type Name="ExpressionTreeFuncletizer" FullName="Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer">
  <TypeSignature Language="C#" Value="public class ExpressionTreeFuncletizer : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExpressionTreeFuncletizer extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionTreeFuncletizer&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type ExpressionTreeFuncletizer = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This visitor identifies subtrees in the query which can be evaluated client-side (i.e. no reference to server-side resources),
                and evaluates those subtrees, integrating the result either as a constant (if the subtree contained no captured closure variables),
                or as parameters.
            </summary>
    <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionTreeFuncletizer (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter evaluatableExpressionFilter, Type contextType, bool generateContextAccessors, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter evaluatableExpressionFilter, class System.Type contextType, bool generateContextAccessors, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter,System.Type,System.Boolean,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (model As IModel, evaluatableExpressionFilter As IEvaluatableExpressionFilter, contextType As Type, generateContextAccessors As Boolean, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter * Type * bool * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; -&gt; Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer (model, evaluatableExpressionFilter, contextType, generateContextAccessors, logger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="evaluatableExpressionFilter" Type="Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter" />
        <Parameter Name="contextType" Type="System.Type" />
        <Parameter Name="generateContextAccessors" Type="System.Boolean" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="evaluatableExpressionFilter">To be added.</param>
        <param name="contextType">To be added.</param>
        <param name="generateContextAccessors">To be added.</param>
        <param name="logger">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculatePathsToEvaluatableRoots">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.PathNode? CalculatePathsToEvaluatableRoots (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer/PathNode CalculatePathsToEvaluatableRoots(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.CalculatePathsToEvaluatableRoots(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CalculatePathsToEvaluatableRoots (expression As Expression) As ExpressionTreeFuncletizer.PathNode" />
      <MemberSignature Language="F#" Value="abstract member CalculatePathsToEvaluatableRoots : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.PathNode&#xA;override this.CalculatePathsToEvaluatableRoots : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.PathNode" Usage="expressionTreeFuncletizer.CalculatePathsToEvaluatableRoots expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EF9100")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EF9100")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer+PathNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                Processes an expression tree, locates references to captured variables and returns information on how to extract them from
                expression trees with the same shape. Used to generate C# code for query precompilation.
            </summary>
        <returns>A tree representing the path to each evaluatable root node in the tree.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculatePathsToEvaluatableRoots">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.PathNode? CalculatePathsToEvaluatableRoots (System.Linq.Expressions.MethodCallExpression linqOperatorMethodCall, int argumentIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer/PathNode CalculatePathsToEvaluatableRoots(class System.Linq.Expressions.MethodCallExpression linqOperatorMethodCall, int32 argumentIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.CalculatePathsToEvaluatableRoots(System.Linq.Expressions.MethodCallExpression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CalculatePathsToEvaluatableRoots (linqOperatorMethodCall As MethodCallExpression, argumentIndex As Integer) As ExpressionTreeFuncletizer.PathNode" />
      <MemberSignature Language="F#" Value="abstract member CalculatePathsToEvaluatableRoots : System.Linq.Expressions.MethodCallExpression * int -&gt; Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.PathNode&#xA;override this.CalculatePathsToEvaluatableRoots : System.Linq.Expressions.MethodCallExpression * int -&gt; Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.PathNode" Usage="expressionTreeFuncletizer.CalculatePathsToEvaluatableRoots (linqOperatorMethodCall, argumentIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EF9100")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EF9100")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer+PathNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linqOperatorMethodCall" Type="System.Linq.Expressions.MethodCallExpression" />
        <Parameter Name="argumentIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="linqOperatorMethodCall">To be added.</param>
        <param name="argumentIndex">To be added.</param>
        <summary>
                Processes an expression tree, locates references to captured variables and returns information on how to extract them from
                expression trees with the same shape. Used to generate C# code for query precompilation.
            </summary>
        <returns>A tree representing the path to each evaluatable root node in the tree.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression expression, Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, bool parameterize, bool clearParameterizedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression expression, class Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, bool parameterize, bool clearParameterizedValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtractParameters (expression As Expression, parameterValues As IParameterValues, parameterize As Boolean, clearParameterizedValues As Boolean) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues * bool * bool -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues * bool * bool -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.ExtractParameters (expression, parameterValues, parameterize, clearParameterizedValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameterValues" Type="Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues" />
        <Parameter Name="parameterize" Type="System.Boolean" />
        <Parameter Name="clearParameterizedValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="parameterValues">To be added.</param>
        <param name="parameterize">To be added.</param>
        <param name="clearParameterizedValues">To be added.</param>
        <summary>
                Processes an expression tree, extracting parameters and evaluating evaluatable fragments as part of the pass.
                Used for regular query execution (neither compiled nor pre-compiled).
            </summary>
        <returns>To be added.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression expression, Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, bool parameterize, bool clearParameterizedValues, bool precompiledQuery, out System.Collections.Generic.IReadOnlySet&lt;string&gt; nonNullableReferenceTypeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression expression, class Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues parameterValues, bool parameterize, bool clearParameterizedValues, bool precompiledQuery, [out] class System.Collections.Generic.IReadOnlySet`1&lt;string&gt;&amp; nonNullableReferenceTypeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlySet{System.String}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtractParameters (expression As Expression, parameterValues As IParameterValues, parameterize As Boolean, clearParameterizedValues As Boolean, precompiledQuery As Boolean, ByRef nonNullableReferenceTypeParameters As IReadOnlySet(Of String)) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues * bool * bool * bool * IReadOnlySet -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractParameters : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues * bool * bool * bool * IReadOnlySet -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.ExtractParameters (expression, parameterValues, parameterize, clearParameterizedValues, precompiledQuery, nonNullableReferenceTypeParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EF9100")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EF9100")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameterValues" Type="Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues" />
        <Parameter Name="parameterize" Type="System.Boolean" />
        <Parameter Name="clearParameterizedValues" Type="System.Boolean" />
        <Parameter Name="precompiledQuery" Type="System.Boolean" />
        <Parameter Name="nonNullableReferenceTypeParameters" Type="System.Collections.Generic.IReadOnlySet&lt;System.String&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="parameterValues">To be added.</param>
        <param name="parameterize">To be added.</param>
        <param name="clearParameterizedValues">To be added.</param>
        <param name="precompiledQuery">To be added.</param>
        <param name="nonNullableReferenceTypeParameters">To be added.</param>
        <summary>
                Processes an expression tree, extracting parameters and evaluating evaluatable fragments as part of the pass.
                Used for regular query execution (neither compiled nor pre-compiled).
            </summary>
        <returns>To be added.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetPathCalculation">
      <MemberSignature Language="C#" Value="public virtual void ResetPathCalculation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetPathCalculation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.ResetPathCalculation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetPathCalculation ()" />
      <MemberSignature Language="F#" Value="abstract member ResetPathCalculation : unit -&gt; unit&#xA;override this.ResetPathCalculation : unit -&gt; unit" Usage="expressionTreeFuncletizer.ResetPathCalculation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EF9100")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EF9100")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Resets the funcletizer in preparation for multiple path calculations (i.e. for the same query). After this is called,
                <see cref="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.CalculatePathsToEvaluatableRoots(System.Linq.Expressions.MethodCallExpression,System.Int32)" /> can be called multiple times, preserving state
                between calls.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression? Visit (System.Linq.Expressions.Expression? expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Visit(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.Visit(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Visit (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.Visit : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.Visit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullIfNotNull("expression")]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullIfNotNull("expression")&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression binary);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression binary) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitBinary (binary As BinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitBinary binary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binary" Type="System.Linq.Expressions.BinaryExpression" />
      </Parameters>
      <Docs>
        <param name="binary">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBlock">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBlock (System.Linq.Expressions.BlockExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBlock(class System.Linq.Expressions.BlockExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitBlock(System.Linq.Expressions.BlockExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitBlock (node As BlockExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitBlock : System.Linq.Expressions.BlockExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitBlock node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.BlockExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchBlock">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.CatchBlock VisitCatchBlock (System.Linq.Expressions.CatchBlock node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.CatchBlock VisitCatchBlock(class System.Linq.Expressions.CatchBlock node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitCatchBlock(System.Linq.Expressions.CatchBlock)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCatchBlock (node As CatchBlock) As CatchBlock" />
      <MemberSignature Language="F#" Value="override this.VisitCatchBlock : System.Linq.Expressions.CatchBlock -&gt; System.Linq.Expressions.CatchBlock" Usage="expressionTreeFuncletizer.VisitCatchBlock node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.CatchBlock" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditional">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConditional (System.Linq.Expressions.ConditionalExpression conditional);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConditional(class System.Linq.Expressions.ConditionalExpression conditional) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConditional (conditional As ConditionalExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitConditional : System.Linq.Expressions.ConditionalExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitConditional conditional" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditional" Type="System.Linq.Expressions.ConditionalExpression" />
      </Parameters>
      <Docs>
        <param name="conditional">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstant">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConstant (System.Linq.Expressions.ConstantExpression constant);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConstant(class System.Linq.Expressions.ConstantExpression constant) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConstant (constant As ConstantExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitConstant constant" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constant" Type="System.Linq.Expressions.ConstantExpression" />
      </Parameters>
      <Docs>
        <param name="constant">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDebugInfo">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitDebugInfo (System.Linq.Expressions.DebugInfoExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitDebugInfo(class System.Linq.Expressions.DebugInfoExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitDebugInfo (node As DebugInfoExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitDebugInfo : System.Linq.Expressions.DebugInfoExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitDebugInfo node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.DebugInfoExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDefault">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitDefault (System.Linq.Expressions.DefaultExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitDefault(class System.Linq.Expressions.DefaultExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitDefault(System.Linq.Expressions.DefaultExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitDefault (node As DefaultExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitDefault : System.Linq.Expressions.DefaultExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitDefault node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.DefaultExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDynamic">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitDynamic (System.Linq.Expressions.DynamicExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitDynamic(class System.Linq.Expressions.DynamicExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitDynamic(System.Linq.Expressions.DynamicExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitDynamic (node As DynamicExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitDynamic : System.Linq.Expressions.DynamicExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitDynamic node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.DynamicExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElementInit">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.ElementInit VisitElementInit (System.Linq.Expressions.ElementInit node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.ElementInit VisitElementInit(class System.Linq.Expressions.ElementInit node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitElementInit(System.Linq.Expressions.ElementInit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitElementInit (node As ElementInit) As ElementInit" />
      <MemberSignature Language="F#" Value="override this.VisitElementInit : System.Linq.Expressions.ElementInit -&gt; System.Linq.Expressions.ElementInit" Usage="expressionTreeFuncletizer.VisitElementInit node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.ElementInit" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression extension);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (extension As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="extension">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGoto">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitGoto (System.Linq.Expressions.GotoExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitGoto(class System.Linq.Expressions.GotoExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitGoto(System.Linq.Expressions.GotoExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitGoto (node As GotoExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitGoto : System.Linq.Expressions.GotoExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitGoto node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.GotoExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIndex">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitIndex (System.Linq.Expressions.IndexExpression index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitIndex(class System.Linq.Expressions.IndexExpression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitIndex(System.Linq.Expressions.IndexExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitIndex (index As IndexExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitIndex : System.Linq.Expressions.IndexExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Linq.Expressions.IndexExpression" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInvocation">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitInvocation (System.Linq.Expressions.InvocationExpression invocation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitInvocation(class System.Linq.Expressions.InvocationExpression invocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitInvocation(System.Linq.Expressions.InvocationExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitInvocation (invocation As InvocationExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitInvocation : System.Linq.Expressions.InvocationExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitInvocation invocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invocation" Type="System.Linq.Expressions.InvocationExpression" />
      </Parameters>
      <Docs>
        <param name="invocation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLabel">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLabel (System.Linq.Expressions.LabelExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLabel(class System.Linq.Expressions.LabelExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitLabel(System.Linq.Expressions.LabelExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLabel (node As LabelExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLabel : System.Linq.Expressions.LabelExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitLabel node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.LabelExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLabelTarget">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.LabelTarget VisitLabelTarget (System.Linq.Expressions.LabelTarget? node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.LabelTarget VisitLabelTarget(class System.Linq.Expressions.LabelTarget node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitLabelTarget(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLabelTarget (node As LabelTarget) As LabelTarget" />
      <MemberSignature Language="F#" Value="override this.VisitLabelTarget : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LabelTarget" Usage="expressionTreeFuncletizer.VisitLabelTarget node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLambda&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLambda&lt;T&gt; (System.Linq.Expressions.Expression&lt;T&gt; lambda);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLambda&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;!!T&gt; lambda) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitLambda``1(System.Linq.Expressions.Expression{``0})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLambda(Of T) (lambda As Expression(Of T)) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLambda : System.Linq.Expressions.Expression&lt;'T&gt; -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitLambda lambda" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Linq.Expressions.Expression&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="lambda">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitListInit">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitListInit (System.Linq.Expressions.ListInitExpression listInit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitListInit(class System.Linq.Expressions.ListInitExpression listInit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitListInit(System.Linq.Expressions.ListInitExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitListInit (listInit As ListInitExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitListInit : System.Linq.Expressions.ListInitExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitListInit listInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listInit" Type="System.Linq.Expressions.ListInitExpression" />
      </Parameters>
      <Docs>
        <param name="listInit">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLoop">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLoop (System.Linq.Expressions.LoopExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLoop(class System.Linq.Expressions.LoopExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitLoop(System.Linq.Expressions.LoopExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLoop (node As LoopExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLoop : System.Linq.Expressions.LoopExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitLoop node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.LoopExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMember">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMember (System.Linq.Expressions.MemberExpression member);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMember(class System.Linq.Expressions.MemberExpression member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitMember(System.Linq.Expressions.MemberExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMember (member As MemberExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMember : System.Linq.Expressions.MemberExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitMember member" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Linq.Expressions.MemberExpression" />
      </Parameters>
      <Docs>
        <param name="member">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberInit">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMemberInit (System.Linq.Expressions.MemberInitExpression memberInit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMemberInit(class System.Linq.Expressions.MemberInitExpression memberInit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMemberInit (memberInit As MemberInitExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMemberInit : System.Linq.Expressions.MemberInitExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitMemberInit memberInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInit" Type="System.Linq.Expressions.MemberInitExpression" />
      </Parameters>
      <Docs>
        <param name="memberInit">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberListBinding">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.MemberListBinding VisitMemberListBinding (System.Linq.Expressions.MemberListBinding node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.MemberListBinding VisitMemberListBinding(class System.Linq.Expressions.MemberListBinding node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMemberListBinding (node As MemberListBinding) As MemberListBinding" />
      <MemberSignature Language="F#" Value="override this.VisitMemberListBinding : System.Linq.Expressions.MemberListBinding -&gt; System.Linq.Expressions.MemberListBinding" Usage="expressionTreeFuncletizer.VisitMemberListBinding node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MemberListBinding" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberMemberBinding">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.MemberMemberBinding VisitMemberMemberBinding (System.Linq.Expressions.MemberMemberBinding node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.MemberMemberBinding VisitMemberMemberBinding(class System.Linq.Expressions.MemberMemberBinding node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMemberMemberBinding (node As MemberMemberBinding) As MemberMemberBinding" />
      <MemberSignature Language="F#" Value="override this.VisitMemberMemberBinding : System.Linq.Expressions.MemberMemberBinding -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="expressionTreeFuncletizer.VisitMemberMemberBinding node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MemberMemberBinding" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCall);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression methodCall) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMethodCall (methodCall As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitMethodCall methodCall" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCall" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCall">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNew">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitNew (System.Linq.Expressions.NewExpression new);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitNew(class System.Linq.Expressions.NewExpression new) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitNew(System.Linq.Expressions.NewExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitNew (new As NewExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitNew : System.Linq.Expressions.NewExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitNew new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="new" Type="System.Linq.Expressions.NewExpression" />
      </Parameters>
      <Docs>
        <param name="new">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNewArray">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitNewArray (System.Linq.Expressions.NewArrayExpression newArray);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitNewArray(class System.Linq.Expressions.NewArrayExpression newArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitNewArray(System.Linq.Expressions.NewArrayExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitNewArray (newArray As NewArrayExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitNewArray : System.Linq.Expressions.NewArrayExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitNewArray newArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newArray" Type="System.Linq.Expressions.NewArrayExpression" />
      </Parameters>
      <Docs>
        <param name="newArray">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParameter">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitParameter (System.Linq.Expressions.ParameterExpression parameterExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitParameter(class System.Linq.Expressions.ParameterExpression parameterExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitParameter(System.Linq.Expressions.ParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitParameter (parameterExpression As ParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitParameter : System.Linq.Expressions.ParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitParameter parameterExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterExpression" Type="System.Linq.Expressions.ParameterExpression" />
      </Parameters>
      <Docs>
        <param name="parameterExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRuntimeVariables">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitRuntimeVariables (System.Linq.Expressions.RuntimeVariablesExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitRuntimeVariables(class System.Linq.Expressions.RuntimeVariablesExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitRuntimeVariables (node As RuntimeVariablesExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitRuntimeVariables : System.Linq.Expressions.RuntimeVariablesExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitRuntimeVariables node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.RuntimeVariablesExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSwitch">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSwitch (System.Linq.Expressions.SwitchExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSwitch(class System.Linq.Expressions.SwitchExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitSwitch(System.Linq.Expressions.SwitchExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSwitch (node As SwitchExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSwitch : System.Linq.Expressions.SwitchExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitSwitch node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.SwitchExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSwitchCase">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.SwitchCase VisitSwitchCase (System.Linq.Expressions.SwitchCase node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.SwitchCase VisitSwitchCase(class System.Linq.Expressions.SwitchCase node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitSwitchCase(System.Linq.Expressions.SwitchCase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSwitchCase (node As SwitchCase) As SwitchCase" />
      <MemberSignature Language="F#" Value="override this.VisitSwitchCase : System.Linq.Expressions.SwitchCase -&gt; System.Linq.Expressions.SwitchCase" Usage="expressionTreeFuncletizer.VisitSwitchCase node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.SwitchCase" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTry">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitTry (System.Linq.Expressions.TryExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitTry(class System.Linq.Expressions.TryExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitTry(System.Linq.Expressions.TryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitTry (node As TryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitTry : System.Linq.Expressions.TryExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitTry node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.TryExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitTypeBinary (System.Linq.Expressions.TypeBinaryExpression typeBinary);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitTypeBinary(class System.Linq.Expressions.TypeBinaryExpression typeBinary) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitTypeBinary (typeBinary As TypeBinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitTypeBinary : System.Linq.Expressions.TypeBinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitTypeBinary typeBinary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBinary" Type="System.Linq.Expressions.TypeBinaryExpression" />
      </Parameters>
      <Docs>
        <param name="typeBinary">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUnary (System.Linq.Expressions.UnaryExpression unary);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUnary(class System.Linq.Expressions.UnaryExpression unary) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ExpressionTreeFuncletizer.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitUnary (unary As UnaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitUnary : System.Linq.Expressions.UnaryExpression -&gt; System.Linq.Expressions.Expression" Usage="expressionTreeFuncletizer.VisitUnary unary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unary" Type="System.Linq.Expressions.UnaryExpression" />
      </Parameters>
      <Docs>
        <param name="unary">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
