<Type Name="EnumHasFlagTranslator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator">
  <TypeSignature Language="C#" Value="public class EnumHasFlagTranslator : Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EnumHasFlagTranslator extends System.Object implements class Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator" />
  <TypeSignature Language="VB.NET" Value="Public Class EnumHasFlagTranslator&#xA;Implements IMethodCallTranslator" />
  <TypeSignature Language="F#" Value="type EnumHasFlagTranslator = class&#xA;    interface IMethodCallTranslator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumHasFlagTranslator (Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sqlExpressionFactory As ISqlExpressionFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator sqlExpressionFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Translate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Translate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (instance As SqlExpression, method As MethodInfo, arguments As IReadOnlyList(Of SqlExpression)) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Translate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Reflection.MethodInfo * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.Translate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Reflection.MethodInfo * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="enumHasFlagTranslator.Translate (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="instance">To be added.</param>
        <param name="method">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Translate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Translate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (instance As SqlExpression, method As MethodInfo, arguments As IReadOnlyList(Of SqlExpression), logger As IDiagnosticsLogger(Of DbLoggerCategory.Query)) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Translate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Reflection.MethodInfo * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.Translate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Reflection.MethodInfo * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="enumHasFlagTranslator.Translate (instance, method, arguments, logger)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? Translate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? instance, System.Reflection.MethodInfo method, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="instance">To be added.</param>
        <param name="method">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="logger">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
