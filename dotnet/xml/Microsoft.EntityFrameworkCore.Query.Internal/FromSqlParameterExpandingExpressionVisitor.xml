<Type Name="FromSqlParameterExpandingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class FromSqlParameterExpandingExpressionVisitor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FromSqlParameterExpandingExpressionVisitor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class FromSqlParameterExpandingExpressionVisitor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type FromSqlParameterExpandingExpressionVisitor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FromSqlParameterExpandingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As RelationalParameterBasedSqlProcessorDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies -&gt; Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As RelationalParameterBasedSqlProcessorDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies" Usage="Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expand">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Expand (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, System.Collections.Generic.IReadOnlyDictionary&lt;string,object&gt; parameterValues, out bool canCache);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Expand(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parameterValues, [out] bool&amp; canCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor.Expand(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Expand (selectExpression As SelectExpression, parameterValues As IReadOnlyDictionary(Of String, Object), ByRef canCache As Boolean) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member Expand : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression&#xA;override this.Expand : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="fromSqlParameterExpandingExpressionVisitor.Expand (selectExpression, parameterValues, canCache)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Expand (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, System.Collections.Generic.IReadOnlyDictionary&lt;string,object?&gt; parameterValues, out bool canCache);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="parameterValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="canCache" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="parameterValues">To be added.</param>
        <param name="canCache">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expand">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Expand (System.Linq.Expressions.Expression queryExpression, System.Collections.Generic.IReadOnlyDictionary&lt;string,object?&gt; parameterValues, out bool canCache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Expand(class System.Linq.Expressions.Expression queryExpression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parameterValues, [out] bool&amp; canCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor.Expand(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Expand (queryExpression As Expression, parameterValues As IReadOnlyDictionary(Of String, Object), ByRef canCache As Boolean) As Expression" />
      <MemberSignature Language="F#" Value="abstract member Expand : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; * bool -&gt; System.Linq.Expressions.Expression&#xA;override this.Expand : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; * bool -&gt; System.Linq.Expressions.Expression" Usage="fromSqlParameterExpandingExpressionVisitor.Expand (queryExpression, parameterValues, canCache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="parameterValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="canCache" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="queryExpression">To be added.</param>
        <param name="parameterValues">To be added.</param>
        <param name="canCache">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Visit (System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Visit(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Visit (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.Visit : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="fromSqlParameterExpandingExpressionVisitor.Visit expression" />
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression? Visit (System.Linq.Expressions.Expression? expression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
