<Type Name="LinqToCSharpSyntaxTranslator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator">
  <TypeSignature Language="C#" Value="public class LinqToCSharpSyntaxTranslator : System.Linq.Expressions.ExpressionVisitor, Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqToCSharpSyntaxTranslator extends System.Linq.Expressions.ExpressionVisitor implements class Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqToCSharpSyntaxTranslator&#xA;Inherits ExpressionVisitor&#xA;Implements ILinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="F#" Value="type LinqToCSharpSyntaxTranslator = class&#xA;    inherit ExpressionVisitor&#xA;    interface ILinqToCSharpSyntaxTranslator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqToCSharpSyntaxTranslator (Microsoft.CodeAnalysis.Editing.SyntaxGenerator syntaxGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.CodeAnalysis.Editing.SyntaxGenerator syntaxGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.#ctor(Microsoft.CodeAnalysis.Editing.SyntaxGenerator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (syntaxGenerator As SyntaxGenerator)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator : Microsoft.CodeAnalysis.Editing.SyntaxGenerator -&gt; Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator syntaxGenerator" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="syntaxGenerator" Type="Microsoft.CodeAnalysis.Editing.SyntaxGenerator" />
      </Parameters>
      <Docs>
        <param name="syntaxGenerator">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapturedVariables">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlySet&lt;System.Linq.Expressions.ParameterExpression&gt; CapturedVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlySet`1&lt;class System.Linq.Expressions.ParameterExpression&gt; CapturedVariables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.CapturedVariables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CapturedVariables As IReadOnlySet(Of ParameterExpression)" />
      <MemberSignature Language="F#" Value="member this.CapturedVariables : System.Collections.Generic.IReadOnlySet&lt;System.Linq.Expressions.ParameterExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.CapturedVariables" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator.CapturedVariables</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlySet&lt;System.Linq.Expressions.ParameterExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.CodeAnalysis.SyntaxNode? Result { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.SyntaxNode Result" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.Result" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property Result As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.Result : Microsoft.CodeAnalysis.SyntaxNode with get, set" Usage="Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.CodeAnalysis.SyntaxNode? Translate (System.Linq.Expressions.Expression? node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode Translate(class System.Linq.Expressions.Expression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.Translate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Translate (node As Expression) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member Translate : System.Linq.Expressions.Expression -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.Translate : System.Linq.Expressions.Expression -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="linqToCSharpSyntaxTranslator.Translate node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullIfNotNull("node")]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullIfNotNull("node")&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax Translate (System.Linq.Expressions.Expression expression, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax? lowerableAssignmentVariable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax Translate(class System.Linq.Expressions.Expression expression, class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax lowerableAssignmentVariable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.Translate(System.Linq.Expressions.Expression,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Translate (expression As Expression, lowerableAssignmentVariable As IdentifierNameSyntax) As ExpressionSyntax" />
      <MemberSignature Language="F#" Value="abstract member Translate : System.Linq.Expressions.Expression * Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&#xA;override this.Translate : System.Linq.Expressions.Expression * Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" Usage="linqToCSharpSyntaxTranslator.Translate (expression, lowerableAssignmentVariable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="lowerableAssignmentVariable" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="lowerableAssignmentVariable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected virtual T Translate&lt;T&gt; (System.Linq.Expressions.Expression? node) where T : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !!T Translate&lt;(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode) T&gt;(class System.Linq.Expressions.Expression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.Translate``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Translate(Of T As CSharpSyntaxNode) (node As Expression) As T" />
      <MemberSignature Language="F#" Value="abstract member Translate : System.Linq.Expressions.Expression -&gt; 'T (requires 'T :&gt; Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)&#xA;override this.Translate : System.Linq.Expressions.Expression -&gt; 'T (requires 'T :&gt; Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" Usage="linqToCSharpSyntaxTranslator.Translate node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateCatchBlock">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.CodeAnalysis.SyntaxNode TranslateCatchBlock (System.Linq.Expressions.CatchBlock catchBlock, bool noType = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TranslateCatchBlock(class System.Linq.Expressions.CatchBlock catchBlock, bool noType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.TranslateCatchBlock(System.Linq.Expressions.CatchBlock,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateCatchBlock (catchBlock As CatchBlock, Optional noType As Boolean = false) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TranslateCatchBlock : System.Linq.Expressions.CatchBlock * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.TranslateCatchBlock : System.Linq.Expressions.CatchBlock * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="linqToCSharpSyntaxTranslator.TranslateCatchBlock (catchBlock, noType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catchBlock" Type="System.Linq.Expressions.CatchBlock" />
        <Parameter Name="noType" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="catchBlock">To be added.</param>
        <param name="noType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateConditional">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode TranslateConditional (System.Linq.Expressions.ConditionalExpression conditional, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax? lowerableAssignmentVariable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode TranslateConditional(class System.Linq.Expressions.ConditionalExpression conditional, class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax lowerableAssignmentVariable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.TranslateConditional(System.Linq.Expressions.ConditionalExpression,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateConditional (conditional As ConditionalExpression, lowerableAssignmentVariable As IdentifierNameSyntax) As CSharpSyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TranslateConditional : System.Linq.Expressions.ConditionalExpression * Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode&#xA;override this.TranslateConditional : System.Linq.Expressions.ConditionalExpression * Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" Usage="linqToCSharpSyntaxTranslator.TranslateConditional (conditional, lowerableAssignmentVariable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditional" Type="System.Linq.Expressions.ConditionalExpression" />
        <Parameter Name="lowerableAssignmentVariable" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="conditional">To be added.</param>
        <param name="lowerableAssignmentVariable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateCore">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.CodeAnalysis.SyntaxNode TranslateCore (System.Linq.Expressions.Expression node, System.Collections.Generic.ISet&lt;string&gt; collectedNamespaces, bool statementContext = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TranslateCore(class System.Linq.Expressions.Expression node, class System.Collections.Generic.ISet`1&lt;string&gt; collectedNamespaces, bool statementContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.TranslateCore(System.Linq.Expressions.Expression,System.Collections.Generic.ISet{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateCore (node As Expression, collectedNamespaces As ISet(Of String), Optional statementContext As Boolean = false) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TranslateCore : System.Linq.Expressions.Expression * System.Collections.Generic.ISet&lt;string&gt; * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.TranslateCore : System.Linq.Expressions.Expression * System.Collections.Generic.ISet&lt;string&gt; * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="linqToCSharpSyntaxTranslator.TranslateCore (node, collectedNamespaces, statementContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="collectedNamespaces" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
        <Parameter Name="statementContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="collectedNamespaces">To be added.</param>
        <param name="statementContext">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateExpression">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode TranslateExpression (System.Linq.Expressions.Expression node, System.Collections.Generic.ISet&lt;string&gt; collectedNamespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TranslateExpression(class System.Linq.Expressions.Expression node, class System.Collections.Generic.ISet`1&lt;string&gt; collectedNamespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.TranslateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.ISet{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateExpression (node As Expression, collectedNamespaces As ISet(Of String)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TranslateExpression : System.Linq.Expressions.Expression * System.Collections.Generic.ISet&lt;string&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.TranslateExpression : System.Linq.Expressions.Expression * System.Collections.Generic.ISet&lt;string&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="linqToCSharpSyntaxTranslator.TranslateExpression (node, collectedNamespaces)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator.TranslateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.ISet{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="collectedNamespaces" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="collectedNamespaces">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateLabelTarget">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax TranslateLabelTarget (System.Linq.Expressions.LabelTarget labelTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax TranslateLabelTarget(class System.Linq.Expressions.LabelTarget labelTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.TranslateLabelTarget(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateLabelTarget (labelTarget As LabelTarget) As IdentifierNameSyntax" />
      <MemberSignature Language="F#" Value="abstract member TranslateLabelTarget : System.Linq.Expressions.LabelTarget -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax&#xA;override this.TranslateLabelTarget : System.Linq.Expressions.LabelTarget -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" Usage="linqToCSharpSyntaxTranslator.TranslateLabelTarget labelTarget" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelTarget" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="labelTarget">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateStatement">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode TranslateStatement (System.Linq.Expressions.Expression node, System.Collections.Generic.ISet&lt;string&gt; collectedNamespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TranslateStatement(class System.Linq.Expressions.Expression node, class System.Collections.Generic.ISet`1&lt;string&gt; collectedNamespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.TranslateStatement(System.Linq.Expressions.Expression,System.Collections.Generic.ISet{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateStatement (node As Expression, collectedNamespaces As ISet(Of String)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TranslateStatement : System.Linq.Expressions.Expression * System.Collections.Generic.ISet&lt;string&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.TranslateStatement : System.Linq.Expressions.Expression * System.Collections.Generic.ISet&lt;string&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="linqToCSharpSyntaxTranslator.TranslateStatement (node, collectedNamespaces)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator.TranslateStatement(System.Linq.Expressions.Expression,System.Collections.Generic.ISet{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="collectedNamespaces" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="collectedNamespaces">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSwitch">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode TranslateSwitch (System.Linq.Expressions.SwitchExpression switchNode, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax? lowerableAssignmentVariable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode TranslateSwitch(class System.Linq.Expressions.SwitchExpression switchNode, class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax lowerableAssignmentVariable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.TranslateSwitch(System.Linq.Expressions.SwitchExpression,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateSwitch (switchNode As SwitchExpression, lowerableAssignmentVariable As IdentifierNameSyntax) As CSharpSyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TranslateSwitch : System.Linq.Expressions.SwitchExpression * Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode&#xA;override this.TranslateSwitch : System.Linq.Expressions.SwitchExpression * Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" Usage="linqToCSharpSyntaxTranslator.TranslateSwitch (switchNode, lowerableAssignmentVariable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchNode" Type="System.Linq.Expressions.SwitchExpression" />
        <Parameter Name="lowerableAssignmentVariable" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="switchNode">To be added.</param>
        <param name="lowerableAssignmentVariable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression? Visit (System.Linq.Expressions.Expression? node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Visit(class System.Linq.Expressions.Expression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.Visit(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Visit (node As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.Visit : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.Visit node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullIfNotNull("node")]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullIfNotNull("node")&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression binary);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression binary) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitBinary (binary As BinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitBinary binary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binary" Type="System.Linq.Expressions.BinaryExpression" />
      </Parameters>
      <Docs>
        <param name="binary">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitBlock">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBlock (System.Linq.Expressions.BlockExpression block);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBlock(class System.Linq.Expressions.BlockExpression block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitBlock(System.Linq.Expressions.BlockExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitBlock (block As BlockExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitBlock : System.Linq.Expressions.BlockExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitBlock block" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="System.Linq.Expressions.BlockExpression" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitCatchBlock">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.CatchBlock VisitCatchBlock (System.Linq.Expressions.CatchBlock catchBlock);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.CatchBlock VisitCatchBlock(class System.Linq.Expressions.CatchBlock catchBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitCatchBlock(System.Linq.Expressions.CatchBlock)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCatchBlock (catchBlock As CatchBlock) As CatchBlock" />
      <MemberSignature Language="F#" Value="override this.VisitCatchBlock : System.Linq.Expressions.CatchBlock -&gt; System.Linq.Expressions.CatchBlock" Usage="linqToCSharpSyntaxTranslator.VisitCatchBlock catchBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catchBlock" Type="System.Linq.Expressions.CatchBlock" />
      </Parameters>
      <Docs>
        <param name="catchBlock">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitConditional">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConditional (System.Linq.Expressions.ConditionalExpression conditional);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConditional(class System.Linq.Expressions.ConditionalExpression conditional) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConditional (conditional As ConditionalExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitConditional : System.Linq.Expressions.ConditionalExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitConditional conditional" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditional" Type="System.Linq.Expressions.ConditionalExpression" />
      </Parameters>
      <Docs>
        <param name="conditional">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitConstant">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConstant (System.Linq.Expressions.ConstantExpression constant);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConstant(class System.Linq.Expressions.ConstantExpression constant) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConstant (constant As ConstantExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitConstant constant" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constant" Type="System.Linq.Expressions.ConstantExpression" />
      </Parameters>
      <Docs>
        <param name="constant">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitDebugInfo">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitDebugInfo (System.Linq.Expressions.DebugInfoExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitDebugInfo(class System.Linq.Expressions.DebugInfoExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitDebugInfo (node As DebugInfoExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitDebugInfo : System.Linq.Expressions.DebugInfoExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitDebugInfo node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.DebugInfoExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitDefault">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitDefault (System.Linq.Expressions.DefaultExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitDefault(class System.Linq.Expressions.DefaultExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitDefault(System.Linq.Expressions.DefaultExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitDefault (node As DefaultExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitDefault : System.Linq.Expressions.DefaultExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitDefault node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.DefaultExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitElementInit">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.ElementInit VisitElementInit (System.Linq.Expressions.ElementInit elementInit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.ElementInit VisitElementInit(class System.Linq.Expressions.ElementInit elementInit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitElementInit(System.Linq.Expressions.ElementInit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitElementInit (elementInit As ElementInit) As ElementInit" />
      <MemberSignature Language="F#" Value="override this.VisitElementInit : System.Linq.Expressions.ElementInit -&gt; System.Linq.Expressions.ElementInit" Usage="linqToCSharpSyntaxTranslator.VisitElementInit elementInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementInit" Type="System.Linq.Expressions.ElementInit" />
      </Parameters>
      <Docs>
        <param name="elementInit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (node As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitExtension node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGoto">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitGoto (System.Linq.Expressions.GotoExpression gotoNode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitGoto(class System.Linq.Expressions.GotoExpression gotoNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitGoto(System.Linq.Expressions.GotoExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitGoto (gotoNode As GotoExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitGoto : System.Linq.Expressions.GotoExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitGoto gotoNode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gotoNode" Type="System.Linq.Expressions.GotoExpression" />
      </Parameters>
      <Docs>
        <param name="gotoNode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitIndex">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitIndex (System.Linq.Expressions.IndexExpression index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitIndex(class System.Linq.Expressions.IndexExpression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitIndex(System.Linq.Expressions.IndexExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitIndex (index As IndexExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitIndex : System.Linq.Expressions.IndexExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Linq.Expressions.IndexExpression" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitInvocation">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitInvocation (System.Linq.Expressions.InvocationExpression invocation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitInvocation(class System.Linq.Expressions.InvocationExpression invocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitInvocation(System.Linq.Expressions.InvocationExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitInvocation (invocation As InvocationExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitInvocation : System.Linq.Expressions.InvocationExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitInvocation invocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invocation" Type="System.Linq.Expressions.InvocationExpression" />
      </Parameters>
      <Docs>
        <param name="invocation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitLabel">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLabel (System.Linq.Expressions.LabelExpression label);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLabel(class System.Linq.Expressions.LabelExpression label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitLabel(System.Linq.Expressions.LabelExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLabel (label As LabelExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLabel : System.Linq.Expressions.LabelExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitLabel label" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.Linq.Expressions.LabelExpression" />
      </Parameters>
      <Docs>
        <param name="label">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitLabelTarget">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.LabelTarget VisitLabelTarget (System.Linq.Expressions.LabelTarget? labelTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.LabelTarget VisitLabelTarget(class System.Linq.Expressions.LabelTarget labelTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitLabelTarget(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLabelTarget (labelTarget As LabelTarget) As LabelTarget" />
      <MemberSignature Language="F#" Value="override this.VisitLabelTarget : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LabelTarget" Usage="linqToCSharpSyntaxTranslator.VisitLabelTarget labelTarget" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelTarget" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="labelTarget">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitLambda&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLambda&lt;T&gt; (System.Linq.Expressions.Expression&lt;T&gt; lambda);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLambda&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;!!T&gt; lambda) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitLambda``1(System.Linq.Expressions.Expression{``0})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLambda(Of T) (lambda As Expression(Of T)) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLambda : System.Linq.Expressions.Expression&lt;'T&gt; -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitLambda lambda" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Linq.Expressions.Expression&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="lambda">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitListInit">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitListInit (System.Linq.Expressions.ListInitExpression listInit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitListInit(class System.Linq.Expressions.ListInitExpression listInit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitListInit(System.Linq.Expressions.ListInitExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitListInit (listInit As ListInitExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitListInit : System.Linq.Expressions.ListInitExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitListInit listInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listInit" Type="System.Linq.Expressions.ListInitExpression" />
      </Parameters>
      <Docs>
        <param name="listInit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitLoop">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLoop (System.Linq.Expressions.LoopExpression loop);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLoop(class System.Linq.Expressions.LoopExpression loop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitLoop(System.Linq.Expressions.LoopExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLoop (loop As LoopExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLoop : System.Linq.Expressions.LoopExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitLoop loop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loop" Type="System.Linq.Expressions.LoopExpression" />
      </Parameters>
      <Docs>
        <param name="loop">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitMember">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMember (System.Linq.Expressions.MemberExpression member);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMember(class System.Linq.Expressions.MemberExpression member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitMember(System.Linq.Expressions.MemberExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMember (member As MemberExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMember : System.Linq.Expressions.MemberExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitMember member" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Linq.Expressions.MemberExpression" />
      </Parameters>
      <Docs>
        <param name="member">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitMemberAssignment">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.MemberAssignment VisitMemberAssignment (System.Linq.Expressions.MemberAssignment memberAssignment);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.MemberAssignment VisitMemberAssignment(class System.Linq.Expressions.MemberAssignment memberAssignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMemberAssignment (memberAssignment As MemberAssignment) As MemberAssignment" />
      <MemberSignature Language="F#" Value="override this.VisitMemberAssignment : System.Linq.Expressions.MemberAssignment -&gt; System.Linq.Expressions.MemberAssignment" Usage="linqToCSharpSyntaxTranslator.VisitMemberAssignment memberAssignment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberAssignment" Type="System.Linq.Expressions.MemberAssignment" />
      </Parameters>
      <Docs>
        <param name="memberAssignment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitMemberInit">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMemberInit (System.Linq.Expressions.MemberInitExpression memberInit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMemberInit(class System.Linq.Expressions.MemberInitExpression memberInit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMemberInit (memberInit As MemberInitExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMemberInit : System.Linq.Expressions.MemberInitExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitMemberInit memberInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInit" Type="System.Linq.Expressions.MemberInitExpression" />
      </Parameters>
      <Docs>
        <param name="memberInit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitMemberListBinding">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.MemberListBinding VisitMemberListBinding (System.Linq.Expressions.MemberListBinding memberListBinding);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.MemberListBinding VisitMemberListBinding(class System.Linq.Expressions.MemberListBinding memberListBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMemberListBinding (memberListBinding As MemberListBinding) As MemberListBinding" />
      <MemberSignature Language="F#" Value="override this.VisitMemberListBinding : System.Linq.Expressions.MemberListBinding -&gt; System.Linq.Expressions.MemberListBinding" Usage="linqToCSharpSyntaxTranslator.VisitMemberListBinding memberListBinding" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberListBinding" Type="System.Linq.Expressions.MemberListBinding" />
      </Parameters>
      <Docs>
        <param name="memberListBinding">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitMemberMemberBinding">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.MemberMemberBinding VisitMemberMemberBinding (System.Linq.Expressions.MemberMemberBinding memberMemberBinding);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.MemberMemberBinding VisitMemberMemberBinding(class System.Linq.Expressions.MemberMemberBinding memberMemberBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMemberMemberBinding (memberMemberBinding As MemberMemberBinding) As MemberMemberBinding" />
      <MemberSignature Language="F#" Value="override this.VisitMemberMemberBinding : System.Linq.Expressions.MemberMemberBinding -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="linqToCSharpSyntaxTranslator.VisitMemberMemberBinding memberMemberBinding" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberMemberBinding" Type="System.Linq.Expressions.MemberMemberBinding" />
      </Parameters>
      <Docs>
        <param name="memberMemberBinding">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression call);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression call) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMethodCall (call As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitMethodCall call" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="call" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="call">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitNew">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitNew (System.Linq.Expressions.NewExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitNew(class System.Linq.Expressions.NewExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitNew(System.Linq.Expressions.NewExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitNew (node As NewExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitNew : System.Linq.Expressions.NewExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitNew node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.NewExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitNewArray">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitNewArray (System.Linq.Expressions.NewArrayExpression newArray);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitNewArray(class System.Linq.Expressions.NewArrayExpression newArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitNewArray(System.Linq.Expressions.NewArrayExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitNewArray (newArray As NewArrayExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitNewArray : System.Linq.Expressions.NewArrayExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitNewArray newArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newArray" Type="System.Linq.Expressions.NewArrayExpression" />
      </Parameters>
      <Docs>
        <param name="newArray">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitParameter">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitParameter (System.Linq.Expressions.ParameterExpression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitParameter(class System.Linq.Expressions.ParameterExpression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitParameter(System.Linq.Expressions.ParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitParameter (parameter As ParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitParameter : System.Linq.Expressions.ParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitParameter parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.ParameterExpression" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitRuntimeVariables">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitRuntimeVariables (System.Linq.Expressions.RuntimeVariablesExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitRuntimeVariables(class System.Linq.Expressions.RuntimeVariablesExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitRuntimeVariables (node As RuntimeVariablesExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitRuntimeVariables : System.Linq.Expressions.RuntimeVariablesExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitRuntimeVariables node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.RuntimeVariablesExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSwitch">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSwitch (System.Linq.Expressions.SwitchExpression switchNode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSwitch(class System.Linq.Expressions.SwitchExpression switchNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitSwitch(System.Linq.Expressions.SwitchExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSwitch (switchNode As SwitchExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSwitch : System.Linq.Expressions.SwitchExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitSwitch switchNode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchNode" Type="System.Linq.Expressions.SwitchExpression" />
      </Parameters>
      <Docs>
        <param name="switchNode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSwitchCase">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.SwitchCase VisitSwitchCase (System.Linq.Expressions.SwitchCase node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.SwitchCase VisitSwitchCase(class System.Linq.Expressions.SwitchCase node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitSwitchCase(System.Linq.Expressions.SwitchCase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSwitchCase (node As SwitchCase) As SwitchCase" />
      <MemberSignature Language="F#" Value="override this.VisitSwitchCase : System.Linq.Expressions.SwitchCase -&gt; System.Linq.Expressions.SwitchCase" Usage="linqToCSharpSyntaxTranslator.VisitSwitchCase node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.SwitchCase" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitTry">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitTry (System.Linq.Expressions.TryExpression tryNode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitTry(class System.Linq.Expressions.TryExpression tryNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitTry(System.Linq.Expressions.TryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitTry (tryNode As TryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitTry : System.Linq.Expressions.TryExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitTry tryNode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tryNode" Type="System.Linq.Expressions.TryExpression" />
      </Parameters>
      <Docs>
        <param name="tryNode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitTypeBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitTypeBinary (System.Linq.Expressions.TypeBinaryExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitTypeBinary(class System.Linq.Expressions.TypeBinaryExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitTypeBinary (node As TypeBinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitTypeBinary : System.Linq.Expressions.TypeBinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitTypeBinary node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.TypeBinaryExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitUnary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUnary (System.Linq.Expressions.UnaryExpression unary);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUnary(class System.Linq.Expressions.UnaryExpression unary) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.LinqToCSharpSyntaxTranslator.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitUnary (unary As UnaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitUnary : System.Linq.Expressions.UnaryExpression -&gt; System.Linq.Expressions.Expression" Usage="linqToCSharpSyntaxTranslator.VisitUnary unary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unary" Type="System.Linq.Expressions.UnaryExpression" />
      </Parameters>
      <Docs>
        <param name="unary">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
