<Type Name="SingleQueryResultCoordinator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator">
  <TypeSignature Language="C#" Value="public class SingleQueryResultCoordinator" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SingleQueryResultCoordinator extends System.Object" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator" />
  <TypeSignature Language="VB.NET" Value="Public Class SingleQueryResultCoordinator" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="F#" Value="type SingleQueryResultCoordinator = class" />
  <TypeSignature Language="C#" Value="public sealed class SingleQueryResultCoordinator" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SingleQueryResultCoordinator extends System.Object" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SingleQueryResultCoordinator" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SingleQueryResultCoordinator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collections">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext&gt; Collections { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext&gt; Collections" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.Collections" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Collections As IList(Of SingleQueryCollectionContext)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.Collections : System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.Collections" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext?&gt; Collections { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Collections As IList(Of SingleQueryCollectionContext)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNext">
      <MemberSignature Language="C#" Value="public virtual bool? HasNext { get; set; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; HasNext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.HasNext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HasNext As Nullable(Of Boolean)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.HasNext : Nullable&lt;bool&gt; with get, set" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.HasNext" />
      <MemberSignature Language="C#" Value="public bool? HasNext { get; set; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Property HasNext As Nullable(Of Boolean)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultContext">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Internal.ResultContext ResultContext { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext ResultContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.ResultContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ResultContext As ResultContext" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.ResultContext : Microsoft.EntityFrameworkCore.Query.Internal.ResultContext" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.ResultContext" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.Internal.ResultContext ResultContext { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResultContext As ResultContext" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.ResultContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultReady">
      <MemberSignature Language="C#" Value="public virtual bool ResultReady { get; set; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResultReady" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.ResultReady" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ResultReady As Boolean" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.ResultReady : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.ResultReady" />
      <MemberSignature Language="C#" Value="public bool ResultReady { get; set; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Property ResultReady As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSingleQueryCollectionContext">
      <MemberSignature Language="C#" Value="public virtual void SetSingleQueryCollectionContext (int collectionId, Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext singleQueryCollectionContext);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSingleQueryCollectionContext(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext singleQueryCollectionContext) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.SetSingleQueryCollectionContext(System.Int32,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetSingleQueryCollectionContext (collectionId As Integer, singleQueryCollectionContext As SingleQueryCollectionContext)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetSingleQueryCollectionContext : int * Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext -&gt; unit&#xA;override this.SetSingleQueryCollectionContext : int * Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext -&gt; unit" Usage="singleQueryResultCoordinator.SetSingleQueryCollectionContext (collectionId, singleQueryCollectionContext)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public void SetSingleQueryCollectionContext (int collectionId, Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext singleQueryCollectionContext);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSingleQueryCollectionContext(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext singleQueryCollectionContext) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSingleQueryCollectionContext (collectionId As Integer, singleQueryCollectionContext As SingleQueryCollectionContext)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.SetSingleQueryCollectionContext : int * Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext -&gt; unit" Usage="singleQueryResultCoordinator.SetSingleQueryCollectionContext (collectionId, singleQueryCollectionContext)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="singleQueryCollectionContext" Type="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext" />
      </Parameters>
      <Docs>
        <param name="collectionId">To be added.</param>
        <param name="singleQueryCollectionContext">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
