<Type Name="GroupBySingleQueryingEnumerable&lt;TKey,TElement&gt;" FullName="Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable&lt;TKey,TElement&gt;">
  <TypeSignature Language="C#" Value="public class GroupBySingleQueryingEnumerable&lt;TKey,TElement&gt; : Microsoft.EntityFrameworkCore.Query.Internal.IRelationalQueryingEnumerable, Microsoft.EntityFrameworkCore.Query.IQueryingEnumerable, System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GroupBySingleQueryingEnumerable`2&lt;TKey, TElement&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Query.Internal.IRelationalQueryingEnumerable, class Microsoft.EntityFrameworkCore.Query.IQueryingEnumerable, class System.Collections.Generic.IAsyncEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!TKey, !TElement&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!TKey, !TElement&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable`2" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupBySingleQueryingEnumerable(Of TKey, TElement)&#xA;Implements IAsyncEnumerable(Of IGrouping(Of TKey, TElement)), IEnumerable(Of IGrouping(Of TKey, TElement)), IQueryingEnumerable, IRelationalQueryingEnumerable" />
  <TypeSignature Language="F#" Value="type GroupBySingleQueryingEnumerable&lt;'Key, 'Element&gt; = class&#xA;    interface seq&lt;IGrouping&lt;'Key, 'Element&gt;&gt;&#xA;    interface IEnumerable&#xA;    interface IAsyncEnumerable&lt;IGrouping&lt;'Key, 'Element&gt;&gt;&#xA;    interface IRelationalQueryingEnumerable&#xA;    interface IQueryingEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.IRelationalQueryingEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IQueryingEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">To be added.</typeparam>
    <typeparam name="TElement">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GroupBySingleQueryingEnumerable (Microsoft.EntityFrameworkCore.Query.RelationalQueryContext relationalQueryContext, Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache relationalCommandCache, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn?&gt;? readerColumns, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,TKey&gt; keySelector, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; keyIdentifier, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&gt; keyIdentifierValueComparers, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,TElement&gt; elementSelector, Type contextType, bool standAloneStateManager, bool detailedErrorsEnabled, bool threadSafetyChecksEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext relationalQueryContext, class Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache relationalCommandCache, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; readerColumns, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, !TKey&gt; keySelector, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; keyIdentifier, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&gt; keyIdentifierValueComparers, class System.Func`5&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator, !TElement&gt; elementSelector, class System.Type contextType, bool standAloneStateManager, bool detailedErrorsEnabled, bool threadSafetyChecksEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable`2.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,`0},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,`1},System.Type,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (relationalQueryContext As RelationalQueryContext, relationalCommandCache As RelationalCommandCache, readerColumns As IReadOnlyList(Of ReaderColumn), keySelector As Func(Of QueryContext, DbDataReader, TKey), keyIdentifier As Func(Of QueryContext, DbDataReader, Object()), keyIdentifierValueComparers As IReadOnlyList(Of ValueComparer), elementSelector As Func(Of QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator, TElement), contextType As Type, standAloneStateManager As Boolean, detailedErrorsEnabled As Boolean, threadSafetyChecksEnabled As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable&lt;'Key, 'Element&gt; : Microsoft.EntityFrameworkCore.Query.RelationalQueryContext * Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, 'Key&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator, 'Element&gt; * Type * bool * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable&lt;'Key, 'Element&gt;" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable&lt;'Key, 'Element&gt; (relationalQueryContext, relationalCommandCache, readerColumns, keySelector, keyIdentifier, keyIdentifierValueComparers, elementSelector, contextType, standAloneStateManager, detailedErrorsEnabled, threadSafetyChecksEnabled)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="relationalQueryContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" />
        <Parameter Name="relationalCommandCache" Type="Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache" />
        <Parameter Name="readerColumns" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;" />
        <Parameter Name="keySelector" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,TKey&gt;" />
        <Parameter Name="keyIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="keyIdentifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,TElement&gt;" />
        <Parameter Name="contextType" Type="System.Type" />
        <Parameter Name="standAloneStateManager" Type="System.Boolean" />
        <Parameter Name="detailedErrorsEnabled" Type="System.Boolean" />
        <Parameter Name="threadSafetyChecksEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="relationalQueryContext">To be added.</param>
        <param name="relationalCommandCache">To be added.</param>
        <param name="readerColumns">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="keyIdentifier">To be added.</param>
        <param name="keyIdentifierValueComparers">To be added.</param>
        <param name="elementSelector">To be added.</param>
        <param name="contextType">To be added.</param>
        <param name="standAloneStateManager">To be added.</param>
        <param name="detailedErrorsEnabled">To be added.</param>
        <param name="threadSafetyChecksEnabled">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="public virtual System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable`2.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="F#" Value="abstract member CreateDbCommand : unit -&gt; System.Data.Common.DbCommand&#xA;override this.CreateDbCommand : unit -&gt; System.Data.Common.DbCommand" Usage="groupBySingleQueryingEnumerable.CreateDbCommand " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IRelationalQueryingEnumerable.CreateDbCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GetAsyncEnumerator (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerator`1&lt;class System.Linq.IGrouping`2&lt;!TKey, !TElement&gt;&gt; GetAsyncEnumerator(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable`2.GetAsyncEnumerator(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsyncEnumerator (Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerator(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="abstract member GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;&#xA;override this.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="groupBySingleQueryingEnumerable.GetAsyncEnumerator cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Linq.IGrouping`2&lt;!TKey, !TElement&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable`2.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="groupBySingleQueryingEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="groupBySingleQueryingEnumerable.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToQueryString">
      <MemberSignature Language="C#" Value="public virtual string ToQueryString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToQueryString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.GroupBySingleQueryingEnumerable`2.ToQueryString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToQueryString () As String" />
      <MemberSignature Language="F#" Value="abstract member ToQueryString : unit -&gt; string&#xA;override this.ToQueryString : unit -&gt; string" Usage="groupBySingleQueryingEnumerable.ToQueryString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IQueryingEnumerable.ToQueryString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
