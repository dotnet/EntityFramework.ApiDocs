<Type Name="ILinqToCSharpSyntaxTranslator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator">
  <TypeSignature Language="C#" Value="public interface ILinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ILinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILinqToCSharpSyntaxTranslator" />
  <TypeSignature Language="F#" Value="type ILinqToCSharpSyntaxTranslator = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                Translates a LINQ expression tree to a Roslyn syntax tree.
            </summary>
    <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CapturedVariables">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlySet&lt;System.Linq.Expressions.ParameterExpression&gt; CapturedVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlySet`1&lt;class System.Linq.Expressions.ParameterExpression&gt; CapturedVariables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator.CapturedVariables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CapturedVariables As IReadOnlySet(Of ParameterExpression)" />
      <MemberSignature Language="F#" Value="member this.CapturedVariables : System.Collections.Generic.IReadOnlySet&lt;System.Linq.Expressions.ParameterExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator.CapturedVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlySet&lt;System.Linq.Expressions.ParameterExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns the captured variables detected in the last translation.
            </summary>
        <value>To be added.</value>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TranslateExpression (System.Linq.Expressions.Expression node, System.Collections.Generic.ISet&lt;string&gt; collectedNamespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TranslateExpression(class System.Linq.Expressions.Expression node, class System.Collections.Generic.ISet`1&lt;string&gt; collectedNamespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator.TranslateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.ISet{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function TranslateExpression (node As Expression, collectedNamespaces As ISet(Of String)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TranslateExpression : System.Linq.Expressions.Expression * System.Collections.Generic.ISet&lt;string&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="iLinqToCSharpSyntaxTranslator.TranslateExpression (node, collectedNamespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="collectedNamespaces" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="node">The node to be translated.</param>
        <param name="collectedNamespaces">Any namespaces required by the translated code will be added to this set.</param>
        <summary>
                Translates a node representing an expression into a Roslyn syntax tree.
            </summary>
        <returns>A Roslyn syntax tree representation of <paramref name="node" />.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TranslateStatement (System.Linq.Expressions.Expression node, System.Collections.Generic.ISet&lt;string&gt; collectedNamespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TranslateStatement(class System.Linq.Expressions.Expression node, class System.Collections.Generic.ISet`1&lt;string&gt; collectedNamespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ILinqToCSharpSyntaxTranslator.TranslateStatement(System.Linq.Expressions.Expression,System.Collections.Generic.ISet{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function TranslateStatement (node As Expression, collectedNamespaces As ISet(Of String)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TranslateStatement : System.Linq.Expressions.Expression * System.Collections.Generic.ISet&lt;string&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="iLinqToCSharpSyntaxTranslator.TranslateStatement (node, collectedNamespaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="collectedNamespaces" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="node">The node to be translated.</param>
        <param name="collectedNamespaces">Any namespaces required by the translated code will be added to this set.</param>
        <summary>
                Translates a node representing a statement into a Roslyn syntax tree.
            </summary>
        <returns>A Roslyn syntax tree representation of <paramref name="node" />.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
