<Type Name="NullAsyncQueryProvider" FullName="Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider">
  <TypeSignature Language="C#" Value="public class NullAsyncQueryProvider : Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider, System.Linq.IQueryProvider" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NullAsyncQueryProvider extends System.Object implements class Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider, class System.Linq.IQueryProvider" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class NullAsyncQueryProvider&#xA;Implements IAsyncQueryProvider, IQueryProvider" />
  <TypeSignature Language="F#" Value="type NullAsyncQueryProvider = class&#xA;    interface IAsyncQueryProvider&#xA;    interface IQueryProvider" />
  <TypeSignature Language="C#" Value="public class NullAsyncQueryProvider : Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider, System.Linq.IQueryProvider" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NullAsyncQueryProvider extends System.Object implements class Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider, class System.Linq.IQueryProvider" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider Instance;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider Instance" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Instance As IAsyncQueryProvider " />
      <MemberSignature Language="F#" Value=" staticval mutable Instance : Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider" Usage="Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.Instance" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static readonly Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider Instance;" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider Instance" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value=" staticval mutable Instance : Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider" Usage="Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.Instance" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider.ExecuteAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IAsyncQueryProvider.ExecuteAsync&lt;TResult&gt; (System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider.ExecuteAsync&lt;TResult&gt;(class System.Linq.Expressions.Expression expression, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.Microsoft#EntityFrameworkCore#Query#IAsyncQueryProvider#ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function ExecuteAsync(Of TResult) (expression As Expression, cancellationToken As CancellationToken) As TResult Implements IAsyncQueryProvider.ExecuteAsync" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider.ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; 'Result&#xA;override this.Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider.ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; 'Result" Usage="nullAsyncQueryProvider.Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider.ExecuteAsync (expression, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="expression">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync&lt;TResult1&gt;">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IAsyncEnumerable&lt;TResult1&gt; IAsyncQueryProvider.ExecuteAsync&lt;TResult1&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult1&gt; Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync&lt;TResult1&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.Microsoft#EntityFrameworkCore#Query#Internal#IAsyncQueryProvider#ExecuteAsync``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Function ExecuteAsync(Of TResult1) (expression As Expression) As IAsyncEnumerable(Of TResult1) Implements IAsyncQueryProvider.ExecuteAsync" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync : System.Linq.Expressions.Expression -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'TResult1&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync : System.Linq.Expressions.Expression -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'TResult1&gt;" Usage="nullAsyncQueryProvider.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync expression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult1&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TResult1">To be added.</typeparam>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Task&lt;TResult1&gt; IAsyncQueryProvider.ExecuteAsync&lt;TResult1&gt; (System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult1&gt; Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync&lt;TResult1&gt;(class System.Linq.Expressions.Expression expression, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.Microsoft#EntityFrameworkCore#Query#Internal#IAsyncQueryProvider#ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function ExecuteAsync(Of TResult1) (expression As Expression, cancellationToken As CancellationToken) As Task(Of TResult1) Implements IAsyncQueryProvider.ExecuteAsync" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'TResult1&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'TResult1&gt;" Usage="nullAsyncQueryProvider.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync (expression, cancellationToken)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="TResult IAsyncQueryProvider.ExecuteAsync&lt;TResult&gt; (System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync&lt;TResult&gt;(class System.Linq.Expressions.Expression expression, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="VB.NET" Value="Function ExecuteAsync(Of TResult) (expression As Expression, cancellationToken As CancellationToken) As TResult Implements IAsyncQueryProvider.ExecuteAsync" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; 'Result&#xA;override this.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync : System.Linq.Expressions.Expression * System.Threading.CancellationToken -&gt; 'Result" Usage="nullAsyncQueryProvider.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync (expression, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">System.Threading.Tasks.Task&lt;TResult1&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult1" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <TypeParameter Name="TResult" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <typeparam name="TResult1">To be added.</typeparam>
        <param name="expression">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Function CreateQuery (expression As Expression) As IQueryable Implements IQueryProvider.CreateQuery" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable&#xA;override this.System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable" Usage="nullAsyncQueryProvider.System.Linq.IQueryProvider.CreateQuery expression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TElement&gt; IQueryProvider.CreateQuery&lt;TElement&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TElement&gt; System.Linq.IQueryProvider.CreateQuery&lt;TElement&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Function CreateQuery(Of TElement) (expression As Expression) As IQueryable(Of TElement) Implements IQueryProvider.CreateQuery" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable&lt;'Element&gt;&#xA;override this.System.Linq.IQueryProvider.CreateQuery : System.Linq.Expressions.Expression -&gt; System.Linq.IQueryable&lt;'Element&gt;" Usage="nullAsyncQueryProvider.System.Linq.IQueryProvider.CreateQuery expression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Function Execute (expression As Expression) As Object Implements IQueryProvider.Execute" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; obj&#xA;override this.System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; obj" Usage="nullAsyncQueryProvider.System.Linq.IQueryProvider.Execute expression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult1 IQueryProvider.Execute&lt;TResult1&gt; (System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult1 System.Linq.IQueryProvider.Execute&lt;TResult1&gt;(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Function Execute(Of TResult1) (expression As Expression) As TResult1 Implements IQueryProvider.Execute" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; 'TResult1&#xA;override this.System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; 'TResult1" Usage="nullAsyncQueryProvider.System.Linq.IQueryProvider.Execute expression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function Execute(Of TResult) (expression As Expression) As TResult Implements IQueryProvider.Execute" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; 'Result&#xA;override this.System.Linq.IQueryProvider.Execute : System.Linq.Expressions.Expression -&gt; 'Result" Usage="nullAsyncQueryProvider.System.Linq.IQueryProvider.Execute expression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">TResult1</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult1" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <TypeParameter Name="TResult" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult1">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
