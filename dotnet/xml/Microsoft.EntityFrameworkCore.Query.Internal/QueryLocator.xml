<Type Name="QueryLocator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.QueryLocator">
  <TypeSignature Language="C#" Value="public class QueryLocator : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QueryLocator extends Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryLocator" />
  <TypeSignature Language="VB.NET" Value="Public Class QueryLocator&#xA;Inherits CSharpSyntaxWalker" />
  <TypeSignature Language="F#" Value="type QueryLocator = class&#xA;    inherit CSharpSyntaxWalker" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Statically analyzes user code and locates EF LINQ queries within it, by identifying well-known terminating operators
                (e.g. <c>ToList</c>, <c>Single</c>).
            </summary>
    <remarks>
                After a <see cref="T:Microsoft.CodeAnalysis.Compilation" /> is loaded via <see cref="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryLocator.Initialize(Microsoft.CodeAnalysis.Compilation)" />, <see cref="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryLocator.LocateQueries(Microsoft.CodeAnalysis.SyntaxTree,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError},System.Threading.CancellationToken)" /> is called repeatedly
                for all syntax trees in the compilation.
            </remarks>
    <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryLocator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryLocator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (Microsoft.CodeAnalysis.Compilation compilation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.CodeAnalysis.Compilation compilation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryLocator.Initialize(Microsoft.CodeAnalysis.Compilation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (compilation As Compilation)" />
      <MemberSignature Language="F#" Value="abstract member Initialize : Microsoft.CodeAnalysis.Compilation -&gt; unit&#xA;override this.Initialize : Microsoft.CodeAnalysis.Compilation -&gt; unit" Usage="queryLocator.Initialize compilation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" />
      </Parameters>
      <Docs>
        <param name="compilation">A <see cref="T:Microsoft.CodeAnalysis.Compilation" /> representing a user project.</param>
        <summary>
                Loads a new <see cref="T:Microsoft.CodeAnalysis.Compilation" />, representing a user project in which to locate queries.
            </summary>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocateQueries">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt; LocateQueries (Microsoft.CodeAnalysis.SyntaxTree syntaxTree, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError&gt; precompilationErrors, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt; LocateQueries(class Microsoft.CodeAnalysis.SyntaxTree syntaxTree, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator/QueryPrecompilationError&gt; precompilationErrors, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryLocator.LocateQueries(Microsoft.CodeAnalysis.SyntaxTree,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LocateQueries (syntaxTree As SyntaxTree, precompilationErrors As List(Of PrecompiledQueryCodeGenerator.QueryPrecompilationError), Optional cancellationToken As CancellationToken = Nothing) As IReadOnlyList(Of InvocationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member LocateQueries : Microsoft.CodeAnalysis.SyntaxTree * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt;&#xA;override this.LocateQueries : Microsoft.CodeAnalysis.SyntaxTree * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator.QueryPrecompilationError&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt;" Usage="queryLocator.LocateQueries (syntaxTree, precompilationErrors, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syntaxTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="precompilationErrors" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.Internal.PrecompiledQueryCodeGenerator+QueryPrecompilationError&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syntaxTree">A <see cref="T:Microsoft.CodeAnalysis.SyntaxTree" /> in which to locate EF LINQ queries.</param>
        <param name="precompilationErrors">
                A list of errors populated with dynamic LINQ queries detected in <paramref name="syntaxTree" />.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Locates EF LINQ queries within the given <see cref="T:Microsoft.CodeAnalysis.SyntaxTree" />, which represents user code.
            </summary>
        <returns>A list of EF LINQ queries confirmed to be compatible with precompilation.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForEachStatement">
      <MemberSignature Language="C#" Value="public override void VisitForEachStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax forEach);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitForEachStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax forEach) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryLocator.VisitForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitForEachStatement (forEach As ForEachStatementSyntax)" />
      <MemberSignature Language="F#" Value="override this.VisitForEachStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax -&gt; unit" Usage="queryLocator.VisitForEachStatement forEach" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forEach" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forEach">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInvocationExpression">
      <MemberSignature Language="C#" Value="public override void VisitInvocationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax invocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitInvocationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax invocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryLocator.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitInvocationExpression (invocation As InvocationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="override this.VisitInvocationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax -&gt; unit" Usage="queryLocator.VisitInvocationExpression invocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invocation" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="invocation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
