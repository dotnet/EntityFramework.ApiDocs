<Type Name="ParameterValueBasedSelectExpressionOptimizer" FullName="Microsoft.EntityFrameworkCore.Query.Internal.ParameterValueBasedSelectExpressionOptimizer">
  <TypeSignature Language="C#" Value="public class ParameterValueBasedSelectExpressionOptimizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParameterValueBasedSelectExpressionOptimizer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.ParameterValueBasedSelectExpressionOptimizer" />
  <TypeSignature Language="VB.NET" Value="Public Class ParameterValueBasedSelectExpressionOptimizer" />
  <TypeSignature Language="F#" Value="type ParameterValueBasedSelectExpressionOptimizer = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParameterValueBasedSelectExpressionOptimizer (Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory parameterNameGeneratorFactory, bool useRelationalNulls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, class Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory parameterNameGeneratorFactory, bool useRelationalNulls) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ParameterValueBasedSelectExpressionOptimizer.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sqlExpressionFactory As ISqlExpressionFactory, parameterNameGeneratorFactory As IParameterNameGeneratorFactory, useRelationalNulls As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.ParameterValueBasedSelectExpressionOptimizer : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory * Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory * bool -&gt; Microsoft.EntityFrameworkCore.Query.Internal.ParameterValueBasedSelectExpressionOptimizer" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.ParameterValueBasedSelectExpressionOptimizer (sqlExpressionFactory, parameterNameGeneratorFactory, useRelationalNulls)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
        <Parameter Name="parameterNameGeneratorFactory" Type="Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory" />
        <Parameter Name="useRelationalNulls" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">To be added.</param>
        <param name="parameterNameGeneratorFactory">To be added.</param>
        <param name="useRelationalNulls">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optimize">
      <MemberSignature Language="C#" Value="public virtual (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, bool canCache) Optimize (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, System.Collections.Generic.IReadOnlyDictionary&lt;string,object&gt; parametersValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression, bool&gt; Optimize(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parametersValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ParameterValueBasedSelectExpressionOptimizer.Optimize(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Optimize (selectExpression As SelectExpression, parametersValues As IReadOnlyDictionary(Of String, Object)) As ValueTuple(Of SelectExpression, Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Optimize : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; -&gt; ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression, bool&gt;&#xA;override this.Optimize : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; -&gt; ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression, bool&gt;" Usage="parameterValueBasedSelectExpressionOptimizer.Optimize (selectExpression, parametersValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "selectExpression", "canCache" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "selectExpression", "canCache" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="parametersValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <param name="parametersValues">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
