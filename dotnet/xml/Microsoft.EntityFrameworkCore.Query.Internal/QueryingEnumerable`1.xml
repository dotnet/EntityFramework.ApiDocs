<Type Name="QueryingEnumerable&lt;T&gt;" FullName="Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class QueryingEnumerable&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QueryingEnumerable`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Class QueryingEnumerable(Of T)&#xA;Implements IEnumerable(Of T)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type QueryingEnumerable&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public class QueryingEnumerable&lt;T&gt; : System.Collections.Generic.IAsyncEnumerable&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;" FrameworkAlternate="efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QueryingEnumerable`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IAsyncEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable" FrameworkAlternate="efcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public Class QueryingEnumerable(Of T)&#xA;Implements IAsyncEnumerable(Of T), IEnumerable(Of T)" FrameworkAlternate="efcore-3.1" />
  <TypeSignature Language="F#" Value="type QueryingEnumerable&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IAsyncEnumerable&lt;'T&gt;" FrameworkAlternate="efcore-3.1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.1">
      <InterfaceName>System.Collections.Generic.IAsyncEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryingEnumerable (Microsoft.EntityFrameworkCore.Query.RelationalQueryContext relationalQueryContext, Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext shaperCommandContext, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IShaper&lt;T&gt; shaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext relationalQueryContext, class Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext shaperCommandContext, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IShaper`1&lt;!T&gt; shaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IShaper{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (relationalQueryContext As RelationalQueryContext, shaperCommandContext As ShaperCommandContext, shaper As IShaper(Of T))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable&lt;'T&gt; : Microsoft.EntityFrameworkCore.Query.RelationalQueryContext * Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IShaper&lt;'T&gt; -&gt; Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable&lt;'T&gt;" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable&lt;'T&gt; (relationalQueryContext, shaperCommandContext, shaper)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="relationalQueryContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="shaperCommandContext" Type="Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="shaper" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IShaper&lt;T&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="relationalQueryContext">To be added.</param>
        <param name="shaperCommandContext">To be added.</param>
        <param name="shaper">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryingEnumerable (Microsoft.EntityFrameworkCore.Query.RelationalQueryContext relationalQueryContext, Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache relationalCommandCache, System.Collections.Generic.IReadOnlyList&lt;string&gt; columnNames, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; readerColumns, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,int[],Microsoft.EntityFrameworkCore.Query.Internal.ResultCoordinator,T&gt; shaper, Type contextType, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext relationalQueryContext, class Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache relationalCommandCache, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; columnNames, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; readerColumns, class System.Func`6&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, int32[], class Microsoft.EntityFrameworkCore.Query.Internal.ResultCoordinator, !T&gt; shaper, class System.Type contextType, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,System.Int32[],Microsoft.EntityFrameworkCore.Query.Internal.ResultCoordinator,`0},System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (relationalQueryContext As RelationalQueryContext, relationalCommandCache As RelationalCommandCache, columnNames As IReadOnlyList(Of String), readerColumns As IReadOnlyList(Of ReaderColumn), shaper As Func(Of QueryContext, DbDataReader, ResultContext, Integer(), ResultCoordinator, T), contextType As Type, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable&lt;'T&gt; : Microsoft.EntityFrameworkCore.Query.RelationalQueryContext * Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache * System.Collections.Generic.IReadOnlyList&lt;string&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, int[], Microsoft.EntityFrameworkCore.Query.Internal.ResultCoordinator, 'T&gt; * Type * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; -&gt; Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable&lt;'T&gt;" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable&lt;'T&gt; (relationalQueryContext, relationalCommandCache, columnNames, readerColumns, shaper, contextType, logger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="relationalQueryContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" Index="0" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="relationalCommandCache" Type="Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache" Index="1" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="columnNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="2" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="readerColumns" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;" Index="3" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="shaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,System.Int32[],Microsoft.EntityFrameworkCore.Query.Internal.ResultCoordinator,T&gt;" Index="4" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="contextType" Type="System.Type" Index="5" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" Index="6" FrameworkAlternate="efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="relationalQueryContext">To be added.</param>
        <param name="relationalCommandCache">To be added.</param>
        <param name="columnNames">To be added.</param>
        <param name="readerColumns">To be added.</param>
        <param name="shaper">To be added.</param>
        <param name="contextType">To be added.</param>
        <param name="logger">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildIndexMap">
      <MemberSignature Language="C#" Value="public static int[] BuildIndexMap (System.Collections.Generic.IReadOnlyList&lt;string&gt; columnNames, System.Data.Common.DbDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] BuildIndexMap(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; columnNames, class System.Data.Common.DbDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.BuildIndexMap(System.Collections.Generic.IReadOnlyList{System.String},System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BuildIndexMap (columnNames As IReadOnlyList(Of String), dataReader As DbDataReader) As Integer()" />
      <MemberSignature Language="F#" Value="static member BuildIndexMap : System.Collections.Generic.IReadOnlyList&lt;string&gt; * System.Data.Common.DbDataReader -&gt; int[]" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable&lt;'T&gt;.BuildIndexMap (columnNames, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="dataReader" Type="System.Data.Common.DbDataReader" Index="1" FrameworkAlternate="efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="columnNames">To be added.</param>
        <param name="dataReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerator&lt;T&gt; GetAsyncEnumerator (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerator`1&lt;!T&gt; GetAsyncEnumerator(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsyncEnumerator (Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;'T&gt;&#xA;override this.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;'T&gt;" Usage="queryingEnumerable.GetAsyncEnumerator cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="queryingEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="queryingEnumerable.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
