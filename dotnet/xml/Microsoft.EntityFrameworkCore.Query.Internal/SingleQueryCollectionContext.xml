<Type Name="SingleQueryCollectionContext" FullName="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext">
  <TypeSignature Language="C#" Value="public class SingleQueryCollectionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SingleQueryCollectionContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext" />
  <TypeSignature Language="VB.NET" Value="Public Class SingleQueryCollectionContext" />
  <TypeSignature Language="F#" Value="type SingleQueryCollectionContext = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SingleQueryCollectionContext (object parent, object collection, object[] parentIdentifier, object[] outerIdentifier);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parent, object collection, object[] parentIdentifier, object[] outerIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.#ctor(System.Object,System.Object,System.Object[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Object, collection As Object, parentIdentifier As Object(), outerIdentifier As Object())" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext : obj * obj * obj[] * obj[] -&gt; Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext (parent, collection, parentIdentifier, outerIdentifier)" />
      <MemberSignature Language="C#" Value="public SingleQueryCollectionContext (object? parent, object? collection, object[] parentIdentifier, object[] outerIdentifier);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Object" />
        <Parameter Name="collection" Type="System.Object" />
        <Parameter Name="parentIdentifier" Type="System.Object[]" />
        <Parameter Name="outerIdentifier" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parent">To be added.</param>
        <param name="collection">To be added.</param>
        <param name="parentIdentifier">To be added.</param>
        <param name="outerIdentifier">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collection">
      <MemberSignature Language="C#" Value="public virtual object Collection { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object Collection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.Collection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Collection As Object" />
      <MemberSignature Language="F#" Value="member this.Collection : obj" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.Collection" />
      <MemberSignature Language="C#" Value="public virtual object? Collection { get; }" FrameworkAlternate="efcore-6.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OuterIdentifier">
      <MemberSignature Language="C#" Value="public virtual object[] OuterIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object[] OuterIdentifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.OuterIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OuterIdentifier As Object()" />
      <MemberSignature Language="F#" Value="member this.OuterIdentifier : obj[]" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.OuterIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual object Parent { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As Object" />
      <MemberSignature Language="F#" Value="member this.Parent : obj" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.Parent" />
      <MemberSignature Language="C#" Value="public virtual object? Parent { get; }" FrameworkAlternate="efcore-6.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentIdentifier">
      <MemberSignature Language="C#" Value="public virtual object[] ParentIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object[] ParentIdentifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.ParentIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ParentIdentifier As Object()" />
      <MemberSignature Language="F#" Value="member this.ParentIdentifier : obj[]" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.ParentIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultContext">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Internal.ResultContext ResultContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext ResultContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.ResultContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ResultContext As ResultContext" />
      <MemberSignature Language="F#" Value="member this.ResultContext : Microsoft.EntityFrameworkCore.Query.Internal.ResultContext" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.ResultContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.ResultContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelfIdentifier">
      <MemberSignature Language="C#" Value="public object[] SelfIdentifier { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object[] SelfIdentifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.SelfIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelfIdentifier As Object()" />
      <MemberSignature Language="F#" Value="member this.SelfIdentifier : obj[]" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.SelfIdentifier" />
      <MemberSignature Language="C#" Value="public object[]? SelfIdentifier { get; }" FrameworkAlternate="efcore-6.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSelfIdentifier">
      <MemberSignature Language="C#" Value="public virtual void UpdateSelfIdentifier (object[] selfIdentifier);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateSelfIdentifier(object[] selfIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.UpdateSelfIdentifier(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateSelfIdentifier (selfIdentifier As Object())" />
      <MemberSignature Language="F#" Value="abstract member UpdateSelfIdentifier : obj[] -&gt; unit&#xA;override this.UpdateSelfIdentifier : obj[] -&gt; unit" Usage="singleQueryCollectionContext.UpdateSelfIdentifier selfIdentifier" />
      <MemberSignature Language="C#" Value="public virtual void UpdateSelfIdentifier (object[]? selfIdentifier);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selfIdentifier" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="selfIdentifier">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
