<Type Name="SplitQueryDataReaderContext" FullName="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext">
  <TypeSignature Language="C#" Value="public class SplitQueryDataReaderContext" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SplitQueryDataReaderContext extends System.Object" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext" />
  <TypeSignature Language="VB.NET" Value="Public Class SplitQueryDataReaderContext" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="F#" Value="type SplitQueryDataReaderContext = class" />
  <TypeSignature Language="C#" Value="public sealed class SplitQueryDataReaderContext" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SplitQueryDataReaderContext extends System.Object" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SplitQueryDataReaderContext" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SplitQueryDataReaderContext (Microsoft.EntityFrameworkCore.Storage.RelationalDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.RelationalDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataReader As RelationalDataReader)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext : Microsoft.EntityFrameworkCore.Storage.RelationalDataReader -&gt; Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext dataReader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataReader" Type="Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" />
      </Parameters>
      <Docs>
        <param name="dataReader">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataReader">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.RelationalDataReader DataReader { get; }" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.RelationalDataReader DataReader" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext.DataReader" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataReader As RelationalDataReader" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.DataReader : Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext.DataReader" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.RelationalDataReader DataReader { get; }" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataReader As RelationalDataReader" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalDataReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNext">
      <MemberSignature Language="C#" Value="public virtual bool? HasNext { get; set; }" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; HasNext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext.HasNext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HasNext As Nullable(Of Boolean)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.HasNext : Nullable&lt;bool&gt; with get, set" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext.HasNext" />
      <MemberSignature Language="C#" Value="public bool? HasNext { get; set; }" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Property HasNext As Nullable(Of Boolean)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
