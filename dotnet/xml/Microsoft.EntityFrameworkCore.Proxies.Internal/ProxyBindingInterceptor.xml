<Type Name="ProxyBindingInterceptor" FullName="Microsoft.EntityFrameworkCore.Proxies.Internal.ProxyBindingInterceptor">
  <TypeSignature Language="C#" Value="public class ProxyBindingInterceptor : Microsoft.EntityFrameworkCore.Diagnostics.IInstantiationBindingInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProxyBindingInterceptor extends System.Object implements class Microsoft.EntityFrameworkCore.Diagnostics.IInstantiationBindingInterceptor, class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor, class Microsoft.EntityFrameworkCore.Diagnostics.ISingletonInterceptor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Proxies.Internal.ProxyBindingInterceptor" />
  <TypeSignature Language="VB.NET" Value="Public Class ProxyBindingInterceptor&#xA;Implements IInstantiationBindingInterceptor" />
  <TypeSignature Language="F#" Value="type ProxyBindingInterceptor = class&#xA;    interface IInstantiationBindingInterceptor&#xA;    interface ISingletonInterceptor&#xA;    interface IInterceptor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInstantiationBindingInterceptor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.ISingletonInterceptor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProxyBindingInterceptor (Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory proxyFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory proxyFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Proxies.Internal.ProxyBindingInterceptor.#ctor(Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (proxyFactory As IProxyFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Proxies.Internal.ProxyBindingInterceptor : Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory -&gt; Microsoft.EntityFrameworkCore.Proxies.Internal.ProxyBindingInterceptor" Usage="new Microsoft.EntityFrameworkCore.Proxies.Internal.ProxyBindingInterceptor proxyFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="proxyFactory" Type="Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory" />
      </Parameters>
      <Docs>
        <param name="proxyFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyBinding">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding ModifyBinding (Microsoft.EntityFrameworkCore.Diagnostics.InstantiationBindingInterceptionData interceptionData, Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding ModifyBinding(valuetype Microsoft.EntityFrameworkCore.Diagnostics.InstantiationBindingInterceptionData interceptionData, class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Proxies.Internal.ProxyBindingInterceptor.ModifyBinding(Microsoft.EntityFrameworkCore.Diagnostics.InstantiationBindingInterceptionData,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ModifyBinding (interceptionData As InstantiationBindingInterceptionData, binding As InstantiationBinding) As InstantiationBinding" />
      <MemberSignature Language="F#" Value="abstract member ModifyBinding : Microsoft.EntityFrameworkCore.Diagnostics.InstantiationBindingInterceptionData * Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding -&gt; Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&#xA;override this.ModifyBinding : Microsoft.EntityFrameworkCore.Diagnostics.InstantiationBindingInterceptionData * Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding -&gt; Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" Usage="proxyBindingInterceptor.ModifyBinding (interceptionData, binding)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IInstantiationBindingInterceptor.ModifyBinding(Microsoft.EntityFrameworkCore.Diagnostics.InstantiationBindingInterceptionData,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interceptionData" Type="Microsoft.EntityFrameworkCore.Diagnostics.InstantiationBindingInterceptionData" />
        <Parameter Name="binding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" />
      </Parameters>
      <Docs>
        <param name="interceptionData">To be added.</param>
        <param name="binding">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
