<Type Name="PropertyChangingInterceptor" FullName="Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangingInterceptor">
  <TypeSignature Language="C#" Value="public class PropertyChangingInterceptor : Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangeInterceptorBase, Castle.DynamicProxy.IInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyChangingInterceptor extends Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangeInterceptorBase implements class Castle.DynamicProxy.IInterceptor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangingInterceptor" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyChangingInterceptor&#xA;Inherits PropertyChangeInterceptorBase&#xA;Implements IInterceptor" />
  <TypeSignature Language="F#" Value="type PropertyChangingInterceptor = class&#xA;    inherit PropertyChangeInterceptorBase&#xA;    interface IInterceptor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangeInterceptorBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Castle.DynamicProxy.IInterceptor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyChangingInterceptor (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, bool checkEquality);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, bool checkEquality) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangingInterceptor.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entityType As IEntityType, checkEquality As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangingInterceptor : Microsoft.EntityFrameworkCore.Metadata.IEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangingInterceptor" Usage="new Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangingInterceptor (entityType, checkEquality)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="checkEquality" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="checkEquality">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public virtual void Intercept (Castle.DynamicProxy.IInvocation invocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Intercept(class Castle.DynamicProxy.IInvocation invocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Proxies.Internal.PropertyChangingInterceptor.Intercept(Castle.DynamicProxy.IInvocation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Intercept (invocation As IInvocation)" />
      <MemberSignature Language="F#" Value="abstract member Intercept : Castle.DynamicProxy.IInvocation -&gt; unit&#xA;override this.Intercept : Castle.DynamicProxy.IInvocation -&gt; unit" Usage="propertyChangingInterceptor.Intercept invocation" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Castle.DynamicProxy.IInterceptor.Intercept(Castle.DynamicProxy.IInvocation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invocation" Type="Castle.DynamicProxy.IInvocation" />
      </Parameters>
      <Docs>
        <param name="invocation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
