<Type Name="QueryableMethodTranslatingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor">
  <TypeSignature Language="C#" Value="public abstract class QueryableMethodTranslatingExpressionVisitor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit QueryableMethodTranslatingExpressionVisitor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class QueryableMethodTranslatingExpressionVisitor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type QueryableMethodTranslatingExpressionVisitor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    A class that translates queryable methods in a query.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                and <see href="https://aka.ms/efcore-docs-how-query-works">How EF Core queries work</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, bool subquery);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, bool subquery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, subquery As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * bool -&gt; Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor (dependencies, subquery)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="subquery" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="subquery">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext, bool subquery);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext, bool subquery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, queryCompilationContext As QueryCompilationContext, subquery As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.QueryCompilationContext * bool -&gt; Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor (dependencies, queryCompilationContext, subquery)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="subquery" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">Parameter object containing dependencies for this class.</param>
        <param name="queryCompilationContext">The query compilation context object to use.</param>
        <param name="subquery">A bool value indicating whether it is for a subquery translation.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTranslationErrorDetails">
      <MemberSignature Language="C#" Value="protected virtual void AddTranslationErrorDetails (string details);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddTranslationErrorDetails(string details) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.AddTranslationErrorDetails(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddTranslationErrorDetails (details As String)" />
      <MemberSignature Language="F#" Value="abstract member AddTranslationErrorDetails : string -&gt; unit&#xA;override this.AddTranslationErrorDetails : string -&gt; unit" Usage="queryableMethodTranslatingExpressionVisitor.AddTranslationErrorDetails details" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="details" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="details">Error encountered during translation.</param>
        <summary>
                Adds detailed information about errors encountered during translation.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateShapedQueryExpression">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateShapedQueryExpression (entityType As IEntityType) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member CreateShapedQueryExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> for the given entity type.
            </summary>
        <returns>A shaped query expression for the given entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateShapedQueryExpression">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression (Type elementType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression(class System.Type elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateShapedQueryExpression (elementType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member CreateShapedQueryExpression : Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression elementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use overload which takes IEntityType.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use overload which takes IEntityType.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="elementType">The clr type of the entity type to look for.</param>
        <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> for the given type by finding its entity type in the model.
            </summary>
        <returns>A shaped query expression for the given clr type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubqueryVisitor">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateSubqueryVisitor () As QueryableMethodTranslatingExpressionVisitor" />
      <MemberSignature Language="F#" Value="abstract member CreateSubqueryVisitor : unit -&gt; Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" Usage="queryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates a visitor customized to translate a subquery through <see cref="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSubquery(System.Linq.Expressions.Expression)" />.
            </summary>
        <returns>A visitor to translate subquery.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As QueryableMethodTranslatingExpressionVisitorDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Usage="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkShaperNullable">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression MarkShaperNullable (System.Linq.Expressions.Expression shaperExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression MarkShaperNullable(class System.Linq.Expressions.Expression shaperExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.MarkShaperNullable(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MarkShaperNullable (shaperExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member MarkShaperNullable : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.MarkShaperNullable : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="queryableMethodTranslatingExpressionVisitor.MarkShaperNullable shaperExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="shaperExpression">The shaper expression to process.</param>
        <summary>
                Marks the entity shaper in the given shaper expression as nullable.
            </summary>
        <returns>New shaper expression in which all entity shapers are nullable.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCompilationContext">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.QueryCompilationContext QueryCompilationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext QueryCompilationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.QueryCompilationContext" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property QueryCompilationContext As QueryCompilationContext" />
      <MemberSignature Language="F#" Value="member this.QueryCompilationContext : Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Usage="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.QueryCompilationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryCompilationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The query compilation context object for current compilation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Translate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Translate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member Translate : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.Translate : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="queryableMethodTranslatingExpressionVisitor.Translate expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">An expression to translate.</param>
        <summary>
                Translates an expression to an equivalent SQL representation.
            </summary>
        <returns>A SQL translation of the given expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAll">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAll (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAll(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateAll(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateAll (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateAll : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateAll (source, predicate)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateAll (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAny">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAny (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAny(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateAny(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateAny (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateAny : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateAny (source, predicate)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateAny (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})" /> method and other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAverage">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAverage (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAverage(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateAverage(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateAverage (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateAverage : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateAverage (source, selector, resultType)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateAverage (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? selector, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="selector">The selector supplied in the call.</param>
        <param name="resultType">The result type after the operation.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})" /> method and other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateCast">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCast (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCast(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Type resultType) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateCast(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateCast (source As ShapedQueryExpression, resultType As Type) As ShapedQueryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member TranslateCast : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateCast (source, resultType)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCast (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type castType);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCast(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Type castType) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateCast (source As ShapedQueryExpression, castType As Type) As ShapedQueryExpression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member TranslateCast : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateCast (source, castType)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateCast (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type castType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" />
        <Parameter Name="resultType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="castType" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="resultType">To be added.</param>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="castType">The type result is being casted to.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateConcat">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateConcat (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateConcat(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateConcat(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateConcat (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateConcat : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateConcat (source1, source2)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateConcat (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">The shaped query on which the operator is applied.</param>
        <param name="source2">The other source to perform concat.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateContains">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateContains (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression item);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateContains(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateContains(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateContains (source As ShapedQueryExpression, item As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateContains : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateContains (source, item)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateContains (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression item);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="item" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="item">The item to search for.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateCount">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCount(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateCount (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateCount : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateCount (source, predicate)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})" /> method and other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateDefaultIfEmpty">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDefaultIfEmpty (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression defaultValue);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDefaultIfEmpty(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateDefaultIfEmpty(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateDefaultIfEmpty (source As ShapedQueryExpression, defaultValue As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateDefaultIfEmpty : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateDefaultIfEmpty (source, defaultValue)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateDefaultIfEmpty (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression? defaultValue);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="defaultValue">The default value to use.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})" /> method and other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateDistinct">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDistinct (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDistinct(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateDistinct(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateDistinct (source As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateDistinct : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateDistinct source" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateDistinct (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateElementAtOrDefault">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateElementAtOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression index, bool returnDefault);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateElementAtOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression index, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateElementAtOrDefault (source As ShapedQueryExpression, index As Expression, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateElementAtOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault (source, index, returnDefault)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateElementAtOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression index, bool returnDefault);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="index">The index of the element.</param>
        <param name="returnDefault">A value indicating whether default should be returned or throw.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)" /> method or
                <see cref="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)" /> over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateExcept">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateExcept (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateExcept(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateExcept(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateExcept (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateExcept : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateExcept (source1, source2)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateExcept (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">The shaped query on which the operator is applied.</param>
        <param name="source2">The other source to perform except with.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateFirstOrDefault">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateFirstOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateFirstOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate, class System.Type returnType, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateFirstOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateFirstOrDefault (source As ShapedQueryExpression, predicate As LambdaExpression, returnType As Type, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateFirstOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateFirstOrDefault (source, predicate, returnType, returnDefault)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateFirstOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <param name="returnType">The return type of result.</param>
        <param name="returnDefault">A value indicating whether default should be returned or throw.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})" /> method or
                <see cref="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})" /> and their other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateGroupBy">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, System.Linq.Expressions.LambdaExpression elementSelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, class System.Linq.Expressions.LambdaExpression elementSelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateGroupBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateGroupBy (source As ShapedQueryExpression, keySelector As LambdaExpression, elementSelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateGroupBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateGroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateGroupBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, System.Linq.Expressions.LambdaExpression? elementSelector, System.Linq.Expressions.LambdaExpression? resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="elementSelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="keySelector">The key selector supplied in the call.</param>
        <param name="elementSelector">The element selector supplied in the call.</param>
        <param name="resultSelector">The result selector supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method and
                other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateGroupJoin">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateGroupJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateGroupJoin (outer As ShapedQueryExpression, inner As ShapedQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateGroupJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateGroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateGroupJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="inner" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="outer">The shaped query on which the operator is applied.</param>
        <param name="inner">The inner shaped query to perform join with.</param>
        <param name="outerKeySelector">The key selector for the outer source.</param>
        <param name="innerKeySelector">The key selector for the inner source.</param>
        <param name="resultSelector">The result selector supplied in the call.</param>
        <summary>
                Translates
                <see cref="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})" />
                method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateIntersect">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateIntersect (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateIntersect(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateIntersect(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateIntersect (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateIntersect : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateIntersect (source1, source2)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateIntersect (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">The shaped query on which the operator is applied.</param>
        <param name="source2">The other source to perform intersect with.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateJoin">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateJoin (outer As ShapedQueryExpression, inner As ShapedQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="inner" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="outer">The shaped query on which the operator is applied.</param>
        <param name="inner">The inner shaped query to perform join with.</param>
        <param name="outerKeySelector">The key selector for the outer source.</param>
        <param name="innerKeySelector">The key selector for the inner source.</param>
        <param name="resultSelector">The result selector supplied in the call.</param>
        <summary>
                Translates
                <see cref="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})" />
                method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateLastOrDefault">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLastOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLastOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate, class System.Type returnType, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateLastOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateLastOrDefault (source As ShapedQueryExpression, predicate As LambdaExpression, returnType As Type, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateLastOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateLastOrDefault (source, predicate, returnType, returnDefault)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateLastOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <param name="returnType">The return type of result.</param>
        <param name="returnDefault">A value indicating whether default should be returned or throw.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})" /> method or
                <see cref="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})" /> and their other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateLeftJoin">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLeftJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLeftJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateLeftJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateLeftJoin (outer As ShapedQueryExpression, inner As ShapedQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateLeftJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateLeftJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateLeftJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="inner" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="outer">The shaped query on which the operator is applied.</param>
        <param name="inner">The inner shaped query to perform join with.</param>
        <param name="outerKeySelector">The key selector for the outer source.</param>
        <param name="innerKeySelector">The key selector for the inner source.</param>
        <param name="resultSelector">The result selector supplied in the call.</param>
        <summary>
                Translates LeftJoin over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>
                Certain patterns of GroupJoin-DefaultIfEmpty-SelectMany represents a left join in database. We identify such pattern
                in advance and convert it to join like syntax.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateLongCount">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLongCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLongCount(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateLongCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateLongCount (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateLongCount : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateLongCount (source, predicate)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateLongCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})" /> method and other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateMax">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMax (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMax(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateMax(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateMax (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateMax : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateMax (source, selector, resultType)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateMax (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? selector, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="selector">The selector supplied in the call.</param>
        <param name="resultType">The result type after the operation.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})" /> method and other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateMin">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateMin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateMin (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateMin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateMin (source, selector, resultType)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateMin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? selector, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="selector">The selector supplied in the call.</param>
        <param name="resultType">The result type after the operation.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})" /> method and other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateOfType">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOfType (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOfType(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateOfType(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateOfType (source As ShapedQueryExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateOfType : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateOfType (source, resultType)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateOfType (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="resultType">The type of result which is being filtered with.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateOrderBy">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOrderBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOrderBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, bool ascending) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateOrderBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateOrderBy (source As ShapedQueryExpression, keySelector As LambdaExpression, ascending As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateOrderBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateOrderBy (source, keySelector, ascending)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateOrderBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="ascending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="keySelector">The key selector supplied in the call.</param>
        <param name="ascending">A value indicating whether the ordering is ascending or not.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> or
                <see cref="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method
                over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateResultSelectorForJoin">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateResultSelectorForJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, System.Linq.Expressions.LambdaExpression resultSelector, System.Linq.Expressions.Expression innerShaper, Type transparentIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateResultSelectorForJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class System.Linq.Expressions.LambdaExpression resultSelector, class System.Linq.Expressions.Expression innerShaper, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateResultSelectorForJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateResultSelectorForJoin (outer As ShapedQueryExpression, resultSelector As LambdaExpression, innerShaper As Expression, transparentIdentifierType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateResultSelectorForJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.Expression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.TranslateResultSelectorForJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.Expression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateResultSelectorForJoin (outer, resultSelector, innerShaper, transparentIdentifierType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("QueryExpressions should combine shapers to work in client eval scenarios.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("QueryExpressions should combine shapers to work in client eval scenarios.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="innerShaper" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="outer">
                The shaped query expression for outer source. The join on the query expression is already performed on outer query
                expression.
            </param>
        <param name="resultSelector">The result selector lambda to translate.</param>
        <param name="innerShaper">The shaper for inner source.</param>
        <param name="transparentIdentifierType">The clr type of transparent identifier created from result.</param>
        <summary>
                Translates the result selector for join operation.
            </summary>
        <returns>The shaped query expression after translation of result selector.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateReverse">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateReverse (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateReverse(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateReverse(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateReverse (source As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateReverse : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateReverse source" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateReverse (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSelect">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelect (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelect(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSelect(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateSelect (source As ShapedQueryExpression, selector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateSelect : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateSelect (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="selector">The selector supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method over the
                given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSelectMany">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateSelectMany (source As ShapedQueryExpression, selector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateSelectMany : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateSelectMany (source, selector)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="selector">The selector supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})" />
                method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSelectMany">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression collectionSelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression collectionSelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateSelectMany (source As ShapedQueryExpression, collectionSelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateSelectMany : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateSelectMany (source, collectionSelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression collectionSelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="collectionSelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="collectionSelector">The collection selector supplied in the call.</param>
        <param name="resultSelector">The result selector supplied in the call.</param>
        <summary>
                Translates
                <see cref="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
                method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSingleOrDefault">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSingleOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSingleOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate, class System.Type returnType, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSingleOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateSingleOrDefault (source As ShapedQueryExpression, predicate As LambdaExpression, returnType As Type, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateSingleOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateSingleOrDefault (source, predicate, returnType, returnDefault)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSingleOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <param name="returnType">The return type of result.</param>
        <param name="returnDefault">A value indicating whether default should be returned or throw.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})" /> method or
                <see cref="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})" /> and their other
                overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSkip">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkip (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkip(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSkip(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateSkip (source As ShapedQueryExpression, count As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateSkip : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateSkip (source, count)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSkip (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="count" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="count">The count supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSkipWhile">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkipWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkipWhile(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSkipWhile(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateSkipWhile (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateSkipWhile : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateSkipWhile (source, predicate)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSkipWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" /> method over the given
                source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSubquery">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSubquery (System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSubquery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSubquery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateSubquery (expression As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateSubquery : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.TranslateSubquery : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateSubquery expression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSubquery (System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">The subquery expression to translate.</param>
        <summary>
                Translates the given subquery.
            </summary>
        <returns>The translation of the given subquery.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateSum">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSum (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSum(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateSum(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateSum (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateSum : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateSum (source, selector, resultType)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSum (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? selector, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="selector">The selector supplied in the call.</param>
        <param name="resultType">The result type after the operation.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})" /> method and other overloads over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTake">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTake (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTake(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateTake(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateTake (source As ShapedQueryExpression, count As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateTake : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateTake (source, count)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateTake (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="count" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="count">The count supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTakeWhile">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTakeWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTakeWhile(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateTakeWhile(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateTakeWhile (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateTakeWhile : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateTakeWhile (source, predicate)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateTakeWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" /> method over the given
                source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateThenBy">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateThenBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateThenBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, bool ascending) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateThenBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateThenBy (source As ShapedQueryExpression, keySelector As LambdaExpression, ascending As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateThenBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateThenBy (source, keySelector, ascending)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateThenBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="ascending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="keySelector">The key selector supplied in the call.</param>
        <param name="ascending">A value indicating whether the ordering is ascending or not.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> or
                <see cref="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method
                over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateUnion">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateUnion (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateUnion(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateUnion(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateUnion (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateUnion : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateUnion (source1, source2)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateUnion (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">The shaped query on which the operator is applied.</param>
        <param name="source2">The other source to perform union with.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateWhere">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateWhere (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateWhere(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslateWhere(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function TranslateWhere (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateWhere : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="queryableMethodTranslatingExpressionVisitor.TranslateWhere (source, predicate)" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateWhere (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="predicate">The predicate supplied in the call.</param>
        <summary>
                Translates <see cref="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" /> method over the given source.
            </summary>
        <returns>The shaped query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslationErrorDetails">
      <MemberSignature Language="C#" Value="public string TranslationErrorDetails { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string TranslationErrorDetails" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslationErrorDetails" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TranslationErrorDetails As String" />
      <MemberSignature Language="F#" Value="member this.TranslationErrorDetails : string" Usage="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.TranslationErrorDetails" />
      <MemberSignature Language="C#" Value="public string? TranslationErrorDetails { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Detailed information about errors encountered during translation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstant">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConstant (System.Linq.Expressions.ConstantExpression constantExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConstant(class System.Linq.Expressions.ConstantExpression constantExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConstant (constantExpression As ConstantExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="queryableMethodTranslatingExpressionVisitor.VisitConstant constantExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constantExpression" Type="System.Linq.Expressions.ConstantExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="constantExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression expression) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (expression As Expression) As Expression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="queryableMethodTranslatingExpressionVisitor.VisitExtension expression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression extensionExpression);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression extensionExpression) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (extensionExpression As Expression) As Expression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="queryableMethodTranslatingExpressionVisitor.VisitExtension extensionExpression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="extensionExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="extensionExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMethodCall (methodCallExpression As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="queryableMethodTranslatingExpressionVisitor.VisitMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
