<Type Name="QuerySqlGenerator" FullName="Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator">
  <TypeSignature Language="C#" Value="public class QuerySqlGenerator : Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuerySqlGenerator extends Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class QuerySqlGenerator&#xA;Inherits SqlExpressionVisitor" />
  <TypeSignature Language="F#" Value="type QuerySqlGenerator = class&#xA;    inherit SqlExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    A query SQL generator to get <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" /> for given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuerySqlGenerator (Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QuerySqlGeneratorDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator : Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies -&gt; Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator" Usage="new Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">Parameter object containing dependencies for this class.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AliasSeparator">
      <MemberSignature Language="C#" Value="protected virtual string AliasSeparator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AliasSeparator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.AliasSeparator" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property AliasSeparator As String" />
      <MemberSignature Language="F#" Value="member this.AliasSeparator : string" Usage="Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.AliasSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The default alias separator.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckComposableSql">
      <MemberSignature Language="C#" Value="protected virtual void CheckComposableSql (string sql);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CheckComposableSql(string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.CheckComposableSql(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CheckComposableSql (sql As String)" />
      <MemberSignature Language="F#" Value="abstract member CheckComposableSql : string -&gt; unit&#xA;override this.CheckComposableSql : string -&gt; unit" Usage="querySqlGenerator.CheckComposableSql sql" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sql">An SQL string to be checked for composability.</param>
        <summary>
                Checks whether a given SQL string is composable, i.e. can be embedded as a subquery within a
                larger SQL query.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The given SQL isn't composable.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckComposableSqlTrimmed">
      <MemberSignature Language="C#" Value="protected virtual void CheckComposableSqlTrimmed (ReadOnlySpan&lt;char&gt; sql);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CheckComposableSqlTrimmed(valuetype System.ReadOnlySpan`1&lt;char&gt; sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.CheckComposableSqlTrimmed(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CheckComposableSqlTrimmed (sql As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="F#" Value="abstract member CheckComposableSqlTrimmed : ReadOnlySpan&lt;char&gt; -&gt; unit&#xA;override this.CheckComposableSqlTrimmed : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="querySqlGenerator.CheckComposableSqlTrimmed sql" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sql">An trimmed SQL string to be checked for composability.</param>
        <summary>
                Checks whether a given SQL string is composable, i.e. can be embedded as a subquery within a
                larger SQL query. The provided <paramref name="sql" /> is already trimmed for whitespace and comments.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The given SQL isn't composable.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As QuerySqlGeneratorDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies" Usage="Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateEmptyProjection">
      <MemberSignature Language="C#" Value="protected virtual void GenerateEmptyProjection (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateEmptyProjection(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateEmptyProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateEmptyProjection (selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateEmptyProjection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit&#xA;override this.GenerateEmptyProjection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit" Usage="querySqlGenerator.GenerateEmptyProjection selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">SelectExpression for which the empty projection will be generated.</param>
        <summary>
                Generates empty projection for a SelectExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateExists">
      <MemberSignature Language="C#" Value="protected virtual void GenerateExists (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression existsExpression, bool negated);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateExists(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression existsExpression, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateExists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateExists (existsExpression As ExistsExpression, negated As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GenerateExists : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression * bool -&gt; unit&#xA;override this.GenerateExists : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression * bool -&gt; unit" Usage="querySqlGenerator.GenerateExists (existsExpression, negated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existsExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="negated" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="existsExpression">The expression to visit.</param>
        <param name="negated">Whether the given <paramref name="existsExpression" /> is negated.</param>
        <summary>
                Generates SQL for the EXISTS expression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateIn">
      <MemberSignature Language="C#" Value="protected virtual void GenerateIn (Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression inExpression, bool negated);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateIn(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression inExpression, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateIn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateIn (inExpression As InExpression, negated As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GenerateIn : Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression * bool -&gt; unit&#xA;override this.GenerateIn : Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression * bool -&gt; unit" Usage="querySqlGenerator.GenerateIn (inExpression, negated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="negated" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="inExpression">The expression to visit.</param>
        <param name="negated">Whether the given <paramref name="inExpression" /> is negated.</param>
        <summary>
                Generates SQL for the IN expression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateLike">
      <MemberSignature Language="C#" Value="protected virtual void GenerateLike (Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression likeExpression, bool negated);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateLike(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression likeExpression, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateLike(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateLike (likeExpression As LikeExpression, negated As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GenerateLike : Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression * bool -&gt; unit&#xA;override this.GenerateLike : Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression * bool -&gt; unit" Usage="querySqlGenerator.GenerateLike (likeExpression, negated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="likeExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="negated" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="likeExpression">The expression to visit.</param>
        <param name="negated">Whether the given <paramref name="likeExpression" /> is negated.</param>
        <summary>
                Generates SQL for the LIKE expression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateLimitOffset">
      <MemberSignature Language="C#" Value="protected virtual void GenerateLimitOffset (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateLimitOffset(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateLimitOffset (selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateLimitOffset : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit&#xA;override this.GenerateLimitOffset : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit" Usage="querySqlGenerator.GenerateLimitOffset selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="selectExpression">A select expression to use.</param>
        <summary>
                Generates a LIMIT...OFFSET... construct in the relational command
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOperator">
      <MemberSignature Language="C#" Value="protected virtual string GenerateOperator (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression binaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GenerateOperator(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression binaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateOperator(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateOperator (binaryExpression As SqlBinaryExpression) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateOperator : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression -&gt; string&#xA;override this.GenerateOperator : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression -&gt; string" Usage="querySqlGenerator.GenerateOperator binaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use GetOperator instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GetOperator instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="binaryExpression">A SQL binary operation.</param>
        <summary>
                Generates a SQL operator for a SQL binary operation.
            </summary>
        <returns>A string representation of the binary operator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOrderings">
      <MemberSignature Language="C#" Value="protected virtual void GenerateOrderings (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateOrderings(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateOrderings(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateOrderings (selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateOrderings : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit&#xA;override this.GenerateOrderings : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit" Usage="querySqlGenerator.GenerateOrderings selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="selectExpression">A select expression to use.</param>
        <summary>
                Generates an ORDER BY clause in the relational command
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratePseudoFromClause">
      <MemberSignature Language="C#" Value="protected virtual void GeneratePseudoFromClause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GeneratePseudoFromClause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GeneratePseudoFromClause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GeneratePseudoFromClause ()" />
      <MemberSignature Language="F#" Value="abstract member GeneratePseudoFromClause : unit -&gt; unit&#xA;override this.GeneratePseudoFromClause : unit -&gt; unit" Usage="querySqlGenerator.GeneratePseudoFromClause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Generates a pseudo FROM clause. Required by some providers when a query has no actual FROM clause.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateRootCommand">
      <MemberSignature Language="C#" Value="protected virtual void GenerateRootCommand (System.Linq.Expressions.Expression queryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateRootCommand(class System.Linq.Expressions.Expression queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateRootCommand(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateRootCommand (queryExpression As Expression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateRootCommand : System.Linq.Expressions.Expression -&gt; unit&#xA;override this.GenerateRootCommand : System.Linq.Expressions.Expression -&gt; unit" Usage="querySqlGenerator.GenerateRootCommand queryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="queryExpression">A query expression to print in command.</param>
        <summary>
                Generates the command for the given top-level query expression. This allows providers to intercept if an expression
                requires different processing when it is at top-level.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSetOperation">
      <MemberSignature Language="C#" Value="protected virtual void GenerateSetOperation (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase setOperation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSetOperation(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase setOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateSetOperation(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateSetOperation (setOperation As SetOperationBase)" />
      <MemberSignature Language="F#" Value="abstract member GenerateSetOperation : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase -&gt; unit&#xA;override this.GenerateSetOperation : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase -&gt; unit" Usage="querySqlGenerator.GenerateSetOperation setOperation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="setOperation" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase" />
      </Parameters>
      <Docs>
        <param name="setOperation">A set operation to print.</param>
        <summary>
                Generates a set operation in the relational command.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSetOperationOperand">
      <MemberSignature Language="C#" Value="protected virtual void GenerateSetOperationOperand (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase setOperation, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression operand);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSetOperationOperand(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase setOperation, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateSetOperationOperand(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateSetOperationOperand (setOperation As SetOperationBase, operand As SelectExpression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateSetOperationOperand : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit&#xA;override this.GenerateSetOperationOperand : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit" Usage="querySqlGenerator.GenerateSetOperationOperand (setOperation, operand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="setOperation" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase" />
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="setOperation">A set operation to use.</param>
        <param name="operand">A set operation operand to print.</param>
        <summary>
                Generates an operand for a given set operation in the relational command.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateTagsHeaderComment">
      <MemberSignature Language="C#" Value="protected virtual void GenerateTagsHeaderComment (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTagsHeaderComment(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateTagsHeaderComment(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateTagsHeaderComment (selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateTagsHeaderComment : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit&#xA;override this.GenerateTagsHeaderComment : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit" Usage="querySqlGenerator.GenerateTagsHeaderComment selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Use the method which takes tags instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the method which takes tags instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="selectExpression">A select expression to generate tags for.</param>
        <summary>
                Generates the head comment for tags.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateTagsHeaderComment">
      <MemberSignature Language="C#" Value="protected virtual void GenerateTagsHeaderComment (System.Collections.Generic.ISet&lt;string&gt; tags);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTagsHeaderComment(class System.Collections.Generic.ISet`1&lt;string&gt; tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateTagsHeaderComment(System.Collections.Generic.ISet{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateTagsHeaderComment (tags As ISet(Of String))" />
      <MemberSignature Language="F#" Value="abstract member GenerateTagsHeaderComment : System.Collections.Generic.ISet&lt;string&gt; -&gt; unit&#xA;override this.GenerateTagsHeaderComment : System.Collections.Generic.ISet&lt;string&gt; -&gt; unit" Usage="querySqlGenerator.GenerateTagsHeaderComment tags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.ISet&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="tags">A set of tags to print as comment.</param>
        <summary>
                Generates the head comment for tags.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateTop">
      <MemberSignature Language="C#" Value="protected virtual void GenerateTop (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTop(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateTop(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateTop (selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateTop : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit&#xA;override this.GenerateTop : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; unit" Usage="querySqlGenerator.GenerateTop selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="selectExpression">A select expression to use.</param>
        <summary>
                Generates a TOP construct in the relational command
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateValues">
      <MemberSignature Language="C#" Value="protected virtual void GenerateValues (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression valuesExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateValues(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression valuesExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateValues(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateValues (valuesExpression As ValuesExpression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateValues : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression -&gt; unit&#xA;override this.GenerateValues : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression -&gt; unit" Usage="querySqlGenerator.GenerateValues valuesExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valuesExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="valuesExpression">To be added.</param>
        <summary>
                Generates a VALUES expression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommand">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IRelationalCommand GetCommand (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand GetCommand(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GetCommand(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCommand (selectExpression As SelectExpression) As IRelationalCommand" />
      <MemberSignature Language="F#" Value="abstract member GetCommand : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommand&#xA;override this.GetCommand : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" Usage="querySqlGenerator.GetCommand selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">A select expression to print in command text.</param>
        <summary>
                Gets a relational command for a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        <returns>A relational command with a SQL represented by the select expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommand">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IRelationalCommand GetCommand (System.Linq.Expressions.Expression queryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand GetCommand(class System.Linq.Expressions.Expression queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GetCommand(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCommand (queryExpression As Expression) As IRelationalCommand" />
      <MemberSignature Language="F#" Value="abstract member GetCommand : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommand&#xA;override this.GetCommand : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" Usage="querySqlGenerator.GetCommand queryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="queryExpression">A query expression to print in command text.</param>
        <summary>
                Gets a relational command for a query expression.
            </summary>
        <returns>A relational command with a SQL represented by the query expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOperator">
      <MemberSignature Language="C#" Value="protected virtual string GetOperator (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression binaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetOperator(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression binaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GetOperator(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetOperator (binaryExpression As SqlBinaryExpression) As String" />
      <MemberSignature Language="F#" Value="abstract member GetOperator : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression -&gt; string&#xA;override this.GetOperator : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression -&gt; string" Usage="querySqlGenerator.GetOperator binaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="binaryExpression">A SQL binary operation.</param>
        <summary>
                Gets a SQL operator for a SQL binary operation.
            </summary>
        <returns>A string representation of the binary operator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresParentheses">
      <MemberSignature Language="C#" Value="protected virtual bool RequiresParentheses (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression outerExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression innerExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool RequiresParentheses(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression outerExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression innerExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.RequiresParentheses(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RequiresParentheses (outerExpression As SqlExpression, innerExpression As SqlExpression) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member RequiresParentheses : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; bool&#xA;override this.RequiresParentheses : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; bool" Usage="querySqlGenerator.RequiresParentheses (outerExpression, innerExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outerExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="innerExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="outerExpression">The outer expression which provides context in which SQL is being generated.</param>
        <param name="innerExpression">The inner expression which may need to be put inside parenthesis.</param>
        <summary>
                Returns a bool value indicating if the inner SQL expression required to be put inside parenthesis when generating SQL for outer
                SQL expression.
            </summary>
        <returns>A bool value indicating that parenthesis is required or not. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sql">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder Sql { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder Sql" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.Sql" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Sql As IRelationalCommandBuilder" />
      <MemberSignature Language="F#" Value="member this.Sql : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.Sql" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The current SQL command builder.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGenerateWithoutWrappingSelect">
      <MemberSignature Language="C#" Value="protected virtual bool TryGenerateWithoutWrappingSelect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryGenerateWithoutWrappingSelect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.TryGenerateWithoutWrappingSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryGenerateWithoutWrappingSelect (selectExpression As SelectExpression) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGenerateWithoutWrappingSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; bool&#xA;override this.TryGenerateWithoutWrappingSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; bool" Usage="querySqlGenerator.TryGenerateWithoutWrappingSelect selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <summary>
                If possible, generates the expression contained within the provided <paramref name="selectExpression" /> without the wrapping
                SELECT. This can be done for set operations and VALUES, which can appear as top-level statements without needing to be wrapped
                in SELECT.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetOperatorInfo">
      <MemberSignature Language="C#" Value="protected virtual bool TryGetOperatorInfo (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression expression, out int precedence, out bool isAssociative);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryGetOperatorInfo(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression expression, [out] int32&amp; precedence, [out] bool&amp; isAssociative) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.TryGetOperatorInfo(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryGetOperatorInfo (expression As SqlExpression, ByRef precedence As Integer, ByRef isAssociative As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetOperatorInfo : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * int * bool -&gt; bool&#xA;override this.TryGetOperatorInfo : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * int * bool -&gt; bool" Usage="querySqlGenerator.TryGetOperatorInfo (expression, precedence, isAssociative)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="precedence" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="isAssociative" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">The expression for which to get the precedence and associativity.</param>
        <param name="precedence">
                If the method returned <see langword="true" />, contains the precedence of the provided <paramref name="expression" />.
                Otherwise, contains default values.
            </param>
        <param name="isAssociative">
                If the method returned <see langword="true" />, contains the associativity of the provided <paramref name="expression" />.
                Otherwise, contains default values.
            </param>
        <summary>
                Returns a numeric value representing the precedence of the given <paramref name="expression" />, as well as its associativity.
                These control whether parentheses are generated around the expression.
            </summary>
        <returns>
          <see langword="true" /> if the expression operator info is known and was returned in <paramref name="precedence" /> and
                <paramref name="isAssociative" />. Otherwise, <see langword="false" />.
            </returns>
        <remarks>
                The default implementation always returns false, so that parentheses almost always get added. Providers can override this method
                to remove parentheses where they aren't necessary.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAtTimeZone">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitAtTimeZone (Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression atTimeZoneExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitAtTimeZone(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression atTimeZoneExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitAtTimeZone(Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitAtTimeZone (atTimeZoneExpression As AtTimeZoneExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitAtTimeZone : Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitAtTimeZone atTimeZoneExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="atTimeZoneExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="atTimeZoneExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitCase">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitCase (Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression caseExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitCase(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression caseExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitCase(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCase (caseExpression As CaseExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitCase : Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitCase caseExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" />
      </Parameters>
      <Docs>
        <param name="caseExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitCollate">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitCollate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression collateExpresion);" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitCollate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression collateExpresion) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitCollate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCollate (collateExpresion As CollateExpression) As Expression" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="override this.VisitCollate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitCollate collateExpresion" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitCollate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression collateExpression);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitCollate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression collateExpression) cil managed" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCollate (collateExpression As CollateExpression) As Expression" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.VisitCollate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitCollate collateExpression" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collateExpresion" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="collateExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="collateExpresion">To be added.</param>
        <param name="collateExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitColumn">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitColumn (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression columnExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitColumn(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression columnExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitColumn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitColumn (columnExpression As ColumnExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitColumn : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitColumn columnExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression" />
      </Parameters>
      <Docs>
        <param name="columnExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitCrossApply">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitCrossApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression crossApplyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitCrossApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression crossApplyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCrossApply (crossApplyExpression As CrossApplyExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitCrossApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitCrossApply crossApplyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="crossApplyExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression" />
      </Parameters>
      <Docs>
        <param name="crossApplyExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitCrossJoin">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitCrossJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression crossJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitCrossJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression crossJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCrossJoin (crossJoinExpression As CrossJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitCrossJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitCrossJoin crossJoinExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="crossJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression" />
      </Parameters>
      <Docs>
        <param name="crossJoinExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitDelete">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitDelete (Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression deleteExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitDelete(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression deleteExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitDelete(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitDelete (deleteExpression As DeleteExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitDelete : Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitDelete deleteExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="deleteExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitDistinct">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitDistinct (Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression distinctExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitDistinct(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression distinctExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitDistinct(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitDistinct (distinctExpression As DistinctExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitDistinct : Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitDistinct distinctExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distinctExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="distinctExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitExcept">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExcept (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression exceptExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExcept(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression exceptExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitExcept(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExcept (exceptExpression As ExceptExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExcept : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitExcept exceptExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression" />
      </Parameters>
      <Docs>
        <param name="exceptExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitExists">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExists (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression existsExpression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExists(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression existsExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitExists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExists (existsExpression As ExistsExpression) As Expression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="override this.VisitExists : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitExists existsExpression" />
      <MemberSignature Language="C#" Value="protected override sealed System.Linq.Expressions.Expression VisitExists (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression existsExpression);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function VisitExists (existsExpression As ExistsExpression) As Expression" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existsExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression" />
      </Parameters>
      <Docs>
        <param name="existsExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitFromSql">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitFromSql (Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression fromSqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitFromSql(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression fromSqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitFromSql(Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitFromSql (fromSqlExpression As FromSqlExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitFromSql : Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitFromSql fromSqlExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromSqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" />
      </Parameters>
      <Docs>
        <param name="fromSqlExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitIn">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitIn (Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression inExpression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitIn(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression inExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitIn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitIn (inExpression As InExpression) As Expression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="override this.VisitIn : Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitIn inExpression" />
      <MemberSignature Language="C#" Value="protected override sealed System.Linq.Expressions.Expression VisitIn (Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression inExpression);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function VisitIn (inExpression As InExpression) As Expression" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" />
      </Parameters>
      <Docs>
        <param name="inExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitInnerJoin">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitInnerJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression innerJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitInnerJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression innerJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitInnerJoin (innerJoinExpression As InnerJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitInnerJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitInnerJoin innerJoinExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression" />
      </Parameters>
      <Docs>
        <param name="innerJoinExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitIntersect">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitIntersect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression intersectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitIntersect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression intersectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitIntersect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitIntersect (intersectExpression As IntersectExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitIntersect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitIntersect intersectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intersectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression" />
      </Parameters>
      <Docs>
        <param name="intersectExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitJsonScalar">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitJsonScalar (Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression jsonScalarExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitJsonScalar(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression jsonScalarExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitJsonScalar(Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitJsonScalar (jsonScalarExpression As JsonScalarExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitJsonScalar : Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitJsonScalar jsonScalarExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jsonScalarExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="jsonScalarExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitLeftJoin">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLeftJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression leftJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLeftJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression leftJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLeftJoin (leftJoinExpression As LeftJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitLeftJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitLeftJoin leftJoinExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression" />
      </Parameters>
      <Docs>
        <param name="leftJoinExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitLike">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitLike (Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression likeExpression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitLike(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression likeExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitLike(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitLike (likeExpression As LikeExpression) As Expression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="override this.VisitLike : Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitLike likeExpression" />
      <MemberSignature Language="C#" Value="protected override sealed System.Linq.Expressions.Expression VisitLike (Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression likeExpression);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function VisitLike (likeExpression As LikeExpression) As Expression" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="likeExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression" />
      </Parameters>
      <Docs>
        <param name="likeExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitOrdering">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitOrdering (Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitOrdering(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitOrdering (orderingExpression As OrderingExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitOrdering : Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitOrdering orderingExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderingExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression" />
      </Parameters>
      <Docs>
        <param name="orderingExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitOuterApply">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitOuterApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression outerApplyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitOuterApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression outerApplyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitOuterApply (outerApplyExpression As OuterApplyExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitOuterApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitOuterApply outerApplyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outerApplyExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression" />
      </Parameters>
      <Docs>
        <param name="outerApplyExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitProjection">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitProjection (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression projectionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitProjection(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression projectionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitProjection (projectionExpression As ProjectionExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitProjection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitProjection projectionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression" />
      </Parameters>
      <Docs>
        <param name="projectionExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitRowNumber">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitRowNumber (Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression rowNumberExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitRowNumber(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression rowNumberExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitRowNumber(Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitRowNumber (rowNumberExpression As RowNumberExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitRowNumber : Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitRowNumber rowNumberExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowNumberExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression" />
      </Parameters>
      <Docs>
        <param name="rowNumberExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitRowValue">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitRowValue (Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression rowValueExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitRowValue(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression rowValueExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitRowValue(Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitRowValue (rowValueExpression As RowValueExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitRowValue : Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitRowValue rowValueExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowValueExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="rowValueExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitScalarSubquery">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitScalarSubquery (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression scalarSubqueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitScalarSubquery(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression scalarSubqueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitScalarSubquery(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitScalarSubquery (scalarSubqueryExpression As ScalarSubqueryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitScalarSubquery : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitScalarSubquery scalarSubqueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalarSubqueryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="scalarSubqueryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSelect">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSelect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSelect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSelect (selectExpression As SelectExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitSelect selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSqlBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlBinary (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression sqlBinaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlBinary(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression sqlBinaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlBinary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlBinary (sqlBinaryExpression As SqlBinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlBinary : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitSqlBinary sqlBinaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlBinaryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" />
      </Parameters>
      <Docs>
        <param name="sqlBinaryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSqlConstant">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlConstant (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression sqlConstantExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlConstant(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression sqlConstantExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlConstant(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlConstant (sqlConstantExpression As SqlConstantExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlConstant : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitSqlConstant sqlConstantExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlConstantExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression" />
      </Parameters>
      <Docs>
        <param name="sqlConstantExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSqlFragment">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlFragment (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression sqlFragmentExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlFragment(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression sqlFragmentExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlFragment(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlFragment (sqlFragmentExpression As SqlFragmentExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlFragment : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitSqlFragment sqlFragmentExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlFragmentExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression" />
      </Parameters>
      <Docs>
        <param name="sqlFragmentExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSqlFunction">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlFunction (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression sqlFunctionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlFunction(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression sqlFunctionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlFunction (sqlFunctionExpression As SqlFunctionExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlFunction : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitSqlFunction sqlFunctionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlFunctionExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" />
      </Parameters>
      <Docs>
        <param name="sqlFunctionExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSqlParameter">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlParameter (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression sqlParameterExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlParameter(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression sqlParameterExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlParameter(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlParameter (sqlParameterExpression As SqlParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlParameter : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitSqlParameter sqlParameterExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlParameterExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression" />
      </Parameters>
      <Docs>
        <param name="sqlParameterExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSqlUnary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSqlUnary (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression sqlUnaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSqlUnary(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression sqlUnaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlUnary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSqlUnary (sqlUnaryExpression As SqlUnaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSqlUnary : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitSqlUnary sqlUnaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlUnaryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" />
      </Parameters>
      <Docs>
        <param name="sqlUnaryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitSubSelect">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitSubSelect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression scalarSubqueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitSubSelect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression scalarSubqueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSubSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitSubSelect (scalarSubqueryExpression As ScalarSubqueryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitSubSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitSubSelect scalarSubqueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalarSubqueryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="scalarSubqueryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTable">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitTable (Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitTable(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitTable(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitTable (tableExpression As TableExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitTable : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitTable tableExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" />
      </Parameters>
      <Docs>
        <param name="tableExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitTableValuedFunction">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitTableValuedFunction (Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression tableValuedFunctionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitTableValuedFunction(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression tableValuedFunctionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitTableValuedFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitTableValuedFunction (tableValuedFunctionExpression As TableValuedFunctionExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitTableValuedFunction : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitTableValuedFunction tableValuedFunctionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableValuedFunctionExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="tableValuedFunctionExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitUnion">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUnion (Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression unionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUnion(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression unionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitUnion(Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitUnion (unionExpression As UnionExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitUnion : Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitUnion unionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unionExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression" />
      </Parameters>
      <Docs>
        <param name="unionExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitUpdate">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUpdate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression updateExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUpdate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression updateExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitUpdate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitUpdate (updateExpression As UpdateExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitUpdate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitUpdate updateExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updateExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="updateExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitValues">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitValues (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression valuesExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitValues(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression valuesExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitValues(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitValues (valuesExpression As ValuesExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitValues : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression -&gt; System.Linq.Expressions.Expression" Usage="querySqlGenerator.VisitValues valuesExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valuesExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="valuesExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
