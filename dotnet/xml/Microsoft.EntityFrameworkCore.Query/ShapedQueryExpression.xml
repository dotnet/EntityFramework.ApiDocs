<Type Name="ShapedQueryExpression" FullName="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression">
  <TypeSignature Language="C#" Value="public class ShapedQueryExpression : System.Linq.Expressions.Expression, Microsoft.EntityFrameworkCore.Query.IPrintableExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ShapedQueryExpression extends System.Linq.Expressions.Expression implements class Microsoft.EntityFrameworkCore.Query.IPrintableExpression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class ShapedQueryExpression&#xA;Inherits Expression&#xA;Implements IPrintableExpression" />
  <TypeSignature Language="F#" Value="type ShapedQueryExpression = class&#xA;    inherit Expression&#xA;    interface IPrintableExpression" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IPrintableExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="efcore-8.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{Microsoft.EntityFrameworkCore.Query.ExpressionPrinter.Print(QueryExpression), nq}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{Microsoft.EntityFrameworkCore.Query.ExpressionPrinter.Print(QueryExpression), nq}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>
                    An expression that combines a query expression and shaper expression.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                and <see href="https://aka.ms/efcore-docs-how-query-works">How EF Core queries work</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ShapedQueryExpression (System.Linq.Expressions.Expression queryExpression, System.Linq.Expressions.Expression shaperExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression queryExpression, class System.Linq.Expressions.Expression shaperExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryExpression As Expression, shaperExpression As Expression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="new Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression (queryExpression, shaperExpression)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="queryExpression">The query expression to get results from server.</param>
        <param name="shaperExpression">The shaper expression to create result objects from server results.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> class with associated query and shaper expressions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print">
      <MemberSignature Language="C#" Value="void IPrintableExpression.Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Sub Print (expressionPrinter As ExpressionPrinter) Implements IPrintableExpression.Print" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit&#xA;override this.Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="shapedQueryExpression.Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public virtual void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Print (expressionPrinter As ExpressionPrinter)" />
      <MemberSignature Language="F#" Value="abstract member Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit&#xA;override this.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="shapedQueryExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression QueryExpression { get; set; }" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression QueryExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.QueryExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueryExpression As Expression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="member this.QueryExpression : System.Linq.Expressions.Expression with get, set" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.QueryExpression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression QueryExpression { get; }" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property QueryExpression As Expression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.QueryExpression : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.QueryExpression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An expression representing the query to be run against server to retrieve the data.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultCardinality">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.ResultCardinality ResultCardinality { get; set; }" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.Query.ResultCardinality ResultCardinality" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ResultCardinality" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ResultCardinality As ResultCardinality" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="member this.ResultCardinality : Microsoft.EntityFrameworkCore.Query.ResultCardinality with get, set" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ResultCardinality" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.ResultCardinality ResultCardinality { get; }" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ResultCardinality As ResultCardinality" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.ResultCardinality : Microsoft.EntityFrameworkCore.Query.ResultCardinality" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ResultCardinality" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ResultCardinality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The cardinality of the results generated.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShaperExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ShaperExpression { get; set; }" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression ShaperExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ShaperExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShaperExpression As Expression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="member this.ShaperExpression : System.Linq.Expressions.Expression with get, set" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ShaperExpression" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ShaperExpression { get; }" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ShaperExpression As Expression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.ShaperExpression : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ShaperExpression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                An expression representing the shaper to be run on the results fetched from the server.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression Update (System.Linq.Expressions.Expression queryExpression, System.Linq.Expressions.Expression shaperExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression Update(class System.Linq.Expressions.Expression queryExpression, class System.Linq.Expressions.Expression shaperExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (queryExpression As Expression, shaperExpression As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.Update : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="shapedQueryExpression.Update (queryExpression, shaperExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="queryExpression">The <see cref="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.QueryExpression" /> property of the result.</param>
        <param name="shaperExpression">The <see cref="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ShaperExpression" /> property of the result.</param>
        <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
        <returns>This expression if no children changed, or an expression with the updated children.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateQueryExpression">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression UpdateQueryExpression (System.Linq.Expressions.Expression queryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression UpdateQueryExpression(class System.Linq.Expressions.Expression queryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.UpdateQueryExpression(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateQueryExpression (queryExpression As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member UpdateQueryExpression : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.UpdateQueryExpression : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="shapedQueryExpression.UpdateQueryExpression queryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="queryExpression">The <see cref="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.QueryExpression" /> property of the result.</param>
        <summary>
                Creates a new expression that is like this one, but using the supplied query expression. If query expression is the same, it will
                return this expression.
            </summary>
        <returns>This expression if shaper expression did not change, or an expression with the updated shaper expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateResultCardinality">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression UpdateResultCardinality (Microsoft.EntityFrameworkCore.Query.ResultCardinality resultCardinality);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression UpdateResultCardinality(valuetype Microsoft.EntityFrameworkCore.Query.ResultCardinality resultCardinality) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.UpdateResultCardinality(Microsoft.EntityFrameworkCore.Query.ResultCardinality)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateResultCardinality (resultCardinality As ResultCardinality) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member UpdateResultCardinality : Microsoft.EntityFrameworkCore.Query.ResultCardinality -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.UpdateResultCardinality : Microsoft.EntityFrameworkCore.Query.ResultCardinality -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="shapedQueryExpression.UpdateResultCardinality resultCardinality" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCardinality" Type="Microsoft.EntityFrameworkCore.Query.ResultCardinality" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="resultCardinality">The <see cref="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ResultCardinality" /> property of the result.</param>
        <summary>
                Creates a new expression that is like this one, but with supplied result cardinality.
            </summary>
        <returns>An expression with the updated result cardinality.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateShaperExpression">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression UpdateShaperExpression (System.Linq.Expressions.Expression shaperExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression UpdateShaperExpression(class System.Linq.Expressions.Expression shaperExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.UpdateShaperExpression(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateShaperExpression (shaperExpression As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member UpdateShaperExpression : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.UpdateShaperExpression : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="shapedQueryExpression.UpdateShaperExpression shaperExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="shaperExpression">The <see cref="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ShaperExpression" /> property of the result.</param>
        <summary>
                Creates a new expression that is like this one, but using the supplied shaper expression. If shaper expression is the same, it will
                return this expression.
            </summary>
        <returns>This expression if shaper expression did not change, or an expression with the updated shaper expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="shapedQueryExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
