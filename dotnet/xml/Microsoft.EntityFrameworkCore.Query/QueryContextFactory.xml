<Type Name="QueryContextFactory" FullName="Microsoft.EntityFrameworkCore.Query.QueryContextFactory">
  <TypeSignature Language="C#" Value="public abstract class QueryContextFactory : Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit QueryContextFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.QueryContextFactory" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class QueryContextFactory&#xA;Implements IQueryContextFactory" />
  <TypeSignature Language="F#" Value="type QueryContextFactory = class&#xA;    interface IQueryContextFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IQueryContextFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                A factory for <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryContext" /> instances.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QueryContextFactory (Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As QueryContextDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QueryContextFactory : Microsoft.EntityFrameworkCore.Query.QueryContextDependencies -&gt; Microsoft.EntityFrameworkCore.Query.QueryContextFactory" Usage="new Microsoft.EntityFrameworkCore.Query.QueryContextFactory dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryContextDependencies" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QueryContextFactory (Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext, Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector concurrencyDetector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentContext, class Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector concurrencyDetector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (currentContext As ICurrentDbContext, concurrencyDetector As IConcurrencyDetector)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QueryContextFactory : Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext * Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector -&gt; Microsoft.EntityFrameworkCore.Query.QueryContextFactory" Usage="new Microsoft.EntityFrameworkCore.Query.QueryContextFactory (currentContext, concurrencyDetector)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="currentContext" Type="Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext" Index="0" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="concurrencyDetector" Type="Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector" Index="1" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="currentContext">To be added.</param>
        <param name="concurrencyDetector">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QueryContextFactory (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector concurrencyDetector, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, class Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector concurrencyDetector, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector changeDetector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (stateManager As IStateManager, concurrencyDetector As IConcurrencyDetector, changeDetector As IChangeDetector)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QueryContextFactory : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector -&gt; Microsoft.EntityFrameworkCore.Query.QueryContextFactory" Usage="new Microsoft.EntityFrameworkCore.Query.QueryContextFactory (stateManager, concurrencyDetector, changeDetector)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="concurrencyDetector" Type="Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector" Index="1" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="changeDetector" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector" Index="2" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <param name="concurrencyDetector">To be added.</param>
        <param name="changeDetector">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeDetector">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector ChangeDetector { get; }" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector ChangeDetector" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ChangeDetector" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ChangeDetector As IChangeDetector" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="F#" Value="member this.ChangeDetector : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector" Usage="Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ChangeDetector" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector&gt; ChangeDetector { get; }" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.LazyRef`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector&gt; ChangeDetector" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ChangeDetector As LazyRef(Of IChangeDetector)" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="F#" Value="member this.ChangeDetector : Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector&gt;" Usage="Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ChangeDetector" FrameworkAlternate="efcore-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0">Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector</ReturnType>
        <ReturnType FrameworkAlternate="efcore-1.1">Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the change detector.
            </summary>
        <value>
                The change detector.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcurrencyDetector">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector ConcurrencyDetector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector ConcurrencyDetector" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ConcurrencyDetector" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ConcurrencyDetector As IConcurrencyDetector" />
      <MemberSignature Language="F#" Value="member this.ConcurrencyDetector : Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector" Usage="Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ConcurrencyDetector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the concurrency detector.
            </summary>
        <value>
                The concurrency detector.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Query.QueryContext Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.QueryContext Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Create" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Create () As QueryContext" />
      <MemberSignature Language="F#" Value="abstract member Create : unit -&gt; Microsoft.EntityFrameworkCore.Query.QueryContext" Usage="queryContextFactory.Create " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates a new QueryContext.
            </summary>
        <returns>
                A QueryContext.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryBuffer">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer CreateQueryBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer CreateQueryBuffer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.CreateQueryBuffer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateQueryBuffer () As IQueryBuffer" />
      <MemberSignature Language="F#" Value="abstract member CreateQueryBuffer : unit -&gt; Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&#xA;override this.CreateQueryBuffer : unit -&gt; Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer" Usage="queryContextFactory.CreateQueryBuffer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates a query buffer.
            </summary>
        <returns>
                The new query buffer.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.QueryContextDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As QueryContextDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Query.QueryContextDependencies" Usage="Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryContextDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Parameter object containing dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateManager">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager StateManager { get; }" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager StateManager" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.StateManager" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property StateManager As IStateManager" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="F#" Value="member this.StateManager : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Usage="Microsoft.EntityFrameworkCore.Query.QueryContextFactory.StateManager" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt; StateManager { get; }" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.LazyRef`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt; StateManager" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property StateManager As LazyRef(Of IStateManager)" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="F#" Value="member this.StateManager : Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;" Usage="Microsoft.EntityFrameworkCore.Query.QueryContextFactory.StateManager" FrameworkAlternate="efcore-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0">Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager</ReturnType>
        <ReturnType FrameworkAlternate="efcore-1.1">Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the state manager.
            </summary>
        <value>
                The state manager.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
