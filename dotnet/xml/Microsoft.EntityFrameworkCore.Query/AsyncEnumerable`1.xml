<Type Name="AsyncEnumerable&lt;TResult&gt;" FullName="Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;TResult&gt;">
  <TypeSignature Language="C#" Value="public struct AsyncEnumerable&lt;TResult&gt; : Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TResult&gt;" FrameworkAlternate="efcore-2.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit AsyncEnumerable`1&lt;TResult&gt; extends System.ValueType implements class Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor`1&lt;!TResult&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure AsyncEnumerable(Of TResult)&#xA;Implements IAsyncEnumerableAccessor(Of TResult)" />
  <TypeSignature Language="F#" Value="type AsyncEnumerable&lt;'Result&gt; = struct&#xA;    interface IAsyncEnumerableAccessor&lt;'Result&gt;" />
  <TypeSignature Language="C#" Value="public readonly struct AsyncEnumerable&lt;TResult&gt; : Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TResult&gt;" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TResult&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TResult">The result type.</typeparam>
    <summary>
                Represents an asynchronous sequence produced by executing a compiled query.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncEnumerable (System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; asyncEnumerable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IAsyncEnumerable`1&lt;!TResult&gt; asyncEnumerable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.#ctor(System.Collections.Generic.IAsyncEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (asyncEnumerable As IAsyncEnumerable(Of TResult))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;'Result&gt; : System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt; -&gt; Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;'Result&gt;" Usage="new Microsoft.EntityFrameworkCore.Query.AsyncEnumerable&lt;'Result&gt; asyncEnumerable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="asyncEnumerable" Type="System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncEnumerable">The underlying <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> instance.</param>
        <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ForEachAsync (Action&lt;TResult&gt; action, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ForEachAsync(class System.Action`1&lt;!TResult&gt; action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ForEachAsync (action As Action(Of TResult), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.ForEachAsync : Action&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="asyncEnumerable.ForEachAsync (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"> The action to perform on each element. </param>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
                Asynchronously enumerates the query results and performs the specified action on each element.
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.LoadAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="asyncEnumerable.LoadAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
                Asynchronously enumerates the query. When using Entity Framework, this causes the results of the query to
                be loaded into the associated context. This is equivalent to calling ToList
                and then throwing away the list (without the overhead of actually creating the list).
            </summary>
        <returns> A task that represents the asynchronous operation. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TResult&gt;.AsyncEnumerable">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TResult&gt;.AsyncEnumerable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!TResult&gt; Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TResult&gt;.AsyncEnumerable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.Microsoft#EntityFrameworkCore#Query#Internal#IAsyncEnumerableAccessor&lt;TResult&gt;#AsyncEnumerable" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncEnumerable As IAsyncEnumerable(Of TResult) Implements IAsyncEnumerableAccessor(Of TResult).AsyncEnumerable" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TResult&gt;.AsyncEnumerable : System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TResult&gt;.AsyncEnumerable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor`1.AsyncEnumerable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult[]&gt; ToArrayAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult[]&gt; ToArrayAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToArrayAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArrayAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of TResult())" />
      <MemberSignature Language="F#" Value="member this.ToArrayAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result[]&gt;" Usage="asyncEnumerable.ToArrayAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
                Asynchronously creates an array from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
                The task result contains an array that contains elements from the input sequence.
            </returns>
        <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt; ToDictionaryAsync&lt;TKey&gt; (Func&lt;TResult,TKey&gt; keySelector, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !TResult&gt;&gt; ToDictionaryAsync&lt;TKey&gt;(class System.Func`2&lt;!TResult, !!TKey&gt; keySelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDictionaryAsync(Of TKey) (keySelector As Func(Of TResult, TKey), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TResult))" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Result, 'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Result&gt;&gt;" Usage="asyncEnumerable.ToDictionaryAsync (keySelector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TResult,TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it asynchronously according to a specified key selector function.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt; ToDictionaryAsync&lt;TKey&gt; (Func&lt;TResult,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !TResult&gt;&gt; ToDictionaryAsync&lt;TKey&gt;(class System.Func`2&lt;!TResult, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDictionaryAsync(Of TKey) (keySelector As Func(Of TResult, TKey), comparer As IEqualityComparer(Of TKey), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TResult))" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Result, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Result&gt;&gt;" Usage="asyncEnumerable.ToDictionaryAsync (keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TResult,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it
                asynchronously
                according to a specified key selector function and a comparer.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains selected keys and values.
            </returns>
        <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TKey,TElement&gt; (Func&lt;TResult,TKey&gt; keySelector, Func&lt;TResult,TElement&gt; elementSelector, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TKey, TElement&gt;(class System.Func`2&lt;!TResult, !!TKey&gt; keySelector, class System.Func`2&lt;!TResult, !!TElement&gt; elementSelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDictionaryAsync(Of TKey, TElement) (keySelector As Func(Of TResult, TKey), elementSelector As Func(Of TResult, TElement), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Result, 'Key&gt; * Func&lt;'Result, 'Element&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="asyncEnumerable.ToDictionaryAsync (keySelector, elementSelector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TResult,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TResult,TElement&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it asynchronously according to a specified key selector and an element selector function.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TKey,TElement&gt; (Func&lt;TResult,TKey&gt; keySelector, Func&lt;TResult,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TKey, TElement&gt;(class System.Func`2&lt;!TResult, !!TKey&gt; keySelector, class System.Func`2&lt;!TResult, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDictionaryAsync(Of TKey, TElement) (keySelector As Func(Of TResult, TKey), elementSelector As Func(Of TResult, TElement), comparer As IEqualityComparer(Of TKey), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="member this.ToDictionaryAsync : Func&lt;'Result, 'Key&gt; * Func&lt;'Result, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="asyncEnumerable.ToDictionaryAsync (keySelector, elementSelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TResult,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TResult,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
        <typeparam name="TElement">
                The type of the value returned by <paramref name="elementSelector" />.
            </typeparam>
        <param name="keySelector"> A function to extract a key from each element. </param>
        <param name="elementSelector"> A transform function to produce a result element value from each element. </param>
        <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
            </param>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
                Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it asynchronously according to a specified key selector function, a comparer, and an element selector function.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type
                <typeparamref name="TElement" /> selected from the input sequence.
            </returns>
        <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TResult&gt;&gt; ToListAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.List`1&lt;!TResult&gt;&gt; ToListAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1.ToListAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToListAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of List(Of TResult))" />
      <MemberSignature Language="F#" Value="member this.ToListAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;'Result&gt;&gt;" Usage="asyncEnumerable.ToListAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.List&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
                Asynchronously creates a <see cref="T:System.Collections.Generic.List`1" /> from this <see cref="T:Microsoft.EntityFrameworkCore.Query.AsyncEnumerable`1" />
                by enumerating it asynchronously.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
