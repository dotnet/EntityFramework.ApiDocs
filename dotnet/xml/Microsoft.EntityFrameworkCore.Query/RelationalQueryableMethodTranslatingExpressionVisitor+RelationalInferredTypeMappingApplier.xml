<Type Name="RelationalQueryableMethodTranslatingExpressionVisitor+RelationalInferredTypeMappingApplier" FullName="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor+RelationalInferredTypeMappingApplier">
  <TypeSignature Language="C#" Value="protected class RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit RelationalQueryableMethodTranslatingExpressionVisitor/RelationalInferredTypeMappingApplier extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier" />
  <TypeSignature Language="VB.NET" Value="Protected Class RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier&#xA;Inherits ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                A visitor executed at the end of translation, which verifies that all <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> nodes have a type mapping,
                and applies type mappings inferred for queryable constants (VALUES) and parameters (e.g. OPENJSON) back on their root tables.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelationalInferredTypeMappingApplier (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, System.Collections.Generic.IReadOnlyDictionary&lt;(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string),Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping?&gt; inferredTypeMappings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, class System.Collections.Generic.IReadOnlyDictionary`2&lt;valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; inferredTypeMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,System.Collections.Generic.IReadOnlyDictionary{System.ValueTuple{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (model As IModel, sqlExpressionFactory As ISqlExpressionFactory, inferredTypeMappings As IReadOnlyDictionary(Of ValueTuple(Of TableExpressionBase, String), RelationalTypeMapping))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory * System.Collections.Generic.IReadOnlyDictionary&lt;ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier" Usage="new Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier (model, sqlExpressionFactory, inferredTypeMappings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
        <Parameter Name="inferredTypeMappings" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String&gt;,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" />
      </Parameters>
      <Docs>
        <param name="model">The model.</param>
        <param name="sqlExpressionFactory">The SQL expression factory.</param>
        <param name="inferredTypeMappings">The inferred type mappings to be applied back on their query roots.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTypeMappingsOnValuesExpression">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression ApplyTypeMappingsOnValuesExpression (Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression valuesExpression, bool stripOrdering);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression ApplyTypeMappingsOnValuesExpression(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression valuesExpression, bool stripOrdering) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.ApplyTypeMappingsOnValuesExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ApplyTypeMappingsOnValuesExpression (valuesExpression As ValuesExpression, stripOrdering As Boolean) As ValuesExpression" />
      <MemberSignature Language="F#" Value="abstract member ApplyTypeMappingsOnValuesExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression&#xA;override this.ApplyTypeMappingsOnValuesExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression" Usage="relationalInferredTypeMappingApplier.ApplyTypeMappingsOnValuesExpression (valuesExpression, stripOrdering)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valuesExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression" />
        <Parameter Name="stripOrdering" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valuesExpression">The <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression" /> to apply the mappings to.</param>
        <param name="stripOrdering">Whether to strip the <c>_ord</c> column.</param>
        <summary>
                Applies the given type mappings to the values projected out by the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression" />.
                As an optimization, it can also strip the first _ord column if it's determined that it isn't needed (most cases).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.IModel Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IModel Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.Model" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Model As IModel" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.Model" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetInferredTypeMapping">
      <MemberSignature Language="C#" Value="protected virtual bool TryGetInferredTypeMapping (Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase table, string columnName, out Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? inferredTypeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryGetInferredTypeMapping(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase table, string columnName, [out] class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&amp; inferredTypeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.TryGetInferredTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryGetInferredTypeMapping (table As TableExpressionBase, columnName As String, ByRef inferredTypeMapping As RelationalTypeMapping) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetInferredTypeMapping : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase * string * RelationalTypeMapping -&gt; bool&#xA;override this.TryGetInferredTypeMapping : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase * string * RelationalTypeMapping -&gt; bool" Usage="relationalInferredTypeMappingApplier.TryGetInferredTypeMapping (table, columnName, inferredTypeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" />
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="inferredTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="table">The table containing the column for which to find the inferred type mapping.</param>
        <param name="columnName">The name of the column for which to find the inferred type mapping.</param>
        <param name="inferredTypeMapping">The inferred type mapping, or <see langword="null" /> if none could be found.</param>
        <summary>
                Attempts to find an inferred type mapping for the given table column.
            </summary>
        <returns>Whether an inferred type mapping could be found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="relationalInferredTypeMappingApplier.VisitExtension expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
