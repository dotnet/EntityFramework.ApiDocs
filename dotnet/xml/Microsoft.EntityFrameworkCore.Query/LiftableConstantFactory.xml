<Type Name="LiftableConstantFactory" FullName="Microsoft.EntityFrameworkCore.Query.LiftableConstantFactory">
  <TypeSignature Language="C#" Value="public class LiftableConstantFactory : Microsoft.EntityFrameworkCore.Query.ILiftableConstantFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LiftableConstantFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Query.ILiftableConstantFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.LiftableConstantFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class LiftableConstantFactory&#xA;Implements ILiftableConstantFactory" />
  <TypeSignature Language="F#" Value="type LiftableConstantFactory = class&#xA;    interface ILiftableConstantFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.ILiftableConstantFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EF9100")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EF9100")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an experimental API used by the Entity Framework Core feature and it is not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LiftableConstantFactory (Microsoft.EntityFrameworkCore.Query.LiftableConstantExpressionDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.LiftableConstantExpressionDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.LiftableConstantFactory.#ctor(Microsoft.EntityFrameworkCore.Query.LiftableConstantExpressionDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As LiftableConstantExpressionDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.LiftableConstantFactory : Microsoft.EntityFrameworkCore.Query.LiftableConstantExpressionDependencies -&gt; Microsoft.EntityFrameworkCore.Query.LiftableConstantFactory" Usage="new Microsoft.EntityFrameworkCore.Query.LiftableConstantFactory dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.LiftableConstantExpressionDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>
                This is an experimental API used by the Entity Framework Core feature and it is not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLiftableConstant">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression CreateLiftableConstant (object? originalValue, System.Linq.Expressions.Expression&lt;Func&lt;Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext,object&gt;&gt; resolverExpression, string variableName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression CreateLiftableConstant(object originalValue, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext, object&gt;&gt; resolverExpression, string variableName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.LiftableConstantFactory.CreateLiftableConstant(System.Object,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext,System.Object}},System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateLiftableConstant (originalValue As Object, resolverExpression As Expression(Of Func(Of MaterializerLiftableConstantContext, Object)), variableName As String, type As Type) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CreateLiftableConstant : obj * System.Linq.Expressions.Expression&lt;Func&lt;Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext, obj&gt;&gt; * string * Type -&gt; System.Linq.Expressions.Expression&#xA;override this.CreateLiftableConstant : obj * System.Linq.Expressions.Expression&lt;Func&lt;Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext, obj&gt;&gt; * string * Type -&gt; System.Linq.Expressions.Expression" Usage="liftableConstantFactory.CreateLiftableConstant (originalValue, resolverExpression, variableName, type)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ILiftableConstantFactory.CreateLiftableConstant(System.Object,System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext,System.Object}},System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalValue" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resolverExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext,System.Object&gt;&gt;" />
        <Parameter Name="variableName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="originalValue">To be added.</param>
        <param name="resolverExpression">To be added.</param>
        <param name="variableName">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
                This is an experimental API used by the Entity Framework Core feature and it is not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.LiftableConstantExpressionDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.LiftableConstantExpressionDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.LiftableConstantFactory.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Dependencies As LiftableConstantExpressionDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Query.LiftableConstantExpressionDependencies" Usage="Microsoft.EntityFrameworkCore.Query.LiftableConstantFactory.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.LiftableConstantExpressionDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an experimental API used by the Entity Framework Core feature and it is not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
