<Type Name="EntityQueryModelVisitor" FullName="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor">
  <TypeSignature Language="C#" Value="public abstract class EntityQueryModelVisitor : Remotion.Linq.QueryModelVisitorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EntityQueryModelVisitor extends Remotion.Linq.QueryModelVisitorBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EntityQueryModelVisitor&#xA;Inherits QueryModelVisitorBase" />
  <TypeSignature Language="F#" Value="type EntityQueryModelVisitor = class&#xA;    inherit QueryModelVisitorBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Remotion.Linq.QueryModelVisitorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    The core visitor that processes a query to be executed.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EntityQueryModelVisitor (Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As EntityQueryModelVisitorDependencies, queryCompilationContext As QueryCompilationContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor : Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies * Microsoft.EntityFrameworkCore.Query.QueryCompilationContext -&gt; Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor (dependencies, queryCompilationContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        <param name="queryCompilationContext"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext" /> to be used when processing the query. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EntityQueryModelVisitor (Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer queryOptimizer, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory navigationRewritingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor subQueryMemberPushDownExpressionVisitor, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory querySourceTracingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory entityResultFindingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor taskBlockingExpressionVisitor, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory memberAccessBindingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory orderingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory projectionExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory entityQueryableExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor queryAnnotationExtractor, Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler resultOperatorHandler, Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource entityMaterializerSource, Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter expressionPrinter, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer queryOptimizer, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory navigationRewritingExpressionVisitorFactory, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor subQueryMemberPushDownExpressionVisitor, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory querySourceTracingExpressionVisitorFactory, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory entityResultFindingExpressionVisitorFactory, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor taskBlockingExpressionVisitor, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory memberAccessBindingExpressionVisitorFactory, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory orderingExpressionVisitorFactory, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory projectionExpressionVisitorFactory, class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory entityQueryableExpressionVisitorFactory, class Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor queryAnnotationExtractor, class Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler resultOperatorHandler, class Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource entityMaterializerSource, class Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter expressionPrinter, class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor,Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler,Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource,Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (queryOptimizer As IQueryOptimizer, navigationRewritingExpressionVisitorFactory As INavigationRewritingExpressionVisitorFactory, subQueryMemberPushDownExpressionVisitor As ISubQueryMemberPushDownExpressionVisitor, querySourceTracingExpressionVisitorFactory As IQuerySourceTracingExpressionVisitorFactory, entityResultFindingExpressionVisitorFactory As IEntityResultFindingExpressionVisitorFactory, taskBlockingExpressionVisitor As ITaskBlockingExpressionVisitor, memberAccessBindingExpressionVisitorFactory As IMemberAccessBindingExpressionVisitorFactory, orderingExpressionVisitorFactory As IOrderingExpressionVisitorFactory, projectionExpressionVisitorFactory As IProjectionExpressionVisitorFactory, entityQueryableExpressionVisitorFactory As IEntityQueryableExpressionVisitorFactory, queryAnnotationExtractor As IQueryAnnotationExtractor, resultOperatorHandler As IResultOperatorHandler, entityMaterializerSource As IEntityMaterializerSource, expressionPrinter As IExpressionPrinter, queryCompilationContext As QueryCompilationContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor : Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory * Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory * Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor * Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler * Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource * Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter * Microsoft.EntityFrameworkCore.Query.QueryCompilationContext -&gt; Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor (queryOptimizer, navigationRewritingExpressionVisitorFactory, subQueryMemberPushDownExpressionVisitor, querySourceTracingExpressionVisitorFactory, entityResultFindingExpressionVisitorFactory, taskBlockingExpressionVisitor, memberAccessBindingExpressionVisitorFactory, orderingExpressionVisitorFactory, projectionExpressionVisitorFactory, entityQueryableExpressionVisitorFactory, queryAnnotationExtractor, resultOperatorHandler, entityMaterializerSource, expressionPrinter, queryCompilationContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryOptimizer" Type="Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="navigationRewritingExpressionVisitorFactory" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="subQueryMemberPushDownExpressionVisitor" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="querySourceTracingExpressionVisitorFactory" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="entityResultFindingExpressionVisitorFactory" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory" Index="4" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="taskBlockingExpressionVisitor" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor" Index="5" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="memberAccessBindingExpressionVisitorFactory" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory" Index="6" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="orderingExpressionVisitorFactory" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory" Index="7" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="projectionExpressionVisitorFactory" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory" Index="8" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="entityQueryableExpressionVisitorFactory" Type="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory" Index="9" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="queryAnnotationExtractor" Type="Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor" Index="10" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="resultOperatorHandler" Type="Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler" Index="11" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="entityMaterializerSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource" Index="12" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter" Index="13" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Index="14" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="queryOptimizer"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer" /> to be used when processing the query. </param>
        <param name="navigationRewritingExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
        <param name="subQueryMemberPushDownExpressionVisitor">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor" /> to be used when
                processing the query.
            </param>
        <param name="querySourceTracingExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
        <param name="entityResultFindingExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
        <param name="taskBlockingExpressionVisitor"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor" /> to be used when processing the query. </param>
        <param name="memberAccessBindingExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
        <param name="orderingExpressionVisitorFactory"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory" /> to be used when processing the query. </param>
        <param name="projectionExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory" /> to be used when processing the
                query.
            </param>
        <param name="entityQueryableExpressionVisitorFactory">
                The <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory" /> to be used when
                processing the query.
            </param>
        <param name="queryAnnotationExtractor"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor" /> to be used when processing the query. </param>
        <param name="resultOperatorHandler"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler" /> to be used when processing the query. </param>
        <param name="entityMaterializerSource"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource" /> to be used when processing the query. </param>
        <param name="expressionPrinter"> The <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter" /> to be used when processing the query. </param>
        <param name="queryCompilationContext"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext" /> to be used when processing the query. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateMapping">
      <MemberSignature Language="C#" Value="public virtual void AddOrUpdateMapping (Remotion.Linq.Clauses.IQuerySource querySource, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOrUpdateMapping(class Remotion.Linq.Clauses.IQuerySource querySource, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AddOrUpdateMapping(Remotion.Linq.Clauses.IQuerySource,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddOrUpdateMapping (querySource As IQuerySource, expression As Expression)" />
      <MemberSignature Language="F#" Value="abstract member AddOrUpdateMapping : Remotion.Linq.Clauses.IQuerySource * System.Linq.Expressions.Expression -&gt; unit&#xA;override this.AddOrUpdateMapping : Remotion.Linq.Clauses.IQuerySource * System.Linq.Expressions.Expression -&gt; unit" Usage="entityQueryModelVisitor.AddOrUpdateMapping (querySource, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="querySource"> The query source. </param>
        <param name="expression"> The expression mapped to the query source. </param>
        <summary>
                Adds or updates the expression mapped to a query source.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMemberExpression">
      <MemberSignature Language="C#" Value="public virtual void BindMemberExpression (System.Linq.Expressions.MemberExpression memberExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource&gt; memberBinder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BindMemberExpression(class System.Linq.Expressions.MemberExpression memberExpression, class System.Action`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Remotion.Linq.Clauses.IQuerySource&gt; memberBinder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression(System.Linq.Expressions.MemberExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BindMemberExpression (memberExpression As MemberExpression, memberBinder As Action(Of IProperty, IQuerySource))" />
      <MemberSignature Language="F#" Value="abstract member BindMemberExpression : System.Linq.Expressions.MemberExpression * Action&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource&gt; -&gt; unit&#xA;override this.BindMemberExpression : System.Linq.Expressions.MemberExpression * Action&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource&gt; -&gt; unit" Usage="entityQueryModelVisitor.BindMemberExpression (memberExpression, memberBinder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
        <Parameter Name="memberBinder" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource&gt;" />
      </Parameters>
      <Docs>
        <param name="memberExpression"> The member access expression. </param>
        <param name="memberBinder"> The member binder. </param>
        <summary>
                Binds a member expression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMemberExpression&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult BindMemberExpression&lt;TResult&gt; (System.Linq.Expressions.MemberExpression memberExpression, Remotion.Linq.Clauses.IQuerySource querySource, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,TResult&gt; memberBinder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult BindMemberExpression&lt;TResult&gt;(class System.Linq.Expressions.MemberExpression memberExpression, class Remotion.Linq.Clauses.IQuerySource querySource, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Remotion.Linq.Clauses.IQuerySource, !!TResult&gt; memberBinder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression``1(System.Linq.Expressions.MemberExpression,Remotion.Linq.Clauses.IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindMemberExpression(Of TResult) (memberExpression As MemberExpression, querySource As IQuerySource, memberBinder As Func(Of IProperty, IQuerySource, TResult)) As TResult" />
      <MemberSignature Language="F#" Value="abstract member BindMemberExpression : System.Linq.Expressions.MemberExpression * Remotion.Linq.Clauses.IQuerySource * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result&#xA;override this.BindMemberExpression : System.Linq.Expressions.MemberExpression * Remotion.Linq.Clauses.IQuerySource * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result" Usage="entityQueryModelVisitor.BindMemberExpression (memberExpression, querySource, memberBinder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
        <Parameter Name="memberBinder" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> Type of the result. </typeparam>
        <param name="memberExpression"> The member access expression. </param>
        <param name="querySource"> The query source. </param>
        <param name="memberBinder"> The member binder. </param>
        <summary>
                Binds a member expression.
            </summary>
        <returns>
                A TResult.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMemberToValueBuffer">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindMemberToValueBuffer (System.Linq.Expressions.MemberExpression memberExpression, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindMemberToValueBuffer(class System.Linq.Expressions.MemberExpression memberExpression, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindMemberToValueBuffer (memberExpression As MemberExpression, expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member BindMemberToValueBuffer : System.Linq.Expressions.MemberExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.BindMemberToValueBuffer : System.Linq.Expressions.MemberExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.BindMemberToValueBuffer (memberExpression, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="memberExpression"> The member access expression. </param>
        <param name="expression"> The target expression. </param>
        <summary>
                Binds a member access to a value buffer access.
            </summary>
        <returns>
                A value buffer access expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMethodCallExpression">
      <MemberSignature Language="C#" Value="public virtual void BindMethodCallExpression (System.Linq.Expressions.MethodCallExpression methodCallExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource&gt; methodCallBinder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BindMethodCallExpression(class System.Linq.Expressions.MethodCallExpression methodCallExpression, class System.Action`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Remotion.Linq.Clauses.IQuerySource&gt; methodCallBinder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(System.Linq.Expressions.MethodCallExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BindMethodCallExpression (methodCallExpression As MethodCallExpression, methodCallBinder As Action(Of IProperty, IQuerySource))" />
      <MemberSignature Language="F#" Value="abstract member BindMethodCallExpression : System.Linq.Expressions.MethodCallExpression * Action&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource&gt; -&gt; unit&#xA;override this.BindMethodCallExpression : System.Linq.Expressions.MethodCallExpression * Action&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource&gt; -&gt; unit" Usage="entityQueryModelVisitor.BindMethodCallExpression (methodCallExpression, methodCallBinder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
        <Parameter Name="methodCallBinder" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource&gt;" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression"> The method call expression. </param>
        <param name="methodCallBinder"> The method call binder. </param>
        <summary>
                Binds a method call expression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMethodCallExpression&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult BindMethodCallExpression&lt;TResult&gt; (System.Linq.Expressions.MethodCallExpression methodCallExpression, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,TResult&gt; methodCallBinder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult BindMethodCallExpression&lt;TResult&gt;(class System.Linq.Expressions.MethodCallExpression methodCallExpression, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Remotion.Linq.Clauses.IQuerySource, !!TResult&gt; methodCallBinder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindMethodCallExpression(Of TResult) (methodCallExpression As MethodCallExpression, methodCallBinder As Func(Of IProperty, IQuerySource, TResult)) As TResult" />
      <MemberSignature Language="F#" Value="abstract member BindMethodCallExpression : System.Linq.Expressions.MethodCallExpression * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result&#xA;override this.BindMethodCallExpression : System.Linq.Expressions.MethodCallExpression * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result" Usage="entityQueryModelVisitor.BindMethodCallExpression (methodCallExpression, methodCallBinder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
        <Parameter Name="methodCallBinder" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> Type of the result. </typeparam>
        <param name="methodCallExpression"> The method call expression. </param>
        <param name="methodCallBinder"> The method call binder. </param>
        <summary>
                Binds a method call expression.
            </summary>
        <returns>
                A TResult.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMethodCallExpression&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult BindMethodCallExpression&lt;TResult&gt; (System.Linq.Expressions.MethodCallExpression methodCallExpression, Remotion.Linq.Clauses.IQuerySource querySource, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,TResult&gt; methodCallBinder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult BindMethodCallExpression&lt;TResult&gt;(class System.Linq.Expressions.MethodCallExpression methodCallExpression, class Remotion.Linq.Clauses.IQuerySource querySource, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Remotion.Linq.Clauses.IQuerySource, !!TResult&gt; methodCallBinder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,Remotion.Linq.Clauses.IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindMethodCallExpression(Of TResult) (methodCallExpression As MethodCallExpression, querySource As IQuerySource, methodCallBinder As Func(Of IProperty, IQuerySource, TResult)) As TResult" />
      <MemberSignature Language="F#" Value="abstract member BindMethodCallExpression : System.Linq.Expressions.MethodCallExpression * Remotion.Linq.Clauses.IQuerySource * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result&#xA;override this.BindMethodCallExpression : System.Linq.Expressions.MethodCallExpression * Remotion.Linq.Clauses.IQuerySource * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result" Usage="entityQueryModelVisitor.BindMethodCallExpression (methodCallExpression, querySource, methodCallBinder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
        <Parameter Name="methodCallBinder" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> Type of the result. </typeparam>
        <param name="methodCallExpression"> The method call expression. </param>
        <param name="querySource"> The query source. </param>
        <param name="methodCallBinder"> The method call binder. </param>
        <summary>
                Binds a method call expression.
            </summary>
        <returns>
                A TResult.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMethodCallToEntity">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindMethodCallToEntity (System.Linq.Expressions.MethodCallExpression methodCallExpression, System.Linq.Expressions.MethodCallExpression targetMethodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindMethodCallToEntity(class System.Linq.Expressions.MethodCallExpression methodCallExpression, class System.Linq.Expressions.MethodCallExpression targetMethodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToEntity(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindMethodCallToEntity (methodCallExpression As MethodCallExpression, targetMethodCallExpression As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member BindMethodCallToEntity : System.Linq.Expressions.MethodCallExpression * System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.BindMethodCallToEntity : System.Linq.Expressions.MethodCallExpression * System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.BindMethodCallToEntity (methodCallExpression, targetMethodCallExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="targetMethodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" Index="1" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression"> The method call expression. </param>
        <param name="targetMethodCallExpression"> The target method call expression. </param>
        <summary>
                Binds a method call to a CLR or shadow property access.
            </summary>
        <returns>
                A value buffer access expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMethodCallToValueBuffer">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindMethodCallToValueBuffer (System.Linq.Expressions.MethodCallExpression methodCallExpression, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindMethodCallToValueBuffer(class System.Linq.Expressions.MethodCallExpression methodCallExpression, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindMethodCallToValueBuffer (methodCallExpression As MethodCallExpression, expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member BindMethodCallToValueBuffer : System.Linq.Expressions.MethodCallExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.BindMethodCallToValueBuffer : System.Linq.Expressions.MethodCallExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.BindMethodCallToValueBuffer (methodCallExpression, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression"> The method call expression. </param>
        <param name="expression"> The target expression. </param>
        <summary>
                Binds a method call to a value buffer access.
            </summary>
        <returns>
                A value buffer access expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindNavigationPathPropertyExpression&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult BindNavigationPathPropertyExpression&lt;TResult&gt; (System.Linq.Expressions.Expression propertyExpression, Func&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;,Remotion.Linq.Clauses.IQuerySource,TResult&gt; propertyBinder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult BindNavigationPathPropertyExpression&lt;TResult&gt;(class System.Linq.Expressions.Expression propertyExpression, class System.Func`3&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;, class Remotion.Linq.Clauses.IQuerySource, !!TResult&gt; propertyBinder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression``1(System.Linq.Expressions.Expression,System.Func{System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},Remotion.Linq.Clauses.IQuerySource,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindNavigationPathPropertyExpression(Of TResult) (propertyExpression As Expression, propertyBinder As Func(Of IEnumerable(Of IPropertyBase), IQuerySource, TResult)) As TResult" />
      <MemberSignature Language="F#" Value="abstract member BindNavigationPathPropertyExpression : System.Linq.Expressions.Expression * Func&lt;seq&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result&#xA;override this.BindNavigationPathPropertyExpression : System.Linq.Expressions.Expression * Func&lt;seq&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result" Usage="entityQueryModelVisitor.BindNavigationPathPropertyExpression (propertyExpression, propertyBinder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="propertyBinder" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;,Remotion.Linq.Clauses.IQuerySource,TResult&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> Type of the result. </typeparam>
        <param name="propertyExpression"> The property expression. </param>
        <param name="propertyBinder"> The property binder. </param>
        <summary>
                Binds a navigation path property expression.
            </summary>
        <returns>
                A TResult.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindNavigationPathPropertyExpression&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult BindNavigationPathPropertyExpression&lt;TResult&gt; (System.Linq.Expressions.Expression propertyExpression, Func&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;,Remotion.Linq.Clauses.IQuerySource,TResult&gt; propertyBinder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult BindNavigationPathPropertyExpression&lt;TResult&gt;(class System.Linq.Expressions.Expression propertyExpression, class System.Func`3&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;, class Remotion.Linq.Clauses.IQuerySource, !!TResult&gt; propertyBinder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression``1(System.Linq.Expressions.Expression,System.Func{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},Remotion.Linq.Clauses.IQuerySource,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindNavigationPathPropertyExpression(Of TResult) (propertyExpression As Expression, propertyBinder As Func(Of IReadOnlyList(Of IPropertyBase), IQuerySource, TResult)) As TResult" />
      <MemberSignature Language="F#" Value="abstract member BindNavigationPathPropertyExpression : System.Linq.Expressions.Expression * Func&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result&#xA;override this.BindNavigationPathPropertyExpression : System.Linq.Expressions.Expression * Func&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;, Remotion.Linq.Clauses.IQuerySource, 'Result&gt; -&gt; 'Result" Usage="entityQueryModelVisitor.BindNavigationPathPropertyExpression (propertyExpression, propertyBinder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyBinder" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;,Remotion.Linq.Clauses.IQuerySource,TResult&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> Type of the result. </typeparam>
        <param name="propertyExpression"> The property expression. </param>
        <param name="propertyBinder"> The property binder. </param>
        <summary>
                Binds a navigation path property expression.
            </summary>
        <returns>
                A TResult.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindReadValueMethod">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindReadValueMethod (Type memberType, System.Linq.Expressions.Expression expression, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindReadValueMethod(class System.Type memberType, class System.Linq.Expressions.Expression expression, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod(System.Type,System.Linq.Expressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindReadValueMethod (memberType As Type, expression As Expression, index As Integer) As Expression" />
      <MemberSignature Language="F#" Value="abstract member BindReadValueMethod : Type * System.Linq.Expressions.Expression * int -&gt; System.Linq.Expressions.Expression&#xA;override this.BindReadValueMethod : Type * System.Linq.Expressions.Expression * int -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.BindReadValueMethod (memberType, expression, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Type" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="index" Type="System.Int32" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="memberType"> Type of the member. </param>
        <param name="expression"> The target expression. </param>
        <param name="index"> A value buffer index. </param>
        <summary>
                Binds a value buffer read.
            </summary>
        <returns>
                A value buffer read expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindReadValueMethod">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindReadValueMethod (Type memberType, System.Linq.Expressions.Expression expression, int index, Microsoft.EntityFrameworkCore.Metadata.IProperty property = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindReadValueMethod(class System.Type memberType, class System.Linq.Expressions.Expression expression, int32 index, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod(System.Type,System.Linq.Expressions.Expression,System.Int32,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindReadValueMethod (memberType As Type, expression As Expression, index As Integer, Optional property As IProperty = Nothing) As Expression" />
      <MemberSignature Language="F#" Value="abstract member BindReadValueMethod : Type * System.Linq.Expressions.Expression * int * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; System.Linq.Expressions.Expression&#xA;override this.BindReadValueMethod : Type * System.Linq.Expressions.Expression * int * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.BindReadValueMethod (memberType, expression, index, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Type" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="index" Type="System.Int32" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="memberType"> Type of the member. </param>
        <param name="expression"> The target expression. </param>
        <param name="index"> A value buffer index. </param>
        <param name="property">The property being bound.</param>
        <summary>
                Binds a value buffer read.
            </summary>
        <returns>
                A value buffer read expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallCreateTransparentIdentifier">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CallCreateTransparentIdentifier (Type transparentIdentifierType, System.Linq.Expressions.Expression outerExpression, System.Linq.Expressions.Expression innerExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CallCreateTransparentIdentifier(class System.Type transparentIdentifierType, class System.Linq.Expressions.Expression outerExpression, class System.Linq.Expressions.Expression innerExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CallCreateTransparentIdentifier(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CallCreateTransparentIdentifier (transparentIdentifierType As Type, outerExpression As Expression, innerExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CallCreateTransparentIdentifier : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.CallCreateTransparentIdentifier : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.CallCreateTransparentIdentifier (transparentIdentifierType, outerExpression, innerExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="outerExpression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="innerExpression" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="transparentIdentifierType">To be added.</param>
        <param name="outerExpression">To be added.</param>
        <param name="innerExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanOptimizeCorrelatedCollections">
      <MemberSignature Language="C#" Value="protected virtual bool CanOptimizeCorrelatedCollections ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CanOptimizeCorrelatedCollections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CanOptimizeCorrelatedCollections" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CanOptimizeCorrelatedCollections () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanOptimizeCorrelatedCollections : unit -&gt; bool&#xA;override this.CanOptimizeCorrelatedCollections : unit -&gt; bool" Usage="entityQueryModelVisitor.CanOptimizeCorrelatedCollections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Determines whether correlated collections (if any) can be optimized.
            </summary>
        <returns>True if optimization is allowed, false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAdditionalFromClauseExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CompileAdditionalFromClauseExpression (Remotion.Linq.Clauses.AdditionalFromClause additionalFromClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CompileAdditionalFromClauseExpression(class Remotion.Linq.Clauses.AdditionalFromClause additionalFromClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CompileAdditionalFromClauseExpression (additionalFromClause As AdditionalFromClause, queryModel As QueryModel) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CompileAdditionalFromClauseExpression : Remotion.Linq.Clauses.AdditionalFromClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression&#xA;override this.CompileAdditionalFromClauseExpression : Remotion.Linq.Clauses.AdditionalFromClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.CompileAdditionalFromClauseExpression (additionalFromClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="additionalFromClause" Type="Remotion.Linq.Clauses.AdditionalFromClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="additionalFromClause"> The node being compiled. </param>
        <param name="queryModel"> The query. </param>
        <summary>
                Compiles <see cref="T:Remotion.Linq.Clauses.AdditionalFromClause" /> nodes.
            </summary>
        <returns> The compiled result. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileGroupJoinInnerSequenceExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CompileGroupJoinInnerSequenceExpression (Remotion.Linq.Clauses.GroupJoinClause groupJoinClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CompileGroupJoinInnerSequenceExpression(class Remotion.Linq.Clauses.GroupJoinClause groupJoinClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression(Remotion.Linq.Clauses.GroupJoinClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CompileGroupJoinInnerSequenceExpression (groupJoinClause As GroupJoinClause, queryModel As QueryModel) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CompileGroupJoinInnerSequenceExpression : Remotion.Linq.Clauses.GroupJoinClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression&#xA;override this.CompileGroupJoinInnerSequenceExpression : Remotion.Linq.Clauses.GroupJoinClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression (groupJoinClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupJoinClause" Type="Remotion.Linq.Clauses.GroupJoinClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="groupJoinClause"> The node being compiled. </param>
        <param name="queryModel"> The query. </param>
        <summary>
                Compiles <see cref="T:Remotion.Linq.Clauses.GroupJoinClause" /> nodes.
            </summary>
        <returns> The compiled result. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileJoinClauseInnerSequenceExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CompileJoinClauseInnerSequenceExpression (Remotion.Linq.Clauses.JoinClause joinClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CompileJoinClauseInnerSequenceExpression(class Remotion.Linq.Clauses.JoinClause joinClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CompileJoinClauseInnerSequenceExpression (joinClause As JoinClause, queryModel As QueryModel) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CompileJoinClauseInnerSequenceExpression : Remotion.Linq.Clauses.JoinClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression&#xA;override this.CompileJoinClauseInnerSequenceExpression : Remotion.Linq.Clauses.JoinClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression (joinClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinClause" Type="Remotion.Linq.Clauses.JoinClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="joinClause"> The node being compiled. </param>
        <param name="queryModel"> The query. </param>
        <summary>
                Compiles <see cref="T:Remotion.Linq.Clauses.JoinClause" /> nodes.
            </summary>
        <returns> The compiled result. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileMainFromClauseExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CompileMainFromClauseExpression (Remotion.Linq.Clauses.MainFromClause mainFromClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CompileMainFromClauseExpression(class Remotion.Linq.Clauses.MainFromClause mainFromClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CompileMainFromClauseExpression (mainFromClause As MainFromClause, queryModel As QueryModel) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CompileMainFromClauseExpression : Remotion.Linq.Clauses.MainFromClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression&#xA;override this.CompileMainFromClauseExpression : Remotion.Linq.Clauses.MainFromClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.CompileMainFromClauseExpression (mainFromClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mainFromClause" Type="Remotion.Linq.Clauses.MainFromClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="mainFromClause"> The node being compiled. </param>
        <param name="queryModel"> The query. </param>
        <summary>
                Compiles the <see cref="T:Remotion.Linq.Clauses.MainFromClause" /> node.
            </summary>
        <returns> The compiled result. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsyncQueryExecutor&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt; CreateAsyncQueryExecutor&lt;TResult&gt; (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt;&gt; CreateAsyncQueryExecutor&lt;TResult&gt;(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor``1(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsyncQueryExecutor(Of TResult) (queryModel As QueryModel) As Func(Of QueryContext, IAsyncEnumerable(Of TResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateAsyncQueryExecutor : Remotion.Linq.QueryModel -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&gt;&#xA;override this.CreateAsyncQueryExecutor : Remotion.Linq.QueryModel -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&gt;" Usage="entityQueryModelVisitor.CreateAsyncQueryExecutor queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> The type of results that the query returns. </typeparam>
        <param name="queryModel"> The query. </param>
        <summary>
                Creates an action to asynchronously execute this query.
            </summary>
        <returns> An action that asynchronously returns the results of the query. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExecutorLambda&lt;TResults&gt;">
      <MemberSignature Language="C#" Value="protected virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResults&gt; CreateExecutorLambda&lt;TResults&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, !!TResults&gt; CreateExecutorLambda&lt;TResults&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda``1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateExecutorLambda(Of TResults) () As Func(Of QueryContext, TResults)" />
      <MemberSignature Language="F#" Value="abstract member CreateExecutorLambda : unit -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Results&gt;&#xA;override this.CreateExecutorLambda : unit -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Results&gt;" Usage="entityQueryModelVisitor.CreateExecutorLambda " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResults&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResults" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResults"> The type of results that the query returns. </typeparam>
        <summary>
                Creates an action to execute this query.
            </summary>
        <returns> An action that returns the results of the query. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePropertyExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreatePropertyExpression (System.Linq.Expressions.Expression target, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreatePropertyExpression(class System.Linq.Expressions.Expression target, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreatePropertyExpression (target As Expression, property As IProperty) As Expression" />
      <MemberSignature Language="F#" Value="static member CreatePropertyExpression : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression (target, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="target"> The entity. </param>
        <param name="property"> The property to be accessed. </param>
        <summary>
                Creates an expression to access the given property on an given entity.
            </summary>
        <returns> The newly created expression. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryExecutor&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; CreateQueryExecutor&lt;TResult&gt; (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; CreateQueryExecutor&lt;TResult&gt;(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor``1(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateQueryExecutor(Of TResult) (queryModel As QueryModel) As Func(Of QueryContext, IEnumerable(Of TResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateQueryExecutor : Remotion.Linq.QueryModel -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, seq&lt;'Result&gt;&gt;&#xA;override this.CreateQueryExecutor : Remotion.Linq.QueryModel -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, seq&lt;'Result&gt;&gt;" Usage="entityQueryModelVisitor.CreateQueryExecutor queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> The type of results that the query returns. </typeparam>
        <param name="queryModel"> The query. </param>
        <summary>
                Creates an action to execute this query.
            </summary>
        <returns> An action that returns the results of the query. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTransparentIdentifierType">
      <MemberSignature Language="C#" Value="protected virtual Type CreateTransparentIdentifierType (Type outerType, Type innerType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type CreateTransparentIdentifierType(class System.Type outerType, class System.Type innerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateTransparentIdentifierType(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateTransparentIdentifierType (outerType As Type, innerType As Type) As Type" />
      <MemberSignature Language="F#" Value="abstract member CreateTransparentIdentifierType : Type * Type -&gt; Type&#xA;override this.CreateTransparentIdentifierType : Type * Type -&gt; Type" Usage="entityQueryModelVisitor.CreateTransparentIdentifierType (outerType, innerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outerType" Type="System.Type" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="innerType" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="outerType">To be added.</param>
        <param name="innerType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentParameter">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ParameterExpression CurrentParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.ParameterExpression CurrentParameter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CurrentParameter As ParameterExpression" />
      <MemberSignature Language="F#" Value="member this.CurrentParameter : System.Linq.Expressions.ParameterExpression with get, set" Usage="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the expression for the current parameter.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Expression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Expression As Expression" />
      <MemberSignature Language="F#" Value="member this.Expression : System.Linq.Expressions.Expression with get, set" Usage="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the expression that represents this query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractQueryAnnotations">
      <MemberSignature Language="C#" Value="protected virtual void ExtractQueryAnnotations (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ExtractQueryAnnotations(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ExtractQueryAnnotations (queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="abstract member ExtractQueryAnnotations : Remotion.Linq.QueryModel -&gt; unit&#xA;override this.ExtractQueryAnnotations : Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.ExtractQueryAnnotations queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query. </param>
        <summary>
                Populates <see cref="P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations" /> based on annotations found in the query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeNavigations">
      <MemberSignature Language="C#" Value="protected virtual void IncludeNavigations (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void IncludeNavigations(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub IncludeNavigations (queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="abstract member IncludeNavigations : Remotion.Linq.QueryModel -&gt; unit&#xA;override this.IncludeNavigations : Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.IncludeNavigations queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query. </param>
        <summary>
                Includes related data requested in the LINQ query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeNavigations">
      <MemberSignature Language="C#" Value="protected virtual void IncludeNavigations (Remotion.Linq.QueryModel queryModel, System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.IncludeSpecification&gt; includeSpecifications);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void IncludeNavigations(class Remotion.Linq.QueryModel queryModel, class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Query.IncludeSpecification&gt; includeSpecifications) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(Remotion.Linq.QueryModel,System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.IncludeSpecification})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub IncludeNavigations (queryModel As QueryModel, includeSpecifications As IReadOnlyCollection(Of IncludeSpecification))" />
      <MemberSignature Language="F#" Value="abstract member IncludeNavigations : Remotion.Linq.QueryModel * System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.IncludeSpecification&gt; -&gt; unit&#xA;override this.IncludeNavigations : Remotion.Linq.QueryModel * System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.IncludeSpecification&gt; -&gt; unit" Usage="entityQueryModelVisitor.IncludeNavigations (queryModel, includeSpecifications)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="includeSpecifications" Type="System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.IncludeSpecification&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query. </param>
        <param name="includeSpecifications"> Related data to be included. </param>
        <summary>
                Includes related data requested in the LINQ query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeNavigations">
      <MemberSignature Language="C#" Value="protected virtual void IncludeNavigations (Microsoft.EntityFrameworkCore.Query.IncludeSpecification includeSpecification, Type resultType, System.Linq.Expressions.Expression accessorExpression, bool querySourceRequiresTracking);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void IncludeNavigations(class Microsoft.EntityFrameworkCore.Query.IncludeSpecification includeSpecification, class System.Type resultType, class System.Linq.Expressions.Expression accessorExpression, bool querySourceRequiresTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(Microsoft.EntityFrameworkCore.Query.IncludeSpecification,System.Type,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub IncludeNavigations (includeSpecification As IncludeSpecification, resultType As Type, accessorExpression As Expression, querySourceRequiresTracking As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member IncludeNavigations : Microsoft.EntityFrameworkCore.Query.IncludeSpecification * Type * System.Linq.Expressions.Expression * bool -&gt; unit&#xA;override this.IncludeNavigations : Microsoft.EntityFrameworkCore.Query.IncludeSpecification * Type * System.Linq.Expressions.Expression * bool -&gt; unit" Usage="entityQueryModelVisitor.IncludeNavigations (includeSpecification, resultType, accessorExpression, querySourceRequiresTracking)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeSpecification" Type="Microsoft.EntityFrameworkCore.Query.IncludeSpecification" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="resultType" Type="System.Type" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="accessorExpression" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="querySourceRequiresTracking" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="includeSpecification"> The navigation property to be included. </param>
        <param name="resultType"> The type of results returned by the query. </param>
        <param name="accessorExpression"> Expression for the navigation property to be included. </param>
        <param name="querySourceRequiresTracking"> A value indicating whether results of this query are to be tracked. </param>
        <summary>
                Includes a specific navigation property requested in the LINQ query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterceptExceptions">
      <MemberSignature Language="C#" Value="protected virtual void InterceptExceptions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InterceptExceptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InterceptExceptions ()" />
      <MemberSignature Language="F#" Value="abstract member InterceptExceptions : unit -&gt; unit&#xA;override this.InterceptExceptions : unit -&gt; unit" Usage="entityQueryModelVisitor.InterceptExceptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Executes the query and logs any exceptions that occur.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntroduceTransparentScope">
      <MemberSignature Language="C#" Value="protected virtual void IntroduceTransparentScope (Remotion.Linq.Clauses.IQuerySource querySource, Remotion.Linq.QueryModel queryModel, int index, Type transparentIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void IntroduceTransparentScope(class Remotion.Linq.Clauses.IQuerySource querySource, class Remotion.Linq.QueryModel queryModel, int32 index, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IntroduceTransparentScope(Remotion.Linq.Clauses.IQuerySource,Remotion.Linq.QueryModel,System.Int32,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub IntroduceTransparentScope (querySource As IQuerySource, queryModel As QueryModel, index As Integer, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="abstract member IntroduceTransparentScope : Remotion.Linq.Clauses.IQuerySource * Remotion.Linq.QueryModel * int * Type -&gt; unit&#xA;override this.IntroduceTransparentScope : Remotion.Linq.Clauses.IQuerySource * Remotion.Linq.QueryModel * int * Type -&gt; unit" Usage="entityQueryModelVisitor.IntroduceTransparentScope (querySource, queryModel, index, transparentIdentifierType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="index" Type="System.Int32" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="querySource">To be added.</param>
        <param name="queryModel">To be added.</param>
        <param name="index">To be added.</param>
        <param name="transparentIdentifierType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPropertyMethod">
      <MemberSignature Language="C#" Value="public static bool IsPropertyMethod (System.Reflection.MethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPropertyMethod(class System.Reflection.MethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPropertyMethod (methodInfo As MethodInfo) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPropertyMethod : System.Reflection.MethodInfo -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod methodInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="methodInfo"> The method info to check. </param>
        <summary>
                Determines if a <see cref="T:System.Reflection.MethodInfo" /> is referencing the <see cref="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)" /> method.
            </summary>
        <returns>
                True if <paramref name="methodInfo" /> is referencing <see cref="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)" />; otherwise fale;
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinqOperatorProvider">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider LinqOperatorProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider LinqOperatorProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinqOperatorProvider As ILinqOperatorProvider" />
      <MemberSignature Language="F#" Value="member this.LinqOperatorProvider : Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider" Usage="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider" /> being used for this query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeNavigationRewrite">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeNavigationRewrite (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeNavigationRewrite(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OnBeforeNavigationRewrite(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeNavigationRewrite (queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="abstract member OnBeforeNavigationRewrite : Remotion.Linq.QueryModel -&gt; unit&#xA;override this.OnBeforeNavigationRewrite : Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.OnBeforeNavigationRewrite queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="queryModel">Query model to process. </param>
        <summary>
                Pre-processes query model before we rewrite its navigations.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptimizeQueryModel">
      <MemberSignature Language="C#" Value="protected virtual void OptimizeQueryModel (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OptimizeQueryModel(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OptimizeQueryModel (queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="abstract member OptimizeQueryModel : Remotion.Linq.QueryModel -&gt; unit&#xA;override this.OptimizeQueryModel : Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.OptimizeQueryModel queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query. </param>
        <summary>
                Applies optimizations to the query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptimizeQueryModel">
      <MemberSignature Language="C#" Value="protected virtual void OptimizeQueryModel (Remotion.Linq.QueryModel queryModel, bool asyncQuery);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OptimizeQueryModel(class Remotion.Linq.QueryModel queryModel, bool asyncQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(Remotion.Linq.QueryModel,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OptimizeQueryModel (queryModel As QueryModel, asyncQuery As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OptimizeQueryModel : Remotion.Linq.QueryModel * bool -&gt; unit&#xA;override this.OptimizeQueryModel : Remotion.Linq.QueryModel * bool -&gt; unit" Usage="entityQueryModelVisitor.OptimizeQueryModel (queryModel, asyncQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="asyncQuery" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query. </param>
        <param name="asyncQuery">True if we are compiling an async query; otherwise false.</param>
        <summary>
                Applies optimizations to the query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCompilationContext">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.QueryCompilationContext QueryCompilationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext QueryCompilationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property QueryCompilationContext As QueryCompilationContext" />
      <MemberSignature Language="F#" Value="member this.QueryCompilationContext : Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Usage="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryCompilationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" /> being used for this query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContextParameter">
      <MemberSignature Language="C#" Value="public static readonly System.Linq.Expressions.ParameterExpression QueryContextParameter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Linq.Expressions.ParameterExpression QueryContextParameter" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryContextParameter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContextParameter As ParameterExpression " />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContextParameter : System.Linq.Expressions.ParameterExpression" Usage="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryContextParameter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Expression to reference the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryContext" /> parameter for a query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOrderings">
      <MemberSignature Language="C#" Value="protected virtual void RemoveOrderings (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RemoveOrderings(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.RemoveOrderings(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RemoveOrderings (queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="abstract member RemoveOrderings : Remotion.Linq.QueryModel -&gt; unit&#xA;override this.RemoveOrderings : Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.RemoveOrderings queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" Index="0" FrameworkAlternate="efcore-2.2;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="queryModel">Query model to remove orderings on.</param>
        <summary>
                Removes orderings for a given query model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceClauseReferences">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ReplaceClauseReferences (System.Linq.Expressions.Expression expression, Remotion.Linq.Clauses.IQuerySource querySource = default, bool inProjection = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ReplaceClauseReferences(class System.Linq.Expressions.Expression expression, class Remotion.Linq.Clauses.IQuerySource querySource, bool inProjection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(System.Linq.Expressions.Expression,Remotion.Linq.Clauses.IQuerySource,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceClauseReferences (expression As Expression, Optional querySource As IQuerySource = Nothing, Optional inProjection As Boolean = false) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ReplaceClauseReferences : System.Linq.Expressions.Expression * Remotion.Linq.Clauses.IQuerySource * bool -&gt; System.Linq.Expressions.Expression&#xA;override this.ReplaceClauseReferences : System.Linq.Expressions.Expression * Remotion.Linq.Clauses.IQuerySource * bool -&gt; System.Linq.Expressions.Expression" Usage="entityQueryModelVisitor.ReplaceClauseReferences (expression, querySource, inProjection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
        <Parameter Name="inProjection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="expression"> The re-linq query model expression. </param>
        <param name="querySource"> The query source. </param>
        <param name="inProjection"> True when the expression is a projector. </param>
        <summary>
                Translates a re-linq query model expression into a compiled query expression.
            </summary>
        <returns>
                A compiled query expression fragment.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RewriteProjectedCollectionNavigationsToIncludes">
      <MemberSignature Language="C#" Value="protected virtual void RewriteProjectedCollectionNavigationsToIncludes (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RewriteProjectedCollectionNavigationsToIncludes(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.RewriteProjectedCollectionNavigationsToIncludes(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RewriteProjectedCollectionNavigationsToIncludes (queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="abstract member RewriteProjectedCollectionNavigationsToIncludes : Remotion.Linq.QueryModel -&gt; unit&#xA;override this.RewriteProjectedCollectionNavigationsToIncludes : Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.RewriteProjectedCollectionNavigationsToIncludes queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("This is now handled by correlated collection optimization.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This is now handled by correlated collection optimization.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query. </param>
        <summary>
                Rewrites collection navigation projections so that they can be handled by the Include pipeline.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectAsyncMethod">
      <MemberSignature Language="C#" Value="protected static System.Reflection.MethodInfo SelectAsyncMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.MethodInfo SelectAsyncMethod" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SelectAsyncMethod" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property SelectAsyncMethod As MethodInfo" />
      <MemberSignature Language="F#" Value="static member SelectAsyncMethod : System.Reflection.MethodInfo" Usage="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SelectAsyncMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The _SelectAsync method info.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldApplyDefiningQuery">
      <MemberSignature Language="C#" Value="public virtual bool ShouldApplyDefiningQuery (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldApplyDefiningQuery(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ShouldApplyDefiningQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldApplyDefiningQuery (entityType As IEntityType, querySource As IQuerySource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldApplyDefiningQuery : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Remotion.Linq.Clauses.IQuerySource -&gt; bool&#xA;override this.ShouldApplyDefiningQuery : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Remotion.Linq.Clauses.IQuerySource -&gt; bool" Usage="entityQueryModelVisitor.ShouldApplyDefiningQuery (entityType, querySource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType">The target entity type.</param>
        <param name="querySource">The target query source.</param>
        <summary>
                Determine whether a defining query should be applied when querying the target entity type.
            </summary>
        <returns>true if the target type should have a defining query applied.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleResultToSequence">
      <MemberSignature Language="C#" Value="protected virtual void SingleResultToSequence (Remotion.Linq.QueryModel queryModel, Type type = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SingleResultToSequence(class Remotion.Linq.QueryModel queryModel, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence(Remotion.Linq.QueryModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SingleResultToSequence (queryModel As QueryModel, Optional type As Type = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member SingleResultToSequence : Remotion.Linq.QueryModel * Type -&gt; unit&#xA;override this.SingleResultToSequence : Remotion.Linq.QueryModel * Type -&gt; unit" Usage="entityQueryModelVisitor.SingleResultToSequence (queryModel, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query. </param>
        <param name="type"> The type of results returned by the query. </param>
        <summary>
                Converts the results of the query from a single result to a series of results.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackEntitiesInResults&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="protected virtual void TrackEntitiesInResults&lt;TResult&gt; (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TrackEntitiesInResults&lt;TResult&gt;(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults``1(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TrackEntitiesInResults(Of TResult) (queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="abstract member TrackEntitiesInResults : Remotion.Linq.QueryModel -&gt; unit&#xA;override this.TrackEntitiesInResults : Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.TrackEntitiesInResults queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> The type of results returned by the query. </typeparam>
        <param name="queryModel"> The query. </param>
        <summary>
                Applies tracking behavior to the query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAdditionalFromClause">
      <MemberSignature Language="C#" Value="public override void VisitAdditionalFromClause (Remotion.Linq.Clauses.AdditionalFromClause fromClause, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitAdditionalFromClause(class Remotion.Linq.Clauses.AdditionalFromClause fromClause, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitAdditionalFromClause (fromClause As AdditionalFromClause, queryModel As QueryModel, index As Integer)" />
      <MemberSignature Language="F#" Value="override this.VisitAdditionalFromClause : Remotion.Linq.Clauses.AdditionalFromClause * Remotion.Linq.QueryModel * int -&gt; unit" Usage="entityQueryModelVisitor.VisitAdditionalFromClause (fromClause, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromClause" Type="Remotion.Linq.Clauses.AdditionalFromClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fromClause"> The node being visited. </param>
        <param name="queryModel"> The query. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.AdditionalFromClause" /> nodes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGroupJoinClause">
      <MemberSignature Language="C#" Value="public override void VisitGroupJoinClause (Remotion.Linq.Clauses.GroupJoinClause groupJoinClause, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitGroupJoinClause(class Remotion.Linq.Clauses.GroupJoinClause groupJoinClause, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause(Remotion.Linq.Clauses.GroupJoinClause,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitGroupJoinClause (groupJoinClause As GroupJoinClause, queryModel As QueryModel, index As Integer)" />
      <MemberSignature Language="F#" Value="override this.VisitGroupJoinClause : Remotion.Linq.Clauses.GroupJoinClause * Remotion.Linq.QueryModel * int -&gt; unit" Usage="entityQueryModelVisitor.VisitGroupJoinClause (groupJoinClause, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupJoinClause" Type="Remotion.Linq.Clauses.GroupJoinClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupJoinClause"> The node being visited. </param>
        <param name="queryModel"> The query. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.GroupJoinClause" /> nodes
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitJoinClause">
      <MemberSignature Language="C#" Value="public override void VisitJoinClause (Remotion.Linq.Clauses.JoinClause joinClause, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitJoinClause(class Remotion.Linq.Clauses.JoinClause joinClause, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitJoinClause (joinClause As JoinClause, queryModel As QueryModel, index As Integer)" />
      <MemberSignature Language="F#" Value="override this.VisitJoinClause : Remotion.Linq.Clauses.JoinClause * Remotion.Linq.QueryModel * int -&gt; unit" Usage="entityQueryModelVisitor.VisitJoinClause (joinClause, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinClause" Type="Remotion.Linq.Clauses.JoinClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="joinClause"> The node being visited. </param>
        <param name="queryModel"> The query. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.JoinClause" /> nodes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMainFromClause">
      <MemberSignature Language="C#" Value="public override void VisitMainFromClause (Remotion.Linq.Clauses.MainFromClause fromClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitMainFromClause(class Remotion.Linq.Clauses.MainFromClause fromClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitMainFromClause (fromClause As MainFromClause, queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="override this.VisitMainFromClause : Remotion.Linq.Clauses.MainFromClause * Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.VisitMainFromClause (fromClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromClause" Type="Remotion.Linq.Clauses.MainFromClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="fromClause"> The node being visited. </param>
        <param name="queryModel"> The query. </param>
        <summary>
                Visits the <see cref="T:Remotion.Linq.Clauses.MainFromClause" /> node.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrdering">
      <MemberSignature Language="C#" Value="public override void VisitOrdering (Remotion.Linq.Clauses.Ordering ordering, Remotion.Linq.QueryModel queryModel, Remotion.Linq.Clauses.OrderByClause orderByClause, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitOrdering(class Remotion.Linq.Clauses.Ordering ordering, class Remotion.Linq.QueryModel queryModel, class Remotion.Linq.Clauses.OrderByClause orderByClause, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering(Remotion.Linq.Clauses.Ordering,Remotion.Linq.QueryModel,Remotion.Linq.Clauses.OrderByClause,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitOrdering (ordering As Ordering, queryModel As QueryModel, orderByClause As OrderByClause, index As Integer)" />
      <MemberSignature Language="F#" Value="override this.VisitOrdering : Remotion.Linq.Clauses.Ordering * Remotion.Linq.QueryModel * Remotion.Linq.Clauses.OrderByClause * int -&gt; unit" Usage="entityQueryModelVisitor.VisitOrdering (ordering, queryModel, orderByClause, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordering" Type="Remotion.Linq.Clauses.Ordering" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="orderByClause" Type="Remotion.Linq.Clauses.OrderByClause" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordering"> The node being visited. </param>
        <param name="queryModel"> The query. </param>
        <param name="orderByClause"> The <see cref="T:Remotion.Linq.Clauses.OrderByClause" /> for the ordering. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.Ordering" /> nodes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryModel">
      <MemberSignature Language="C#" Value="public override void VisitQueryModel (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitQueryModel(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitQueryModel (queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="override this.VisitQueryModel : Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.VisitQueryModel queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query. </param>
        <summary>
                Visits the root <see cref="T:Remotion.Linq.QueryModel" /> node.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitResultOperator">
      <MemberSignature Language="C#" Value="public override void VisitResultOperator (Remotion.Linq.Clauses.ResultOperatorBase resultOperator, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitResultOperator(class Remotion.Linq.Clauses.ResultOperatorBase resultOperator, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator(Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitResultOperator (resultOperator As ResultOperatorBase, queryModel As QueryModel, index As Integer)" />
      <MemberSignature Language="F#" Value="override this.VisitResultOperator : Remotion.Linq.Clauses.ResultOperatorBase * Remotion.Linq.QueryModel * int -&gt; unit" Usage="entityQueryModelVisitor.VisitResultOperator (resultOperator, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultOperator" Type="Remotion.Linq.Clauses.ResultOperatorBase" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resultOperator"> The node being visited. </param>
        <param name="queryModel"> The query. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.ResultOperatorBase" /> nodes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelectClause">
      <MemberSignature Language="C#" Value="public override void VisitSelectClause (Remotion.Linq.Clauses.SelectClause selectClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitSelectClause(class Remotion.Linq.Clauses.SelectClause selectClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(Remotion.Linq.Clauses.SelectClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitSelectClause (selectClause As SelectClause, queryModel As QueryModel)" />
      <MemberSignature Language="F#" Value="override this.VisitSelectClause : Remotion.Linq.Clauses.SelectClause * Remotion.Linq.QueryModel -&gt; unit" Usage="entityQueryModelVisitor.VisitSelectClause (selectClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectClause" Type="Remotion.Linq.Clauses.SelectClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="selectClause"> The node being visited. </param>
        <param name="queryModel"> The query. </param>
        <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.SelectClause" /> nodes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhereClause">
      <MemberSignature Language="C#" Value="public override void VisitWhereClause (Remotion.Linq.Clauses.WhereClause whereClause, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitWhereClause(class Remotion.Linq.Clauses.WhereClause whereClause, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause(Remotion.Linq.Clauses.WhereClause,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub VisitWhereClause (whereClause As WhereClause, queryModel As QueryModel, index As Integer)" />
      <MemberSignature Language="F#" Value="override this.VisitWhereClause : Remotion.Linq.Clauses.WhereClause * Remotion.Linq.QueryModel * int -&gt; unit" Usage="entityQueryModelVisitor.VisitWhereClause (whereClause, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whereClause" Type="Remotion.Linq.Clauses.WhereClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="whereClause"> The node being visited. </param>
        <param name="queryModel"> The query. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.WhereClause" /> nodes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
