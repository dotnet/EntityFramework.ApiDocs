<Type Name="StructuralTypeShaperExpression" FullName="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression">
  <TypeSignature Language="C#" Value="public class StructuralTypeShaperExpression : System.Linq.Expressions.Expression, Microsoft.EntityFrameworkCore.Query.IPrintableExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StructuralTypeShaperExpression extends System.Linq.Expressions.Expression implements class Microsoft.EntityFrameworkCore.Query.IPrintableExpression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class StructuralTypeShaperExpression&#xA;Inherits Expression&#xA;Implements IPrintableExpression" />
  <TypeSignature Language="F#" Value="type StructuralTypeShaperExpression = class&#xA;    inherit Expression&#xA;    interface IPrintableExpression" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IPrintableExpression</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{DebuggerDisplay(),nq}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{DebuggerDisplay(),nq}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>
                    An expression that represents creation of a structural type instance in <see cref="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ShaperExpression" />.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally not used in application code.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                and <see href="https://aka.ms/efcore-docs-how-query-works">How EF Core queries work</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructuralTypeShaperExpression (Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, System.Linq.Expressions.Expression valueBufferExpression, bool nullable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, class System.Linq.Expressions.Expression valueBufferExpression, bool nullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.ITypeBase,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As ITypeBase, valueBufferExpression As Expression, nullable As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression : Microsoft.EntityFrameworkCore.Metadata.ITypeBase * System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="new Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression (type, valueBufferExpression, nullable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
        <Parameter Name="valueBufferExpression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="nullable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The entity or complex type to shape.</param>
        <param name="valueBufferExpression">An expression of ValueBuffer to get values for properties of the type.</param>
        <param name="nullable">A bool value indicating whether this instance can be null.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StructuralTypeShaperExpression (Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, System.Linq.Expressions.Expression valueBufferExpression, bool nullable, System.Linq.Expressions.LambdaExpression? materializationCondition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, class System.Linq.Expressions.Expression valueBufferExpression, bool nullable, class System.Linq.Expressions.LambdaExpression materializationCondition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.ITypeBase,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (type As ITypeBase, valueBufferExpression As Expression, nullable As Boolean, materializationCondition As LambdaExpression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression : Microsoft.EntityFrameworkCore.Metadata.ITypeBase * System.Linq.Expressions.Expression * bool * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="new Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression (type, valueBufferExpression, nullable, materializationCondition)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
        <Parameter Name="valueBufferExpression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="nullable" Type="System.Boolean" />
        <Parameter Name="materializationCondition" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="type">The entity or complex type to shape.</param>
        <param name="valueBufferExpression">An expression of ValueBuffer to get values for properties of the type.</param>
        <param name="nullable">Whether this instance can be null.</param>
        <param name="materializationCondition">
                An expression of <see cref="T:System.Func`2" /> to determine which structural type to materialize.
            </param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUnableToDiscriminateExceptionExpression">
      <MemberSignature Language="C#" Value="protected static System.Linq.Expressions.Expression CreateUnableToDiscriminateExceptionExpression (Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, System.Linq.Expressions.Expression discriminatorValue);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Linq.Expressions.Expression CreateUnableToDiscriminateExceptionExpression(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, class System.Linq.Expressions.Expression discriminatorValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.CreateUnableToDiscriminateExceptionExpression(Microsoft.EntityFrameworkCore.Metadata.ITypeBase,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateUnableToDiscriminateExceptionExpression (type As ITypeBase, discriminatorValue As Expression) As Expression" />
      <MemberSignature Language="F#" Value="static member CreateUnableToDiscriminateExceptionExpression : Microsoft.EntityFrameworkCore.Metadata.ITypeBase * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.CreateUnableToDiscriminateExceptionExpression (type, discriminatorValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
        <Parameter Name="discriminatorValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">The entity type for which materialization was requested.</param>
        <param name="discriminatorValue">The expression containing value of discriminator.</param>
        <summary>
                Creates an expression to throw an exception when we're unable to determine the structural type to materialize based on
                discriminator value.
            </summary>
        <returns>
                An expression of <see cref="T:System.Func`2" /> representing materilization condition for the entity type.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebuggerDisplay">
      <MemberSignature Language="C#" Value="public virtual string DebuggerDisplay ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string DebuggerDisplay() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.DebuggerDisplay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DebuggerDisplay () As String" />
      <MemberSignature Language="F#" Value="abstract member DebuggerDisplay : unit -&gt; string&#xA;override this.DebuggerDisplay : unit -&gt; string" Usage="structuralTypeShaperExpression.DebuggerDisplay " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateMaterializationCondition">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.LambdaExpression GenerateMaterializationCondition (Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, bool nullable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.LambdaExpression GenerateMaterializationCondition(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, bool nullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.GenerateMaterializationCondition(Microsoft.EntityFrameworkCore.Metadata.ITypeBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateMaterializationCondition (type As ITypeBase, nullable As Boolean) As LambdaExpression" />
      <MemberSignature Language="F#" Value="abstract member GenerateMaterializationCondition : Microsoft.EntityFrameworkCore.Metadata.ITypeBase * bool -&gt; System.Linq.Expressions.LambdaExpression&#xA;override this.GenerateMaterializationCondition : Microsoft.EntityFrameworkCore.Metadata.ITypeBase * bool -&gt; System.Linq.Expressions.LambdaExpression" Usage="structuralTypeShaperExpression.GenerateMaterializationCondition (type, nullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
        <Parameter Name="nullable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The type to create materialization condition for.</param>
        <param name="nullable">Whether this instance can be null.</param>
        <summary>
                Creates an expression of <see cref="T:System.Func`2" /> to determine which type to materialize.
            </summary>
        <returns>
                An expression of <see cref="T:System.Func`2" /> representing materialization condition for the type.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public virtual bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                A value indicating whether this instance can be null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeNullable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression MakeNullable (bool nullable = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression MakeNullable(bool nullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.MakeNullable(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeNullable (Optional nullable As Boolean = true) As StructuralTypeShaperExpression" />
      <MemberSignature Language="F#" Value="abstract member MakeNullable : bool -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression&#xA;override this.MakeNullable : bool -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="structuralTypeShaperExpression.MakeNullable nullable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nullable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nullable">A value indicating if the shaper is nullable.</param>
        <summary>
                Assigns nullability for this shaper, indicating whether it can shape null instances or not.
            </summary>
        <returns>This expression if nullability not changed, or an expression with updated nullability.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaterializationCondition">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression MaterializationCondition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression MaterializationCondition" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.MaterializationCondition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaterializationCondition As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.MaterializationCondition : System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.MaterializationCondition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The materialization condition to use for shaping this structural type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print">
      <MemberSignature Language="C#" Value="void IPrintableExpression.Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="VB.NET" Value="Sub Print (expressionPrinter As ExpressionPrinter) Implements IPrintableExpression.Print" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit&#xA;override this.Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="structuralTypeShaperExpression.Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="StructuralType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ITypeBase StructuralType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.ITypeBase StructuralType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.StructuralType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructuralType As ITypeBase" />
      <MemberSignature Language="F#" Value="member this.StructuralType : Microsoft.EntityFrameworkCore.Metadata.ITypeBase" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.StructuralType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITypeBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The entity or complex type being shaped.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression Update (System.Linq.Expressions.Expression valueBufferExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression Update(class System.Linq.Expressions.Expression valueBufferExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.Update(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (valueBufferExpression As Expression) As StructuralTypeShaperExpression" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression&#xA;override this.Update : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="structuralTypeShaperExpression.Update valueBufferExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueBufferExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="valueBufferExpression">The <see cref="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.ValueBufferExpression" /> property of the result.</param>
        <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
        <returns>This expression if no children changed, or an expression with the updated children.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueBufferExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ValueBufferExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression ValueBufferExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.ValueBufferExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ValueBufferExpression As Expression" />
      <MemberSignature Language="F#" Value="member this.ValueBufferExpression : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.ValueBufferExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The expression representing a <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" /> to get values from that are used to create the instance.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="structuralTypeShaperExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="WithType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression WithType (Microsoft.EntityFrameworkCore.Metadata.ITypeBase type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression WithType(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression.WithType(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WithType (type As ITypeBase) As StructuralTypeShaperExpression" />
      <MemberSignature Language="F#" Value="abstract member WithType : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression&#xA;override this.WithType : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="structuralTypeShaperExpression.WithType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
      </Parameters>
      <Docs>
        <param name="type">The new type to use.</param>
        <summary>
                Changes the structural type being shaped by this shaper.
            </summary>
        <returns>This expression if the type was not changed, or a new expression with the updated type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
