<Type Name="INavigationExpansionExtensibilityHelper" FullName="Microsoft.EntityFrameworkCore.Query.INavigationExpansionExtensibilityHelper">
  <TypeSignature Language="C#" Value="public interface INavigationExpansionExtensibilityHelper" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INavigationExpansionExtensibilityHelper" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.INavigationExpansionExtensibilityHelper" />
  <TypeSignature Language="VB.NET" Value="Public Interface INavigationExpansionExtensibilityHelper" />
  <TypeSignature Language="F#" Value="type INavigationExpansionExtensibilityHelper = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                Service which helps with various aspects of navigation expansion extensibility.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                and <see href="https://aka.ms/efcore-how-queries-work">How EF Core queries work</see> for more information.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="AreQueryRootsCompatible">
      <MemberSignature Language="C#" Value="public bool AreQueryRootsCompatible (Microsoft.EntityFrameworkCore.Query.QueryRootExpression? first, Microsoft.EntityFrameworkCore.Query.QueryRootExpression? second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AreQueryRootsCompatible(class Microsoft.EntityFrameworkCore.Query.QueryRootExpression first, class Microsoft.EntityFrameworkCore.Query.QueryRootExpression second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.INavigationExpansionExtensibilityHelper.AreQueryRootsCompatible(Microsoft.EntityFrameworkCore.Query.QueryRootExpression,Microsoft.EntityFrameworkCore.Query.QueryRootExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AreQueryRootsCompatible (first As QueryRootExpression, second As QueryRootExpression) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AreQueryRootsCompatible : Microsoft.EntityFrameworkCore.Query.QueryRootExpression * Microsoft.EntityFrameworkCore.Query.QueryRootExpression -&gt; bool" Usage="iNavigationExpansionExtensibilityHelper.AreQueryRootsCompatible (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="Microsoft.EntityFrameworkCore.Query.QueryRootExpression" />
        <Parameter Name="second" Type="Microsoft.EntityFrameworkCore.Query.QueryRootExpression" />
      </Parameters>
      <Docs>
        <param name="first">The first query root.</param>
        <param name="second">The second query root.</param>
        <summary>
                Checks whether two query roots are compatible for a set operation to combine them.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryRoot">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.QueryRootExpression CreateQueryRoot (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Query.QueryRootExpression? source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.QueryRootExpression CreateQueryRoot(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Query.QueryRootExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.INavigationExpansionExtensibilityHelper.CreateQueryRoot(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.QueryRootExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateQueryRoot (entityType As IEntityType, source As QueryRootExpression) As QueryRootExpression" />
      <MemberSignature Language="F#" Value="abstract member CreateQueryRoot : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Query.QueryRootExpression -&gt; Microsoft.EntityFrameworkCore.Query.QueryRootExpression" Usage="iNavigationExpansionExtensibilityHelper.CreateQueryRoot (entityType, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryRootExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.QueryRootExpression" />
      </Parameters>
      <Docs>
        <param name="entityType">Entity type of the new <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryRootExpression" />.</param>
        <param name="source">Source expression.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryRootExpression" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
