<Type Name="QueryContext" FullName="Microsoft.EntityFrameworkCore.Query.QueryContext">
  <TypeSignature Language="C#" Value="public class QueryContext" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QueryContext extends System.Object" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.QueryContext" />
  <TypeSignature Language="VB.NET" Value="Public Class QueryContext" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="F#" Value="type QueryContext = class" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="C#" Value="public class QueryContext : IDisposable, Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QueryContext extends System.Object implements class Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues, class System.IDisposable" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="VB.NET" Value="Public Class QueryContext&#xA;Implements IDisposable, IParameterValues" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type QueryContext = class&#xA;    interface IDisposable&#xA;    interface IParameterValues" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public abstract class QueryContext : Microsoft.EntityFrameworkCore.Query.IParameterValues" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit QueryContext extends System.Object implements class Microsoft.EntityFrameworkCore.Query.IParameterValues" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class QueryContext&#xA;Implements IParameterValues" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type QueryContext = class&#xA;    interface IParameterValues" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="C#" Value="public abstract class QueryContext : Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit QueryContext extends System.Object implements class Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1">
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IParameterValues</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    The principal data structure used by a compiled query during execution.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                and <see href="https://aka.ms/efcore-docs-how-query-works">How EF Core queries work</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QueryContext (Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As QueryContextDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QueryContext : Microsoft.EntityFrameworkCore.Query.QueryContextDependencies -&gt; Microsoft.EntityFrameworkCore.Query.QueryContext" Usage="new Microsoft.EntityFrameworkCore.Query.QueryContext dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryContextDependencies" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">The dependencies to use.</param>
        <summary>
          <para>
                    Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryContext" /> instance.
                </para>
          <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryContext (Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies, Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; queryBufferFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies, class System.Func`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; queryBufferFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies,System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryContextDependencies, queryBufferFactory As Func(Of IQueryBuffer))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QueryContext : Microsoft.EntityFrameworkCore.Query.QueryContextDependencies * Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; -&gt; Microsoft.EntityFrameworkCore.Query.QueryContext" Usage="new Microsoft.EntityFrameworkCore.Query.QueryContext (dependencies, queryBufferFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryContextDependencies" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="queryBufferFactory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="queryBufferFactory">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryContext (Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; queryBufferFactory, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector concurrencyDetector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; queryBufferFactory, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, class Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector concurrencyDetector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.#ctor(System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer},Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryBufferFactory As Func(Of IQueryBuffer), stateManager As IStateManager, concurrencyDetector As IConcurrencyDetector)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QueryContext : Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector -&gt; Microsoft.EntityFrameworkCore.Query.QueryContext" Usage="new Microsoft.EntityFrameworkCore.Query.QueryContext (queryBufferFactory, stateManager, concurrencyDetector)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryBufferFactory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt;" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="1" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="concurrencyDetector" Type="Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector" Index="2" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="queryBufferFactory">To be added.</param>
        <param name="stateManager">To be added.</param>
        <param name="concurrencyDetector">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryContext (Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; queryBufferFactory, Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt; stateManager, Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector concurrencyDetector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; queryBufferFactory, class Microsoft.EntityFrameworkCore.Internal.LazyRef`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt; stateManager, class Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector concurrencyDetector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.#ctor(System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer},Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager},Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (queryBufferFactory As Func(Of IQueryBuffer), stateManager As LazyRef(Of IStateManager), concurrencyDetector As IConcurrencyDetector)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.QueryContext : Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; * Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt; * Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector -&gt; Microsoft.EntityFrameworkCore.Query.QueryContext" Usage="new Microsoft.EntityFrameworkCore.Query.QueryContext (queryBufferFactory, stateManager, concurrencyDetector)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryBufferFactory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt;" Index="0" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="concurrencyDetector" Type="Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector" Index="2" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="queryBufferFactory">To be added.</param>
        <param name="stateManager">To be added.</param>
        <param name="concurrencyDetector">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParameter">
      <MemberSignature Language="C#" Value="public virtual void AddParameter (string name, object value);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddParameter(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.AddParameter(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddParameter (name As String, value As Object)" />
      <MemberSignature Language="F#" Value="abstract member AddParameter : string * obj -&gt; unit&#xA;override this.AddParameter : string * obj -&gt; unit" Usage="queryContext.AddParameter (name, value)" />
      <MemberSignature Language="C#" Value="public virtual void AddParameter (string name, object? value);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues.AddParameter(System.String,System.Object)</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Query.IParameterValues.AddParameter(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The name.</param>
        <param name="value">The value.</param>
        <summary>
                Adds a parameter to <see cref="P:Microsoft.EntityFrameworkCore.Query.QueryContext.ParameterValues" /> for this query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTrackingQuery">
      <MemberSignature Language="C#" Value="public virtual void BeginTrackingQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginTrackingQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.BeginTrackingQuery" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginTrackingQuery ()" />
      <MemberSignature Language="F#" Value="abstract member BeginTrackingQuery : unit -&gt; unit&#xA;override this.BeginTrackingQuery : unit -&gt; unit" Usage="queryContext.BeginTrackingQuery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Notify the state manager that a tracking query is starting.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public virtual System.Threading.CancellationToken CancellationToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CancellationToken As CancellationToken" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken with get, set" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The cancellation token to use while executing the query.
            </summary>
        <value>
                The cancellation token.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandLogger">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; CommandLogger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Command&gt; CommandLogger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.CommandLogger" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CommandLogger As IDiagnosticsLogger(Of DbLoggerCategory.Database.Command)" />
      <MemberSignature Language="F#" Value="member this.CommandLogger : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt;" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.CommandLogger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Command&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The command logger to use while executing the query.
            </summary>
        <value>
                The cancellation token.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcurrencyDetector">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector ConcurrencyDetector { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector ConcurrencyDetector" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.ConcurrencyDetector" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConcurrencyDetector As IConcurrencyDetector" />
      <MemberSignature Language="F#" Value="member this.ConcurrencyDetector : Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.ConcurrencyDetector" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector ConcurrencyDetector { get; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector ConcurrencyDetector" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.ConcurrencyDetector : Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.ConcurrencyDetector" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The concurrency detector to use while executing the query.
            </summary>
        <value>
                The concurrency detector.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbContext Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.Context" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Context As DbContext" />
      <MemberSignature Language="F#" Value="member this.Context : Microsoft.EntityFrameworkCore.DbContext" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The current DbContext in using while executing the query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.QueryContextDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As QueryContextDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Query.QueryContextDependencies" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryContextDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="queryContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionDetector">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IExceptionDetector ExceptionDetector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IExceptionDetector ExceptionDetector" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.ExceptionDetector" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExceptionDetector As IExceptionDetector" />
      <MemberSignature Language="F#" Value="member this.ExceptionDetector : Microsoft.EntityFrameworkCore.Storage.IExceptionDetector" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.ExceptionDetector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IExceptionDetector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The exception detector to use while executing the query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy ExecutionStrategy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy ExecutionStrategy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.ExecutionStrategy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExecutionStrategy As IExecutionStrategy" />
      <MemberSignature Language="F#" Value="member this.ExecutionStrategy : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.ExecutionStrategy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The execution strategy to use while executing the query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionStrategyFactory">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory ExecutionStrategyFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory ExecutionStrategyFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.ExecutionStrategyFactory" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExecutionStrategyFactory As IExecutionStrategyFactory" />
      <MemberSignature Language="F#" Value="member this.ExecutionStrategyFactory : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.ExecutionStrategyFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use ExecutionStrategy instead")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use ExecutionStrategy instead")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The execution strategy factory to use while executing the query.
            </summary>
        <value>
                The execution strategy factory.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeStateManager">
      <MemberSignature Language="C#" Value="public virtual void InitializeStateManager (bool standAlone = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeStateManager(bool standAlone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.InitializeStateManager(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InitializeStateManager (Optional standAlone As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member InitializeStateManager : bool -&gt; unit&#xA;override this.InitializeStateManager : bool -&gt; unit" Usage="queryContext.InitializeStateManager standAlone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standAlone" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="standAlone">Whether a stand-alone <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" /> should be created to perform identity resolution.</param>
        <summary>
                Initializes the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" /> to be used with this QueryContext.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterValues">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyDictionary&lt;string,object&gt; ParameterValues { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; ParameterValues" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.ParameterValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ParameterValues As IReadOnlyDictionary(Of String, Object)" />
      <MemberSignature Language="F#" Value="member this.ParameterValues : System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt;" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.ParameterValues" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyDictionary&lt;string,object?&gt; ParameterValues { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">P:Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues.ParameterValues</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1">P:Microsoft.EntityFrameworkCore.Query.IParameterValues.ParameterValues</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The parameter values to use while executing the query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryBuffer">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer QueryBuffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer QueryBuffer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.QueryBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property QueryBuffer As IQueryBuffer" />
      <MemberSignature Language="F#" Value="member this.QueryBuffer : Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.QueryBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The query buffer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryLogger">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; QueryLogger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; QueryLogger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.QueryLogger" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property QueryLogger As IDiagnosticsLogger(Of DbLoggerCategory.Query)" />
      <MemberSignature Language="F#" Value="member this.QueryLogger : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt;" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.QueryLogger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The query logger to use while executing the query.
            </summary>
        <value>
                The cancellation token.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryProvider">
      <MemberSignature Language="C#" Value="public virtual System.Linq.IQueryProvider QueryProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider QueryProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.QueryProvider" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property QueryProvider As IQueryProvider" />
      <MemberSignature Language="F#" Value="member this.QueryProvider : System.Linq.IQueryProvider" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.QueryProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("The service requiring IQueryProvider should inject it directly.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("The service requiring IQueryProvider should inject it directly.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The query provider.
            </summary>
        <value>
                The query provider.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveParameter">
      <MemberSignature Language="C#" Value="public virtual object RemoveParameter (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RemoveParameter(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.RemoveParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveParameter (name As String) As Object" />
      <MemberSignature Language="F#" Value="abstract member RemoveParameter : string -&gt; obj&#xA;override this.RemoveParameter : string -&gt; obj" Usage="queryContext.RemoveParameter name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">M:Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues.RemoveParameter(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="name"> The name. </param>
        <summary>
                Removes a parameter by name.
            </summary>
        <returns>
                The parameter value.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNavigationIsLoaded">
      <MemberSignature Language="C#" Value="public virtual void SetNavigationIsLoaded (object entity, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNavigationIsLoaded(object entity, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.SetNavigationIsLoaded(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetNavigationIsLoaded (entity As Object, navigation As INavigation)" />
      <MemberSignature Language="F#" Value="abstract member SetNavigationIsLoaded : obj * Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; unit&#xA;override this.SetNavigationIsLoaded : obj * Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; unit" Usage="queryContext.SetNavigationIsLoaded (entity, navigation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entity"> The entity instance. </param>
        <param name="navigation"> The navigation property. </param>
        <summary>
                Sets the navigation as loaded.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNavigationIsLoaded">
      <MemberSignature Language="C#" Value="public virtual void SetNavigationIsLoaded (object entity, Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNavigationIsLoaded(object entity, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.SetNavigationIsLoaded(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigationBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetNavigationIsLoaded (entity As Object, navigation As INavigationBase)" />
      <MemberSignature Language="F#" Value="abstract member SetNavigationIsLoaded : obj * Microsoft.EntityFrameworkCore.Metadata.INavigationBase -&gt; unit&#xA;override this.SetNavigationIsLoaded : obj * Microsoft.EntityFrameworkCore.Metadata.INavigationBase -&gt; unit" Usage="queryContext.SetNavigationIsLoaded (entity, navigation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entity">The entity instance.</param>
        <param name="navigation">The navigation property.</param>
        <summary>
                Sets the navigation for given entity as loaded.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameter">
      <MemberSignature Language="C#" Value="public virtual void SetParameter (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetParameter(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.SetParameter(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetParameter (name As String, value As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetParameter : string * obj -&gt; unit&#xA;override this.SetParameter : string * obj -&gt; unit" Usage="queryContext.SetParameter (name, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues.SetParameter(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="name"> The name. </param>
        <param name="value"> The value. </param>
        <summary>
                Sets a parameter value.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTracking">
      <MemberSignature Language="C#" Value="public virtual void StartTracking (object entity, Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo entityTrackingInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartTracking(object entity, class Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo entityTrackingInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.StartTracking(System.Object,Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub StartTracking (entity As Object, entityTrackingInfo As EntityTrackingInfo)" />
      <MemberSignature Language="F#" Value="abstract member StartTracking : obj * Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo -&gt; unit&#xA;override this.StartTracking : obj * Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo -&gt; unit" Usage="queryContext.StartTracking (entity, entityTrackingInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="entityTrackingInfo" Type="Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entity"> The entity. </param>
        <param name="entityTrackingInfo"> Information describing how to track the entity. </param>
        <summary>
                Start tracking an entity.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTracking">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry StartTracking (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, object entity, Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry StartTracking(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, object entity, valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.StartTracking(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartTracking (entityType As IEntityType, entity As Object, valueBuffer As ValueBuffer) As InternalEntityEntry" />
      <MemberSignature Language="F#" Value="abstract member StartTracking : Microsoft.EntityFrameworkCore.Metadata.IEntityType * obj * Microsoft.EntityFrameworkCore.Storage.ValueBuffer -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry&#xA;override this.StartTracking : Microsoft.EntityFrameworkCore.Metadata.IEntityType * obj * Microsoft.EntityFrameworkCore.Storage.ValueBuffer -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Usage="queryContext.StartTracking (entityType, entity, valueBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entity" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="valueBuffer" Type="Microsoft.EntityFrameworkCore.Storage.ValueBuffer" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="entity">To be added.</param>
        <param name="valueBuffer">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateManager">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager StateManager { get; }" FrameworkAlternate="efcore-1.0;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager StateManager" FrameworkAlternate="efcore-1.0;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.QueryContext.StateManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StateManager As IStateManager" FrameworkAlternate="efcore-1.0;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="member this.StateManager : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.StateManager" FrameworkAlternate="efcore-1.0;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt; StateManager { get; }" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.LazyRef`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt; StateManager" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StateManager As LazyRef(Of IStateManager)" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="F#" Value="member this.StateManager : Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;" Usage="Microsoft.EntityFrameworkCore.Query.QueryContext.StateManager" FrameworkAlternate="efcore-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager</ReturnType>
        <ReturnType FrameworkAlternate="efcore-1.1">Microsoft.EntityFrameworkCore.Internal.LazyRef&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>
                The state manager.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetEntry">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry TryGetEntry (Microsoft.EntityFrameworkCore.Metadata.IKey key, object[] keyValues, bool throwOnNullKey, out bool hasNullKey);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry TryGetEntry(class Microsoft.EntityFrameworkCore.Metadata.IKey key, object[] keyValues, bool throwOnNullKey, [out] bool&amp; hasNullKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.QueryContext.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[],System.Boolean,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetEntry (key As IKey, keyValues As Object(), throwOnNullKey As Boolean, ByRef hasNullKey As Boolean) As InternalEntityEntry" />
      <MemberSignature Language="F#" Value="abstract member TryGetEntry : Microsoft.EntityFrameworkCore.Metadata.IKey * obj[] * bool * bool -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry&#xA;override this.TryGetEntry : Microsoft.EntityFrameworkCore.Metadata.IKey * obj[] * bool * bool -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Usage="queryContext.TryGetEntry (key, keyValues, throwOnNullKey, hasNullKey)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry? TryGetEntry (Microsoft.EntityFrameworkCore.Metadata.IKey key, object[] keyValues, bool throwOnNullKey, out bool hasNullKey);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="keyValues" Type="System.Object[]" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="throwOnNullKey" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="hasNullKey" Type="System.Boolean" RefType="out" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="keyValues">To be added.</param>
        <param name="throwOnNullKey">To be added.</param>
        <param name="hasNullKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
