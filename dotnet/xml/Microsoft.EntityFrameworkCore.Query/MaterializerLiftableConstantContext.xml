<Type Name="MaterializerLiftableConstantContext" FullName="Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext">
  <TypeSignature Language="C#" Value="public class MaterializerLiftableConstantContext : IEquatable&lt;Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaterializerLiftableConstantContext extends System.Object implements class System.IEquatable`1&lt;class Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext" />
  <TypeSignature Language="VB.NET" Value="Public Class MaterializerLiftableConstantContext&#xA;Implements IEquatable(Of MaterializerLiftableConstantContext)" />
  <TypeSignature Language="F#" Value="type MaterializerLiftableConstantContext = class&#xA;    interface IEquatable&lt;MaterializerLiftableConstantContext&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EF9100")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EF9100")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an experimental API used by the Entity Framework Core feature and it is not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MaterializerLiftableConstantContext (Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext original);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext original) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.#ctor(Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (original As MaterializerLiftableConstantContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="original" Type="Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext" />
      </Parameters>
      <Docs>
        <param name="original">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaterializerLiftableConstantContext (Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies Dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies Dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.#ctor(Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Dependencies As ShapedQueryCompilingExpressionVisitorDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext : Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies -&gt; Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext" Usage="new Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext Dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Dependencies" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies" />
      </Parameters>
      <Docs>
        <param name="Dependencies">To be added.</param>
        <summary>
                This is an experimental API used by the Entity Framework Core feature and it is not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="&lt;Clone&gt;$">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext &lt;Clone&gt;$ ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext &lt;Clone&gt;$() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.&lt;Clone&gt;$" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function &lt;Clone&gt;$ () As MaterializerLiftableConstantContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deconstruct">
      <MemberSignature Language="C#" Value="public void Deconstruct (out Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies Dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Deconstruct([out] class Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies&amp; Dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.Deconstruct(Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deconstruct (ByRef Dependencies As ShapedQueryCompilingExpressionVisitorDependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Dependencies" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies" RefType="out" />
      </Parameters>
      <Docs>
        <param name="Dependencies">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies Dependencies { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Public Property Dependencies As ShapedQueryCompilingExpressionVisitorDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies with get, set" Usage="Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualityContract">
      <MemberSignature Language="C#" Value="protected virtual Type EqualityContract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EqualityContract" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.EqualityContract" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property EqualityContract As Type" />
      <MemberSignature Language="F#" Value="member this.EqualityContract : Type" Usage="Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.EqualityContract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.Equals(Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (other As MaterializerLiftableConstantContext) As Boolean" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext? left, Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext? right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext left, class Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.op_Equality(Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext,Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As MaterializerLiftableConstantContext, right As MaterializerLiftableConstantContext) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext? left, Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext? right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext left, class Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.op_Inequality(Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext,Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As MaterializerLiftableConstantContext, right As MaterializerLiftableConstantContext) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintMembers">
      <MemberSignature Language="C#" Value="protected virtual bool PrintMembers (System.Text.StringBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool PrintMembers(class System.Text.StringBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.PrintMembers(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function PrintMembers (builder As StringBuilder) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.MaterializerLiftableConstantContext.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
