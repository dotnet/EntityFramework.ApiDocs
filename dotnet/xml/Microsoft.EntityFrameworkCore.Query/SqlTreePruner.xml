<Type Name="SqlTreePruner" FullName="Microsoft.EntityFrameworkCore.Query.SqlTreePruner">
  <TypeSignature Language="C#" Value="public class SqlTreePruner : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlTreePruner extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.SqlTreePruner" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlTreePruner&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type SqlTreePruner = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    A visitor that processes a SQL tree and prunes out parts which aren't needed.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlTreePruner ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlTreePruner.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTableAlias">
      <MemberSignature Language="C#" Value="protected virtual string? CurrentTableAlias { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentTableAlias" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlTreePruner.CurrentTableAlias" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property CurrentTableAlias As String" />
      <MemberSignature Language="F#" Value="member this.CurrentTableAlias : string with get, set" Usage="Microsoft.EntityFrameworkCore.Query.SqlTreePruner.CurrentTableAlias" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                When visiting a nested <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" /> (e.g. a select within a set operation), this holds the table alias
                of the top-most table (the one which has the alias referenced by columns). This is needed in order to properly prune the
                projection of such nested selects, which don't themselves have an alias.
            </summary>
        <value>To be added.</value>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prune">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Prune (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Prune(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlTreePruner.Prune(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Prune (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member Prune : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.Prune : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="sqlTreePruner.Prune expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                Prunes the given <see cref="T:System.Linq.Expressions.Expression" />, removing parts which aren't needed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PruneSelect">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression PruneSelect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression select, bool preserveProjection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression PruneSelect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression select, bool preserveProjection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlTreePruner.PruneSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function PruneSelect (select As SelectExpression, preserveProjection As Boolean) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member PruneSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression&#xA;override this.PruneSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="sqlTreePruner.PruneSelect (select, preserveProjection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="select" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="preserveProjection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="select">The <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to prune.</param>
        <param name="preserveProjection">Whether to prune projections if they aren't referenced from the outside.</param>
        <summary>
                Prunes a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />, removes tables inside it which aren't referenced, and optionally also projections
                which aren't referenced from outside it.
            </summary>
        <returns>A pruned copy of <paramref name="select" />, or the same instance of nothing was pruned.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PruneTopLevelSelect">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression PruneTopLevelSelect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression select);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression PruneTopLevelSelect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression select) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlTreePruner.PruneTopLevelSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function PruneTopLevelSelect (select As SelectExpression) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member PruneTopLevelSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression&#xA;override this.PruneTopLevelSelect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="sqlTreePruner.PruneTopLevelSelect select" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="select" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="select">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedColumnMap">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyDictionary&lt;string,System.Collections.Generic.HashSet&lt;string&gt;&gt; ReferencedColumnMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, class System.Collections.Generic.HashSet`1&lt;string&gt;&gt; ReferencedColumnMap" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlTreePruner.ReferencedColumnMap" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ReferencedColumnMap As IReadOnlyDictionary(Of String, HashSet(Of String))" />
      <MemberSignature Language="F#" Value="member this.ReferencedColumnMap : System.Collections.Generic.IReadOnlyDictionary&lt;string, System.Collections.Generic.HashSet&lt;string&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlTreePruner.ReferencedColumnMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Collections.Generic.HashSet&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Maps table aliases to the list of column aliases found referenced on them.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlTreePruner.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (node As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="sqlTreePruner.VisitExtension node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
