<Type Name="RelationalQueryableMethodTranslatingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class RelationalQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RelationalQueryableMethodTranslatingExpressionVisitor extends Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class RelationalQueryableMethodTranslatingExpressionVisitor&#xA;Inherits QueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="F#" Value="type RelationalQueryableMethodTranslatingExpressionVisitor = class&#xA;    inherit QueryableMethodTranslatingExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
    <inheritdoc />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RelationalQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor parentVisitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor parentVisitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parentVisitor As RelationalQueryableMethodTranslatingExpressionVisitor)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor -&gt; Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor parentVisitor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentVisitor" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="parentVisitor">A parent visitor to create subquery visitor for.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelationalQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, relationalDependencies As RelationalQueryableMethodTranslatingExpressionVisitorDependencies, model As IModel)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor (dependencies, relationalDependencies, model)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="relationalDependencies">To be added.</param>
        <param name="model">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelationalQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, relationalDependencies As RelationalQueryableMethodTranslatingExpressionVisitorDependencies, queryCompilationContext As QueryCompilationContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.QueryCompilationContext -&gt; Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor (dependencies, relationalDependencies, queryCompilationContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">Parameter object containing dependencies for this class.</param>
        <param name="relationalDependencies">Parameter object containing relational dependencies for this class.</param>
        <param name="queryCompilationContext">The query compilation context object to use.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyInferredTypeMappings">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression ApplyInferredTypeMappings (System.Linq.Expressions.Expression expression, System.Collections.Generic.IReadOnlyDictionary&lt;(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string),Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping?&gt; inferredTypeMappings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression ApplyInferredTypeMappings(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; inferredTypeMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.ApplyInferredTypeMappings(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.ValueTuple{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ApplyInferredTypeMappings (expression As Expression, inferredTypeMappings As IReadOnlyDictionary(Of ValueTuple(Of TableExpressionBase, String), RelationalTypeMapping)) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ApplyInferredTypeMappings : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; System.Linq.Expressions.Expression&#xA;override this.ApplyInferredTypeMappings : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.ApplyInferredTypeMappings (expression, inferredTypeMappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="inferredTypeMappings" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String&gt;,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">The query expression to process.</param>
        <param name="inferredTypeMappings">
                Inferred type mappings for queryable constants/parameters collected during translation. These will be applied to the appropriate
                nodes in the tree.
            </param>
        <summary>
                Invoked at the end of top-level translation, applies inferred type mappings for queryable constants/parameters and verifies that
                all <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> have a type mapping.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateShapedQueryExpression">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateShapedQueryExpression (entityType As IEntityType) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.CreateShapedQueryExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateShapedQueryExpression">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression (Type elementType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression CreateShapedQueryExpression(class System.Type elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateShapedQueryExpression (elementType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.CreateShapedQueryExpression : Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression elementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use overload which takes IEntityType.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use overload which takes IEntityType.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateSubqueryVisitor">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateSubqueryVisitor () As QueryableMethodTranslatingExpressionVisitor" />
      <MemberSignature Language="F#" Value="override this.CreateSubqueryVisitor : unit -&gt; Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" Usage="relationalQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="IsNaturallyOrdered">
      <MemberSignature Language="C#" Value="protected virtual bool IsNaturallyOrdered (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsNaturallyOrdered(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.IsNaturallyOrdered(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsNaturallyOrdered (selectExpression As SelectExpression) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsNaturallyOrdered : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; bool&#xA;override this.IsNaturallyOrdered : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; bool" Usage="relationalQueryableMethodTranslatingExpressionVisitor.IsNaturallyOrdered selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">The <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to check for ordering.</param>
        <summary>
                Determines whether the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> is naturally ordered, meaning that any ordering has been added
                automatically by EF to preserve e.g. the natural ordering of a JSON array, and not because the original LINQ query contained
                an explicit ordering.
            </summary>
        <returns>Whether <paramref name="selectExpression" /> is ordered.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOrdered">
      <MemberSignature Language="C#" Value="protected virtual bool IsOrdered (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsOrdered(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.IsOrdered(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsOrdered (selectExpression As SelectExpression) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsOrdered : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; bool&#xA;override this.IsOrdered : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; bool" Usage="relationalQueryableMethodTranslatingExpressionVisitor.IsOrdered selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">The <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to check for ordering.</param>
        <summary>
                Determines whether the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> is ordered, typically because orderings have been added to it.
            </summary>
        <returns>Whether <paramref name="selectExpression" /> is ordered.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidSelectExpressionForExecuteDelete">
      <MemberSignature Language="C#" Value="protected virtual bool IsValidSelectExpressionForExecuteDelete (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaperExpression, out Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression? tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValidSelectExpressionForExecuteDelete(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaperExpression, [out] class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression&amp; tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.EntityShaperExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValidSelectExpressionForExecuteDelete (selectExpression As SelectExpression, entityShaperExpression As EntityShaperExpression, ByRef tableExpression As TableExpression) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsValidSelectExpressionForExecuteDelete : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.EntityShaperExpression * TableExpression -&gt; bool&#xA;override this.IsValidSelectExpressionForExecuteDelete : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.EntityShaperExpression * TableExpression -&gt; bool" Usage="relationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete (selectExpression, entityShaperExpression, tableExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="entityShaperExpression" Type="Microsoft.EntityFrameworkCore.Query.EntityShaperExpression" Index="1" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" RefType="out" Index="2" FrameworkAlternate="efcore-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="selectExpression">The select expression to validate.</param>
        <param name="entityShaperExpression">The entity shaper expression on which the delete operation is being applied.</param>
        <param name="tableExpression">The table expression from which rows are being deleted.</param>
        <summary>
                Checks weather the current select expression can be used as-is for execute a delete operation,
                or whether it must be pushed down into a subquery.
            </summary>
        <returns>Returns <see langword="true" /> if the current select expression can be used for delete as-is, <see langword="false" /> otherwise.</returns>
        <remarks>
          <para>
                    By default, only single-table select expressions are supported, and optionally with a predicate.
                </para>
          <para>
                    Providers can override this to allow more select expression features to be supported without pushing down into a subquery.
                    When doing this, VisitDelete must also be overridden in the provider's QuerySqlGenerator to add SQL generation support for
                    the feature.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidSelectExpressionForExecuteDelete">
      <MemberSignature Language="C#" Value="protected virtual bool IsValidSelectExpressionForExecuteDelete (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression shaper, out Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression? tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValidSelectExpressionForExecuteDelete(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression shaper, [out] class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression&amp; tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValidSelectExpressionForExecuteDelete (selectExpression As SelectExpression, shaper As StructuralTypeShaperExpression, ByRef tableExpression As TableExpression) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsValidSelectExpressionForExecuteDelete : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression * TableExpression -&gt; bool&#xA;override this.IsValidSelectExpressionForExecuteDelete : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression * TableExpression -&gt; bool" Usage="relationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete (selectExpression, shaper, tableExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="shaper" Type="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" RefType="out" Index="2" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="selectExpression">The select expression to validate.</param>
        <param name="shaper">The structural type shaper expression on which the delete operation is being applied.</param>
        <param name="tableExpression">The table expression from which rows are being deleted.</param>
        <summary>
                Checks weather the current select expression can be used as-is for executing a delete operation, or whether it must be pushed
                down into a subquery.
            </summary>
        <returns>
                Returns <see langword="true" /> if the current select expression can be used for delete as-is, <see langword="false" /> otherwise.
            </returns>
        <remarks>
          <para>
                    By default, only single-table select expressions are supported, and optionally with a predicate.
                </para>
          <para>
                    Providers can override this to allow more select expression features to be supported without pushing down into a subquery.
                    When doing this, VisitDelete must also be overridden in the provider's QuerySqlGenerator to add SQL generation support for
                    the feature.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidSelectExpressionForExecuteUpdate">
      <MemberSignature Language="C#" Value="protected virtual bool IsValidSelectExpressionForExecuteUpdate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaperExpression, out Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression? tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValidSelectExpressionForExecuteUpdate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression entityShaperExpression, [out] class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression&amp; tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.EntityShaperExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValidSelectExpressionForExecuteUpdate (selectExpression As SelectExpression, entityShaperExpression As EntityShaperExpression, ByRef tableExpression As TableExpression) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsValidSelectExpressionForExecuteUpdate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.EntityShaperExpression * TableExpression -&gt; bool&#xA;override this.IsValidSelectExpressionForExecuteUpdate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.EntityShaperExpression * TableExpression -&gt; bool" Usage="relationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate (selectExpression, entityShaperExpression, tableExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="entityShaperExpression" Type="Microsoft.EntityFrameworkCore.Query.EntityShaperExpression" Index="1" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" RefType="out" Index="2" FrameworkAlternate="efcore-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="selectExpression">The select expression to validate.</param>
        <param name="entityShaperExpression">The entity shaper expression on which the update operation is being applied.</param>
        <param name="tableExpression">The table expression from which rows are being deleted.</param>
        <summary>
                Validates if the current select expression can be used for execute update operation or it requires to be joined as a subquery.
            </summary>
        <returns>Returns <see langword="true" /> if the current select expression can be used for update as-is, <see langword="false" /> otherwise.</returns>
        <remarks>
          <para>
                    By default, only muli-table select expressions are supported, and optionally with a predicate.
                </para>
          <para>
                    Providers can override this to allow more select expression features to be supported without pushing down into a subquery.
                    When doing this, VisitUpdate must also be overridden in the provider's QuerySqlGenerator to add SQL generation support for
                    the feature.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidSelectExpressionForExecuteUpdate">
      <MemberSignature Language="C#" Value="protected virtual bool IsValidSelectExpressionForExecuteUpdate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase targetTable, out Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression? tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValidSelectExpressionForExecuteUpdate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase targetTable, [out] class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression&amp; tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValidSelectExpressionForExecuteUpdate (selectExpression As SelectExpression, targetTable As TableExpressionBase, ByRef tableExpression As TableExpression) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsValidSelectExpressionForExecuteUpdate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase * TableExpression -&gt; bool&#xA;override this.IsValidSelectExpressionForExecuteUpdate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase * TableExpression -&gt; bool" Usage="relationalQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate (selectExpression, targetTable, tableExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="targetTable" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression" RefType="out" Index="2" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="selectExpression">The select expression to validate.</param>
        <param name="targetTable">The target table containing the rows to be updated.</param>
        <param name="tableExpression">
                The table expression corresponding to the provided <paramref name="targetTable" />, containing the rows to be updated.
            </param>
        <summary>
                Validates if the current select expression can be used for execute update operation or it requires to be joined as a subquery.
            </summary>
        <returns>
                Returns <see langword="true" /> if the current select expression can be used for update as-is, <see langword="false" /> otherwise.
            </returns>
        <remarks>
          <para>
                    By default, only multi-table select expressions are supported, and optionally with a predicate.
                </para>
          <para>
                    Providers can override this to allow more select expression features to be supported without pushing down into a subquery.
                    When doing this, VisitUpdate must also be overridden in the provider's QuerySqlGenerator to add SQL generation support for
                    the feature.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationalDependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalDependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property RelationalDependencies As RelationalQueryableMethodTranslatingExpressionVisitorDependencies" />
      <MemberSignature Language="F#" Value="member this.RelationalDependencies : Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformJsonQueryToTable">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TransformJsonQueryToTable (Microsoft.EntityFrameworkCore.Query.JsonQueryExpression jsonQueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TransformJsonQueryToTable(class Microsoft.EntityFrameworkCore.Query.JsonQueryExpression jsonQueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TransformJsonQueryToTable(Microsoft.EntityFrameworkCore.Query.JsonQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TransformJsonQueryToTable (jsonQueryExpression As JsonQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TransformJsonQueryToTable : Microsoft.EntityFrameworkCore.Query.JsonQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.TransformJsonQueryToTable : Microsoft.EntityFrameworkCore.Query.JsonQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TransformJsonQueryToTable jsonQueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jsonQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.JsonQueryExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="jsonQueryExpression">The <see cref="T:Microsoft.EntityFrameworkCore.Query.JsonQueryExpression" /> referencing the JSON array.</param>
        <summary>
                Invoked when LINQ operators are composed over a collection within a JSON document.
                Transforms the provided <see cref="T:Microsoft.EntityFrameworkCore.Query.JsonQueryExpression" /> - representing access to the collection - into a provider-specific
                means to expand the JSON array into a relational table/rowset (e.g. SQL Server OPENJSON).
            </summary>
        <returns>A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> if the translation was successful, otherwise <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Translate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Translate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.Translate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Translate (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.Translate : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.Translate expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateAll">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAll (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAll(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAll(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateAll (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateAll : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateAll (source, predicate)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateAll (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateAny">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAny (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAny(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAny(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateAny (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateAny : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateAny (source, predicate)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateAny (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateAverage">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAverage (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAverage(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAverage(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateAverage (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateAverage : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateAverage (source, selector, resultType)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateAverage (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? selector, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateCast">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCast (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCast(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateCast(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateCast (source As ShapedQueryExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateCast : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateCast (source, resultType)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateCast (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateConcat">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateConcat (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateConcat(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateConcat(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateConcat (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateConcat : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateConcat (source1, source2)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateConcat (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateContains">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateContains (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression item);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateContains(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateContains(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateContains (source As ShapedQueryExpression, item As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateContains : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateContains (source, item)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateContains (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression item);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="item" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateCount">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCount(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateCount (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateCount : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateCount (source, predicate)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateDefaultIfEmpty">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDefaultIfEmpty (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression defaultValue);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDefaultIfEmpty(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateDefaultIfEmpty(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateDefaultIfEmpty (source As ShapedQueryExpression, defaultValue As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateDefaultIfEmpty : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateDefaultIfEmpty (source, defaultValue)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateDefaultIfEmpty (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression? defaultValue);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="defaultValue">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateDistinct">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDistinct (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateDistinct(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateDistinct(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateDistinct (source As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateDistinct : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateDistinct source" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateDistinct (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateElementAtOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateElementAtOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression index, bool returnDefault);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateElementAtOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression index, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateElementAtOrDefault (source As ShapedQueryExpression, index As Expression, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateElementAtOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault (source, index, returnDefault)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateElementAtOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression index, bool returnDefault);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="index">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateExcept">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateExcept (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateExcept(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExcept(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateExcept (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateExcept : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateExcept (source1, source2)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateExcept (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateExecuteDelete">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.NonQueryExpression? TranslateExecuteDelete (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.NonQueryExpression TranslateExecuteDelete(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExecuteDelete(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateExecuteDelete (source As ShapedQueryExpression) As NonQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateExecuteDelete : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.NonQueryExpression&#xA;override this.TranslateExecuteDelete : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.NonQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateExecuteDelete source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.NonQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <summary>
                Translates <see cref="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.ExecuteDelete``1(System.Linq.IQueryable{``0})" /> method
                over the given source.
            </summary>
        <returns>The non query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateExecuteUpdate">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.NonQueryExpression? TranslateExecuteUpdate (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression setPropertyCalls);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.NonQueryExpression TranslateExecuteUpdate(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression setPropertyCalls) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExecuteUpdate(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateExecuteUpdate (source As ShapedQueryExpression, setPropertyCalls As LambdaExpression) As NonQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateExecuteUpdate : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.NonQueryExpression&#xA;override this.TranslateExecuteUpdate : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.NonQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateExecuteUpdate (source, setPropertyCalls)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.NonQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="setPropertyCalls" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="source">The shaped query on which the operator is applied.</param>
        <param name="setPropertyCalls">
                The lambda expression containing
                <see cref="M:Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1.SetProperty``1(System.Func{`0,``0},System.Func{`0,``0})" />
                statements.
            </param>
        <summary>
                Translates
                <see cref="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.ExecuteUpdate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{``0}}})" />
                method
                over the given source.
            </summary>
        <returns>The non query after translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateExpression">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? TranslateExpression (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression TranslateExpression(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExpression(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateExpression (expression As Expression) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateExpression : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.TranslateExpression : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="expression">An expression to translate.</param>
        <summary>
                Translates the given expression into equivalent SQL representation.
            </summary>
        <returns>A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> which is translation of given expression or <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateExpression">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? TranslateExpression (System.Linq.Expressions.Expression expression, bool applyDefaultTypeMapping = true);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression TranslateExpression(class System.Linq.Expressions.Expression expression, bool applyDefaultTypeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExpression(System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateExpression (expression As Expression, Optional applyDefaultTypeMapping As Boolean = true) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateExpression : System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.TranslateExpression : System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateExpression (expression, applyDefaultTypeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="applyDefaultTypeMapping" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">An expression to translate.</param>
        <param name="applyDefaultTypeMapping">
                Whether to apply the default type mapping on the top-most element if it has none. Defaults to <see langword="true" />.
            </param>
        <summary>
                Translates the given expression into equivalent SQL representation.
            </summary>
        <returns>A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> which is translation of given expression or <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateFirstOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateFirstOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateFirstOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate, class System.Type returnType, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateFirstOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateFirstOrDefault (source As ShapedQueryExpression, predicate As LambdaExpression, returnType As Type, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateFirstOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateFirstOrDefault (source, predicate, returnType, returnDefault)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateFirstOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateGroupBy">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, System.Linq.Expressions.LambdaExpression elementSelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, class System.Linq.Expressions.LambdaExpression elementSelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateGroupBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateGroupBy (source As ShapedQueryExpression, keySelector As LambdaExpression, elementSelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateGroupBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateGroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateGroupBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, System.Linq.Expressions.LambdaExpression? elementSelector, System.Linq.Expressions.LambdaExpression? resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="elementSelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="elementSelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateGroupJoin">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateGroupJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateGroupJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateGroupJoin (outer As ShapedQueryExpression, inner As ShapedQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateGroupJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateGroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateGroupJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="inner" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="outer">To be added.</param>
        <param name="inner">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateIntersect">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateIntersect (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateIntersect(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateIntersect(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateIntersect (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateIntersect : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateIntersect (source1, source2)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateIntersect (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateJoin">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateJoin (outer As ShapedQueryExpression, inner As ShapedQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="inner" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="outer">To be added.</param>
        <param name="inner">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateLambdaExpression">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? TranslateLambdaExpression (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, System.Linq.Expressions.LambdaExpression lambdaExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression TranslateLambdaExpression(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, class System.Linq.Expressions.LambdaExpression lambdaExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLambdaExpression(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslateLambdaExpression (shapedQueryExpression As ShapedQueryExpression, lambdaExpression As LambdaExpression) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslateLambdaExpression : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.TranslateLambdaExpression : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateLambdaExpression (shapedQueryExpression, lambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapedQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="lambdaExpression" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="shapedQueryExpression">A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> on which the lambda expression is being applied.</param>
        <param name="lambdaExpression">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to translate into SQL.</param>
        <summary>
                Translates the given lambda expression for the <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> source into equivalent SQL representation.
            </summary>
        <returns>A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> which is translation of given lambda expression or <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateLastOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLastOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLastOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate, class System.Type returnType, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLastOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateLastOrDefault (source As ShapedQueryExpression, predicate As LambdaExpression, returnType As Type, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateLastOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateLastOrDefault (source, predicate, returnType, returnDefault)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateLastOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateLeftJoin">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLeftJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLeftJoin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, class System.Linq.Expressions.LambdaExpression outerKeySelector, class System.Linq.Expressions.LambdaExpression innerKeySelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLeftJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateLeftJoin (outer As ShapedQueryExpression, inner As ShapedQueryExpression, outerKeySelector As LambdaExpression, innerKeySelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateLeftJoin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateLeftJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateLeftJoin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression outer, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression inner, System.Linq.Expressions.LambdaExpression outerKeySelector, System.Linq.Expressions.LambdaExpression innerKeySelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outer" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="inner" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="outer">To be added.</param>
        <param name="inner">To be added.</param>
        <param name="outerKeySelector">To be added.</param>
        <param name="innerKeySelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateLongCount">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLongCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateLongCount(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLongCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateLongCount (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateLongCount : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateLongCount (source, predicate)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateLongCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateMax">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMax (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMax(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateMax(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateMax (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateMax : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateMax (source, selector, resultType)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateMax (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? selector, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateMin">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateMin(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateMin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateMin (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateMin : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateMin (source, selector, resultType)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateMin (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? selector, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateOfType">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOfType (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOfType(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateOfType(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateOfType (source As ShapedQueryExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateOfType : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateOfType (source, resultType)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateOfType (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateOrderBy">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOrderBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOrderBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, bool ascending) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateOrderBy (source As ShapedQueryExpression, keySelector As LambdaExpression, ascending As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateOrderBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy (source, keySelector, ascending)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateOrderBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="ascending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="ascending">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslatePrimitiveCollection">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslatePrimitiveCollection (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, Microsoft.EntityFrameworkCore.Metadata.IProperty? property, string tableAlias);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslatePrimitiveCollection(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, string tableAlias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslatePrimitiveCollection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TranslatePrimitiveCollection (sqlExpression As SqlExpression, property As IProperty, tableAlias As String) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member TranslatePrimitiveCollection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Metadata.IProperty * string -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.TranslatePrimitiveCollection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Metadata.IProperty * string -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslatePrimitiveCollection (sqlExpression, property, tableAlias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="tableAlias" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">The expression to try to translate as a primitive collection expression.</param>
        <param name="property">
                If the primitive collection is a property, contains the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> for that property. Otherwise, the collection
                represents a parameter, and this contains <see langword="null" />.
            </param>
        <param name="tableAlias">
                Provides an alias to be used for the table returned from translation, which will represent the collection.
            </param>
        <summary>
                Translates a parameter or column collection of primitive values. Providers can override this to translate e.g. int[] columns or
                parameters to a queryable table (OPENJSON on SQL Server, unnest on PostgreSQL...). The default implementation always returns
                <see langword="null" /> (no translation).
            </summary>
        <returns>A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> if the translation was successful, otherwise <see langword="null" />.</returns>
        <remarks>
                Inline collections aren't passed to this method; see <see cref="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitInlineQueryRoot(Microsoft.EntityFrameworkCore.Query.InlineQueryRootExpression)" /> for the translation of inline
                collections.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateReverse">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateReverse (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateReverse(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateReverse(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateReverse (source As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateReverse : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateReverse source" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateReverse (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateSelect">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelect (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelect(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelect(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSelect (source As ShapedQueryExpression, selector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSelect : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateSelect (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateSelectMany">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSelectMany (source As ShapedQueryExpression, selector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSelectMany : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany (source, selector)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateSelectMany">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression collectionSelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSelectMany(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression collectionSelector, class System.Linq.Expressions.LambdaExpression resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSelectMany (source As ShapedQueryExpression, collectionSelector As LambdaExpression, resultSelector As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSelectMany : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany (source, collectionSelector, resultSelector)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSelectMany (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression collectionSelector, System.Linq.Expressions.LambdaExpression resultSelector);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="collectionSelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultSelector" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="collectionSelector">To be added.</param>
        <param name="resultSelector">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateSingleOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSingleOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSingleOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate, class System.Type returnType, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSingleOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSingleOrDefault (source As ShapedQueryExpression, predicate As LambdaExpression, returnType As Type, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSingleOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateSingleOrDefault (source, predicate, returnType, returnDefault)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSingleOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate, Type returnType, bool returnDefault);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnDefault" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateSkip">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkip (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkip(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSkip(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSkip (source As ShapedQueryExpression, count As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSkip : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateSkip (source, count)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSkip (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="count" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateSkipWhile">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkipWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSkipWhile(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSkipWhile(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSkipWhile (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSkipWhile : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateSkipWhile (source, predicate)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSkipWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateSum">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSum (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression selector, Type resultType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateSum(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression selector, class System.Type resultType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSum(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateSum (source As ShapedQueryExpression, selector As LambdaExpression, resultType As Type) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateSum : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * Type -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateSum (source, selector, resultType)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateSum (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? selector, Type resultType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="selector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="resultType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="resultType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateTake">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTake (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTake(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateTake(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateTake (source As ShapedQueryExpression, count As Expression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateTake : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateTake (source, count)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateTake (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression count);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="count" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateTakeWhile">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTakeWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateTakeWhile(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateTakeWhile(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateTakeWhile (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateTakeWhile : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateTakeWhile (source, predicate)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateTakeWhile (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateThenBy">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateThenBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateThenBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, bool ascending) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateThenBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateThenBy (source As ShapedQueryExpression, keySelector As LambdaExpression, ascending As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateThenBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateThenBy (source, keySelector, ascending)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateThenBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="ascending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="ascending">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateUnion">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateUnion (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateUnion(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateUnion(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateUnion (source1 As ShapedQueryExpression, source2 As ShapedQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateUnion : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateUnion (source1, source2)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateUnion (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source1, Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source2);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TranslateWhere">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateWhere (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateWhere(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateWhere(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateWhere (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateWhere : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.TranslateWhere (source, predicate)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateWhere (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression predicate);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression extensionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression extensionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (extensionExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.VisitExtension extensionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="extensionExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitInlineQueryRoot">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? VisitInlineQueryRoot (Microsoft.EntityFrameworkCore.Query.InlineQueryRootExpression inlineQueryRootExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression VisitInlineQueryRoot(class Microsoft.EntityFrameworkCore.Query.InlineQueryRootExpression inlineQueryRootExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitInlineQueryRoot(Microsoft.EntityFrameworkCore.Query.InlineQueryRootExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitInlineQueryRoot (inlineQueryRootExpression As InlineQueryRootExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="abstract member VisitInlineQueryRoot : Microsoft.EntityFrameworkCore.Query.InlineQueryRootExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression&#xA;override this.VisitInlineQueryRoot : Microsoft.EntityFrameworkCore.Query.InlineQueryRootExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.VisitInlineQueryRoot inlineQueryRootExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inlineQueryRootExpression" Type="Microsoft.EntityFrameworkCore.Query.InlineQueryRootExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="inlineQueryRootExpression">The inline collection to be translated.</param>
        <summary>
                Translates an inline collection into a queryable SQL VALUES expression.
            </summary>
        <returns>A queryable SQL VALUES expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMethodCall (methodCallExpression As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryableMethodTranslatingExpressionVisitor.VisitMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
