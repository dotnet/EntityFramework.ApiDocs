<Type Name="StructuralTypeProjectionExpression" FullName="Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression">
  <TypeSignature Language="C#" Value="public class StructuralTypeProjectionExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StructuralTypeProjectionExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class StructuralTypeProjectionExpression&#xA;Inherits Expression" />
  <TypeSignature Language="F#" Value="type StructuralTypeProjectionExpression = class&#xA;    inherit Expression" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    An expression that represents an entity in the projection of <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructuralTypeProjectionExpression (Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt; propertyExpressionMap, System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.ITableBase,Microsoft.EntityFrameworkCore.Query.Internal.TableReferenceExpression&gt; tableMap, bool nullable = false, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? discriminatorExpression = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase type, class System.Collections.Generic.IReadOnlyDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt; propertyExpressionMap, class System.Collections.Generic.IReadOnlyDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.ITableBase, class Microsoft.EntityFrameworkCore.Query.Internal.TableReferenceExpression&gt; tableMap, bool nullable, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression discriminatorExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.ITypeBase,System.Collections.Generic.IReadOnlyDictionary{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression},System.Collections.Generic.IReadOnlyDictionary{Microsoft.EntityFrameworkCore.Metadata.ITableBase,Microsoft.EntityFrameworkCore.Query.Internal.TableReferenceExpression},System.Boolean,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As ITypeBase, propertyExpressionMap As IReadOnlyDictionary(Of IProperty, ColumnExpression), tableMap As IReadOnlyDictionary(Of ITableBase, TableReferenceExpression), Optional nullable As Boolean = false, Optional discriminatorExpression As SqlExpression = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression : Microsoft.EntityFrameworkCore.Metadata.ITypeBase * System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.ITableBase, Microsoft.EntityFrameworkCore.Query.Internal.TableReferenceExpression&gt; * bool * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression" Usage="new Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression (type, propertyExpressionMap, tableMap, nullable, discriminatorExpression)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" />
        <Parameter Name="propertyExpressionMap" Type="System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt;" />
        <Parameter Name="tableMap" Type="System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.ITableBase,Microsoft.EntityFrameworkCore.Query.Internal.TableReferenceExpression&gt;" />
        <Parameter Name="nullable" Type="System.Boolean" />
        <Parameter Name="discriminatorExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="propertyExpressionMap">To be added.</param>
        <param name="tableMap">To be added.</param>
        <param name="nullable">To be added.</param>
        <param name="discriminatorExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNavigationBinding">
      <MemberSignature Language="C#" Value="public virtual void AddNavigationBinding (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression shaper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddNavigationBinding(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression shaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.AddNavigationBinding(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddNavigationBinding (navigation As INavigation, shaper As StructuralTypeShaperExpression)" />
      <MemberSignature Language="F#" Value="abstract member AddNavigationBinding : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression -&gt; unit&#xA;override this.AddNavigationBinding : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression -&gt; unit" Usage="structuralTypeProjectionExpression.AddNavigationBinding (navigation, shaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        <Parameter Name="shaper" Type="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" />
      </Parameters>
      <Docs>
        <param name="navigation">A navigation to add binding for.</param>
        <param name="shaper">An entity shaper expression for the target type.</param>
        <summary>
                Adds a navigation binding for this entity projection when the target entity type of the navigation is owned or weak.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression BindComplexProperty (Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression BindComplexProperty(class Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.BindComplexProperty(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindComplexProperty (complexProperty As IComplexProperty) As StructuralTypeShaperExpression" />
      <MemberSignature Language="F#" Value="abstract member BindComplexProperty : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression&#xA;override this.BindComplexProperty : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="structuralTypeProjectionExpression.BindComplexProperty complexProperty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" />
      </Parameters>
      <Docs>
        <param name="complexProperty">A complex property to bind.</param>
        <summary>
                Binds a complex property with this structural type projection to get a shaper expression for the target complex type.
            </summary>
        <returns>A shaper expression for the target complex type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression? BindNavigation (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression BindNavigation(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.BindNavigation(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindNavigation (navigation As INavigation) As StructuralTypeShaperExpression" />
      <MemberSignature Language="F#" Value="abstract member BindNavigation : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression&#xA;override this.BindNavigation : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" Usage="structuralTypeProjectionExpression.BindNavigation navigation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
      </Parameters>
      <Docs>
        <param name="navigation">A navigation to bind.</param>
        <summary>
                Binds a navigation with this entity projection to get entity shaper for the target entity type of the navigation which was
                previously added using <see cref="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.AddNavigationBinding(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression)" /> method.
            </summary>
        <returns>An entity shaper expression for the target entity type of the navigation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression BindProperty (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression BindProperty(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.BindProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BindProperty (property As IProperty) As ColumnExpression" />
      <MemberSignature Language="F#" Value="abstract member BindProperty : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&#xA;override this.BindProperty : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression" Usage="structuralTypeProjectionExpression.BindProperty property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property">A property to bind.</param>
        <summary>
                Binds a property with this structural type projection to get the SQL representation.
            </summary>
        <returns>A column which is a SQL representation of the property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscriminatorExpression">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? DiscriminatorExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression DiscriminatorExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.DiscriminatorExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DiscriminatorExpression As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.DiscriminatorExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.DiscriminatorExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to generate discriminator for entity type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public virtual bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                TODO
            </summary>
        <value>To be added.</value>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeNullable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression MakeNullable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression MakeNullable() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.MakeNullable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeNullable () As StructuralTypeProjectionExpression" />
      <MemberSignature Language="F#" Value="abstract member MakeNullable : unit -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression&#xA;override this.MakeNullable : unit -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression" Usage="structuralTypeProjectionExpression.MakeNullable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Makes entity instance in projection nullable.
            </summary>
        <returns>A new entity projection expression which can project nullable entity.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="StructuralType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ITypeBase StructuralType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.ITypeBase StructuralType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.StructuralType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructuralType As ITypeBase" />
      <MemberSignature Language="F#" Value="member this.StructuralType : Microsoft.EntityFrameworkCore.Metadata.ITypeBase" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.StructuralType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITypeBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The base type being projected out (entity or complex type)
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableMap">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.ITableBase,Microsoft.EntityFrameworkCore.Query.Internal.TableReferenceExpression&gt; TableMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.ITableBase, class Microsoft.EntityFrameworkCore.Query.Internal.TableReferenceExpression&gt; TableMap" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.TableMap" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TableMap As IReadOnlyDictionary(Of ITableBase, TableReferenceExpression)" />
      <MemberSignature Language="F#" Value="member this.TableMap : System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.ITableBase, Microsoft.EntityFrameworkCore.Query.Internal.TableReferenceExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.TableMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.ITableBase,Microsoft.EntityFrameworkCore.Query.Internal.TableReferenceExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                TODO
            </summary>
        <value>To be added.</value>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="structuralTypeProjectionExpression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="UpdateEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression UpdateEntityType (Microsoft.EntityFrameworkCore.Metadata.IEntityType derivedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression UpdateEntityType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType derivedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.UpdateEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateEntityType (derivedType As IEntityType) As StructuralTypeProjectionExpression" />
      <MemberSignature Language="F#" Value="abstract member UpdateEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression&#xA;override this.UpdateEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression" Usage="structuralTypeProjectionExpression.UpdateEntityType derivedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="derivedType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Parameters>
      <Docs>
        <param name="derivedType">A derived entity type which should be projected.</param>
        <summary>
                Updates the entity type being projected out to one of the derived type.
            </summary>
        <returns>A new entity projection expression which has the derived type being projected.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.StructuralTypeProjectionExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="structuralTypeProjectionExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
