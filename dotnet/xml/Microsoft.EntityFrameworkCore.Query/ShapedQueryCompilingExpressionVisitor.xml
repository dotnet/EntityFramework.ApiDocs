<Type Name="ShapedQueryCompilingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor">
  <TypeSignature Language="C#" Value="public abstract class ShapedQueryCompilingExpressionVisitor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ShapedQueryCompilingExpressionVisitor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ShapedQueryCompilingExpressionVisitor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type ShapedQueryCompilingExpressionVisitor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-8.0;efcore-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>
                    A class that compiles the shaper expression for given shaped query expression.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
      <para>
                    Materializer is a code which creates entity instance from the given property values.
                    It takes into account constructor bindings, fields, property access mode configured in the model when creating the instance.
                </para>
      <para>
                    Shaper is a code which generate result for the query from given scalar values based on the structure of projection.
                    A shaper can contain zero or more materializers inside it.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    and <see href="https://aka.ms/efcore-docs-how-query-works">How EF Core queries work</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ShapedQueryCompilingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As ShapedQueryCompilingExpressionVisitorDependencies, queryCompilationContext As QueryCompilationContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.QueryCompilationContext -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor (dependencies, queryCompilationContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" />
      </Parameters>
      <Docs>
        <param name="dependencies">Parameter object containing dependencies for this class.</param>
        <param name="queryCompilationContext">The query compilation context object to use.</param>
        <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNullKeyValueInNoTrackingQuery">
      <MemberSignature Language="C#" Value="public static Exception CreateNullKeyValueInNoTrackingQuery (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, object?[] keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception CreateNullKeyValueInNoTrackingQuery(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.CreateNullKeyValueInNoTrackingQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateNullKeyValueInNoTrackingQuery (entityType As IEntityType, properties As IReadOnlyList(Of IProperty), keyValues As Object()) As Exception" />
      <MemberSignature Language="F#" Value="static member CreateNullKeyValueInNoTrackingQuery : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; * obj[] -&gt; Exception" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.CreateNullKeyValueInNoTrackingQuery (entityType, properties, keyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-9.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="keyValues" Type="System.Object[]" Index="2" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="properties">To be added.</param>
        <param name="keyValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As ShapedQueryCompilingExpressionVisitorDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InjectEntityMaterializers">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression InjectEntityMaterializers (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression InjectEntityMaterializers(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.InjectEntityMaterializers(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function InjectEntityMaterializers (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member InjectEntityMaterializers : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.InjectEntityMaterializers : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="shapedQueryCompilingExpressionVisitor.InjectEntityMaterializers expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">The expression to inject entity materializers.</param>
        <summary>
                Inject entity materializers in given shaper expression. <see cref="T:Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" /> is replaced with materializer
                expression for given entity.
            </summary>
        <returns>A expression with entity materializers injected.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="protected virtual bool IsAsync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsAsync As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBuffering">
      <MemberSignature Language="C#" Value="public virtual bool IsBuffering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBuffering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.IsBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsBuffering As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsBuffering : bool" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.IsBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTracking">
      <MemberSignature Language="C#" Value="protected virtual bool IsTracking { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTracking" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.IsTracking" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsTracking As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsTracking : bool" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.IsTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCompilationContext">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.QueryCompilationContext QueryCompilationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext QueryCompilationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.QueryCompilationContext" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property QueryCompilationContext As QueryCompilationContext" />
      <MemberSignature Language="F#" Value="member this.QueryCompilationContext : Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.QueryCompilationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryCompilationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The query compilation context object for current compilation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource&gt; SingleAsync&lt;TSource&gt; (System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; asyncEnumerable, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; asyncEnumerable, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.SingleAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleAsync(Of TSource) (asyncEnumerable As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.SingleAsync (asyncEnumerable, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-9.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncEnumerable" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="asyncEnumerable">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TSource?&gt; SingleOrDefaultAsync&lt;TSource&gt; (System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; asyncEnumerable, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; asyncEnumerable, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleOrDefaultAsync(Of TSource) (asyncEnumerable As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As Task(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Source&gt;" Usage="Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync (asyncEnumerable, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-9.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncEnumerable" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" Index="0" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="asyncEnumerable">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNoClientConstant">
      <MemberSignature Language="C#" Value="protected virtual void VerifyNoClientConstant (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void VerifyNoClientConstant(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.VerifyNoClientConstant(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub VerifyNoClientConstant (expression As Expression)" />
      <MemberSignature Language="F#" Value="abstract member VerifyNoClientConstant : System.Linq.Expressions.Expression -&gt; unit&#xA;override this.VerifyNoClientConstant : System.Linq.Expressions.Expression -&gt; unit" Usage="shapedQueryCompilingExpressionVisitor.VerifyNoClientConstant expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0;efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="expression">An expression to verify.</param>
        <summary>
                Verifies that the given shaper expression does not contain client side constant which could cause memory leak.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression extensionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression extensionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (extensionExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="shapedQueryCompilingExpressionVisitor.VisitExtension extensionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="extensionExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="VisitShapedQuery">
      <MemberSignature Language="C#" Value="protected abstract System.Linq.Expressions.Expression VisitShapedQuery (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitShapedQuery(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.VisitShapedQuery(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function VisitShapedQuery (shapedQueryExpression As ShapedQueryExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitShapedQuery : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; System.Linq.Expressions.Expression" Usage="shapedQueryCompilingExpressionVisitor.VisitShapedQuery shapedQueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapedQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0;efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="shapedQueryExpression">The shaped query expression to compile.</param>
        <summary>
                Visits given shaped query expression to create an expression of enumerable.
            </summary>
        <returns>An expression of enumerable.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitShapedQueryExpression">
      <MemberSignature Language="C#" Value="protected abstract System.Linq.Expressions.Expression VisitShapedQueryExpression (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitShapedQueryExpression(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor.VisitShapedQueryExpression(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function VisitShapedQueryExpression (shapedQueryExpression As ShapedQueryExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitShapedQueryExpression : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; System.Linq.Expressions.Expression" Usage="shapedQueryCompilingExpressionVisitor.VisitShapedQueryExpression shapedQueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapedQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="shapedQueryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
