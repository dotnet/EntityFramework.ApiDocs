<Type Name="RelationalShapedQueryCompilingExpressionVisitor+ShaperProcessingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor+ShaperProcessingExpressionVisitor">
  <TypeSignature Language="C#" Value="public sealed class RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit RelationalShapedQueryCompilingExpressionVisitor/ShaperProcessingExpressionVisitor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ShaperProcessingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor parentVisitor, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, System.Collections.Generic.ISet&lt;string&gt; tags, bool splitQuery, bool indexMap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor parentVisitor, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression, class System.Collections.Generic.ISet`1&lt;string&gt; tags, bool splitQuery, bool indexMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.ISet{System.String},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parentVisitor As RelationalShapedQueryCompilingExpressionVisitor, selectExpression As SelectExpression, tags As ISet(Of String), splitQuery As Boolean, indexMap As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * System.Collections.Generic.ISet&lt;string&gt; * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor (parentVisitor, selectExpression, tags, splitQuery, indexMap)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentVisitor" Type="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor" />
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="tags" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
        <Parameter Name="splitQuery" Type="System.Boolean" />
        <Parameter Name="indexMap" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parentVisitor">To be added.</param>
        <param name="selectExpression">To be added.</param>
        <param name="tags">To be added.</param>
        <param name="splitQuery">To be added.</param>
        <param name="indexMap">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public static bool Any (System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.Any(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Any (source As IEnumerable) As Boolean" />
      <MemberSignature Language="F#" Value="static member Any : System.Collections.IEnumerable -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFieldValueMethod">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MethodInfo GetFieldValueMethod;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MethodInfo GetFieldValueMethod" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.GetFieldValueMethod" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GetFieldValueMethod As MethodInfo " />
      <MemberSignature Language="F#" Value=" staticval mutable GetFieldValueMethod : System.Reflection.MethodInfo" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.GetFieldValueMethod" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeJsonEntityCollection&lt;TIncludingEntity,TIncludedCollectionElement&gt;">
      <MemberSignature Language="C#" Value="public static void IncludeJsonEntityCollection&lt;TIncludingEntity,TIncludedCollectionElement&gt; (Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, object[] keyPropertyValues, Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData? jsonReaderData, TIncludingEntity entity, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,TIncludedCollectionElement&gt; innerShaper, Action&lt;TIncludingEntity&gt; getOrCreateCollectionObject, Action&lt;TIncludingEntity,TIncludedCollectionElement&gt; fixup, bool trackingQuery) where TIncludingEntity : class where TIncludedCollectionElement : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IncludeJsonEntityCollection&lt;class TIncludingEntity, class TIncludedCollectionElement&gt;(class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, object[] keyPropertyValues, class Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData jsonReaderData, !!TIncludingEntity entity, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, object[], class Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData, !!TIncludedCollectionElement&gt; innerShaper, class System.Action`1&lt;!!TIncludingEntity&gt; getOrCreateCollectionObject, class System.Action`2&lt;!!TIncludingEntity, !!TIncludedCollectionElement&gt; fixup, bool trackingQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.IncludeJsonEntityCollection``2(Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,``0,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,``1},System.Action{``0},System.Action{``0,``1},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IncludeJsonEntityCollection(Of TIncludingEntity As Class, TIncludedCollectionElement As Class) (queryContext As QueryContext, keyPropertyValues As Object(), jsonReaderData As JsonReaderData, entity As TIncludingEntity, innerShaper As Func(Of QueryContext, Object(), JsonReaderData, TIncludedCollectionElement), getOrCreateCollectionObject As Action(Of TIncludingEntity), fixup As Action(Of TIncludingEntity, TIncludedCollectionElement), trackingQuery As Boolean)" />
      <MemberSignature Language="F#" Value="static member IncludeJsonEntityCollection : Microsoft.EntityFrameworkCore.Query.QueryContext * obj[] * Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData * 'IncludingEntity * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, obj[], Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData, 'IncludedCollectionElement (requires 'IncludedCollectionElement : null)&gt; * Action&lt;'IncludingEntity (requires 'IncludingEntity : null)&gt; * Action&lt;'IncludingEntity, 'IncludedCollectionElement (requires 'IncludingEntity : null and 'IncludedCollectionElement : null)&gt; * bool -&gt; unit (requires 'IncludingEntity : null and 'IncludedCollectionElement : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.IncludeJsonEntityCollection (queryContext, keyPropertyValues, jsonReaderData, entity, innerShaper, getOrCreateCollectionObject, fixup, trackingQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TIncludingEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TIncludedCollectionElement">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="keyPropertyValues" Type="System.Object[]" />
        <Parameter Name="jsonReaderData" Type="Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="entity" Type="TIncludingEntity" />
        <Parameter Name="innerShaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,TIncludedCollectionElement&gt;" />
        <Parameter Name="getOrCreateCollectionObject" Type="System.Action&lt;TIncludingEntity&gt;" />
        <Parameter Name="fixup" Type="System.Action&lt;TIncludingEntity,TIncludedCollectionElement&gt;" />
        <Parameter Name="trackingQuery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TIncludingEntity">To be added.</typeparam>
        <typeparam name="TIncludedCollectionElement">To be added.</typeparam>
        <param name="queryContext">To be added.</param>
        <param name="keyPropertyValues">To be added.</param>
        <param name="jsonReaderData">To be added.</param>
        <param name="entity">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <param name="getOrCreateCollectionObject">To be added.</param>
        <param name="fixup">To be added.</param>
        <param name="trackingQuery">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeJsonEntityReference&lt;TIncludingEntity,TIncludedEntity&gt;">
      <MemberSignature Language="C#" Value="public static void IncludeJsonEntityReference&lt;TIncludingEntity,TIncludedEntity&gt; (Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, object[] keyPropertyValues, Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData? jsonReaderData, TIncludingEntity entity, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,TIncludedEntity&gt; innerShaper, Action&lt;TIncludingEntity,TIncludedEntity&gt; fixup, bool trackingQuery) where TIncludingEntity : class where TIncludedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IncludeJsonEntityReference&lt;class TIncludingEntity, class TIncludedEntity&gt;(class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, object[] keyPropertyValues, class Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData jsonReaderData, !!TIncludingEntity entity, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, object[], class Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData, !!TIncludedEntity&gt; innerShaper, class System.Action`2&lt;!!TIncludingEntity, !!TIncludedEntity&gt; fixup, bool trackingQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.IncludeJsonEntityReference``2(Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,``0,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,``1},System.Action{``0,``1},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IncludeJsonEntityReference(Of TIncludingEntity As Class, TIncludedEntity As Class) (queryContext As QueryContext, keyPropertyValues As Object(), jsonReaderData As JsonReaderData, entity As TIncludingEntity, innerShaper As Func(Of QueryContext, Object(), JsonReaderData, TIncludedEntity), fixup As Action(Of TIncludingEntity, TIncludedEntity), trackingQuery As Boolean)" />
      <MemberSignature Language="F#" Value="static member IncludeJsonEntityReference : Microsoft.EntityFrameworkCore.Query.QueryContext * obj[] * Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData * 'IncludingEntity * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, obj[], Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData, 'IncludedEntity (requires 'IncludedEntity : null)&gt; * Action&lt;'IncludingEntity, 'IncludedEntity (requires 'IncludingEntity : null and 'IncludedEntity : null)&gt; * bool -&gt; unit (requires 'IncludingEntity : null and 'IncludedEntity : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.IncludeJsonEntityReference (queryContext, keyPropertyValues, jsonReaderData, entity, innerShaper, fixup, trackingQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TIncludingEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TIncludedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="keyPropertyValues" Type="System.Object[]" />
        <Parameter Name="jsonReaderData" Type="Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="entity" Type="TIncludingEntity" />
        <Parameter Name="innerShaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,TIncludedEntity&gt;" />
        <Parameter Name="fixup" Type="System.Action&lt;TIncludingEntity,TIncludedEntity&gt;" />
        <Parameter Name="trackingQuery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TIncludingEntity">To be added.</typeparam>
        <typeparam name="TIncludedEntity">To be added.</typeparam>
        <param name="queryContext">To be added.</param>
        <param name="keyPropertyValues">To be added.</param>
        <param name="jsonReaderData">To be added.</param>
        <param name="entity">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <param name="fixup">To be added.</param>
        <param name="trackingQuery">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeReference&lt;TEntity,TIncludingEntity,TIncludedEntity&gt;">
      <MemberSignature Language="C#" Value="public static void IncludeReference&lt;TEntity,TIncludingEntity,TIncludedEntity&gt; (Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, TEntity entity, TIncludedEntity? relatedEntity, Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, Microsoft.EntityFrameworkCore.Metadata.INavigationBase? inverseNavigation, Action&lt;TIncludingEntity,TIncludedEntity&gt; fixup, bool trackingQuery) where TEntity : class where TIncludingEntity : class, TEntity where TIncludedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IncludeReference&lt;class TEntity, class (!!TEntity) TIncludingEntity, class TIncludedEntity&gt;(class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, !!TEntity entity, !!TIncludedEntity relatedEntity, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase inverseNavigation, class System.Action`2&lt;!!TIncludingEntity, !!TIncludedEntity&gt; fixup, bool trackingQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.IncludeReference``3(Microsoft.EntityFrameworkCore.Query.QueryContext,``0,``2,Microsoft.EntityFrameworkCore.Metadata.INavigationBase,Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Action{``1,``2},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub IncludeReference(Of TEntity As Class, TIncludingEntity As Class, TIncludedEntity As Class) (queryContext As QueryContext, entity As TEntity, relatedEntity As TIncludedEntity, navigation As INavigationBase, inverseNavigation As INavigationBase, fixup As Action(Of TIncludingEntity, TIncludedEntity), trackingQuery As Boolean)" />
      <MemberSignature Language="F#" Value="static member IncludeReference : Microsoft.EntityFrameworkCore.Query.QueryContext * 'Entity * 'IncludedEntity * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Action&lt;#'Entity, 'IncludedEntity (requires 'IncludedEntity : null)&gt; * bool -&gt; unit (requires 'Entity : null and 'IncludedEntity : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.IncludeReference (queryContext, entity, relatedEntity, navigation, inverseNavigation, fixup, trackingQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TIncludingEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TIncludedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="relatedEntity" Type="TIncludedEntity">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" />
        <Parameter Name="inverseNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fixup" Type="System.Action&lt;TIncludingEntity,TIncludedEntity&gt;" />
        <Parameter Name="trackingQuery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <typeparam name="TIncludingEntity">To be added.</typeparam>
        <typeparam name="TIncludedEntity">To be added.</typeparam>
        <param name="queryContext">To be added.</param>
        <param name="entity">To be added.</param>
        <param name="relatedEntity">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="fixup">To be added.</param>
        <param name="trackingQuery">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeCollection&lt;TElement,TCollection&gt;">
      <MemberSignature Language="C#" Value="public static TCollection InitializeCollection&lt;TElement,TCollection&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, System.Data.Common.DbDataReader dbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator resultCoordinator, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; parentIdentifier, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; outerIdentifier, Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor? clrCollectionAccessor) where TCollection : class, System.Collections.Generic.ICollection&lt;TElement&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TCollection InitializeCollection&lt;TElement, class (class System.Collections.Generic.ICollection`1&lt;!!TElement&gt;) TCollection&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, class System.Data.Common.DbDataReader dbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator resultCoordinator, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; parentIdentifier, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; outerIdentifier, class Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor clrCollectionAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InitializeCollection``2(System.Int32,Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InitializeCollection(Of TElement, TCollection) (collectionId As Integer, queryContext As QueryContext, dbDataReader As DbDataReader, resultCoordinator As SingleQueryResultCoordinator, parentIdentifier As Func(Of QueryContext, DbDataReader, Object()), outerIdentifier As Func(Of QueryContext, DbDataReader, Object()), clrCollectionAccessor As IClrCollectionAccessor) As TCollection" />
      <MemberSignature Language="F#" Value="static member InitializeCollection : int * Microsoft.EntityFrameworkCore.Query.QueryContext * System.Data.Common.DbDataReader * Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor -&gt; 'Collection (requires 'Collection : null and 'Collection :&gt; System.Collections.Generic.ICollection&lt;'Element&gt;)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InitializeCollection (collectionId, queryContext, dbDataReader, resultCoordinator, parentIdentifier, outerIdentifier, clrCollectionAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TCollection">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.Collections.Generic.ICollection&lt;TElement&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="dbDataReader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator" />
        <Parameter Name="parentIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="outerIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="clrCollectionAccessor" Type="Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <typeparam name="TCollection">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="dbDataReader">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="parentIdentifier">To be added.</param>
        <param name="outerIdentifier">To be added.</param>
        <param name="clrCollectionAccessor">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeIncludeCollection&lt;TParent,TNavigationEntity&gt;">
      <MemberSignature Language="C#" Value="public static void InitializeIncludeCollection&lt;TParent,TNavigationEntity&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, System.Data.Common.DbDataReader dbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator resultCoordinator, TParent entity, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; parentIdentifier, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; outerIdentifier, Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor? clrCollectionAccessor, bool trackingQuery, bool setLoaded) where TParent : class where TNavigationEntity : class, TParent;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitializeIncludeCollection&lt;class TParent, class (!!TParent) TNavigationEntity&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, class System.Data.Common.DbDataReader dbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator resultCoordinator, !!TParent entity, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; parentIdentifier, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; outerIdentifier, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, class Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor clrCollectionAccessor, bool trackingQuery, bool setLoaded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InitializeIncludeCollection``2(System.Int32,Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,``0,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},Microsoft.EntityFrameworkCore.Metadata.INavigationBase,Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitializeIncludeCollection(Of TParent As Class, TNavigationEntity As Class) (collectionId As Integer, queryContext As QueryContext, dbDataReader As DbDataReader, resultCoordinator As SingleQueryResultCoordinator, entity As TParent, parentIdentifier As Func(Of QueryContext, DbDataReader, Object()), outerIdentifier As Func(Of QueryContext, DbDataReader, Object()), navigation As INavigationBase, clrCollectionAccessor As IClrCollectionAccessor, trackingQuery As Boolean, setLoaded As Boolean)" />
      <MemberSignature Language="F#" Value="static member InitializeIncludeCollection : int * Microsoft.EntityFrameworkCore.Query.QueryContext * System.Data.Common.DbDataReader * Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator * 'Parent * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor * bool * bool -&gt; unit (requires 'Parent : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InitializeIncludeCollection (collectionId, queryContext, dbDataReader, resultCoordinator, entity, parentIdentifier, outerIdentifier, navigation, clrCollectionAccessor, trackingQuery, setLoaded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParent">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TNavigationEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TParent</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="dbDataReader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator" />
        <Parameter Name="entity" Type="TParent" />
        <Parameter Name="parentIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="outerIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" />
        <Parameter Name="clrCollectionAccessor" Type="Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="trackingQuery" Type="System.Boolean" />
        <Parameter Name="setLoaded" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TParent">To be added.</typeparam>
        <typeparam name="TNavigationEntity">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="dbDataReader">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="entity">To be added.</param>
        <param name="parentIdentifier">To be added.</param>
        <param name="outerIdentifier">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="clrCollectionAccessor">To be added.</param>
        <param name="trackingQuery">To be added.</param>
        <param name="setLoaded">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeSplitCollection&lt;TElement,TCollection&gt;">
      <MemberSignature Language="C#" Value="public static TCollection InitializeSplitCollection&lt;TElement,TCollection&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, System.Data.Common.DbDataReader parentDataReader, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; parentIdentifier, Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor? clrCollectionAccessor) where TCollection : class, System.Collections.Generic.ICollection&lt;TElement&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TCollection InitializeSplitCollection&lt;TElement, class (class System.Collections.Generic.ICollection`1&lt;!!TElement&gt;) TCollection&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, class System.Data.Common.DbDataReader parentDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; parentIdentifier, class Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor clrCollectionAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InitializeSplitCollection``2(System.Int32,Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InitializeSplitCollection(Of TElement, TCollection) (collectionId As Integer, queryContext As QueryContext, parentDataReader As DbDataReader, resultCoordinator As SplitQueryResultCoordinator, parentIdentifier As Func(Of QueryContext, DbDataReader, Object()), clrCollectionAccessor As IClrCollectionAccessor) As TCollection" />
      <MemberSignature Language="F#" Value="static member InitializeSplitCollection : int * Microsoft.EntityFrameworkCore.Query.QueryContext * System.Data.Common.DbDataReader * Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor -&gt; 'Collection (requires 'Collection : null and 'Collection :&gt; System.Collections.Generic.ICollection&lt;'Element&gt;)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InitializeSplitCollection (collectionId, queryContext, parentDataReader, resultCoordinator, parentIdentifier, clrCollectionAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TCollection">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.Collections.Generic.ICollection&lt;TElement&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="parentDataReader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator" />
        <Parameter Name="parentIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="clrCollectionAccessor" Type="Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <typeparam name="TCollection">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="parentDataReader">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="parentIdentifier">To be added.</param>
        <param name="clrCollectionAccessor">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeSplitIncludeCollection&lt;TParent,TNavigationEntity&gt;">
      <MemberSignature Language="C#" Value="public static void InitializeSplitIncludeCollection&lt;TParent,TNavigationEntity&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, System.Data.Common.DbDataReader parentDataReader, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, TParent entity, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; parentIdentifier, Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor? clrCollectionAccessor, bool trackingQuery, bool setLoaded) where TParent : class where TNavigationEntity : class, TParent;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitializeSplitIncludeCollection&lt;class TParent, class (!!TParent) TNavigationEntity&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, class System.Data.Common.DbDataReader parentDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, !!TParent entity, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; parentIdentifier, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, class Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor clrCollectionAccessor, bool trackingQuery, bool setLoaded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InitializeSplitIncludeCollection``2(System.Int32,Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,``0,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},Microsoft.EntityFrameworkCore.Metadata.INavigationBase,Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitializeSplitIncludeCollection(Of TParent As Class, TNavigationEntity As Class) (collectionId As Integer, queryContext As QueryContext, parentDataReader As DbDataReader, resultCoordinator As SplitQueryResultCoordinator, entity As TParent, parentIdentifier As Func(Of QueryContext, DbDataReader, Object()), navigation As INavigationBase, clrCollectionAccessor As IClrCollectionAccessor, trackingQuery As Boolean, setLoaded As Boolean)" />
      <MemberSignature Language="F#" Value="static member InitializeSplitIncludeCollection : int * Microsoft.EntityFrameworkCore.Query.QueryContext * System.Data.Common.DbDataReader * Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator * 'Parent * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor * bool * bool -&gt; unit (requires 'Parent : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InitializeSplitIncludeCollection (collectionId, queryContext, parentDataReader, resultCoordinator, entity, parentIdentifier, navigation, clrCollectionAccessor, trackingQuery, setLoaded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParent">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TNavigationEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TParent</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="parentDataReader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator" />
        <Parameter Name="entity" Type="TParent" />
        <Parameter Name="parentIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" />
        <Parameter Name="clrCollectionAccessor" Type="Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="trackingQuery" Type="System.Boolean" />
        <Parameter Name="setLoaded" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TParent">To be added.</typeparam>
        <typeparam name="TNavigationEntity">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="parentDataReader">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="entity">To be added.</param>
        <param name="parentIdentifier">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="clrCollectionAccessor">To be added.</param>
        <param name="trackingQuery">To be added.</param>
        <param name="setLoaded">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseCollectionFixup&lt;TCollectionElement,TEntity&gt;">
      <MemberSignature Language="C#" Value="public static void InverseCollectionFixup&lt;TCollectionElement,TEntity&gt; (System.Collections.Generic.ICollection&lt;TCollectionElement&gt; collection, TEntity entity, Action&lt;TCollectionElement,TEntity&gt; elementFixup);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InverseCollectionFixup&lt;TCollectionElement, TEntity&gt;(class System.Collections.Generic.ICollection`1&lt;!!TCollectionElement&gt; collection, !!TEntity entity, class System.Action`2&lt;!!TCollectionElement, !!TEntity&gt; elementFixup) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InverseCollectionFixup``2(System.Collections.Generic.ICollection{``0},``1,System.Action{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InverseCollectionFixup(Of TCollectionElement, TEntity) (collection As ICollection(Of TCollectionElement), entity As TEntity, elementFixup As Action(Of TCollectionElement, TEntity))" />
      <MemberSignature Language="F#" Value="static member InverseCollectionFixup : System.Collections.Generic.ICollection&lt;'CollectionElement&gt; * 'Entity * Action&lt;'CollectionElement, 'Entity&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.InverseCollectionFixup (collection, entity, elementFixup)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TCollectionElement">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TEntity">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.ICollection&lt;TCollectionElement&gt;" />
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="elementFixup" Type="System.Action&lt;TCollectionElement,TEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TCollectionElement">To be added.</typeparam>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="collection">To be added.</param>
        <param name="entity">To be added.</param>
        <param name="elementFixup">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaterializeJsonEntity&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static TEntity? MaterializeJsonEntity&lt;TEntity&gt; (Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, object[] keyPropertyValues, Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData? jsonReaderData, bool nullable, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,TEntity&gt; shaper) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEntity MaterializeJsonEntity&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, object[] keyPropertyValues, class Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData jsonReaderData, bool nullable, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, object[], class Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData, !!TEntity&gt; shaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.MaterializeJsonEntity``1(Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,System.Boolean,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaterializeJsonEntity(Of TEntity As Class) (queryContext As QueryContext, keyPropertyValues As Object(), jsonReaderData As JsonReaderData, nullable As Boolean, shaper As Func(Of QueryContext, Object(), JsonReaderData, TEntity)) As TEntity" />
      <MemberSignature Language="F#" Value="static member MaterializeJsonEntity : Microsoft.EntityFrameworkCore.Query.QueryContext * obj[] * Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData * bool * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, obj[], Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData, 'Entity (requires 'Entity : null)&gt; -&gt; 'Entity (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.MaterializeJsonEntity (queryContext, keyPropertyValues, jsonReaderData, nullable, shaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="keyPropertyValues" Type="System.Object[]" />
        <Parameter Name="jsonReaderData" Type="Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="nullable" Type="System.Boolean" />
        <Parameter Name="shaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,TEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="queryContext">To be added.</param>
        <param name="keyPropertyValues">To be added.</param>
        <param name="jsonReaderData">To be added.</param>
        <param name="nullable">To be added.</param>
        <param name="shaper">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaterializeJsonEntityCollection&lt;TEntity,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult? MaterializeJsonEntityCollection&lt;TEntity,TResult&gt; (Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, object[] keyPropertyValues, Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData? jsonReaderData, Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,TEntity&gt; innerShaper) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult MaterializeJsonEntityCollection&lt;class TEntity, TResult&gt;(class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, object[] keyPropertyValues, class Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData jsonReaderData, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, object[], class Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData, !!TEntity&gt; innerShaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.MaterializeJsonEntityCollection``2(Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaterializeJsonEntityCollection(Of TEntity As Class, TResult As Class) (queryContext As QueryContext, keyPropertyValues As Object(), jsonReaderData As JsonReaderData, navigation As INavigationBase, innerShaper As Func(Of QueryContext, Object(), JsonReaderData, TEntity)) As TResult" />
      <MemberSignature Language="F#" Value="static member MaterializeJsonEntityCollection : Microsoft.EntityFrameworkCore.Query.QueryContext * obj[] * Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, obj[], Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData, 'Entity (requires 'Entity : null)&gt; -&gt; 'Result (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.MaterializeJsonEntityCollection (queryContext, keyPropertyValues, jsonReaderData, navigation, innerShaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="keyPropertyValues" Type="System.Object[]" />
        <Parameter Name="jsonReaderData" Type="Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" />
        <Parameter Name="innerShaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Object[],Microsoft.EntityFrameworkCore.Storage.Json.JsonReaderData,TEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="queryContext">To be added.</param>
        <param name="keyPropertyValues">To be added.</param>
        <param name="jsonReaderData">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateCollection&lt;TCollection,TElement,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static void PopulateCollection&lt;TCollection,TElement,TRelatedEntity&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, System.Data.Common.DbDataReader dbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator resultCoordinator, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; parentIdentifier, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; outerIdentifier, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; selfIdentifier, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; parentIdentifierValueComparers, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; outerIdentifierValueComparers, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; selfIdentifierValueComparers, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,TRelatedEntity&gt; innerShaper) where TCollection : class, System.Collections.Generic.ICollection&lt;TElement&gt; where TRelatedEntity : TElement;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PopulateCollection&lt;class (class System.Collections.Generic.ICollection`1&lt;!!TElement&gt;) TCollection, TElement, (!!TElement) TRelatedEntity&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, class System.Data.Common.DbDataReader dbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator resultCoordinator, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; parentIdentifier, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; outerIdentifier, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; selfIdentifier, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; parentIdentifierValueComparers, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; outerIdentifierValueComparers, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; selfIdentifierValueComparers, class System.Func`5&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator, !!TRelatedEntity&gt; innerShaper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateCollection``3(System.Int32,Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,``2})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PopulateCollection(Of TCollection As {Class, ICollection(Of TElement)}, TElement As {Class, ICollection(Of TElement)}, TRelatedEntity As {Class, ICollection(Of TElement)}) (collectionId As Integer, queryContext As QueryContext, dbDataReader As DbDataReader, resultCoordinator As SingleQueryResultCoordinator, parentIdentifier As Func(Of QueryContext, DbDataReader, Object()), outerIdentifier As Func(Of QueryContext, DbDataReader, Object()), selfIdentifier As Func(Of QueryContext, DbDataReader, Object()), parentIdentifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), outerIdentifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), selfIdentifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), innerShaper As Func(Of QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator, TRelatedEntity))" />
      <MemberSignature Language="F#" Value="static member PopulateCollection : int * Microsoft.EntityFrameworkCore.Query.QueryContext * System.Data.Common.DbDataReader * Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator, #'Element&gt; -&gt; unit (requires 'Collection : null and 'Collection :&gt; System.Collections.Generic.ICollection&lt;'Element&gt;)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateCollection (collectionId, queryContext, dbDataReader, resultCoordinator, parentIdentifier, outerIdentifier, selfIdentifier, parentIdentifierValueComparers, outerIdentifierValueComparers, selfIdentifierValueComparers, innerShaper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TCollection">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.Collections.Generic.ICollection&lt;TElement&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>TElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="dbDataReader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator" />
        <Parameter Name="parentIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="outerIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="selfIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="parentIdentifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="outerIdentifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="selfIdentifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="innerShaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,TRelatedEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TCollection">To be added.</typeparam>
        <typeparam name="TElement">To be added.</typeparam>
        <typeparam name="TRelatedEntity">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="dbDataReader">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="parentIdentifier">To be added.</param>
        <param name="outerIdentifier">To be added.</param>
        <param name="selfIdentifier">To be added.</param>
        <param name="parentIdentifierValueComparers">To be added.</param>
        <param name="outerIdentifierValueComparers">To be added.</param>
        <param name="selfIdentifierValueComparers">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateIncludeCollection&lt;TIncludingEntity,TIncludedEntity&gt;">
      <MemberSignature Language="C#" Value="public static void PopulateIncludeCollection&lt;TIncludingEntity,TIncludedEntity&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, System.Data.Common.DbDataReader dbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator resultCoordinator, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; parentIdentifier, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; outerIdentifier, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; selfIdentifier, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; parentIdentifierValueComparers, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; outerIdentifierValueComparers, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; selfIdentifierValueComparers, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,TIncludedEntity&gt; innerShaper, Microsoft.EntityFrameworkCore.Metadata.INavigationBase? inverseNavigation, Action&lt;TIncludingEntity,TIncludedEntity&gt; fixup, bool trackingQuery) where TIncludingEntity : class where TIncludedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PopulateIncludeCollection&lt;class TIncludingEntity, class TIncludedEntity&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.QueryContext queryContext, class System.Data.Common.DbDataReader dbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator resultCoordinator, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; parentIdentifier, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; outerIdentifier, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; selfIdentifier, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; parentIdentifierValueComparers, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; outerIdentifierValueComparers, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; selfIdentifierValueComparers, class System.Func`5&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, class Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator, !!TIncludedEntity&gt; innerShaper, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase inverseNavigation, class System.Action`2&lt;!!TIncludingEntity, !!TIncludedEntity&gt; fixup, bool trackingQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateIncludeCollection``2(System.Int32,Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,``1},Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Action{``0,``1},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PopulateIncludeCollection(Of TIncludingEntity As Class, TIncludedEntity As Class) (collectionId As Integer, queryContext As QueryContext, dbDataReader As DbDataReader, resultCoordinator As SingleQueryResultCoordinator, parentIdentifier As Func(Of QueryContext, DbDataReader, Object()), outerIdentifier As Func(Of QueryContext, DbDataReader, Object()), selfIdentifier As Func(Of QueryContext, DbDataReader, Object()), parentIdentifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), outerIdentifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), selfIdentifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), innerShaper As Func(Of QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator, TIncludedEntity), inverseNavigation As INavigationBase, fixup As Action(Of TIncludingEntity, TIncludedEntity), trackingQuery As Boolean)" />
      <MemberSignature Language="F#" Value="static member PopulateIncludeCollection : int * Microsoft.EntityFrameworkCore.Query.QueryContext * System.Data.Common.DbDataReader * Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator, 'IncludedEntity (requires 'IncludedEntity : null)&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Action&lt;'IncludingEntity, 'IncludedEntity (requires 'IncludingEntity : null and 'IncludedEntity : null)&gt; * bool -&gt; unit (requires 'IncludingEntity : null and 'IncludedEntity : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateIncludeCollection (collectionId, queryContext, dbDataReader, resultCoordinator, parentIdentifier, outerIdentifier, selfIdentifier, parentIdentifierValueComparers, outerIdentifierValueComparers, selfIdentifierValueComparers, innerShaper, inverseNavigation, fixup, trackingQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TIncludingEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TIncludedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.QueryContext" />
        <Parameter Name="dbDataReader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator" />
        <Parameter Name="parentIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="outerIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="selfIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="parentIdentifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="outerIdentifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="selfIdentifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="innerShaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,TIncludedEntity&gt;" />
        <Parameter Name="inverseNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fixup" Type="System.Action&lt;TIncludingEntity,TIncludedEntity&gt;" />
        <Parameter Name="trackingQuery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TIncludingEntity">To be added.</typeparam>
        <typeparam name="TIncludedEntity">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="dbDataReader">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="parentIdentifier">To be added.</param>
        <param name="outerIdentifier">To be added.</param>
        <param name="selfIdentifier">To be added.</param>
        <param name="parentIdentifierValueComparers">To be added.</param>
        <param name="outerIdentifierValueComparers">To be added.</param>
        <param name="selfIdentifierValueComparers">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="fixup">To be added.</param>
        <param name="trackingQuery">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateSplitCollection&lt;TCollection,TElement,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static void PopulateSplitCollection&lt;TCollection,TElement,TRelatedEntity&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.RelationalQueryContext queryContext, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver relationalCommandResolver, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn?&gt;? readerColumns, bool detailedErrorsEnabled, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; childIdentifier, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; identifierValueComparers, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,TRelatedEntity&gt; innerShaper, Action&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator&gt;? relatedDataLoaders) where TCollection : class, System.Collections.Generic.ICollection&lt;TElement&gt; where TRelatedEntity : TElement;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PopulateSplitCollection&lt;class (class System.Collections.Generic.ICollection`1&lt;!!TElement&gt;) TCollection, TElement, (!!TElement) TRelatedEntity&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext queryContext, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, class Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver relationalCommandResolver, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; readerColumns, bool detailedErrorsEnabled, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; childIdentifier, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; identifierValueComparers, class System.Func`5&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, !!TRelatedEntity&gt; innerShaper, class System.Action`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator&gt; relatedDataLoaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateSplitCollection``3(System.Int32,Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},System.Boolean,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,``2},System.Action{Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PopulateSplitCollection(Of TCollection As {Class, ICollection(Of TElement)}, TElement As {Class, ICollection(Of TElement)}, TRelatedEntity As {Class, ICollection(Of TElement)}) (collectionId As Integer, queryContext As RelationalQueryContext, executionStrategy As IExecutionStrategy, relationalCommandResolver As RelationalCommandResolver, readerColumns As IReadOnlyList(Of ReaderColumn), detailedErrorsEnabled As Boolean, resultCoordinator As SplitQueryResultCoordinator, childIdentifier As Func(Of QueryContext, DbDataReader, Object()), identifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), innerShaper As Func(Of QueryContext, DbDataReader, ResultContext, SplitQueryResultCoordinator, TRelatedEntity), relatedDataLoaders As Action(Of QueryContext, IExecutionStrategy, SplitQueryResultCoordinator))" />
      <MemberSignature Language="F#" Value="static member PopulateSplitCollection : int * Microsoft.EntityFrameworkCore.Query.RelationalQueryContext * Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; * bool * Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, #'Element&gt; * Action&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator&gt; -&gt; unit (requires 'Collection : null and 'Collection :&gt; System.Collections.Generic.ICollection&lt;'Element&gt;)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateSplitCollection (collectionId, queryContext, executionStrategy, relationalCommandResolver, readerColumns, detailedErrorsEnabled, resultCoordinator, childIdentifier, identifierValueComparers, innerShaper, relatedDataLoaders)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TCollection">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.Collections.Generic.ICollection&lt;TElement&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>TElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" />
        <Parameter Name="executionStrategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
        <Parameter Name="relationalCommandResolver" Type="Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver" />
        <Parameter Name="readerColumns" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="detailedErrorsEnabled" Type="System.Boolean" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator" />
        <Parameter Name="childIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="identifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="innerShaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,TRelatedEntity&gt;" />
        <Parameter Name="relatedDataLoaders" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TCollection">To be added.</typeparam>
        <typeparam name="TElement">To be added.</typeparam>
        <typeparam name="TRelatedEntity">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="executionStrategy">To be added.</param>
        <param name="relationalCommandResolver">To be added.</param>
        <param name="readerColumns">To be added.</param>
        <param name="detailedErrorsEnabled">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="childIdentifier">To be added.</param>
        <param name="identifierValueComparers">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <param name="relatedDataLoaders">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateSplitCollectionAsync&lt;TCollection,TElement,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task PopulateSplitCollectionAsync&lt;TCollection,TElement,TRelatedEntity&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.RelationalQueryContext queryContext, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver relationalCommandResolver, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn?&gt;? readerColumns, bool detailedErrorsEnabled, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; childIdentifier, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; identifierValueComparers, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,TRelatedEntity&gt; innerShaper, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Threading.Tasks.Task&gt;? relatedDataLoaders) where TCollection : class, System.Collections.Generic.ICollection&lt;TElement&gt; where TRelatedEntity : TElement;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task PopulateSplitCollectionAsync&lt;class (class System.Collections.Generic.ICollection`1&lt;!!TElement&gt;) TCollection, TElement, (!!TElement) TRelatedEntity&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext queryContext, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, class Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver relationalCommandResolver, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; readerColumns, bool detailedErrorsEnabled, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; childIdentifier, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; identifierValueComparers, class System.Func`5&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, !!TRelatedEntity&gt; innerShaper, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, class System.Threading.Tasks.Task&gt; relatedDataLoaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateSplitCollectionAsync``3(System.Int32,Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},System.Boolean,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,``2},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PopulateSplitCollectionAsync(Of TCollection As {Class, ICollection(Of TElement)}, TElement As {Class, ICollection(Of TElement)}, TRelatedEntity As {Class, ICollection(Of TElement)}) (collectionId As Integer, queryContext As RelationalQueryContext, executionStrategy As IExecutionStrategy, relationalCommandResolver As RelationalCommandResolver, readerColumns As IReadOnlyList(Of ReaderColumn), detailedErrorsEnabled As Boolean, resultCoordinator As SplitQueryResultCoordinator, childIdentifier As Func(Of QueryContext, DbDataReader, Object()), identifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), innerShaper As Func(Of QueryContext, DbDataReader, ResultContext, SplitQueryResultCoordinator, TRelatedEntity), relatedDataLoaders As Func(Of QueryContext, IExecutionStrategy, SplitQueryResultCoordinator, Task)) As Task" />
      <MemberSignature Language="F#" Value="static member PopulateSplitCollectionAsync : int * Microsoft.EntityFrameworkCore.Query.RelationalQueryContext * Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; * bool * Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, #'Element&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task (requires 'Collection : null and 'Collection :&gt; System.Collections.Generic.ICollection&lt;'Element&gt;)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateSplitCollectionAsync (collectionId, queryContext, executionStrategy, relationalCommandResolver, readerColumns, detailedErrorsEnabled, resultCoordinator, childIdentifier, identifierValueComparers, innerShaper, relatedDataLoaders)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TCollection">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.Collections.Generic.ICollection&lt;TElement&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>TElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" />
        <Parameter Name="executionStrategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
        <Parameter Name="relationalCommandResolver" Type="Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver" />
        <Parameter Name="readerColumns" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="detailedErrorsEnabled" Type="System.Boolean" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator" />
        <Parameter Name="childIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="identifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="innerShaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,TRelatedEntity&gt;" />
        <Parameter Name="relatedDataLoaders" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Threading.Tasks.Task&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TCollection">To be added.</typeparam>
        <typeparam name="TElement">To be added.</typeparam>
        <typeparam name="TRelatedEntity">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="executionStrategy">To be added.</param>
        <param name="relationalCommandResolver">To be added.</param>
        <param name="readerColumns">To be added.</param>
        <param name="detailedErrorsEnabled">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="childIdentifier">To be added.</param>
        <param name="identifierValueComparers">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <param name="relatedDataLoaders">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateSplitIncludeCollection&lt;TIncludingEntity,TIncludedEntity&gt;">
      <MemberSignature Language="C#" Value="public static void PopulateSplitIncludeCollection&lt;TIncludingEntity,TIncludedEntity&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.RelationalQueryContext queryContext, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver relationalCommandResolver, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn?&gt;? readerColumns, bool detailedErrorsEnabled, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; childIdentifier, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; identifierValueComparers, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,TIncludedEntity&gt; innerShaper, Action&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator&gt;? relatedDataLoaders, Microsoft.EntityFrameworkCore.Metadata.INavigationBase? inverseNavigation, Action&lt;TIncludingEntity,TIncludedEntity&gt; fixup, bool trackingQuery) where TIncludingEntity : class where TIncludedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PopulateSplitIncludeCollection&lt;class TIncludingEntity, class TIncludedEntity&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext queryContext, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, class Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver relationalCommandResolver, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; readerColumns, bool detailedErrorsEnabled, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; childIdentifier, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; identifierValueComparers, class System.Func`5&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, !!TIncludedEntity&gt; innerShaper, class System.Action`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator&gt; relatedDataLoaders, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase inverseNavigation, class System.Action`2&lt;!!TIncludingEntity, !!TIncludedEntity&gt; fixup, bool trackingQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateSplitIncludeCollection``2(System.Int32,Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},System.Boolean,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,``1},System.Action{Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator},Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Action{``0,``1},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PopulateSplitIncludeCollection(Of TIncludingEntity As Class, TIncludedEntity As Class) (collectionId As Integer, queryContext As RelationalQueryContext, executionStrategy As IExecutionStrategy, relationalCommandResolver As RelationalCommandResolver, readerColumns As IReadOnlyList(Of ReaderColumn), detailedErrorsEnabled As Boolean, resultCoordinator As SplitQueryResultCoordinator, childIdentifier As Func(Of QueryContext, DbDataReader, Object()), identifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), innerShaper As Func(Of QueryContext, DbDataReader, ResultContext, SplitQueryResultCoordinator, TIncludedEntity), relatedDataLoaders As Action(Of QueryContext, IExecutionStrategy, SplitQueryResultCoordinator), inverseNavigation As INavigationBase, fixup As Action(Of TIncludingEntity, TIncludedEntity), trackingQuery As Boolean)" />
      <MemberSignature Language="F#" Value="static member PopulateSplitIncludeCollection : int * Microsoft.EntityFrameworkCore.Query.RelationalQueryContext * Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; * bool * Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, 'IncludedEntity (requires 'IncludedEntity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Action&lt;'IncludingEntity, 'IncludedEntity (requires 'IncludingEntity : null and 'IncludedEntity : null)&gt; * bool -&gt; unit (requires 'IncludingEntity : null and 'IncludedEntity : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateSplitIncludeCollection (collectionId, queryContext, executionStrategy, relationalCommandResolver, readerColumns, detailedErrorsEnabled, resultCoordinator, childIdentifier, identifierValueComparers, innerShaper, relatedDataLoaders, inverseNavigation, fixup, trackingQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TIncludingEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TIncludedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" />
        <Parameter Name="executionStrategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
        <Parameter Name="relationalCommandResolver" Type="Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver" />
        <Parameter Name="readerColumns" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="detailedErrorsEnabled" Type="System.Boolean" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator" />
        <Parameter Name="childIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="identifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="innerShaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,TIncludedEntity&gt;" />
        <Parameter Name="relatedDataLoaders" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="inverseNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fixup" Type="System.Action&lt;TIncludingEntity,TIncludedEntity&gt;" />
        <Parameter Name="trackingQuery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TIncludingEntity">To be added.</typeparam>
        <typeparam name="TIncludedEntity">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="executionStrategy">To be added.</param>
        <param name="relationalCommandResolver">To be added.</param>
        <param name="readerColumns">To be added.</param>
        <param name="detailedErrorsEnabled">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="childIdentifier">To be added.</param>
        <param name="identifierValueComparers">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <param name="relatedDataLoaders">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="fixup">To be added.</param>
        <param name="trackingQuery">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateSplitIncludeCollectionAsync&lt;TIncludingEntity,TIncludedEntity&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task PopulateSplitIncludeCollectionAsync&lt;TIncludingEntity,TIncludedEntity&gt; (int collectionId, Microsoft.EntityFrameworkCore.Query.RelationalQueryContext queryContext, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver relationalCommandResolver, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn?&gt;? readerColumns, bool detailedErrorsEnabled, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,object[]&gt; childIdentifier, System.Collections.Generic.IReadOnlyList&lt;Func&lt;object,object,bool&gt;&gt; identifierValueComparers, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,TIncludedEntity&gt; innerShaper, Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Threading.Tasks.Task&gt;? relatedDataLoaders, Microsoft.EntityFrameworkCore.Metadata.INavigationBase? inverseNavigation, Action&lt;TIncludingEntity,TIncludedEntity&gt; fixup, bool trackingQuery) where TIncludingEntity : class where TIncludedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task PopulateSplitIncludeCollectionAsync&lt;class TIncludingEntity, class TIncludedEntity&gt;(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.RelationalQueryContext queryContext, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy executionStrategy, class Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver relationalCommandResolver, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; readerColumns, bool detailedErrorsEnabled, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator resultCoordinator, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, object[]&gt; childIdentifier, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Func`3&lt;object, object, bool&gt;&gt; identifierValueComparers, class System.Func`5&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class System.Data.Common.DbDataReader, class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, !!TIncludedEntity&gt; innerShaper, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, class System.Threading.Tasks.Task&gt; relatedDataLoaders, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase inverseNavigation, class System.Action`2&lt;!!TIncludingEntity, !!TIncludedEntity&gt; fixup, bool trackingQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateSplitIncludeCollectionAsync``2(System.Int32,Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},System.Boolean,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]},System.Collections.Generic.IReadOnlyList{System.Func{System.Object,System.Object,System.Boolean}},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,``1},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Threading.Tasks.Task},Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Action{``0,``1},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PopulateSplitIncludeCollectionAsync(Of TIncludingEntity As Class, TIncludedEntity As Class) (collectionId As Integer, queryContext As RelationalQueryContext, executionStrategy As IExecutionStrategy, relationalCommandResolver As RelationalCommandResolver, readerColumns As IReadOnlyList(Of ReaderColumn), detailedErrorsEnabled As Boolean, resultCoordinator As SplitQueryResultCoordinator, childIdentifier As Func(Of QueryContext, DbDataReader, Object()), identifierValueComparers As IReadOnlyList(Of Func(Of Object, Object, Boolean)), innerShaper As Func(Of QueryContext, DbDataReader, ResultContext, SplitQueryResultCoordinator, TIncludedEntity), relatedDataLoaders As Func(Of QueryContext, IExecutionStrategy, SplitQueryResultCoordinator, Task), inverseNavigation As INavigationBase, fixup As Action(Of TIncludingEntity, TIncludedEntity), trackingQuery As Boolean) As Task" />
      <MemberSignature Language="F#" Value="static member PopulateSplitIncludeCollectionAsync : int * Microsoft.EntityFrameworkCore.Query.RelationalQueryContext * Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt; * bool * Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, obj[]&gt; * System.Collections.Generic.IReadOnlyList&lt;Func&lt;obj, obj, bool&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, System.Data.Common.DbDataReader, Microsoft.EntityFrameworkCore.Query.Internal.ResultContext, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, 'IncludedEntity (requires 'IncludedEntity : null)&gt; * Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator, System.Threading.Tasks.Task&gt; * Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Action&lt;'IncludingEntity, 'IncludedEntity (requires 'IncludingEntity : null and 'IncludedEntity : null)&gt; * bool -&gt; System.Threading.Tasks.Task (requires 'IncludingEntity : null and 'IncludedEntity : null)" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.PopulateSplitIncludeCollectionAsync (collectionId, queryContext, executionStrategy, relationalCommandResolver, readerColumns, detailedErrorsEnabled, resultCoordinator, childIdentifier, identifierValueComparers, innerShaper, relatedDataLoaders, inverseNavigation, fixup, trackingQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TIncludingEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TIncludedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="queryContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" />
        <Parameter Name="executionStrategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />
        <Parameter Name="relationalCommandResolver" Type="Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandResolver" />
        <Parameter Name="readerColumns" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="detailedErrorsEnabled" Type="System.Boolean" />
        <Parameter Name="resultCoordinator" Type="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator" />
        <Parameter Name="childIdentifier" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Object[]&gt;" />
        <Parameter Name="identifierValueComparers" Type="System.Collections.Generic.IReadOnlyList&lt;System.Func&lt;System.Object,System.Object,System.Boolean&gt;&gt;" />
        <Parameter Name="innerShaper" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,TIncludedEntity&gt;" />
        <Parameter Name="relatedDataLoaders" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Threading.Tasks.Task&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="inverseNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fixup" Type="System.Action&lt;TIncludingEntity,TIncludedEntity&gt;" />
        <Parameter Name="trackingQuery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TIncludingEntity">To be added.</typeparam>
        <typeparam name="TIncludedEntity">To be added.</typeparam>
        <param name="collectionId">To be added.</param>
        <param name="queryContext">To be added.</param>
        <param name="executionStrategy">To be added.</param>
        <param name="relationalCommandResolver">To be added.</param>
        <param name="readerColumns">To be added.</param>
        <param name="detailedErrorsEnabled">To be added.</param>
        <param name="resultCoordinator">To be added.</param>
        <param name="childIdentifier">To be added.</param>
        <param name="identifierValueComparers">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <param name="relatedDataLoaders">To be added.</param>
        <param name="inverseNavigation">To be added.</param>
        <param name="fixup">To be added.</param>
        <param name="trackingQuery">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRelationalGroupingResult">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LambdaExpression ProcessRelationalGroupingResult (Microsoft.EntityFrameworkCore.Query.RelationalGroupByResultExpression relationalGroupByResultExpression, out System.Linq.Expressions.Expression relationalCommandResolver, out System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn?&gt;? readerColumns, out System.Linq.Expressions.LambdaExpression keySelector, out System.Linq.Expressions.LambdaExpression keyIdentifier, out System.Linq.Expressions.LambdaExpression? relatedDataLoaders, ref int collectionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.LambdaExpression ProcessRelationalGroupingResult(class Microsoft.EntityFrameworkCore.Query.RelationalGroupByResultExpression relationalGroupByResultExpression, [out] class System.Linq.Expressions.Expression&amp; relationalCommandResolver, [out] class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;&amp; readerColumns, [out] class System.Linq.Expressions.LambdaExpression&amp; keySelector, [out] class System.Linq.Expressions.LambdaExpression&amp; keyIdentifier, [out] class System.Linq.Expressions.LambdaExpression&amp; relatedDataLoaders, int32&amp; collectionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.ProcessRelationalGroupingResult(Microsoft.EntityFrameworkCore.Query.RelationalGroupByResultExpression,System.Linq.Expressions.Expression@,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn}@,System.Linq.Expressions.LambdaExpression@,System.Linq.Expressions.LambdaExpression@,System.Linq.Expressions.LambdaExpression@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessRelationalGroupingResult (relationalGroupByResultExpression As RelationalGroupByResultExpression, ByRef relationalCommandResolver As Expression, ByRef readerColumns As IReadOnlyList(Of ReaderColumn), ByRef keySelector As LambdaExpression, ByRef keyIdentifier As LambdaExpression, ByRef relatedDataLoaders As LambdaExpression, ByRef collectionId As Integer) As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.ProcessRelationalGroupingResult : Microsoft.EntityFrameworkCore.Query.RelationalGroupByResultExpression * Expression * IReadOnlyList * LambdaExpression * LambdaExpression * LambdaExpression * int -&gt; System.Linq.Expressions.LambdaExpression" Usage="shaperProcessingExpressionVisitor.ProcessRelationalGroupingResult (relationalGroupByResultExpression, relationalCommandResolver, readerColumns, keySelector, keyIdentifier, relatedDataLoaders, collectionId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationalGroupByResultExpression" Type="Microsoft.EntityFrameworkCore.Query.RelationalGroupByResultExpression" />
        <Parameter Name="relationalCommandResolver" Type="System.Linq.Expressions.Expression" RefType="out" />
        <Parameter Name="readerColumns" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" RefType="out" />
        <Parameter Name="keyIdentifier" Type="System.Linq.Expressions.LambdaExpression" RefType="out" />
        <Parameter Name="relatedDataLoaders" Type="System.Linq.Expressions.LambdaExpression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="collectionId" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="relationalGroupByResultExpression">To be added.</param>
        <param name="relationalCommandResolver">To be added.</param>
        <param name="readerColumns">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="keyIdentifier">To be added.</param>
        <param name="relatedDataLoaders">To be added.</param>
        <param name="collectionId">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessShaper">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LambdaExpression ProcessShaper (System.Linq.Expressions.Expression shaperExpression, out System.Linq.Expressions.Expression relationalCommandResolver, out System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn?&gt;? readerColumns, out System.Linq.Expressions.LambdaExpression? relatedDataLoaders, ref int collectionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.LambdaExpression ProcessShaper(class System.Linq.Expressions.Expression shaperExpression, [out] class System.Linq.Expressions.Expression&amp; relationalCommandResolver, [out] class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;&amp; readerColumns, [out] class System.Linq.Expressions.LambdaExpression&amp; relatedDataLoaders, int32&amp; collectionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.ProcessShaper(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression@,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn}@,System.Linq.Expressions.LambdaExpression@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessShaper (shaperExpression As Expression, ByRef relationalCommandResolver As Expression, ByRef readerColumns As IReadOnlyList(Of ReaderColumn), ByRef relatedDataLoaders As LambdaExpression, ByRef collectionId As Integer) As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.ProcessShaper : System.Linq.Expressions.Expression * Expression * IReadOnlyList * LambdaExpression * int -&gt; System.Linq.Expressions.LambdaExpression" Usage="shaperProcessingExpressionVisitor.ProcessShaper (shaperExpression, relationalCommandResolver, readerColumns, relatedDataLoaders, collectionId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shaperExpression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="relationalCommandResolver" Type="System.Linq.Expressions.Expression" RefType="out" />
        <Parameter Name="readerColumns" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.ReaderColumn&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="relatedDataLoaders" Type="System.Linq.Expressions.LambdaExpression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="collectionId" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="shaperExpression">To be added.</param>
        <param name="relationalCommandResolver">To be added.</param>
        <param name="readerColumns">To be added.</param>
        <param name="relatedDataLoaders">To be added.</param>
        <param name="collectionId">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaskAwaiter">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task TaskAwaiter (Func&lt;System.Threading.Tasks.Task&gt;[] taskFactories);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task TaskAwaiter(class System.Func`1&lt;class System.Threading.Tasks.Task&gt;[] taskFactories) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.TaskAwaiter(System.Func{System.Threading.Tasks.Task}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TaskAwaiter (taskFactories As Func(Of Task)()) As Task" />
      <MemberSignature Language="F#" Value="static member TaskAwaiter : Func&lt;System.Threading.Tasks.Task&gt;[] -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.TaskAwaiter taskFactories" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskFactories" Type="System.Func&lt;System.Threading.Tasks.Task&gt;[]" />
      </Parameters>
      <Docs>
        <param name="taskFactories">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowReadValueException&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue ThrowReadValueException&lt;TValue&gt; (Exception exception, object? value, Type expectedType, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase? property = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue ThrowReadValueException&lt;TValue&gt;(class System.Exception exception, object value, class System.Type expectedType, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.ThrowReadValueException``1(System.Exception,System.Object,System.Type,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThrowReadValueException(Of TValue) (exception As Exception, value As Object, expectedType As Type, Optional property As IPropertyBase = Nothing) As TValue" />
      <MemberSignature Language="F#" Value="static member ThrowReadValueException : Exception * obj * Type * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; 'Value" Usage="Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.ThrowReadValueException (exception, value, expectedType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="value" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="expectedType" Type="System.Type" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="exception">To be added.</param>
        <param name="value">To be added.</param>
        <param name="expectedType">To be added.</param>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression binaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression binaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitBinary (binaryExpression As BinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="shaperProcessingExpressionVisitor.VisitBinary binaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryExpression" Type="System.Linq.Expressions.BinaryExpression" />
      </Parameters>
      <Docs>
        <param name="binaryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression extensionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression extensionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (extensionExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="shaperProcessingExpressionVisitor.VisitExtension extensionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="extensionExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.ShaperProcessingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMethodCall (methodCallExpression As MethodCallExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="shaperProcessingExpressionVisitor.VisitMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
