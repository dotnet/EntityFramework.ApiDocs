<Type Name="DbContextFactory&lt;TContext&gt;" FullName="Microsoft.EntityFrameworkCore.Internal.DbContextFactory&lt;TContext&gt;">
  <TypeSignature Language="C#" Value="public class DbContextFactory&lt;TContext&gt; : Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt; where TContext : DbContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbContextFactory`1&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.IDbContextFactory`1&lt;!TContext&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.DbContextFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class DbContextFactory(Of TContext)&#xA;Implements IDbContextFactory(Of TContext)" />
  <TypeSignature Language="F#" Value="type DbContextFactory&lt;'Context (requires 'Context :&gt; DbContext)&gt; = class&#xA;    interface IDbContextFactory&lt;'Context (requires 'Context :&gt; DbContext)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TContext">
      <Constraints>
        <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
      </Constraints>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TContext">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbContextFactory (IServiceProvider serviceProvider, Microsoft.EntityFrameworkCore.DbContextOptions&lt;TContext&gt; options, Microsoft.EntityFrameworkCore.Internal.IDbContextFactorySource&lt;TContext&gt; factorySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider, class Microsoft.EntityFrameworkCore.DbContextOptions`1&lt;!TContext&gt; options, class Microsoft.EntityFrameworkCore.Internal.IDbContextFactorySource`1&lt;!TContext&gt; factorySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextFactory`1.#ctor(System.IServiceProvider,Microsoft.EntityFrameworkCore.DbContextOptions{`0},Microsoft.EntityFrameworkCore.Internal.IDbContextFactorySource{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider, options As DbContextOptions(Of TContext), factorySource As IDbContextFactorySource(Of TContext))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Internal.DbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; : IServiceProvider * Microsoft.EntityFrameworkCore.DbContextOptions&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * Microsoft.EntityFrameworkCore.Internal.IDbContextFactorySource&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; -&gt; Microsoft.EntityFrameworkCore.Internal.DbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="new Microsoft.EntityFrameworkCore.Internal.DbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (serviceProvider, options, factorySource)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.DbContextOptions&lt;TContext&gt;" />
        <Parameter Name="factorySource" Type="Microsoft.EntityFrameworkCore.Internal.IDbContextFactorySource&lt;TContext&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">To be added.</param>
        <param name="options">To be added.</param>
        <param name="factorySource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbContext">
      <MemberSignature Language="C#" Value="public virtual TContext CreateDbContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TContext CreateDbContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextFactory`1.CreateDbContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDbContext () As TContext" />
      <MemberSignature Language="F#" Value="abstract member CreateDbContext : unit -&gt; 'Context&#xA;override this.CreateDbContext : unit -&gt; 'Context" Usage="dbContextFactory.CreateDbContext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.IDbContextFactory`1.CreateDbContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbContextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TContext&gt; CreateDbContextAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TContext&gt; CreateDbContextAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextFactory`1.CreateDbContextAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDbContextAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of TContext)" />
      <MemberSignature Language="F#" Value="abstract member CreateDbContextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;&#xA;override this.CreateDbContextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="dbContextFactory.CreateDbContextAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.IDbContextFactory`1.CreateDbContextAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
