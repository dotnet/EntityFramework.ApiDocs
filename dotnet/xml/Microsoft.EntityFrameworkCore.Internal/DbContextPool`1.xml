<Type Name="DbContextPool&lt;TContext&gt;" FullName="Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;TContext&gt;">
  <TypeSignature Language="C#" Value="public class DbContextPool&lt;TContext&gt; : IDisposable, Microsoft.EntityFrameworkCore.Internal.IDbContextPool where TContext : DbContext" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbContextPool`1&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Internal.IDbContextPool, class System.IDisposable" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1" />
  <TypeSignature Language="VB.NET" Value="Public Class DbContextPool(Of TContext)&#xA;Implements IDbContextPool, IDisposable" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type DbContextPool&lt;'Context (requires 'Context :&gt; DbContext)&gt; = class&#xA;    interface IDbContextPool&#xA;    interface IDisposable" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public class DbContextPool&lt;TContext&gt; : IAsyncDisposable, IDisposable, Microsoft.EntityFrameworkCore.Internal.IDbContextPool where TContext : DbContext" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbContextPool`1&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Internal.IDbContextPool, class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public Class DbContextPool(Of TContext)&#xA;Implements IAsyncDisposable, IDbContextPool, IDisposable" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="F#" Value="type DbContextPool&lt;'Context (requires 'Context :&gt; DbContext)&gt; = class&#xA;    interface IDbContextPool&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="C#" Value="public class DbContextPool&lt;TContext&gt; : IAsyncDisposable, IDisposable, Microsoft.EntityFrameworkCore.Internal.IDbContextPool&lt;TContext&gt; where TContext : DbContext" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbContextPool`1&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Internal.IDbContextPool, class Microsoft.EntityFrameworkCore.Internal.IDbContextPool`1&lt;!TContext&gt;, class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class DbContextPool(Of TContext)&#xA;Implements IAsyncDisposable, IDbContextPool(Of TContext), IDisposable" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type DbContextPool&lt;'Context (requires 'Context :&gt; DbContext)&gt; = class&#xA;    interface IDbContextPool&lt;'Context (requires 'Context :&gt; DbContext)&gt;&#xA;    interface IDbContextPool&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TContext">
      <Constraints>
        <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Internal.IDbContextPool</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Internal.IDbContextPool&lt;TContext&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TContext">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbContextPool (Microsoft.EntityFrameworkCore.DbContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContextOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As DbContextOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; : Microsoft.EntityFrameworkCore.DbContextOptions -&gt; Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="new Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.DbContextOptions" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbContextPool (Microsoft.EntityFrameworkCore.DbContextOptions&lt;TContext&gt; options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContextOptions`1&lt;!TContext&gt; options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As DbContextOptions(Of TContext))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; : Microsoft.EntityFrameworkCore.DbContextOptions&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; -&gt; Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="new Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.DbContextOptions&lt;TContext&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbContextPool (Microsoft.EntityFrameworkCore.DbContextOptions&lt;TContext&gt; options, IServiceProvider? serviceProvider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContextOptions`1&lt;!TContext&gt; options, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0},System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As DbContextOptions(Of TContext), Optional serviceProvider As IServiceProvider = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; : Microsoft.EntityFrameworkCore.DbContextOptions&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * IServiceProvider -&gt; Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="new Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (options, serviceProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.DbContextOptions&lt;TContext&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <param name="serviceProvider">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPoolSize">
      <MemberSignature Language="C#" Value="public const int DefaultPoolSize;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultPoolSize" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.DefaultPoolSize" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultPoolSize As Integer " />
      <MemberSignature Language="F#" Value="val mutable DefaultPoolSize : int" Usage="Microsoft.EntityFrameworkCore.Internal.DbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;.DefaultPoolSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1024</MemberValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="dbContextPool.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="dbContextPool.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Rent">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.DbContext IDbContextPool.Rent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContext Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Rent() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Microsoft#EntityFrameworkCore#Internal#IDbContextPool#Rent" />
      <MemberSignature Language="VB.NET" Value="Function Rent () As DbContext Implements IDbContextPool.Rent" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Rent : unit -&gt; Microsoft.EntityFrameworkCore.DbContext&#xA;override this.Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Rent : unit -&gt; Microsoft.EntityFrameworkCore.DbContext" Usage="dbContextPool.Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Rent " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Rent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Return">
      <MemberSignature Language="C#" Value="bool IDbContextPool.Return (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Return(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Microsoft#EntityFrameworkCore#Internal#IDbContextPool#Return(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Function Return (context As DbContext) As Boolean Implements IDbContextPool.Return" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Return : Microsoft.EntityFrameworkCore.DbContext -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Return : Microsoft.EntityFrameworkCore.DbContext -&gt; bool" Usage="dbContextPool.Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Return context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Return(Microsoft.EntityFrameworkCore.DbContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rent">
      <MemberSignature Language="C#" Value="public virtual TContext Rent ();" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TContext Rent() cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Rent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Rent () As TContext" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member Rent : unit -&gt; 'Context&#xA;override this.Rent : unit -&gt; 'Context" Usage="dbContextPool.Rent " FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable Rent ();" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable Rent() cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Rent () As IDbContextPoolable" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Rent : unit -&gt; Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable&#xA;override this.Rent : unit -&gt; Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable" Usage="dbContextPool.Rent " FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Rent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">TContext</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public virtual void Return (Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Return(class Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Return(Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Return (context As IDbContextPoolable)" />
      <MemberSignature Language="F#" Value="abstract member Return : Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable -&gt; unit&#xA;override this.Return : Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable -&gt; unit" Usage="dbContextPool.Return context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Return(Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public virtual bool Return (TContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Return(!TContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.Return(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Return (context As TContext) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Return : 'Context -&gt; bool&#xA;override this.Return : 'Context -&gt; bool" Usage="dbContextPool.Return context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="TContext" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask ReturnAsync (Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable context, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask ReturnAsync(class Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable context, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DbContextPool`1.ReturnAsync(Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReturnAsync (context As IDbContextPoolable, Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member ReturnAsync : Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&#xA;override this.ReturnAsync : Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="dbContextPool.ReturnAsync (context, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Internal.IDbContextPool.ReturnAsync(Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
