<Type Name="NonCapturingLazyInitializer" FullName="Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer">
  <TypeSignature Language="C#" Value="public static class NonCapturingLazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit NonCapturingLazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class NonCapturingLazyInitializer" />
  <TypeSignature Language="F#" Value="type NonCapturingLazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="EnsureInitialized&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue EnsureInitialized&lt;TValue&gt; (ref TValue target, TValue value) where TValue : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue EnsureInitialized&lt;class TValue&gt;(!!TValue&amp; target, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``1(``0@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of TValue As Class) (ByRef target As TValue, value As TValue) As TValue" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'Value * 'Value -&gt; 'Value (requires 'Value : null)" Usage="Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="TValue" RefType="ref" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;TParam,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue EnsureInitialized&lt;TParam,TValue&gt; (ref TValue target, TParam param, Action&lt;TParam&gt; valueFactory) where TValue : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue EnsureInitialized&lt;TParam, class TValue&gt;(!!TValue&amp; target, !!TParam param, class System.Action`1&lt;!!TParam&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``2(``1@,``0,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of TParam, TValue) (ByRef target As TValue, param As TParam, valueFactory As Action(Of TParam)) As TValue" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'Value * 'Param * Action&lt;'Param&gt; -&gt; 'Value (requires 'Value : null)" Usage="Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized (target, param, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParam" />
        <TypeParameter Name="TValue">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="TValue" RefType="ref" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="param" Type="TParam" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="valueFactory" Type="System.Action&lt;TParam&gt;" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="TParam">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="param">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;TParam,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue EnsureInitialized&lt;TParam,TValue&gt; (ref TValue target, TParam param, Func&lt;TParam,TValue&gt; valueFactory) where TValue : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue EnsureInitialized&lt;TParam, class TValue&gt;(!!TValue&amp; target, !!TParam param, class System.Func`2&lt;!!TParam, !!TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``2(``1@,``0,System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of TParam, TValue) (ByRef target As TValue, param As TParam, valueFactory As Func(Of TParam, TValue)) As TValue" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'Value * 'Param * Func&lt;'Param, 'Value (requires 'Value : null)&gt; -&gt; 'Value (requires 'Value : null)" Usage="Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized (target, param, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParam" />
        <TypeParameter Name="TValue">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="TValue" RefType="ref" />
        <Parameter Name="param" Type="TParam" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TParam,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TParam">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="param">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;TParam1,TParam2,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue EnsureInitialized&lt;TParam1,TParam2,TValue&gt; (ref TValue target, TParam1 param1, TParam2 param2, Func&lt;TParam1,TParam2,TValue&gt; valueFactory) where TValue : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue EnsureInitialized&lt;TParam1, TParam2, class TValue&gt;(!!TValue&amp; target, !!TParam1 param1, !!TParam2 param2, class System.Func`3&lt;!!TParam1, !!TParam2, !!TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``3(``2@,``0,``1,System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of TParam1, TParam2, TValue) (ByRef target As TValue, param1 As TParam1, param2 As TParam2, valueFactory As Func(Of TParam1, TParam2, TValue)) As TValue" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized : 'Value * 'TParam1 * 'TParam2 * Func&lt;'TParam1, 'TParam2, 'Value (requires 'Value : null)&gt; -&gt; 'Value (requires 'Value : null)" Usage="Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized (target, param1, param2, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TParam1" />
        <TypeParameter Name="TParam2" />
        <TypeParameter Name="TValue">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="TValue" RefType="ref" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="param1" Type="TParam1" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="param2" Type="TParam2" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TParam1,TParam2,TValue&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="TParam1">To be added.</typeparam>
        <typeparam name="TParam2">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="param1">To be added.</param>
        <param name="param2">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
