<Type Name="Multigraph&lt;TVertex,TEdge&gt;" FullName="Microsoft.EntityFrameworkCore.Internal.Multigraph&lt;TVertex,TEdge&gt;">
  <TypeSignature Language="C#" Value="public class Multigraph&lt;TVertex,TEdge&gt; : Microsoft.EntityFrameworkCore.Internal.Graph&lt;TVertex&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Multigraph`2&lt;TVertex, TEdge&gt; extends Microsoft.EntityFrameworkCore.Internal.Graph`1&lt;!TVertex&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.Multigraph`2" />
  <TypeSignature Language="VB.NET" Value="Public Class Multigraph(Of TVertex, TEdge)&#xA;Inherits Graph(Of TVertex)" />
  <TypeSignature Language="F#" Value="type Multigraph&lt;'Vertex, 'Edge&gt; = class&#xA;    inherit Graph&lt;'Vertex&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TVertex" />
    <TypeParameter Name="TEdge" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Internal.Graph&lt;TVertex&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TVertex">TVertex</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TVertex">To be added.</typeparam>
    <typeparam name="TEdge">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Multigraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEdge">
      <MemberSignature Language="C#" Value="public virtual void AddEdge (TVertex from, TVertex to, TEdge edge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEdge(!TVertex from, !TVertex to, !TEdge edge) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdge(`0,`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEdge (from As TVertex, to As TVertex, edge As TEdge)" />
      <MemberSignature Language="F#" Value="abstract member AddEdge : 'Vertex * 'Vertex * 'Edge -&gt; unit&#xA;override this.AddEdge : 'Vertex * 'Vertex * 'Edge -&gt; unit" Usage="multigraph.AddEdge (from, to, edge)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="TVertex" />
        <Parameter Name="to" Type="TVertex" />
        <Parameter Name="edge" Type="TEdge" />
      </Parameters>
      <Docs>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <param name="edge">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEdges">
      <MemberSignature Language="C#" Value="public virtual void AddEdges (TVertex from, TVertex to, System.Collections.Generic.IEnumerable&lt;TEdge&gt; edges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEdges(!TVertex from, !TVertex to, class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt; edges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdges(`0,`0,System.Collections.Generic.IEnumerable{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEdges (from As TVertex, to As TVertex, edges As IEnumerable(Of TEdge))" />
      <MemberSignature Language="F#" Value="abstract member AddEdges : 'Vertex * 'Vertex * seq&lt;'Edge&gt; -&gt; unit&#xA;override this.AddEdges : 'Vertex * 'Vertex * seq&lt;'Edge&gt; -&gt; unit" Usage="multigraph.AddEdges (from, to, edges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="TVertex" />
        <Parameter Name="to" Type="TVertex" />
        <Parameter Name="edges" Type="System.Collections.Generic.IEnumerable&lt;TEdge&gt;" />
      </Parameters>
      <Docs>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <param name="edges">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddVertex">
      <MemberSignature Language="C#" Value="public virtual void AddVertex (TVertex vertex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVertex(!TVertex vertex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertex(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddVertex (vertex As TVertex)" />
      <MemberSignature Language="F#" Value="abstract member AddVertex : 'Vertex -&gt; unit&#xA;override this.AddVertex : 'Vertex -&gt; unit" Usage="multigraph.AddVertex vertex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vertex" Type="TVertex" />
      </Parameters>
      <Docs>
        <param name="vertex">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddVertices">
      <MemberSignature Language="C#" Value="public virtual void AddVertices (System.Collections.Generic.IEnumerable&lt;TVertex&gt; vertices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVertices(class System.Collections.Generic.IEnumerable`1&lt;!TVertex&gt; vertices) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertices(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddVertices (vertices As IEnumerable(Of TVertex))" />
      <MemberSignature Language="F#" Value="abstract member AddVertices : seq&lt;'Vertex&gt; -&gt; unit&#xA;override this.AddVertices : seq&lt;'Vertex&gt; -&gt; unit" Usage="multigraph.AddVertices vertices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vertices" Type="System.Collections.Generic.IEnumerable&lt;TVertex&gt;" />
      </Parameters>
      <Docs>
        <param name="vertices">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchingTopologicalSort">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;TVertex&gt;&gt; BatchingTopologicalSort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.Collections.Generic.List`1&lt;!TVertex&gt;&gt; BatchingTopologicalSort() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BatchingTopologicalSort () As IReadOnlyList(Of List(Of TVertex))" />
      <MemberSignature Language="F#" Value="abstract member BatchingTopologicalSort : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;'Vertex&gt;&gt;&#xA;override this.BatchingTopologicalSort : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;'Vertex&gt;&gt;" Usage="multigraph.BatchingTopologicalSort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;TVertex&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchingTopologicalSort">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;TVertex&gt;&gt; BatchingTopologicalSort (Func&lt;System.Collections.Generic.IEnumerable&lt;Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,string&gt; formatCycle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.Collections.Generic.List`1&lt;!TVertex&gt;&gt; BatchingTopologicalSort(class System.Func`2&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`3&lt;!TVertex, !TVertex, class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt;&gt;&gt;, string&gt; formatCycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BatchingTopologicalSort (formatCycle As Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)) As IReadOnlyList(Of List(Of TVertex))" />
      <MemberSignature Language="F#" Value="abstract member BatchingTopologicalSort : Func&lt;seq&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;'Vertex&gt;&gt;&#xA;override this.BatchingTopologicalSort : Func&lt;seq&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;'Vertex&gt;&gt;" Usage="multigraph.BatchingTopologicalSort formatCycle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;TVertex&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatCycle" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,System.String&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="formatCycle">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchingTopologicalSort">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;TVertex&gt;&gt; BatchingTopologicalSort (Func&lt;System.Collections.Generic.IReadOnlyList&lt;Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,string&gt; formatCycle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.Collections.Generic.List`1&lt;!TVertex&gt;&gt; BatchingTopologicalSort(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class System.Tuple`3&lt;!TVertex, !TVertex, class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt;&gt;&gt;, string&gt; formatCycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort(System.Func{System.Collections.Generic.IReadOnlyList{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BatchingTopologicalSort (formatCycle As Func(Of IReadOnlyList(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)) As IReadOnlyList(Of List(Of TVertex))" />
      <MemberSignature Language="F#" Value="abstract member BatchingTopologicalSort : Func&lt;System.Collections.Generic.IReadOnlyList&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;'Vertex&gt;&gt;&#xA;override this.BatchingTopologicalSort : Func&lt;System.Collections.Generic.IReadOnlyList&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;'Vertex&gt;&gt;" Usage="multigraph.BatchingTopologicalSort formatCycle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.List&lt;TVertex&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatCycle" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,System.String&gt;" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="formatCycle">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Edges">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;TEdge&gt; Edges { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt; Edges" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Edges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Edges As IEnumerable(Of TEdge)" />
      <MemberSignature Language="F#" Value="member this.Edges : seq&lt;'Edge&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.Multigraph&lt;'Vertex, 'Edge&gt;.Edges" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TEdge&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEdges">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;TEdge&gt; GetEdges (TVertex from, TVertex to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt; GetEdges(!TVertex from, !TVertex to) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetEdges(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEdges (from As TVertex, to As TVertex) As IEnumerable(Of TEdge)" />
      <MemberSignature Language="F#" Value="abstract member GetEdges : 'Vertex * 'Vertex -&gt; seq&lt;'Edge&gt;&#xA;override this.GetEdges : 'Vertex * 'Vertex -&gt; seq&lt;'Edge&gt;" Usage="multigraph.GetEdges (from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TEdge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="TVertex" />
        <Parameter Name="to" Type="TVertex" />
      </Parameters>
      <Docs>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIncomingNeighbors">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;TVertex&gt; GetIncomingNeighbors (TVertex to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TVertex&gt; GetIncomingNeighbors(!TVertex to) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetIncomingNeighbors(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetIncomingNeighbors (to As TVertex) As IEnumerable(Of TVertex)" />
      <MemberSignature Language="F#" Value="override this.GetIncomingNeighbors : 'Vertex -&gt; seq&lt;'Vertex&gt;" Usage="multigraph.GetIncomingNeighbors to" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="TVertex" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="to">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIncomingNeighbours">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;TVertex&gt; GetIncomingNeighbours (TVertex to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TVertex&gt; GetIncomingNeighbours(!TVertex to) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetIncomingNeighbours(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetIncomingNeighbours (to As TVertex) As IEnumerable(Of TVertex)" />
      <MemberSignature Language="F#" Value="override this.GetIncomingNeighbours : 'Vertex -&gt; seq&lt;'Vertex&gt;" Usage="multigraph.GetIncomingNeighbours to" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="TVertex" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="to">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutgoingNeighbors">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;TVertex&gt; GetOutgoingNeighbors (TVertex from);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TVertex&gt; GetOutgoingNeighbors(!TVertex from) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetOutgoingNeighbors(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOutgoingNeighbors (from As TVertex) As IEnumerable(Of TVertex)" />
      <MemberSignature Language="F#" Value="override this.GetOutgoingNeighbors : 'Vertex -&gt; seq&lt;'Vertex&gt;" Usage="multigraph.GetOutgoingNeighbors from" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="TVertex" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="from">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutgoingNeighbours">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;TVertex&gt; GetOutgoingNeighbours (TVertex from);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TVertex&gt; GetOutgoingNeighbours(!TVertex from) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetOutgoingNeighbours(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetOutgoingNeighbours (from As TVertex) As IEnumerable(Of TVertex)" />
      <MemberSignature Language="F#" Value="override this.GetOutgoingNeighbours : 'Vertex -&gt; seq&lt;'Vertex&gt;" Usage="multigraph.GetOutgoingNeighbours from" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="TVertex" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="from">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopologicalSort">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;TVertex&gt; TopologicalSort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;!TVertex&gt; TopologicalSort() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TopologicalSort () As IReadOnlyList(Of TVertex)" />
      <MemberSignature Language="F#" Value="abstract member TopologicalSort : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;&#xA;override this.TopologicalSort : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;" Usage="multigraph.TopologicalSort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopologicalSort">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;TVertex&gt; TopologicalSort (Func&lt;System.Collections.Generic.IEnumerable&lt;Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,string&gt; formatCycle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;!TVertex&gt; TopologicalSort(class System.Func`2&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`3&lt;!TVertex, !TVertex, class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt;&gt;&gt;, string&gt; formatCycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TopologicalSort (formatCycle As Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)) As IReadOnlyList(Of TVertex)" />
      <MemberSignature Language="F#" Value="abstract member TopologicalSort : Func&lt;seq&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;&#xA;override this.TopologicalSort : Func&lt;seq&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;" Usage="multigraph.TopologicalSort formatCycle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatCycle" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="formatCycle">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopologicalSort">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;TVertex&gt; TopologicalSort (Func&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;,bool&gt; canBreakEdge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;!TVertex&gt; TopologicalSort(class System.Func`4&lt;!TVertex, !TVertex, class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt;, bool&gt; canBreakEdge) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TopologicalSort (canBreakEdge As Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean)) As IReadOnlyList(Of TVertex)" />
      <MemberSignature Language="F#" Value="abstract member TopologicalSort : Func&lt;'Vertex, 'Vertex, seq&lt;'Edge&gt;, bool&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;&#xA;override this.TopologicalSort : Func&lt;'Vertex, 'Vertex, seq&lt;'Edge&gt;, bool&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;" Usage="multigraph.TopologicalSort canBreakEdge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canBreakEdge" Type="System.Func&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="canBreakEdge">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopologicalSort">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;TVertex&gt; TopologicalSort (Func&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;,bool&gt; canBreakEdge, Func&lt;System.Collections.Generic.IEnumerable&lt;Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,string&gt; formatCycle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;!TVertex&gt; TopologicalSort(class System.Func`4&lt;!TVertex, !TVertex, class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt;, bool&gt; canBreakEdge, class System.Func`2&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`3&lt;!TVertex, !TVertex, class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt;&gt;&gt;, string&gt; formatCycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean},System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TopologicalSort (canBreakEdge As Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean), formatCycle As Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)) As IReadOnlyList(Of TVertex)" />
      <MemberSignature Language="F#" Value="abstract member TopologicalSort : Func&lt;'Vertex, 'Vertex, seq&lt;'Edge&gt;, bool&gt; * Func&lt;seq&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;&#xA;override this.TopologicalSort : Func&lt;'Vertex, 'Vertex, seq&lt;'Edge&gt;, bool&gt; * Func&lt;seq&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;" Usage="multigraph.TopologicalSort (canBreakEdge, formatCycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canBreakEdge" Type="System.Func&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;,System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="formatCycle" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,System.String&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="canBreakEdge">To be added.</param>
        <param name="formatCycle">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopologicalSort">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;TVertex&gt; TopologicalSort (Func&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;,bool&gt; canBreakEdge, Func&lt;System.Collections.Generic.IReadOnlyList&lt;Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,string&gt; formatCycle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;!TVertex&gt; TopologicalSort(class System.Func`4&lt;!TVertex, !TVertex, class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt;, bool&gt; canBreakEdge, class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class System.Tuple`3&lt;!TVertex, !TVertex, class System.Collections.Generic.IEnumerable`1&lt;!TEdge&gt;&gt;&gt;, string&gt; formatCycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean},System.Func{System.Collections.Generic.IReadOnlyList{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TopologicalSort (canBreakEdge As Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean), formatCycle As Func(Of IReadOnlyList(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)) As IReadOnlyList(Of TVertex)" />
      <MemberSignature Language="F#" Value="abstract member TopologicalSort : Func&lt;'Vertex, 'Vertex, seq&lt;'Edge&gt;, bool&gt; * Func&lt;System.Collections.Generic.IReadOnlyList&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;&#xA;override this.TopologicalSort : Func&lt;'Vertex, 'Vertex, seq&lt;'Edge&gt;, bool&gt; * Func&lt;System.Collections.Generic.IReadOnlyList&lt;'Vertex * 'Vertex * seq&lt;'Edge&gt;&gt;, string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'Vertex&gt;" Usage="multigraph.TopologicalSort (canBreakEdge, formatCycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canBreakEdge" Type="System.Func&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;,System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="formatCycle" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Tuple&lt;TVertex,TVertex,System.Collections.Generic.IEnumerable&lt;TEdge&gt;&gt;&gt;,System.String&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="canBreakEdge">To be added.</param>
        <param name="formatCycle">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="protected virtual string ToString (TVertex vertex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string ToString(!TVertex vertex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.ToString(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ToString (vertex As TVertex) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : 'Vertex -&gt; string" Usage="multigraph.ToString vertex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vertex" Type="TVertex" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="vertex">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Vertices">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;TVertex&gt; Vertices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TVertex&gt; Vertices" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Vertices" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Vertices As IEnumerable(Of TVertex)" />
      <MemberSignature Language="F#" Value="member this.Vertices : seq&lt;'Vertex&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.Multigraph&lt;'Vertex, 'Edge&gt;.Vertices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TVertex&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
