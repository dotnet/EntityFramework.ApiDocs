<Type Name="DiagnosticsLogger&lt;TLoggerCategory&gt;" FullName="Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;TLoggerCategory&gt;">
  <TypeSignature Language="C#" Value="public class DiagnosticsLogger&lt;TLoggerCategory&gt; : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt; where TLoggerCategory : LoggerCategory&lt;TLoggerCategory&gt;, new()" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DiagnosticsLogger`1&lt;.ctor (class Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1&lt;!TLoggerCategory&gt;) TLoggerCategory&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;!TLoggerCategory&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1" />
  <TypeSignature Language="VB.NET" Value="Public Class DiagnosticsLogger(Of TLoggerCategory)&#xA;Implements IDiagnosticsLogger(Of TLoggerCategory)" />
  <TypeSignature Language="F#" Value="type DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; = class&#xA;    interface IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DiagnosticsLogger`1&lt;.ctor (class Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1&lt;!TLoggerCategory&gt;) TLoggerCategory&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;!TLoggerCategory&gt;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; = class&#xA;    interface IDiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;&#xA;    interface IDiagnosticsLogger" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TLoggerCategory">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;TLoggerCategory&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;TLoggerCategory&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TLoggerCategory">To be added.</typeparam>
    <summary>
      <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DiagnosticsLogger (Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions, System.Diagnostics.DiagnosticSource diagnosticSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, class Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions, class System.Diagnostics.DiagnosticSource diagnosticSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions,System.Diagnostics.DiagnosticSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (loggerFactory As ILoggerFactory, loggingOptions As ILoggingOptions, diagnosticSource As DiagnosticSource)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; : Microsoft.Extensions.Logging.ILoggerFactory * Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions * System.Diagnostics.DiagnosticSource -&gt; Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;" Usage="new Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; (loggerFactory, loggingOptions, diagnosticSource)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="loggingOptions" Type="Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="loggerFactory">To be added.</param>
        <param name="loggingOptions">To be added.</param>
        <param name="diagnosticSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DiagnosticsLogger (Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions, System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions loggingDefinitions, Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors interceptors = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, class Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions, class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions loggingDefinitions, class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors interceptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions,System.Diagnostics.DiagnosticSource,Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (loggerFactory As ILoggerFactory, loggingOptions As ILoggingOptions, diagnosticSource As DiagnosticSource, loggingDefinitions As LoggingDefinitions, Optional interceptors As IInterceptors = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; : Microsoft.Extensions.Logging.ILoggerFactory * Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions * System.Diagnostics.DiagnosticSource * Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions * Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors -&gt; Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;" Usage="new Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; (loggerFactory, loggingOptions, diagnosticSource, loggingDefinitions, interceptors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="loggingOptions" Type="Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="loggingDefinitions" Type="Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="interceptors" Type="Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="loggerFactory">To be added.</param>
        <param name="loggingOptions">To be added.</param>
        <param name="diagnosticSource">To be added.</param>
        <param name="loggingDefinitions">To be added.</param>
        <param name="interceptors">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DiagnosticsLogger (Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions, System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions loggingDefinitions, Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger contextLogger, Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors interceptors = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, class Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions, class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions loggingDefinitions, class Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger contextLogger, class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors interceptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions,System.Diagnostics.DiagnosticSource,Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions,Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger,Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (loggerFactory As ILoggerFactory, loggingOptions As ILoggingOptions, diagnosticSource As DiagnosticSource, loggingDefinitions As LoggingDefinitions, contextLogger As IDbContextLogger, Optional interceptors As IInterceptors = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; : Microsoft.Extensions.Logging.ILoggerFactory * Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions * System.Diagnostics.DiagnosticSource * Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions * Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger * Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors -&gt; Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;" Usage="new Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt; (loggerFactory, loggingOptions, diagnosticSource, loggingDefinitions, contextLogger, interceptors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="loggingOptions" Type="Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" Index="2" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="loggingDefinitions" Type="Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions" Index="3" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="contextLogger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" Index="4" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="interceptors" Type="Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors" Index="5" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="loggerFactory">To be added.</param>
        <param name="loggingOptions">To be added.</param>
        <param name="diagnosticSource">To be added.</param>
        <param name="loggingDefinitions">To be added.</param>
        <param name="contextLogger">To be added.</param>
        <param name="interceptors">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbContextLogger">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger DbContextLogger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger DbContextLogger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.DbContextLogger" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DbContextLogger As IDbContextLogger" />
      <MemberSignature Language="F#" Value="member this.DbContextLogger : Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" Usage="Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;.DbContextLogger" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DbContextLogger</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Definitions">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions Definitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions Definitions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.Definitions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Definitions As LoggingDefinitions" />
      <MemberSignature Language="F#" Value="member this.Definitions : Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions" Usage="Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;.Definitions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Definitions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiagnosticSource">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.DiagnosticSource DiagnosticSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.DiagnosticSource DiagnosticSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.DiagnosticSource" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DiagnosticSource As DiagnosticSource" />
      <MemberSignature Language="F#" Value="member this.DiagnosticSource : System.Diagnostics.DiagnosticSource" Usage="Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;.DiagnosticSource" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.DiagnosticSource</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.DiagnosticSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DiagnosticSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogBehavior">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.WarningBehavior GetLogBehavior (Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.WarningBehavior GetLogBehavior(valuetype Microsoft.Extensions.Logging.EventId eventId, valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.GetLogBehavior(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogBehavior (eventId As EventId, logLevel As LogLevel) As WarningBehavior" />
      <MemberSignature Language="F#" Value="abstract member GetLogBehavior : Microsoft.Extensions.Logging.EventId * Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.EntityFrameworkCore.WarningBehavior&#xA;override this.GetLogBehavior : Microsoft.Extensions.Logging.EventId * Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.EntityFrameworkCore.WarningBehavior" Usage="diagnosticsLogger.GetLogBehavior (eventId, logLevel)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.GetLogBehavior(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.WarningBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="eventId">To be added.</param>
        <param name="logLevel">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interceptors">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors Interceptors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors Interceptors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.Interceptors" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Interceptors As IInterceptors" />
      <MemberSignature Language="F#" Value="member this.Interceptors : Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors" Usage="Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;.Interceptors" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1">P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.Interceptors</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-5.0">P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Interceptors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logger">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Extensions.Logging.ILogger Logger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger Logger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.Logger" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Logger As ILogger" />
      <MemberSignature Language="F#" Value="member this.Logger : Microsoft.Extensions.Logging.ILogger" Usage="Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;.Logger" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.Logger</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Logger</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.Options" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Options As ILoggingOptions" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions" Usage="Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger&lt;'LoggerCategory (requires 'LoggerCategory :&gt; Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory&lt;'LoggerCategory&gt; and 'LoggerCategory : (new : unit -&gt; 'LoggerCategory))&gt;.Options" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.Options</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">P:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.Options</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldLogSensitiveData">
      <MemberSignature Language="C#" Value="public virtual bool ShouldLogSensitiveData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldLogSensitiveData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1.ShouldLogSensitiveData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldLogSensitiveData () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldLogSensitiveData : unit -&gt; bool&#xA;override this.ShouldLogSensitiveData : unit -&gt; bool" Usage="diagnosticsLogger.ShouldLogSensitiveData " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1.ShouldLogSensitiveData</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">M:Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger.ShouldLogSensitiveData</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
