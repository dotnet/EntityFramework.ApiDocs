<Type Name="CosmosShapedQueryExpressionExtensions" FullName="Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions">
  <TypeSignature Language="C#" Value="public static class CosmosShapedQueryExpressionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CosmosShapedQueryExpressionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module CosmosShapedQueryExpressionExtensions" />
  <TypeSignature Language="F#" Value="type CosmosShapedQueryExpressionExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryConvertToArray">
      <MemberSignature Language="C#" Value="public static bool TryConvertToArray (this Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource, out System.Linq.Expressions.Expression? array, bool ignoreOrderings = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryConvertToArray(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource, [out] class System.Linq.Expressions.Expression&amp; array, bool ignoreOrderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryConvertToArray(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource,System.Linq.Expressions.Expression@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryConvertToArray (source As ShapedQueryExpression, typeMappingSource As ITypeMappingSource, ByRef array As Expression, Optional ignoreOrderings As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryConvertToArray : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource * Expression * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryConvertToArray (source, typeMappingSource, array, ignoreOrderings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" RefType="this" />
        <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="ignoreOrderings" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="typeMappingSource">To be added.</param>
        <param name="array">To be added.</param>
        <param name="ignoreOrderings">To be added.</param>
        <summary>
                If the given <paramref name="source" /> represents wraps an array-returning expression without any additional clauses
                (e.g. filter, ordering...), returns that expression. Otherwise, converts it to an ARRAY() subquery that returns the results
                of the subquery as an array.
            </summary>
        <returns>To be added.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvertToArray">
      <MemberSignature Language="C#" Value="public static bool TryConvertToArray (this Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource, out System.Linq.Expressions.Expression? array, out System.Linq.Expressions.Expression? projection, bool ignoreOrderings = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryConvertToArray(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource typeMappingSource, [out] class System.Linq.Expressions.Expression&amp; array, [out] class System.Linq.Expressions.Expression&amp; projection, bool ignoreOrderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryConvertToArray(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryConvertToArray (source As ShapedQueryExpression, typeMappingSource As ITypeMappingSource, ByRef array As Expression, ByRef projection As Expression, Optional ignoreOrderings As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryConvertToArray : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource * Expression * Expression * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryConvertToArray (source, typeMappingSource, array, projection, ignoreOrderings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" RefType="this" />
        <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="projection" Type="System.Linq.Expressions.Expression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="ignoreOrderings" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="typeMappingSource">To be added.</param>
        <param name="array">To be added.</param>
        <param name="projection">To be added.</param>
        <param name="ignoreOrderings">To be added.</param>
        <summary>
                If the given <paramref name="source" /> represents wraps an array-returning expression without any additional clauses
                (e.g. filter, ordering...), returns that expression. Otherwise, converts it to an ARRAY() subquery that returns the results
                of the subquery as an array.
            </summary>
        <returns>To be added.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryExtractArray">
      <MemberSignature Language="C#" Value="public static bool TryExtractArray (this Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, out System.Linq.Expressions.Expression? array, bool ignoreOrderings = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryExtractArray(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, [out] class System.Linq.Expressions.Expression&amp; array, bool ignoreOrderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryExtractArray(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryExtractArray (source As ShapedQueryExpression, ByRef array As Expression, Optional ignoreOrderings As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryExtractArray : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Expression * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryExtractArray (source, array, ignoreOrderings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" RefType="this" />
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="ignoreOrderings" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="array">To be added.</param>
        <param name="ignoreOrderings">To be added.</param>
        <summary>
                If the given <paramref name="source" /> represents wraps an array-returning expression without any additional clauses
                (e.g. filter, ordering...), returns that expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryExtractArray">
      <MemberSignature Language="C#" Value="public static bool TryExtractArray (this Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, out System.Linq.Expressions.Expression? array, out System.Linq.Expressions.Expression? projection, bool ignoreOrderings = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryExtractArray(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, [out] class System.Linq.Expressions.Expression&amp; array, [out] class System.Linq.Expressions.Expression&amp; projection, bool ignoreOrderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryExtractArray(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryExtractArray (source As ShapedQueryExpression, ByRef array As Expression, ByRef projection As Expression, Optional ignoreOrderings As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryExtractArray : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Expression * Expression * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryExtractArray (source, array, projection, ignoreOrderings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" RefType="this" />
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="projection" Type="System.Linq.Expressions.Expression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="ignoreOrderings" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="array">To be added.</param>
        <param name="projection">To be added.</param>
        <param name="ignoreOrderings">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryExtractArray">
      <MemberSignature Language="C#" Value="public static bool TryExtractArray (this Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, out System.Linq.Expressions.Expression? array, out System.Linq.Expressions.Expression? projection, out Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression? projectedStructuralTypeShaper, out System.Linq.Expressions.Expression? boundMember, bool ignoreOrderings = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryExtractArray(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, [out] class System.Linq.Expressions.Expression&amp; array, [out] class System.Linq.Expressions.Expression&amp; projection, [out] class Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression&amp; projectedStructuralTypeShaper, [out] class System.Linq.Expressions.Expression&amp; boundMember, bool ignoreOrderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryExtractArray(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@,Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression@,System.Linq.Expressions.Expression@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryExtractArray (source As ShapedQueryExpression, ByRef array As Expression, ByRef projection As Expression, ByRef projectedStructuralTypeShaper As StructuralTypeShaperExpression, ByRef boundMember As Expression, Optional ignoreOrderings As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryExtractArray : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Expression * Expression * StructuralTypeShaperExpression * Expression * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.CosmosShapedQueryExpressionExtensions.TryExtractArray (source, array, projection, projectedStructuralTypeShaper, boundMember, ignoreOrderings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" RefType="this" />
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="projection" Type="System.Linq.Expressions.Expression" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="projectedStructuralTypeShaper" Type="Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression" RefType="out" />
        <Parameter Name="boundMember" Type="System.Linq.Expressions.Expression" RefType="out" />
        <Parameter Name="ignoreOrderings" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="array">To be added.</param>
        <param name="projection">To be added.</param>
        <param name="projectedStructuralTypeShaper">To be added.</param>
        <param name="boundMember">To be added.</param>
        <param name="ignoreOrderings">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
