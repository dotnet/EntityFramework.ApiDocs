<Type Name="ExpressionExtensions" FullName="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions">
  <TypeSignature Language="C#" Value="public static class ExpressionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExpressionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ExpressionExtensions" />
  <TypeSignature Language="F#" Value="type ExpressionExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildPredicate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression BuildPredicate (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; keyProperties, Microsoft.EntityFrameworkCore.Storage.ValueBuffer keyValues, System.Linq.Expressions.ParameterExpression entityParameter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression BuildPredicate(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; keyProperties, valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer keyValues, class System.Linq.Expressions.ParameterExpression entityParameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.BuildPredicate(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Linq.Expressions.ParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildPredicate (keyProperties As IReadOnlyList(Of IProperty), keyValues As ValueBuffer, entityParameter As ParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="static member BuildPredicate : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; * Microsoft.EntityFrameworkCore.Storage.ValueBuffer * System.Linq.Expressions.ParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.BuildPredicate (keyProperties, keyValues, entityParameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="keyValues" Type="Microsoft.EntityFrameworkCore.Storage.ValueBuffer" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="entityParameter" Type="System.Linq.Expressions.ParameterExpression" Index="2" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="keyProperties">To be added.</param>
        <param name="keyValues">To be added.</param>
        <param name="entityParameter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildPredicate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression BuildPredicate (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; keyProperties, Microsoft.EntityFrameworkCore.Storage.ValueBuffer keyValues, System.Linq.Expressions.ParameterExpression entityParameter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression BuildPredicate(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; keyProperties, valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer keyValues, class System.Linq.Expressions.ParameterExpression entityParameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.BuildPredicate(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty},Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Linq.Expressions.ParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildPredicate (keyProperties As IReadOnlyList(Of IReadOnlyProperty), keyValues As ValueBuffer, entityParameter As ParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="static member BuildPredicate : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; * Microsoft.EntityFrameworkCore.Storage.ValueBuffer * System.Linq.Expressions.ParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.BuildPredicate (keyProperties, keyValues, entityParameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="keyValues" Type="Microsoft.EntityFrameworkCore.Storage.ValueBuffer" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entityParameter" Type="System.Linq.Expressions.ParameterExpression" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keyProperties">To be added.</param>
        <param name="keyValues">To be added.</param>
        <param name="entityParameter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAssignExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression CreateAssignExpression (this System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression CreateAssignExpression(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateAssignExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateAssignExpression (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="F#" Value="static member CreateAssignExpression : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateAssignExpression (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyAccessExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateKeyAccessExpression (this System.Linq.Expressions.Expression target, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateKeyAccessExpression(class System.Linq.Expressions.Expression target, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateKeyAccessExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateKeyAccessExpression (target As Expression, properties As IReadOnlyList(Of IProperty)) As Expression" />
      <MemberSignature Language="F#" Value="static member CreateKeyAccessExpression : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.CreateKeyAccessExpression (target, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="properties">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDefaultValueConstantExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression GenerateDefaultValueConstantExpression (this Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression GenerateDefaultValueConstantExpression(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GenerateDefaultValueConstantExpression(System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GenerateDefaultValueConstantExpression (type As Type) As ConstantExpression" />
      <MemberSignature Language="F#" Value="static member GenerateDefaultValueConstantExpression : Type -&gt; System.Linq.Expressions.ConstantExpression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GenerateDefaultValueConstantExpression type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" RefType="this" Index="0" FrameworkAlternate="efcore-2.2;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComplexPropertyAccess">
      <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo[] GetComplexPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo[] GetComplexPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComplexPropertyAccess (propertyAccessExpression As LambdaExpression) As PropertyInfo()" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="F#" Value="static member GetComplexPropertyAccess : System.Linq.Expressions.LambdaExpression -&gt; System.Reflection.PropertyInfo[]" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess propertyAccessExpression" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; GetComplexPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" FrameworkAlternate="efcore-1.1;efcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; GetComplexPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" FrameworkAlternate="efcore-1.1;efcore-2.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComplexPropertyAccess (propertyAccessExpression As LambdaExpression) As IReadOnlyList(Of PropertyInfo)" FrameworkAlternate="efcore-1.1;efcore-2.0" />
      <MemberSignature Language="F#" Value="static member GetComplexPropertyAccess : System.Linq.Expressions.LambdaExpression -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess propertyAccessExpression" FrameworkAlternate="efcore-1.1;efcore-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0">System.Reflection.PropertyInfo[]</ReturnType>
        <ReturnType FrameworkAlternate="efcore-1.1;efcore-2.0">System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComplexPropertyAccess">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; GetComplexPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression, string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; GetComplexPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression, string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComplexPropertyAccess (propertyAccessExpression As LambdaExpression, methodName As String) As IReadOnlyList(Of PropertyInfo)" />
      <MemberSignature Language="F#" Value="static member GetComplexPropertyAccess : System.Linq.Expressions.LambdaExpression * string -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess (propertyAccessExpression, methodName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="methodName" Type="System.String" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyAccessExpression">To be added.</param>
        <param name="methodName">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLambdaOrNull">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression GetLambdaOrNull (this System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression GetLambdaOrNull(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetLambdaOrNull(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetLambdaOrNull (expression As Expression) As LambdaExpression" />
      <MemberSignature Language="F#" Value="static member GetLambdaOrNull : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetLambdaOrNull expression" />
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression? GetLambdaOrNull (this System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccess">
      <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo GetPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo GetPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccess (propertyAccessExpression As LambdaExpression) As PropertyInfo" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccess : System.Linq.Expressions.LambdaExpression -&gt; System.Reflection.PropertyInfo" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess propertyAccessExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyAccessExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccessList">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; GetPropertyAccessList (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; GetPropertyAccessList(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessList (propertyAccessExpression As LambdaExpression) As IReadOnlyList(Of PropertyInfo)" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessList : System.Linq.Expressions.LambdaExpression -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList propertyAccessExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyAccessExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRootExpression&lt;TExpression&gt;">
      <MemberSignature Language="C#" Value="public static TExpression GetRootExpression&lt;TExpression&gt; (this System.Linq.Expressions.Expression expression) where TExpression : System.Linq.Expressions.Expression;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TExpression GetRootExpression&lt;(class System.Linq.Expressions.Expression) TExpression&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRootExpression(Of TExpression As Expression) (expression As Expression) As TExpression" />
      <MemberSignature Language="F#" Value="static member GetRootExpression : System.Linq.Expressions.Expression -&gt; 'Expression (requires 'Expression :&gt; System.Linq.Expressions.Expression)" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TExpression</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExpression">
          <Constraints>
            <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TExpression">To be added.</typeparam>
        <param name="expression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsComparisonOperation">
      <MemberSignature Language="C#" Value="public static bool IsComparisonOperation (this System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsComparisonOperation(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsComparisonOperation (expression As Expression) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsComparisonOperation : System.Linq.Expressions.Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEntityQueryable">
      <MemberSignature Language="C#" Value="public static bool IsEntityQueryable (this System.Linq.Expressions.ConstantExpression constantExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntityQueryable(class System.Linq.Expressions.ConstantExpression constantExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsEntityQueryable(System.Linq.Expressions.ConstantExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsEntityQueryable (constantExpression As ConstantExpression) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsEntityQueryable : System.Linq.Expressions.ConstantExpression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsEntityQueryable constantExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constantExpression" Type="System.Linq.Expressions.ConstantExpression" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="constantExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogicalNot">
      <MemberSignature Language="C#" Value="public static bool IsLogicalNot (this System.Linq.Expressions.UnaryExpression sqlUnaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLogicalNot(class System.Linq.Expressions.UnaryExpression sqlUnaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalNot(System.Linq.Expressions.UnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsLogicalNot (sqlUnaryExpression As UnaryExpression) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsLogicalNot : System.Linq.Expressions.UnaryExpression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalNot sqlUnaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlUnaryExpression" Type="System.Linq.Expressions.UnaryExpression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sqlUnaryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogicalOperation">
      <MemberSignature Language="C#" Value="public static bool IsLogicalOperation (this System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLogicalOperation(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsLogicalOperation (expression As Expression) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsLogicalOperation : System.Linq.Expressions.Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullConstantExpression">
      <MemberSignature Language="C#" Value="public static bool IsNullConstantExpression (this System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullConstantExpression(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullConstantExpression(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsNullConstantExpression (expression As Expression) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNullConstantExpression : System.Linq.Expressions.Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullConstantExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullPropagationCandidate">
      <MemberSignature Language="C#" Value="public static bool IsNullPropagationCandidate (this System.Linq.Expressions.ConditionalExpression conditionalExpression, out System.Linq.Expressions.Expression testExpression, out System.Linq.Expressions.Expression resultExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullPropagationCandidate(class System.Linq.Expressions.ConditionalExpression conditionalExpression, [out] class System.Linq.Expressions.Expression&amp; testExpression, [out] class System.Linq.Expressions.Expression&amp; resultExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullPropagationCandidate(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsNullPropagationCandidate (conditionalExpression As ConditionalExpression, ByRef testExpression As Expression, ByRef resultExpression As Expression) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNullPropagationCandidate : System.Linq.Expressions.ConditionalExpression * Expression * Expression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsNullPropagationCandidate (conditionalExpression, testExpression, resultExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditionalExpression" Type="System.Linq.Expressions.ConditionalExpression" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="testExpression" Type="System.Linq.Expressions.Expression" RefType="out" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="resultExpression" Type="System.Linq.Expressions.Expression" RefType="out" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="conditionalExpression">To be added.</param>
        <param name="testExpression">To be added.</param>
        <param name="resultExpression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeHasDefaultValue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression MakeHasDefaultValue (this System.Linq.Expressions.Expression currentValueExpression, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression MakeHasDefaultValue(class System.Linq.Expressions.Expression currentValueExpression, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeHasDefaultValue(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MakeHasDefaultValue (currentValueExpression As Expression, propertyBase As IPropertyBase) As Expression" />
      <MemberSignature Language="F#" Value="static member MakeHasDefaultValue : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeHasDefaultValue (currentValueExpression, propertyBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentValueExpression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="currentValueExpression">To be added.</param>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeHasDefaultValue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression MakeHasDefaultValue (this System.Linq.Expressions.Expression currentValueExpression, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase? propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression MakeHasDefaultValue(class System.Linq.Expressions.Expression currentValueExpression, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeHasDefaultValue(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MakeHasDefaultValue (currentValueExpression As Expression, propertyBase As IReadOnlyPropertyBase) As Expression" />
      <MemberSignature Language="F#" Value="static member MakeHasDefaultValue : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeHasDefaultValue (currentValueExpression, propertyBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentValueExpression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="currentValueExpression">To be added.</param>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeHasSentinel">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression MakeHasSentinel (this System.Linq.Expressions.Expression currentValueExpression, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase? propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression MakeHasSentinel(class System.Linq.Expressions.Expression currentValueExpression, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeHasSentinel(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MakeHasSentinel (currentValueExpression As Expression, propertyBase As IReadOnlyPropertyBase) As Expression" />
      <MemberSignature Language="F#" Value="static member MakeHasSentinel : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeHasSentinel (currentValueExpression, propertyBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentValueExpression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="currentValueExpression">To be added.</param>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (this System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MakeMemberAccess (expression As Expression, member As MemberInfo) As MemberExpression" />
      <MemberSignature Language="F#" Value="static member MakeMemberAccess : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MakeMemberAccess (expression, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="member">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchMemberAccessList&lt;TMemberInfo&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;TMemberInfo&gt; MatchMemberAccessList&lt;TMemberInfo&gt; (this System.Linq.Expressions.LambdaExpression lambdaExpression, Func&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,TMemberInfo&gt; memberMatcher) where TMemberInfo : System.Reflection.MemberInfo;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;!!TMemberInfo&gt; MatchMemberAccessList&lt;(class System.Reflection.MemberInfo) TMemberInfo&gt;(class System.Linq.Expressions.LambdaExpression lambdaExpression, class System.Func`3&lt;class System.Linq.Expressions.Expression, class System.Linq.Expressions.Expression, !!TMemberInfo&gt; memberMatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchMemberAccessList``1(System.Linq.Expressions.LambdaExpression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MatchMemberAccessList(Of TMemberInfo As MemberInfo) (lambdaExpression As LambdaExpression, memberMatcher As Func(Of Expression, Expression, TMemberInfo)) As IReadOnlyList(Of TMemberInfo)" />
      <MemberSignature Language="F#" Value="static member MatchMemberAccessList : System.Linq.Expressions.LambdaExpression * Func&lt;System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, 'MemberInfo (requires 'MemberInfo :&gt; System.Reflection.MemberInfo)&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'MemberInfo (requires 'MemberInfo :&gt; System.Reflection.MemberInfo)&gt; (requires 'MemberInfo :&gt; System.Reflection.MemberInfo)" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchMemberAccessList (lambdaExpression, memberMatcher)" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;TMemberInfo&gt;? MatchMemberAccessList&lt;TMemberInfo&gt; (this System.Linq.Expressions.LambdaExpression lambdaExpression, Func&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,TMemberInfo?&gt; memberMatcher) where TMemberInfo : System.Reflection.MemberInfo;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;TMemberInfo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TMemberInfo">
          <Constraints>
            <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambdaExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="memberMatcher" Type="System.Func&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,TMemberInfo&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TMemberInfo">To be added.</typeparam>
        <param name="lambdaExpression">To be added.</param>
        <param name="memberMatcher">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchPropertyAccessList">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; MatchPropertyAccessList (this System.Linq.Expressions.LambdaExpression lambdaExpression, Func&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.PropertyInfo&gt; propertyMatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; MatchPropertyAccessList(class System.Linq.Expressions.LambdaExpression lambdaExpression, class System.Func`3&lt;class System.Linq.Expressions.Expression, class System.Linq.Expressions.Expression, class System.Reflection.PropertyInfo&gt; propertyMatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchPropertyAccessList(System.Linq.Expressions.LambdaExpression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.PropertyInfo})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MatchPropertyAccessList (lambdaExpression As LambdaExpression, propertyMatcher As Func(Of Expression, Expression, PropertyInfo)) As IReadOnlyList(Of PropertyInfo)" />
      <MemberSignature Language="F#" Value="static member MatchPropertyAccessList : System.Linq.Expressions.LambdaExpression * Func&lt;System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.PropertyInfo&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchPropertyAccessList (lambdaExpression, propertyMatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambdaExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="propertyMatcher" Type="System.Func&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.PropertyInfo&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="lambdaExpression">To be added.</param>
        <param name="propertyMatcher">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchSimpleMemberAccess&lt;TMemberInfo&gt;">
      <MemberSignature Language="C#" Value="public static TMemberInfo MatchSimpleMemberAccess&lt;TMemberInfo&gt; (this System.Linq.Expressions.Expression parameterExpression, System.Linq.Expressions.Expression memberAccessExpression) where TMemberInfo : System.Reflection.MemberInfo;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TMemberInfo MatchSimpleMemberAccess&lt;(class System.Reflection.MemberInfo) TMemberInfo&gt;(class System.Linq.Expressions.Expression parameterExpression, class System.Linq.Expressions.Expression memberAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchSimpleMemberAccess``1(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MatchSimpleMemberAccess(Of TMemberInfo As MemberInfo) (parameterExpression As Expression, memberAccessExpression As Expression) As TMemberInfo" />
      <MemberSignature Language="F#" Value="static member MatchSimpleMemberAccess : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; 'MemberInfo (requires 'MemberInfo :&gt; System.Reflection.MemberInfo)" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchSimpleMemberAccess (parameterExpression, memberAccessExpression)" />
      <MemberSignature Language="C#" Value="public static TMemberInfo? MatchSimpleMemberAccess&lt;TMemberInfo&gt; (this System.Linq.Expressions.Expression parameterExpression, System.Linq.Expressions.Expression memberAccessExpression) where TMemberInfo : System.Reflection.MemberInfo;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TMemberInfo</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TMemberInfo">
          <Constraints>
            <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="parameterExpression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="memberAccessExpression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TMemberInfo">To be added.</typeparam>
        <param name="parameterExpression">To be added.</param>
        <param name="memberAccessExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchSimplePropertyAccess">
      <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo MatchSimplePropertyAccess (this System.Linq.Expressions.Expression parameterExpression, System.Linq.Expressions.Expression propertyAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo MatchSimplePropertyAccess(class System.Linq.Expressions.Expression parameterExpression, class System.Linq.Expressions.Expression propertyAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchSimplePropertyAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MatchSimplePropertyAccess (parameterExpression As Expression, propertyAccessExpression As Expression) As PropertyInfo" />
      <MemberSignature Language="F#" Value="static member MatchSimplePropertyAccess : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Reflection.PropertyInfo" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.MatchSimplePropertyAccess (parameterExpression, propertyAccessExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterExpression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="parameterExpression">To be added.</param>
        <param name="propertyAccessExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveConvert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression RemoveConvert (this System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression RemoveConvert(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveConvert (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="static member RemoveConvert : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNullConditional">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression RemoveNullConditional (this System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression RemoveNullConditional(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveNullConditional(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveNullConditional (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="static member RemoveNullConditional : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveNullConditional expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression RemoveTypeAs (this System.Linq.Expressions.Expression expression);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression RemoveTypeAs(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveTypeAs(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveTypeAs (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="static member RemoveTypeAs : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveTypeAs expression" />
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression? RemoveTypeAs (this System.Linq.Expressions.Expression? expression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetComplexPropertyAccess">
      <MemberSignature Language="C#" Value="public static bool TryGetComplexPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression, out System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; propertyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetComplexPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression, [out] class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt;&amp; propertyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.TryGetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression,System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo}@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetComplexPropertyAccess (propertyAccessExpression As LambdaExpression, ByRef propertyPath As IReadOnlyList(Of PropertyInfo)) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetComplexPropertyAccess : System.Linq.Expressions.LambdaExpression * IReadOnlyList -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.TryGetComplexPropertyAccess (propertyAccessExpression, propertyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="propertyPath" Type="System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" RefType="out" Index="1" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyAccessExpression">To be added.</param>
        <param name="propertyPath">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetReferencedQuerySource">
      <MemberSignature Language="C#" Value="public static Remotion.Linq.Clauses.IQuerySource TryGetReferencedQuerySource (this System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Remotion.Linq.Clauses.IQuerySource TryGetReferencedQuerySource(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.TryGetReferencedQuerySource(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetReferencedQuerySource (expression As Expression) As IQuerySource" />
      <MemberSignature Language="F#" Value="static member TryGetReferencedQuerySource : System.Linq.Expressions.Expression -&gt; Remotion.Linq.Clauses.IQuerySource" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.TryGetReferencedQuerySource expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Remotion.Linq.Clauses.IQuerySource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnwrapLambdaFromQuote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression UnwrapLambdaFromQuote (this System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression UnwrapLambdaFromQuote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.UnwrapLambdaFromQuote(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UnwrapLambdaFromQuote (expression As Expression) As LambdaExpression" />
      <MemberSignature Language="F#" Value="static member UnwrapLambdaFromQuote : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.UnwrapLambdaFromQuote expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
