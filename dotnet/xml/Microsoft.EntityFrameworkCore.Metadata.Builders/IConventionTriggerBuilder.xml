<Type Name="IConventionTriggerBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder">
  <TypeSignature Language="C#" Value="public interface IConventionTriggerBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConventionTriggerBuilder implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" FrameworkAlternate="efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConventionTriggerBuilder&#xA;Implements IConventionAnnotatableBuilder" />
  <TypeSignature Language="F#" Value="type IConventionTriggerBuilder = interface&#xA;    interface IConventionAnnotatableBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IConventionTriggerBuilder implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Provides an API point for provider-specific extensions for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger" />.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder? HasAnnotation (string name, object? value, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder HasAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder.HasAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasAnnotation (name As String, value As Object, Optional fromDataAnnotation As Boolean = false) As IConventionTriggerBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" Usage="iConventionTriggerBuilder.HasAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the annotation to be set.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the annotation stored under the given name. Overwrites the existing annotation if an
                annotation with the specified name already exists with same or lower <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />.
            </summary>
        <returns>
                An <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" /> to continue configuration if the annotation was set, <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoAnnotation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder? HasNoAnnotation (string name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder HasNoAnnotation(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder.HasNoAnnotation(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasNoAnnotation (name As String, Optional fromDataAnnotation As Boolean = false) As IConventionTriggerBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" Usage="iConventionTriggerBuilder.HasNoAnnotation (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the annotation to remove.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Removes the annotation with the given name from this object.
            </summary>
        <returns>
                An <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" /> to continue configuration if the annotation was set, <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNonNullAnnotation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder? HasNonNullAnnotation (string name, object? value, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder HasNonNullAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder.HasNonNullAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasNonNullAnnotation (name As String, value As Object, Optional fromDataAnnotation As Boolean = false) As IConventionTriggerBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" Usage="iConventionTriggerBuilder.HasNonNullAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the annotation to be set.</param>
        <param name="value">The value to be stored in the annotation. <see langword="null" /> to remove the annotations.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the annotation stored under the given name. Overwrites the existing annotation if an
                annotation with the specified name already exists with same or lower <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />.
                Removes the annotation if <see langword="null" /> value is specified.
            </summary>
        <returns>
                An <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" /> to continue configuration if the annotation was set or removed,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Metadata As IConventionTrigger" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The trigger being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
