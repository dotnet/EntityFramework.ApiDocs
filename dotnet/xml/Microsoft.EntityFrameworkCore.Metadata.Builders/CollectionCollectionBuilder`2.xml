<Type Name="CollectionCollectionBuilder&lt;TLeftEntity,TRightEntity&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder&lt;TLeftEntity,TRightEntity&gt;">
  <TypeSignature Language="C#" Value="public class CollectionCollectionBuilder&lt;TLeftEntity,TRightEntity&gt; : Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder where TLeftEntity : class where TRightEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CollectionCollectionBuilder`2&lt;class TLeftEntity, class TRightEntity&gt; extends Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionCollectionBuilder(Of TLeftEntity, TRightEntity)&#xA;Inherits CollectionCollectionBuilder" />
  <TypeSignature Language="F#" Value="type CollectionCollectionBuilder&lt;'LeftEntity, 'RightEntity (requires 'LeftEntity : null and 'RightEntity : null)&gt; = class&#xA;    inherit CollectionCollectionBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TLeftEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
    <TypeParameter Name="TRightEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TLeftEntity">One of the entity types in this relationship.</typeparam>
    <typeparam name="TRightEntity">One of the entity types in this relationship.</typeparam>
    <summary>
                Provides a simple API for configuring a many-to-many relationship.
            </summary>
    <remarks>
      <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and
                    examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CollectionCollectionBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType leftEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType rightEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation leftNavigation, Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation rightNavigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType leftEntityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType rightEntityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation leftNavigation, class Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation rightNavigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation,Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (leftEntityType As IMutableEntityType, rightEntityType As IMutableEntityType, leftNavigation As IMutableSkipNavigation, rightNavigation As IMutableSkipNavigation)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder&lt;'LeftEntity, 'RightEntity (requires 'LeftEntity : null and 'RightEntity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation * Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder&lt;'LeftEntity, 'RightEntity (requires 'LeftEntity : null and 'RightEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder&lt;'LeftEntity, 'RightEntity (requires 'LeftEntity : null and 'RightEntity : null)&gt; (leftEntityType, rightEntityType, leftNavigation, rightNavigation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="leftEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        <Parameter Name="rightEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        <Parameter Name="leftNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation" />
        <Parameter Name="rightNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation" />
      </Parameters>
      <Docs>
        <param name="leftEntityType">To be added.</param>
        <param name="rightEntityType">To be added.</param>
        <param name="leftNavigation">To be added.</param>
        <param name="rightNavigation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity (Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity (configureJoinEntityType As Action(Of EntityTypeBuilder)) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt;" Usage="collectionCollectionBuilder.UsingEntity configureJoinEntityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the join entity type implementing the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity (string joinEntityName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity(string joinEntityName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity (joinEntityName As String, configureJoinEntityType As Action(Of EntityTypeBuilder)) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt;" Usage="collectionCollectionBuilder.UsingEntity (joinEntityName, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinEntityName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="joinEntityName">The name of the join entity.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the join entity type implementing the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity (Type joinEntityType, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity(class System.Type joinEntityType, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity(System.Type,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity (joinEntityType As Type, configureJoinEntityType As Action(Of EntityTypeBuilder)) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt;" Usage="collectionCollectionBuilder.UsingEntity (joinEntityType, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="joinEntityType">The CLR type of the join entity.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the join entity type implementing the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity (Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureRight, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureLeft, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity(class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureRight, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureLeft, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity(System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder},System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity (configureRight As Func(Of EntityTypeBuilder, ReferenceCollectionBuilder), configureLeft As Func(Of EntityTypeBuilder, ReferenceCollectionBuilder), configureJoinEntityType As Action(Of EntityTypeBuilder)) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt;" Usage="collectionCollectionBuilder.UsingEntity (configureRight, configureLeft, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureRight" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureLeft" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="configureRight">The configuration for the relationship to the right entity type.</param>
        <param name="configureLeft">The configuration for the relationship to the left entity type.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the relationships to the entity types participating in the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity (string joinEntityName, Type joinEntityType, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity(string joinEntityName, class System.Type joinEntityType, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity(System.String,System.Type,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity (joinEntityName As String, joinEntityType As Type, configureJoinEntityType As Action(Of EntityTypeBuilder)) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : string * Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt;" Usage="collectionCollectionBuilder.UsingEntity (joinEntityName, joinEntityType, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinEntityName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="joinEntityType" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="joinEntityName">The name of the join entity.</param>
        <param name="joinEntityType">The CLR type of the join entity.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the join entity type implementing the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity (string joinEntityName, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureRight, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureLeft, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity(string joinEntityName, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureRight, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureLeft, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity(System.String,System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder},System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity (joinEntityName As String, configureRight As Func(Of EntityTypeBuilder, ReferenceCollectionBuilder), configureLeft As Func(Of EntityTypeBuilder, ReferenceCollectionBuilder), configureJoinEntityType As Action(Of EntityTypeBuilder)) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : string * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt;" Usage="collectionCollectionBuilder.UsingEntity (joinEntityName, configureRight, configureLeft, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinEntityName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureRight" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureLeft" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="joinEntityName">The name of the join entity.</param>
        <param name="configureRight">The configuration for the relationship to the right entity type.</param>
        <param name="configureLeft">The configuration for the relationship to the left entity type.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the relationships to the entity types participating in the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity (Type joinEntityType, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureRight, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureLeft, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity(class System.Type joinEntityType, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureRight, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureLeft, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity(System.Type,System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder},System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity (joinEntityType As Type, configureRight As Func(Of EntityTypeBuilder, ReferenceCollectionBuilder), configureLeft As Func(Of EntityTypeBuilder, ReferenceCollectionBuilder), configureJoinEntityType As Action(Of EntityTypeBuilder)) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : Type * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt;" Usage="collectionCollectionBuilder.UsingEntity (joinEntityType, configureRight, configureLeft, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinEntityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="configureRight" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureLeft" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="joinEntityType">The CLR type of the join entity.</param>
        <param name="configureRight">The configuration for the relationship to the right entity type.</param>
        <param name="configureLeft">The configuration for the relationship to the left entity type.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the relationships to the entity types participating in the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity (string joinEntityName, Type joinEntityType, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureRight, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureLeft, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity(string joinEntityName, class System.Type joinEntityType, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureRight, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; configureLeft, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity(System.String,System.Type,System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder},System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity (joinEntityName As String, joinEntityType As Type, configureRight As Func(Of EntityTypeBuilder, ReferenceCollectionBuilder), configureLeft As Func(Of EntityTypeBuilder, ReferenceCollectionBuilder), configureJoinEntityType As Action(Of EntityTypeBuilder)) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : string * Type * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt;" Usage="collectionCollectionBuilder.UsingEntity (joinEntityName, joinEntityType, configureRight, configureLeft, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinEntityName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="joinEntityType" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="configureRight" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureLeft" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" Index="4" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="joinEntityName">The name of the join entity.</param>
        <param name="joinEntityType">The CLR type of the join entity.</param>
        <param name="configureRight">The configuration for the relationship to the right entity type.</param>
        <param name="configureLeft">The configuration for the relationship to the left entity type.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the relationships to the entity types participating in the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity&lt;TJoinEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt; UsingEntity&lt;TJoinEntity&gt; () where TJoinEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt; UsingEntity&lt;class TJoinEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity(Of TJoinEntity As Class) () As EntityTypeBuilder(Of TJoinEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity (requires 'JoinEntity : null)&gt; (requires 'JoinEntity : null)" Usage="collectionCollectionBuilder.UsingEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TJoinEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TJoinEntity">The CLR type of the join entity.</typeparam>
        <summary>
                Configures the join entity type implementing the many-to-many relationship.
            </summary>
        <returns>The builder for the join entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity&lt;TJoinEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity&lt;TJoinEntity&gt; (Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;&gt; configureJoinEntityType) where TJoinEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity&lt;class TJoinEntity&gt;(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity``1(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity(Of TJoinEntity As Class) (configureJoinEntityType As Action(Of EntityTypeBuilder(Of TJoinEntity))) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt; (requires 'JoinEntity : null)" Usage="collectionCollectionBuilder.UsingEntity configureJoinEntityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TJoinEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TJoinEntity">The CLR type of the join entity.</typeparam>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the join entity type implementing the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity&lt;TJoinEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt; UsingEntity&lt;TJoinEntity&gt; (string joinEntityName) where TJoinEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt; UsingEntity&lt;class TJoinEntity&gt;(string joinEntityName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity(Of TJoinEntity As Class) (joinEntityName As String) As EntityTypeBuilder(Of TJoinEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity (requires 'JoinEntity : null)&gt; (requires 'JoinEntity : null)" Usage="collectionCollectionBuilder.UsingEntity joinEntityName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TJoinEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="joinEntityName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TJoinEntity">The CLR type of the join entity.</typeparam>
        <param name="joinEntityName">The name of the join entity.</param>
        <summary>
                Configures the join entity type implementing the many-to-many relationship.
            </summary>
        <returns>The builder for the join entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity&lt;TJoinEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt; UsingEntity&lt;TJoinEntity&gt; (Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TLeftEntity,TJoinEntity&gt;&gt; configureRight, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TRightEntity,TJoinEntity&gt;&gt; configureLeft) where TJoinEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt; UsingEntity&lt;class TJoinEntity&gt;(class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!TLeftEntity, !!TJoinEntity&gt;&gt; configureRight, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!TRightEntity, !!TJoinEntity&gt;&gt; configureLeft) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity``1(System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{`0,``0}},System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{`1,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity(Of TJoinEntity As Class) (configureRight As Func(Of EntityTypeBuilder(Of TJoinEntity), ReferenceCollectionBuilder(Of TLeftEntity, TJoinEntity)), configureLeft As Func(Of EntityTypeBuilder(Of TJoinEntity), ReferenceCollectionBuilder(Of TRightEntity, TJoinEntity))) As EntityTypeBuilder(Of TJoinEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'LeftEntity, 'JoinEntity&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'RightEntity, 'JoinEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity (requires 'JoinEntity : null)&gt; (requires 'JoinEntity : null)" Usage="collectionCollectionBuilder.UsingEntity (configureRight, configureLeft)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TJoinEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="configureRight" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TLeftEntity,TJoinEntity&gt;&gt;" />
        <Parameter Name="configureLeft" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TRightEntity,TJoinEntity&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TJoinEntity">The CLR type of the join entity.</typeparam>
        <param name="configureRight">The configuration for the relationship to the right entity type.</param>
        <param name="configureLeft">The configuration for the relationship to the left entity type.</param>
        <summary>
                Configures the relationships to the entity types participating in the many-to-many relationship.
            </summary>
        <returns>The builder for the join type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity&lt;TJoinEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity&lt;TJoinEntity&gt; (string joinEntityName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;&gt; configureJoinEntityType) where TJoinEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity&lt;class TJoinEntity&gt;(string joinEntityName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity``1(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity(Of TJoinEntity As Class) (joinEntityName As String, configureJoinEntityType As Action(Of EntityTypeBuilder(Of TJoinEntity))) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt; (requires 'JoinEntity : null)" Usage="collectionCollectionBuilder.UsingEntity (joinEntityName, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TJoinEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="joinEntityName" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TJoinEntity">The CLR type of the join entity.</typeparam>
        <param name="joinEntityName">The name of the join entity.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the join entity type implementing the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity&lt;TJoinEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity&lt;TJoinEntity&gt; (Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TLeftEntity,TJoinEntity&gt;&gt; configureRight, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TRightEntity,TJoinEntity&gt;&gt; configureLeft, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;&gt; configureJoinEntityType) where TJoinEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity&lt;class TJoinEntity&gt;(class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!TLeftEntity, !!TJoinEntity&gt;&gt; configureRight, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!TRightEntity, !!TJoinEntity&gt;&gt; configureLeft, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity``1(System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{`0,``0}},System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{`1,``0}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity(Of TJoinEntity As Class) (configureRight As Func(Of EntityTypeBuilder(Of TJoinEntity), ReferenceCollectionBuilder(Of TLeftEntity, TJoinEntity)), configureLeft As Func(Of EntityTypeBuilder(Of TJoinEntity), ReferenceCollectionBuilder(Of TRightEntity, TJoinEntity)), configureJoinEntityType As Action(Of EntityTypeBuilder(Of TJoinEntity))) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'LeftEntity, 'JoinEntity&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'RightEntity, 'JoinEntity&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt; (requires 'JoinEntity : null)" Usage="collectionCollectionBuilder.UsingEntity (configureRight, configureLeft, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TJoinEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="configureRight" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TLeftEntity,TJoinEntity&gt;&gt;" />
        <Parameter Name="configureLeft" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TRightEntity,TJoinEntity&gt;&gt;" />
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TJoinEntity">The CLR type of the join entity.</typeparam>
        <param name="configureRight">The configuration for the relationship to the right entity type.</param>
        <param name="configureLeft">The configuration for the relationship to the left entity type.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the relationships to the entity types participating in the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity&lt;TJoinEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt; UsingEntity&lt;TJoinEntity&gt; (string joinEntityName, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TLeftEntity,TJoinEntity&gt;&gt; configureRight, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TRightEntity,TJoinEntity&gt;&gt; configureLeft) where TJoinEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt; UsingEntity&lt;class TJoinEntity&gt;(string joinEntityName, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!TLeftEntity, !!TJoinEntity&gt;&gt; configureRight, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!TRightEntity, !!TJoinEntity&gt;&gt; configureLeft) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity``1(System.String,System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{`0,``0}},System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{`1,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity(Of TJoinEntity As Class) (joinEntityName As String, configureRight As Func(Of EntityTypeBuilder(Of TJoinEntity), ReferenceCollectionBuilder(Of TLeftEntity, TJoinEntity)), configureLeft As Func(Of EntityTypeBuilder(Of TJoinEntity), ReferenceCollectionBuilder(Of TRightEntity, TJoinEntity))) As EntityTypeBuilder(Of TJoinEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : string * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'LeftEntity, 'JoinEntity&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'RightEntity, 'JoinEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity (requires 'JoinEntity : null)&gt; (requires 'JoinEntity : null)" Usage="collectionCollectionBuilder.UsingEntity (joinEntityName, configureRight, configureLeft)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TJoinEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="joinEntityName" Type="System.String" />
        <Parameter Name="configureRight" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TLeftEntity,TJoinEntity&gt;&gt;" />
        <Parameter Name="configureLeft" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TRightEntity,TJoinEntity&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TJoinEntity">The CLR type of the join entity.</typeparam>
        <param name="joinEntityName">The name of the join entity.</param>
        <param name="configureRight">The configuration for the relationship to the right entity type.</param>
        <param name="configureLeft">The configuration for the relationship to the left entity type.</param>
        <summary>
                Configures the relationships to the entity types participating in the many-to-many relationship.
            </summary>
        <returns>The builder for the join entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingEntity&lt;TJoinEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt; UsingEntity&lt;TJoinEntity&gt; (string joinEntityName, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TLeftEntity,TJoinEntity&gt;&gt; configureRight, Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TRightEntity,TJoinEntity&gt;&gt; configureLeft, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;&gt; configureJoinEntityType) where TJoinEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TRightEntity&gt; UsingEntity&lt;class TJoinEntity&gt;(string joinEntityName, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!TLeftEntity, !!TJoinEntity&gt;&gt; configureRight, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2&lt;!TRightEntity, !!TJoinEntity&gt;&gt; configureLeft, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TJoinEntity&gt;&gt; configureJoinEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2.UsingEntity``1(System.String,System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{`0,``0}},System.Func{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{`1,``0}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsingEntity(Of TJoinEntity As Class) (joinEntityName As String, configureRight As Func(Of EntityTypeBuilder(Of TJoinEntity), ReferenceCollectionBuilder(Of TLeftEntity, TJoinEntity)), configureLeft As Func(Of EntityTypeBuilder(Of TJoinEntity), ReferenceCollectionBuilder(Of TRightEntity, TJoinEntity)), configureJoinEntityType As Action(Of EntityTypeBuilder(Of TJoinEntity))) As EntityTypeBuilder(Of TRightEntity)" />
      <MemberSignature Language="F#" Value="override this.UsingEntity : string * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'LeftEntity, 'JoinEntity&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;'RightEntity, 'JoinEntity&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'JoinEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'RightEntity (requires 'RightEntity : null)&gt; (requires 'JoinEntity : null)" Usage="collectionCollectionBuilder.UsingEntity (joinEntityName, configureRight, configureLeft, configureJoinEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TRightEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TJoinEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="joinEntityName" Type="System.String" />
        <Parameter Name="configureRight" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TLeftEntity,TJoinEntity&gt;&gt;" />
        <Parameter Name="configureLeft" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder&lt;TRightEntity,TJoinEntity&gt;&gt;" />
        <Parameter Name="configureJoinEntityType" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TJoinEntity&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TJoinEntity">The CLR type of the join entity.</typeparam>
        <param name="joinEntityName">The name of the join entity.</param>
        <param name="configureRight">The configuration for the relationship to the right entity type.</param>
        <param name="configureLeft">The configuration for the relationship to the left entity type.</param>
        <param name="configureJoinEntityType">The configuration of the join entity type.</param>
        <summary>
                Configures the relationships to the entity types participating in the many-to-many relationship.
            </summary>
        <returns>The builder for the originating entity type so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
