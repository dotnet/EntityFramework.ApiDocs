<Type Name="ElementTypeBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder">
  <TypeSignature Language="C#" Value="public class ElementTypeBuilder : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ElementTypeBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ElementTypeBuilder&#xA;Implements IInfrastructure(Of IConventionElementTypeBuilder)" />
  <TypeSignature Language="F#" Value="type ElementTypeBuilder = class&#xA;    interface IInfrastructure&lt;IConventionElementTypeBuilder&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Provides a simple API for configuring the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableElementType" /> of a primitive collection.
            </summary>
    <remarks>
      <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and
                    examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ElementTypeBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableElementType elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableElementType elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableElementType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementType As IMutableElementType)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder : Microsoft.EntityFrameworkCore.Metadata.IMutableElementType -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder elementType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableElementType" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="elementTypeBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="elementTypeBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasAnnotation (string annotation, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the element type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasConversion (converter As ValueConverter) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasConversion : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasConversion converter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
      </Parameters>
      <Docs>
        <param name="converter">The converter to use.</param>
        <summary>
                Configures elements of the collection so that their values are converted to and from the database
                using the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion (Type? conversionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion(class System.Type conversionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasConversion(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasConversion (conversionType As Type) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasConversion : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasConversion conversionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversionType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="conversionType">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</param>
        <summary>
                Configures elements of the collection so that their values are converted before writing to the database and converted back
                when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? converter, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? valueComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer valueComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasConversion (converter As ValueConverter, valueComparer As ValueComparer) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasConversion : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasConversion (converter, valueComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
        <Parameter Name="valueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
      </Parameters>
      <Docs>
        <param name="converter">The converter to use.</param>
        <param name="valueComparer">The comparer to use for values before conversion.</param>
        <summary>
                Configures elements of the collection so that their values are converted before
                using the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion (Type conversionType, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? valueComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion(class System.Type conversionType, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer valueComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasConversion(System.Type,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasConversion (conversionType As Type, valueComparer As ValueComparer) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Type * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasConversion : Type * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasConversion (conversionType, valueComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversionType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="valueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
      </Parameters>
      <Docs>
        <param name="conversionType">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</param>
        <param name="valueComparer">The comparer to use for values before conversion.</param>
        <summary>
                Configures elements of the collection so that their values are converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion (Type conversionType, Type? comparerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion(class System.Type conversionType, class System.Type comparerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasConversion(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasConversion (conversionType As Type, comparerType As Type) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Type * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasConversion : Type * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasConversion (conversionType, comparerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversionType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparerType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="conversionType">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</param>
        <param name="comparerType">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />.</param>
        <summary>
                Configures elements of the collection so that their values are converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion&lt;TConversion&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion&lt;TConversion&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion&lt;TConversion&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasConversion``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasConversion(Of TConversion) () As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasConversion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConversion">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TConversion">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</typeparam>
        <summary>
                Configures elements of the collection so their values are converted before writing to the database and converted back
                when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion&lt;TConversion&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion&lt;TConversion&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? valueComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion&lt;TConversion&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer valueComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasConversion``1(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasConversion(Of TConversion) (valueComparer As ValueComparer) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasConversion : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasConversion valueComparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConversion">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="valueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
      </Parameters>
      <Docs>
        <typeparam name="TConversion">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</typeparam>
        <param name="valueComparer">The comparer to use for values before conversion.</param>
        <summary>
                Configures elements of the collection so that their values are converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion&lt;TConversion,TComparer&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion&lt;TConversion,TComparer&gt; () where TComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasConversion&lt;TConversion, (class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer) TComparer&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasConversion``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasConversion(Of TConversion, TComparer) () As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder (requires 'Comparer :&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)&#xA;override this.HasConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder (requires 'Comparer :&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" Usage="elementTypeBuilder.HasConversion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConversion">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TComparer">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TConversion">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</typeparam>
        <typeparam name="TComparer">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />.</typeparam>
        <summary>
                Configures elements of the collection so that their values are converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMaxLength">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasMaxLength (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasMaxLength(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasMaxLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMaxLength (maxLength As Integer) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasMaxLength : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasMaxLength : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasMaxLength maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">
                The maximum length of data allowed in elements of the collection. A value of <c>-1</c> indicates that elements of the
                collection have no maximum length.
            </param>
        <summary>
                Configures the maximum length of data that can be stored in elements of the collection.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrecision">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasPrecision (int precision);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasPrecision(int32 precision) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasPrecision(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrecision (precision As Integer) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasPrecision : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasPrecision : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasPrecision precision" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precision" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="precision">The precision of elements of the collection.</param>
        <summary>
                Configures the precision of elements of the collection.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrecision">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasPrecision (int precision, int scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder HasPrecision(int32 precision, int32 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.HasPrecision(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrecision (precision As Integer, scale As Integer) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasPrecision : int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.HasPrecision : int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.HasPrecision (precision, scale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precision" Type="System.Int32" />
        <Parameter Name="scale" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="precision">The precision of elements of the collection.</param>
        <param name="scale">The scale of elements of the collection.</param>
        <summary>
                Configures the precision and scale of elements of the collection.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder IsRequired (bool required = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder IsRequired(bool required) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.IsRequired(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsRequired (Optional required As Boolean = true) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsRequired : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.IsRequired : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.IsRequired required" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">A value indicating whether elements of the collection must not be <see langword="null" />.</param>
        <summary>
                Configures whether elements of the collection must have a value or can be <see langword="null" />.
                An element can only be configured as non-required if it is based on a CLR type that can be
                assigned <see langword="null" />.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder IsUnicode (bool unicode = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder IsUnicode(bool unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.IsUnicode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsUnicode (Optional unicode As Boolean = true) As ElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsUnicode : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&#xA;override this.IsUnicode : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder" Usage="elementTypeBuilder.IsUnicode unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unicode">A value indicating whether elements of the collection can contain unicode characters.</param>
        <summary>
                Configures whether elements of the collection are capable of persisting unicode characters.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableElementType Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableElementType Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Metadata As IMutableElementType" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.IMutableElementType" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableElementType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The element type being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionElementTypeBuilder&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IConventionElementTypeBuilder Implements IInfrastructure(Of IConventionElementTypeBuilder).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder&gt;.Instance : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The internal builder being used to configure the element type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string? ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="elementTypeBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
