<Type Name="OwnedNavigationSplitViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;">
  <TypeSignature Language="C#" Value="public class OwnedNavigationSplitViewBuilder&lt;TOwnerEntity,TDependentEntity&gt; : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; where TOwnerEntity : class where TDependentEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OwnedNavigationSplitViewBuilder`2&lt;class TOwnerEntity, class TDependentEntity&gt; extends Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TOwnerEntity, !TDependentEntity&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder`2" />
  <TypeSignature Language="VB.NET" Value="Public Class OwnedNavigationSplitViewBuilder(Of TOwnerEntity, TDependentEntity)&#xA;Inherits OwnedNavigationSplitViewBuilder&#xA;Implements IInfrastructure(Of OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity))" />
  <TypeSignature Language="F#" Value="type OwnedNavigationSplitViewBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; = class&#xA;    inherit OwnedNavigationSplitViewBuilder&#xA;    interface IInfrastructure&lt;OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TOwnerEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TDependentEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
    <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
    <summary>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OwnedNavigationSplitViewBuilder (in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor([in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TOwnerEntity, !TDependentEntity&gt; ownedNavigationBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ByRef storeObject As StoreObjectIdentifier, ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; : StoreObjectIdentifier * Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (storeObject, ownedNavigationBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="storeObject">To be added.</param>
        <param name="ownedNavigationBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;TOwnerEntity,TDependentEntity&gt; HasAnnotation (string annotation, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder`2&lt;!TOwnerEntity, !TDependentEntity&gt; HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder`2.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As OwnedNavigationSplitViewBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="override this.HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt;" Usage="ownedNavigationSplitViewBuilder.HasAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the view. If an annotation with the key specified in <paramref name="annotation" />
                already exists, its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TOwnerEntity, !TDependentEntity&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder`2.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity) Implements IInfrastructure(Of OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt;" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ViewColumnBuilder&lt;TProperty&gt; Property&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TDependentEntity,TProperty&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ViewColumnBuilder`1&lt;!!TProperty&gt; Property&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TDependentEntity, !!TProperty&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property(Of TProperty) (propertyExpression As Expression(Of Func(Of TDependentEntity, TProperty))) As ViewColumnBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.Property : System.Linq.Expressions.Expression&lt;Func&lt;'DependentEntity, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ViewColumnBuilder&lt;'Property&gt;" Usage="ownedNavigationSplitViewBuilder.Property propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ViewColumnBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TDependentEntity,TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (<c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Maps the property to a column on the current view and returns an object that can be used
                to provide view-specific configuration if the property is mapped to more than one view.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
