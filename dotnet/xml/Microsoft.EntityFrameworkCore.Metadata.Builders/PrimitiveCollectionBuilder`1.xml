<Type Name="PrimitiveCollectionBuilder&lt;TProperty&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;">
  <TypeSignature Language="C#" Value="public class PrimitiveCollectionBuilder&lt;TProperty&gt; : Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PrimitiveCollectionBuilder`1&lt;TProperty&gt; extends Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public Class PrimitiveCollectionBuilder(Of TProperty)&#xA;Inherits PrimitiveCollectionBuilder" />
  <TypeSignature Language="F#" Value="type PrimitiveCollectionBuilder&lt;'Property&gt; = class&#xA;    inherit PrimitiveCollectionBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TProperty" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TProperty">To be added.</typeparam>
    <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />.
            </summary>
    <remarks>
      <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and
                    examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrimitiveCollectionBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As IMutableProperty)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt; : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt; property" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; ElementType (Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&gt; builderAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; ElementType(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&gt; builderAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.ElementType(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ElementType (builderAction As Action(Of ElementTypeBuilder)) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ElementType : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.ElementType builderAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ElementTypeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="builderAction">An action that performs configuration of the collection element type.</param>
        <summary>
                Configures the elements of this collection.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; HasAnnotation (string annotation, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.HasAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the property. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; HasField (string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; HasField(string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.HasField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasField (fieldName As String) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HasField : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.HasField fieldName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fieldName">The field name.</param>
        <summary>
                Sets the backing field to use for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    Backing fields are normally found by convention.
                    This method is useful for setting backing fields explicitly in cases where the
                    correct field is not found by convention.
                </para>
          <para>
                    By default, the backing field, if one is found or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. This can be changed by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-backing-fields">Backing fields</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMaxLength">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; HasMaxLength (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; HasMaxLength(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.HasMaxLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMaxLength (maxLength As Integer) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HasMaxLength : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.HasMaxLength maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">
                The maximum length of data allowed in the property. A value of <c>-1</c> indicates that the property has no maximum length.
            </param>
        <summary>
                Configures the maximum length of data that can be stored in this property.
                Maximum length can only be set on array properties (including <see cref="T:System.String" /> properties).
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSentinel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; HasSentinel (object? sentinel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; HasSentinel(object sentinel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.HasSentinel(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSentinel (sentinel As Object) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HasSentinel : obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.HasSentinel sentinel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentinel" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sentinel">The sentinel value.</param>
        <summary>
                Configures the value that will be used to determine if the property has been set or not. If the property is set to the
                sentinel value, then it is considered not set. By default, the sentinel value is the CLR default value for the type of
                the property.
            </summary>
        <returns>The same builder instance if the configuration was applied, <see langword="null" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueGenerator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; HasValueGenerator (Type? valueGeneratorType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; HasValueGenerator(class System.Type valueGeneratorType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.HasValueGenerator(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasValueGenerator (valueGeneratorType As Type) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HasValueGenerator : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.HasValueGenerator valueGeneratorType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueGeneratorType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="valueGeneratorType">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />.</param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> that will generate values for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (<see langword="null" /> for <c>string</c>, <c>0</c> for <c>int</c>,
                    <c>Guid.Empty</c> for <c>Guid</c>, etc.).
                </para>
          <para>
                    A single instance of this type will be created and used to generate values for this property in all
                    instances of the entity type. The type must be instantiable and have a parameterless constructor.
                </para>
          <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
          <para>
                    Setting null does not disable value generation for this property, it just clears any generator explicitly
                    configured for this property. The database provider may still have a value generator for the property type.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueGenerator&lt;TGenerator&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; HasValueGenerator&lt;TGenerator&gt; () where TGenerator : Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; HasValueGenerator&lt;(class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator) TGenerator&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.HasValueGenerator``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasValueGenerator(Of TGenerator As ValueGenerator) () As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HasValueGenerator : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt; (requires 'Generator :&gt; Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator)" Usage="primitiveCollectionBuilder.HasValueGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TGenerator">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TGenerator">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />.</typeparam>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> that will generate values for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (<see langword="null" /> for <c>string</c>, <c>0</c> for <c>int</c>,
                    <c>Guid.Empty</c> for <c>Guid</c>, etc.).
                </para>
          <para>
                    A single instance of this type will be created and used to generate values for this property in all
                    instances of the entity type. The type must be instantiable and have a parameterless constructor.
                </para>
          <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueGeneratorFactory">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; HasValueGeneratorFactory (Type? valueGeneratorFactoryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; HasValueGeneratorFactory(class System.Type valueGeneratorFactoryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.HasValueGeneratorFactory(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasValueGeneratorFactory (valueGeneratorFactoryType As Type) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HasValueGeneratorFactory : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.HasValueGeneratorFactory valueGeneratorFactoryType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueGeneratorFactoryType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="valueGeneratorFactoryType">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory" />.</param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory" /> for creating a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />
                to use to generate values for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (<see langword="null" /> for <c>string</c>, <c>0</c> for <c>int</c>,
                    <c>Guid.Empty</c> for <c>Guid</c>, etc.).
                </para>
          <para>
                    A single instance of this type will be created and used to generate values for this property in all
                    instances of the entity type. The type must be instantiable and have a parameterless constructor.
                </para>
          <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
          <para>
                    Setting <see langword="null" /> does not disable value generation for this property, it just clears any generator explicitly
                    configured for this property. The database provider may still have a value generator for the property type.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueGeneratorFactory&lt;TFactory&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; HasValueGeneratorFactory&lt;TFactory&gt; () where TFactory : Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; HasValueGeneratorFactory&lt;(class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory) TFactory&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.HasValueGeneratorFactory``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasValueGeneratorFactory(Of TFactory As ValueGeneratorFactory) () As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HasValueGeneratorFactory : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt; (requires 'Factory :&gt; Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory)" Usage="primitiveCollectionBuilder.HasValueGeneratorFactory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFactory">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TFactory">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory" />.</typeparam>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory" /> for creating a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />
                to use to generate values for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    Values are generated when the entity is added to the context using, for example,
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)" />. Values are generated only when the property is assigned
                    the CLR default value (<see langword="null" /> for <c>string</c>, <c>0</c> for <c>int</c>,
                    <c>Guid.Empty</c> for <c>Guid</c>, etc.).
                </para>
          <para>
                    A single instance of this type will be created and used to generate values for this property in all
                    instances of the entity type. The type must be instantiable and have a parameterless constructor.
                </para>
          <para>
                    This method is intended for use with custom value generation. Value generation for common cases is
                    usually handled automatically by the database provider.
                </para>
          <para>
                    Setting <see langword="null" /> does not disable value generation for this property, it just clears any generator explicitly
                    configured for this property. The database provider may still have a value generator for the property type.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConcurrencyToken">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; IsConcurrencyToken (bool concurrencyToken = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; IsConcurrencyToken(bool concurrencyToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.IsConcurrencyToken(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsConcurrencyToken (Optional concurrencyToken As Boolean = true) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.IsConcurrencyToken : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.IsConcurrencyToken concurrencyToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concurrencyToken" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="concurrencyToken">A value indicating whether this property is a concurrency token.</param>
        <summary>
                Configures whether this property should be used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; IsRequired (bool required = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; IsRequired(bool required) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.IsRequired(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsRequired (Optional required As Boolean = true) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.IsRequired : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.IsRequired required" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">A value indicating whether the property is required.</param>
        <summary>
                Configures whether this property must have a value assigned or whether null is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned <see langword="null" />.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; IsUnicode (bool unicode = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; IsUnicode(bool unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.IsUnicode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsUnicode (Optional unicode As Boolean = true) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.IsUnicode : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.IsUnicode unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unicode">A value indicating whether the property can contain unicode characters.</param>
        <summary>
                Configures the property as capable of persisting unicode characters.
                Can only be set on <see cref="T:System.String" /> properties.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As PropertyAccessMode) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.UsePropertyAccessMode propertyAccessMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.</param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. Calling this method will change that behavior
                    for this property as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrides for this property any access mode that was set on the
                    entity type or model.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueGeneratedNever">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; ValueGeneratedNever ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; ValueGeneratedNever() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.ValueGeneratedNever" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValueGeneratedNever () As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ValueGeneratedNever : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.ValueGeneratedNever " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Configures a property to never have a value generated when an instance of this
                entity type is saved.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                Note that temporary values may still be generated for use internally before a
                new entity is saved.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueGeneratedOnAdd">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; ValueGeneratedOnAdd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; ValueGeneratedOnAdd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.ValueGeneratedOnAdd" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValueGeneratedOnAdd () As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ValueGeneratedOnAdd : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.ValueGeneratedOnAdd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Configures a property to have a value generated only when saving a new entity, unless a non-null,
                non-temporary value has been set, in which case the set value will be saved instead. The value
                may be generated by a client-side value generator or may be generated by the database as part
                of saving the entity.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueGeneratedOnAddOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; ValueGeneratedOnAddOrUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; ValueGeneratedOnAddOrUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.ValueGeneratedOnAddOrUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValueGeneratedOnAddOrUpdate () As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ValueGeneratedOnAddOrUpdate : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.ValueGeneratedOnAddOrUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Configures a property to have a value generated when saving a new or existing entity.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueGeneratedOnUpdate">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; ValueGeneratedOnUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; ValueGeneratedOnUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.ValueGeneratedOnUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValueGeneratedOnUpdate () As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ValueGeneratedOnUpdate : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.ValueGeneratedOnUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Configures a property to have a value generated when saving an existing entity.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueGeneratedOnUpdateSometimes">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; ValueGeneratedOnUpdateSometimes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!TProperty&gt; ValueGeneratedOnUpdateSometimes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1.ValueGeneratedOnUpdateSometimes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValueGeneratedOnUpdateSometimes () As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ValueGeneratedOnUpdateSometimes : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="primitiveCollectionBuilder.ValueGeneratedOnUpdateSometimes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Configures a property to have a value generated under certain conditions when saving an existing entity.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
