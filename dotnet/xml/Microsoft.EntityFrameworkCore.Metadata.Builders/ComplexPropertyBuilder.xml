<Type Name="ComplexPropertyBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder">
  <TypeSignature Language="C#" Value="public class ComplexPropertyBuilder : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ComplexPropertyBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;, class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ComplexPropertyBuilder&#xA;Implements IInfrastructure(Of IConventionComplexPropertyBuilder), IInfrastructure(Of IConventionComplexTypeBuilder)" />
  <TypeSignature Language="F#" Value="type ComplexPropertyBuilder = class&#xA;    interface IInfrastructure&lt;IConventionComplexPropertyBuilder&gt;&#xA;    interface IInfrastructure&lt;IConventionComplexTypeBuilder&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Provides a simple API for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty" />.
            </summary>
    <remarks>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </remarks>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexPropertyBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty complexProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty complexProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (complexProperty As IMutableComplexProperty)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder complexProperty" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty" />
      </Parameters>
      <Docs>
        <param name="complexProperty">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyName As String) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.ComplexProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.ComplexProperty propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property with this overload the property name must match the
                name of a CLR property or field on the complex type. This overload cannot be used to
                add a new shadow state complex property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty (string propertyName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty(string propertyName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyName As String, buildAction As Action(Of ComplexPropertyBuilder)) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.ComplexProperty : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.ComplexProperty (propertyName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property with this overload the property name must match the
                name of a CLR property or field on the complex type. This overload cannot be used to
                add a new shadow state complex property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty (Type propertyType, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty(class System.Type propertyType, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyType As Type, propertyName As String) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.ComplexProperty : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.ComplexProperty (propertyType, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new complex property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty (Type propertyType, string propertyName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty(class System.Type propertyType, string propertyName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty(System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyType As Type, propertyName As String, buildAction As Action(Of ComplexPropertyBuilder)) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.ComplexProperty : Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.ComplexProperty (propertyType, propertyName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new complex property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty (Type propertyType, string propertyName, string complexTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty(class System.Type propertyType, string propertyName, string complexTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty(System.Type,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyType As Type, propertyName As String, complexTypeName As String) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : Type * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.ComplexProperty : Type * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.ComplexProperty (propertyType, propertyName, complexTypeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="complexTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="complexTypeName">The name of the complex type.</param>
        <summary>
                Returns an object that can be used to configure a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new complex property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty (Type propertyType, string propertyName, string complexTypeName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty(class System.Type propertyType, string propertyName, string complexTypeName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty(System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyType As Type, propertyName As String, complexTypeName As String, buildAction As Action(Of ComplexPropertyBuilder)) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : Type * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.ComplexProperty : Type * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.ComplexProperty (propertyType, propertyName, complexTypeName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="complexTypeName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="complexTypeName">The name of the complex type.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new complex property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt; ComplexProperty&lt;TProperty&gt; (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt; ComplexProperty&lt;TProperty&gt;(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyName As String) As ComplexPropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&#xA;override this.ComplexProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;" Usage="complexPropertyBuilder.ComplexProperty propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty&lt;TProperty&gt; (string propertyName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty&lt;TProperty&gt;(string propertyName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty``1(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyName As String, buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.ComplexProperty : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.ComplexProperty (propertyName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt; ComplexProperty&lt;TProperty&gt; (string propertyName, string complexTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt; ComplexProperty&lt;TProperty&gt;(string propertyName, string complexTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty``1(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyName As String, complexTypeName As String) As ComplexPropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&#xA;override this.ComplexProperty : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;" Usage="complexPropertyBuilder.ComplexProperty (propertyName, complexTypeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="complexTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="complexTypeName">The name of the complex type.</param>
        <summary>
                Returns an object that can be used to configure a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty&lt;TProperty&gt; (string propertyName, string complexTypeName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder ComplexProperty&lt;TProperty&gt;(string propertyName, string complexTypeName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ComplexProperty``1(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyName As String, complexTypeName As String, buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperty : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.ComplexProperty : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.ComplexProperty (propertyName, complexTypeName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="complexTypeName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="complexTypeName">The name of the complex type.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="complexPropertyBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="complexPropertyBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasChangeTrackingStrategy (changeTrackingStrategy As ChangeTrackingStrategy) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.HasChangeTrackingStrategy changeTrackingStrategy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy">The change tracking strategy to be used.</param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder HasField (string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder HasField(string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.HasField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasField (fieldName As String) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasField : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.HasField : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.HasField fieldName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fieldName">The field name.</param>
        <summary>
                Sets the backing field to use for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    Backing fields are normally found by convention.
                    This method is useful for setting backing fields explicitly in cases where the
                    correct field is not found by convention.
                </para>
          <para>
                    By default, the backing field, if one is found or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. This can be changed by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-backing-fields">Backing fields</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPropertyAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder HasPropertyAnnotation (string annotation, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder HasPropertyAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.HasPropertyAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPropertyAnnotation (annotation As String, value As Object) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasPropertyAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.HasPropertyAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.HasPropertyAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the complex property. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTypeAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder HasTypeAnnotation (string annotation, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder HasTypeAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.HasTypeAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasTypeAnnotation (annotation As String, value As Object) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasTypeAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.HasTypeAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.HasTypeAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the complex type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder Ignore (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder Ignore(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.Ignore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (propertyName As String) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Ignore : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.Ignore : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.Ignore propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to be removed from the complex type.</param>
        <summary>
                Excludes the given property from the complex type. This method is typically used to remove properties
                and navigations from the complex type that were added by convention.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder IndexerProperty (Type propertyType, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder IndexerProperty(class System.Type propertyType, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.IndexerProperty(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexerProperty (propertyType As Type, propertyName As String) As ComplexTypePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member IndexerProperty : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&#xA;override this.IndexerProperty : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" Usage="complexPropertyBuilder.IndexerProperty (propertyType, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                Indexer properties are stored in the entity using
                <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/indexers/">an indexer</see>
                supplying the provided property name.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; IndexerProperty&lt;TProperty&gt; (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; IndexerProperty&lt;TProperty&gt;(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.IndexerProperty``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexerProperty(Of TProperty) (propertyName As String) As ComplexTypePropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="abstract member IndexerProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;&#xA;override this.IndexerProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;" Usage="complexPropertyBuilder.IndexerProperty propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                Indexer properties are stored in the entity using
                <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/indexers/">an indexer</see>
                supplying the provided property name.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder IsRequired (bool required = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder IsRequired(bool required) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.IsRequired(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsRequired (Optional required As Boolean = true) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsRequired : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.IsRequired : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.IsRequired required" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">A value indicating whether the property is required.</param>
        <summary>
                Configures whether this property must have a value assigned or <see langword="null" /> is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned <see langword="null" />.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Metadata As IMutableComplexProperty" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The complex property being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IConventionComplexPropertyBuilder Implements IInfrastructure(Of IConventionComplexPropertyBuilder).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Instance : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the internal builder being used to configure the complex property.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexTypeBuilder&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IConventionComplexTypeBuilder Implements IInfrastructure(Of IConventionComplexTypeBuilder).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder&gt;.Instance : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the internal builder being used to configure the complex type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimitiveCollection">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder PrimitiveCollection (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder PrimitiveCollection(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.PrimitiveCollection(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimitiveCollection (propertyName As String) As ComplexTypePrimitiveCollectionBuilder" />
      <MemberSignature Language="F#" Value="abstract member PrimitiveCollection : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder&#xA;override this.PrimitiveCollection : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder" Usage="complexPropertyBuilder.PrimitiveCollection propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property with this overload the property name must match the
                name of a CLR property or field on the complex type. This overload cannot be used to
                add a new shadow state property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimitiveCollection">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder PrimitiveCollection (Type propertyType, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder PrimitiveCollection(class System.Type propertyType, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.PrimitiveCollection(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimitiveCollection (propertyType As Type, propertyName As String) As ComplexTypePrimitiveCollectionBuilder" />
      <MemberSignature Language="F#" Value="abstract member PrimitiveCollection : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder&#xA;override this.PrimitiveCollection : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder" Usage="complexPropertyBuilder.PrimitiveCollection (propertyType, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the entity class
                then it will be added to the model. If no property exists in the entity class, then
                a new shadow state property will be added. A shadow state property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimitiveCollection&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder&lt;TProperty&gt; PrimitiveCollection&lt;TProperty&gt; (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder`1&lt;!!TProperty&gt; PrimitiveCollection&lt;TProperty&gt;(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.PrimitiveCollection``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimitiveCollection(Of TProperty) (propertyName As String) As ComplexTypePrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="abstract member PrimitiveCollection : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder&lt;'Property&gt;&#xA;override this.PrimitiveCollection : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder&lt;'Property&gt;" Usage="complexPropertyBuilder.PrimitiveCollection propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the entity class
                then it will be added to the model. If no property exists in the entity class, then
                a new shadow state property will be added. A shadow state property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder Property (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder Property(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.Property(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyName As String) As ComplexTypePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&#xA;override this.Property : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" Usage="complexPropertyBuilder.Property propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property with this overload the property name must match the
                name of a CLR property or field on the complex type. This overload cannot be used to
                add a new shadow state property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder Property (Type propertyType, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder Property(class System.Type propertyType, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.Property(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property (propertyType As Type, propertyName As String) As ComplexTypePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member Property : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&#xA;override this.Property : Type * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" Usage="complexPropertyBuilder.Property (propertyType, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the entity class
                then it will be added to the model. If no property exists in the entity class, then
                a new shadow state property will be added. A shadow state property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; Property&lt;TProperty&gt; (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; Property&lt;TProperty&gt;(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.Property``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property(Of TProperty) (propertyName As String) As ComplexTypePropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="abstract member Property : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;&#xA;override this.Property : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;" Usage="complexPropertyBuilder.Property propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <summary>
                Returns an object that can be used to configure a property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the entity class
                then it will be added to the model. If no property exists in the entity class, then
                a new shadow state property will be added. A shadow state property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyBuilder">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder PropertyBuilder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder PropertyBuilder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.PropertyBuilder" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property PropertyBuilder As InternalComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="member this.PropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.PropertyBuilder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string? ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="complexPropertyBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeBuilder">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexTypeBuilder TypeBuilder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexTypeBuilder TypeBuilder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.TypeBuilder" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property TypeBuilder As InternalComplexTypeBuilder" />
      <MemberSignature Language="F#" Value="member this.TypeBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexTypeBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.TypeBuilder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexTypeBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultPropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder UseDefaultPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder UseDefaultPropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.UseDefaultPropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseDefaultPropertyAccessMode (propertyAccessMode As PropertyAccessMode) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseDefaultPropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.UseDefaultPropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.UseDefaultPropertyAccessMode propertyAccessMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this complex type.</param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this complex type.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this complex type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrides for all properties of this complex type any access mode that was
                    set on the model.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As PropertyAccessMode) As ComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&#xA;override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" Usage="complexPropertyBuilder.UsePropertyAccessMode propertyAccessMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.</param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. Calling this method will change that behavior
                    for this property as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrides for this property any access mode that was set on the
                    entity type or model.
                </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
