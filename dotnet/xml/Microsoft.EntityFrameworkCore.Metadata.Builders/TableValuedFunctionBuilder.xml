<Type Name="TableValuedFunctionBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder">
  <TypeSignature Language="C#" Value="public class TableValuedFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TableValuedFunctionBuilder extends Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class TableValuedFunctionBuilder&#xA;Inherits DbFunctionBuilderBase" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="F#" Value="type TableValuedFunctionBuilder = class&#xA;    inherit DbFunctionBuilderBase" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="C#" Value="public class TableValuedFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TableValuedFunctionBuilder extends Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class TableValuedFunctionBuilder&#xA;Inherits DbFunctionBuilderBase&#xA;Implements IInfrastructure(Of EntityTypeBuilder)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type TableValuedFunctionBuilder = class&#xA;    inherit DbFunctionBuilderBase&#xA;    interface IInfrastructure&lt;EntityTypeBuilder&gt;" FrameworkAlternate="efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> that an entity type is mapped to.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableValuedFunctionBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction function) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As IMutableDbFunction)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder function" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="function" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="function">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableValuedFunctionBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction function, Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction function, class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction,Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As IMutableDbFunction, entityTypeBuilder As EntityTypeBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction * Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder (function, entityTypeBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="function" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="function">To be added.</param>
        <param name="entityTypeBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasAnnotation (string annotation, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As TableValuedFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&#xA;override this.HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="tableValuedFunctionBuilder.HasAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the database function. If an annotation with the key specified in
                <paramref name="annotation" /> already exists, its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasName">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.HasName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasName (name As String) As TableValuedFunctionBuilder" />
      <MemberSignature Language="F#" Value="override this.HasName : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="tableValuedFunctionBuilder.HasName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the function in the database.</param>
        <summary>
                Sets the name of the database function.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasParameter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasParameter (string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasParameter(string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.HasParameter(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasParameter (name As String, buildAction As Action(Of DbFunctionParameterBuilder)) As TableValuedFunctionBuilder" />
      <MemberSignature Language="F#" Value="override this.HasParameter : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="tableValuedFunctionBuilder.HasParameter (name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The parameter name.</param>
        <param name="buildAction">An action that performs configuration of the parameter.</param>
        <summary>
                Returns an object that can be used to configure a parameter with the given name.
                If no parameter with the given name exists, then a new parameter will be added.
            </summary>
        <returns>The builder to use for further parameter configuration.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSchema">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasSchema (string schema);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasSchema(string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.HasSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSchema (schema As String) As TableValuedFunctionBuilder" />
      <MemberSignature Language="F#" Value="override this.HasSchema : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="tableValuedFunctionBuilder.HasSchema schema" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasSchema (string? schema);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schema">The schema of the function in the database.</param>
        <summary>
                Sets the schema of the database function.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBuiltIn">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder IsBuiltIn (bool builtIn = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder IsBuiltIn(bool builtIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.IsBuiltIn(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsBuiltIn (Optional builtIn As Boolean = true) As TableValuedFunctionBuilder" />
      <MemberSignature Language="F#" Value="override this.IsBuiltIn : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="tableValuedFunctionBuilder.IsBuiltIn builtIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builtIn" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="builtIn">The value indicating whether the database function is built-in.</param>
        <summary>
                Marks whether the database function is built-in.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#EntityTypeBuilder&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As EntityTypeBuilder Implements IInfrastructure(Of EntityTypeBuilder).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;.Instance : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
