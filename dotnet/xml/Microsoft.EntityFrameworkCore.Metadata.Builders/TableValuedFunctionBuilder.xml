<Type Name="TableValuedFunctionBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder">
  <TypeSignature Language="C#" Value="public class TableValuedFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TableValuedFunctionBuilder extends Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class TableValuedFunctionBuilder&#xA;Inherits DbFunctionBuilderBase" />
  <TypeSignature Language="F#" Value="type TableValuedFunctionBuilder = class&#xA;    inherit DbFunctionBuilderBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableValuedFunctionBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction function) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As IMutableDbFunction)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder function" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="function" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />
      </Parameters>
      <Docs>
        <param name="function">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasName">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.HasName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasName (name As String) As TableValuedFunctionBuilder" />
      <MemberSignature Language="F#" Value="override this.HasName : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="tableValuedFunctionBuilder.HasName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the function in the database.</param>
        <summary>
                Sets the name of the database function.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSchema">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasSchema (string schema);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasSchema(string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.HasSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSchema (schema As String) As TableValuedFunctionBuilder" />
      <MemberSignature Language="F#" Value="override this.HasSchema : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder" Usage="tableValuedFunctionBuilder.HasSchema schema" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder HasSchema (string? schema);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schema">The schema of the function in the database.</param>
        <summary>
                Sets the schema of the database function.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
