<Type Name="TemporalTableBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder">
  <TypeSignature Language="C#" Value="public class TemporalTableBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TemporalTableBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class TemporalTableBuilder" />
  <TypeSignature Language="F#" Value="type TemporalTableBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TemporalTableBuilder (Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entityTypeBuilder As EntityTypeBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder entityTypeBuilder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TemporalTableBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entityType As IMutableEntityType)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder entityType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="temporalTableBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="temporalTableBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPeriodEnd">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder HasPeriodEnd (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder HasPeriodEnd(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.HasPeriodEnd(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPeriodEnd (propertyName As String) As TemporalPeriodPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasPeriodEnd : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder&#xA;override this.HasPeriodEnd : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder" Usage="temporalTableBuilder.HasPeriodEnd propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the period end property.</param>
        <summary>
                Returns an object that can be used to configure a period end property of the entity type mapped to a temporal table.
            </summary>
        <returns>An object that can be used to configure the period end property.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPeriodStart">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder HasPeriodStart (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder HasPeriodStart(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.HasPeriodStart(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPeriodStart (propertyName As String) As TemporalPeriodPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasPeriodStart : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder&#xA;override this.HasPeriodStart : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder" Usage="temporalTableBuilder.HasPeriodStart propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the period start property.</param>
        <summary>
                Returns an object that can be used to configure a period start property of the entity type mapped to a temporal table.
            </summary>
        <returns>An object that can be used to configure the period start property.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string? ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="temporalTableBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHistoryTable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder UseHistoryTable (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder UseHistoryTable(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.UseHistoryTable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseHistoryTable (name As String) As TemporalTableBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseHistoryTable : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder&#xA;override this.UseHistoryTable : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder" Usage="temporalTableBuilder.UseHistoryTable name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the history table.</param>
        <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHistoryTable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder UseHistoryTable (string name, string? schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder UseHistoryTable(string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.UseHistoryTable(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseHistoryTable (name As String, schema As String) As TemporalTableBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseHistoryTable : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder&#xA;override this.UseHistoryTable : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder" Usage="temporalTableBuilder.UseHistoryTable (name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the history table.</param>
        <param name="schema">The schema of the history table.</param>
        <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
