<Type Name="IConventionElementTypeBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder">
  <TypeSignature Language="C#" Value="public interface IConventionElementTypeBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IConventionElementTypeBuilder implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConventionElementTypeBuilder&#xA;Implements IConventionAnnotatableBuilder" />
  <TypeSignature Language="F#" Value="type IConventionElementTypeBuilder = interface&#xA;    interface IConventionAnnotatableBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Provides a simple API surface for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionElementType" /> for a primitive collection
                    from conventions.
                </para>
      <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanSetConversion">
      <MemberSignature Language="C#" Value="public bool CanSetConversion (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? converter, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetConversion(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetConversion (converter As ValueConverter, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetConversion : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetConversion (converter, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="converter">The converter to use.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> can be configured for the elements
                from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> can be configured.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetConversion">
      <MemberSignature Language="C#" Value="public bool CanSetConversion (Type? providerClrType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetConversion(class System.Type providerClrType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetConversion(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetConversion (providerClrType As Type, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetConversion : Type * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetConversion (providerClrType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerClrType" Type="System.Type" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="providerClrType">The type to convert to and from.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given type to convert values to and from
                can be configured for the elements from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the given type to convert values to and from can be configured.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetConverter">
      <MemberSignature Language="C#" Value="public bool CanSetConverter (Type? converterType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetConverter(class System.Type converterType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetConverter(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetConverter (converterType As Type, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetConverter : Type * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetConverter (converterType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="converterType">
                A type that derives from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />,
                or <see langword="null" /> to remove any previously set converter.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> can be configured for the elements
                from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> can be configured.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsRequired">
      <MemberSignature Language="C#" Value="public bool CanSetIsRequired (bool? required, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsRequired(valuetype System.Nullable`1&lt;bool&gt; required, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetIsRequired(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetIsRequired (required As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsRequired : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetIsRequired (required, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">
                A value indicating whether the elements are required, or <see langword="null" /> to reset to default.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether this element requiredness can be configured from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the element requiredness can be configured.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsUnicode">
      <MemberSignature Language="C#" Value="public bool CanSetIsUnicode (bool? unicode, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsUnicode(valuetype System.Nullable`1&lt;bool&gt; unicode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetIsUnicode(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetIsUnicode (unicode As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsUnicode : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetIsUnicode (unicode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unicode">A value indicating whether the elements can contain unicode characters.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the elements can be configured as capable of persisting unicode characters
                from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the capability of persisting unicode characters can be configured.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetMaxLength">
      <MemberSignature Language="C#" Value="public bool CanSetMaxLength (int? maxLength, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetMaxLength(valuetype System.Nullable`1&lt;int32&gt; maxLength, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetMaxLength(System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetMaxLength (maxLength As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetMaxLength : Nullable&lt;int&gt; * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetMaxLength (maxLength, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="maxLength">The maximum length of elements in the collection.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the maximum length of elements can be set from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the maximum length of data allowed can be set for the elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetPrecision">
      <MemberSignature Language="C#" Value="public bool CanSetPrecision (int? precision, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetPrecision(valuetype System.Nullable`1&lt;int32&gt; precision, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetPrecision(System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetPrecision (precision As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetPrecision : Nullable&lt;int&gt; * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetPrecision (precision, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="precision">The precision of the elements.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the precision of elements can be set from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the precision of data allowed can be set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetScale">
      <MemberSignature Language="C#" Value="public bool CanSetScale (int? scale, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetScale(valuetype System.Nullable`1&lt;int32&gt; scale, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetScale(System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetScale (scale As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetScale : Nullable&lt;int&gt; * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetScale (scale, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scale">The scale of the elements.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the scale of elements can be set from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the scale of data allowed can be set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetTypeMapping">
      <MemberSignature Language="C#" Value="public bool CanSetTypeMapping (Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetTypeMapping(class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetTypeMapping (typeMapping As CoreTypeMapping, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetTypeMapping : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetTypeMapping (typeMapping, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeMapping">The type mapping.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
                can be configured from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> can be configured.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetValueComparer">
      <MemberSignature Language="C#" Value="public bool CanSetValueComparer (Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? comparer, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetValueComparer(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetValueComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetValueComparer (comparer As ValueComparer, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetValueComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetValueComparer (comparer, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparer">The comparer, or <see langword="null" /> to remove any previously set comparer.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
                can be configured from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> can be configured.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetValueComparer">
      <MemberSignature Language="C#" Value="public bool CanSetValueComparer (Type? comparerType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetValueComparer(class System.Type comparerType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.CanSetValueComparer(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetValueComparer (comparerType As Type, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetValueComparer : Type * bool -&gt; bool" Usage="iConventionElementTypeBuilder.CanSetValueComparer (comparerType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparerType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparerType">
                A type that derives from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />, or <see langword="null" /> to remove any previously set comparer.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
                can be configured from the current configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> can be configured.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasAnnotation (string name, object? value, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasAnnotation (name As String, value As Object, Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The name of the annotation to be set.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the annotation stored under the given name. Overwrites the existing annotation if an
                annotation with the specified name already exists with same or lower <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />.
            </summary>
        <returns>
                The same builder to continue configuration if the annotation was set, <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasConversion (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? converter, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasConversion(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasConversion (converter As ValueConverter, Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasConversion (converter, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="converter">The converter to use.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures elements of the collection so their values are converted before writing to the database and converted back
                when reading from the database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasConversion (Type? providerClrType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasConversion(class System.Type providerClrType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasConversion(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasConversion (providerClrType As Type, Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasConversion (providerClrType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerClrType" Type="System.Type" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="providerClrType">The type to convert to and from.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures elements of the collection so their values are converted before writing to the database and converted back
                when reading from the database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConverter">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasConverter (Type? converterType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasConverter(class System.Type converterType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasConverter(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasConverter (converterType As Type, Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConverter : Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasConverter (converterType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converterType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="converterType">
                A type that derives from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />,
                or <see langword="null" /> to remove any previously set converter.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures elements of the collection so their values are converted before writing to the database and converted back
                when reading from the database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, or <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMaxLength">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasMaxLength (int? maxLength, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasMaxLength(valuetype System.Nullable`1&lt;int32&gt; maxLength, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasMaxLength(System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasMaxLength (maxLength As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasMaxLength : Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasMaxLength (maxLength, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="maxLength">
                The maximum length of data allowed in elements of the collection. A value of <c>-1</c> indicates that elements of the
                collection have no maximum length.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the maximum length of data that can be stored in elements of the collection.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoAnnotation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasNoAnnotation (string name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasNoAnnotation(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasNoAnnotation(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasNoAnnotation (name As String, Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasNoAnnotation (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The name of the annotation to remove.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Removes the annotation with the given name from this object.
            </summary>
        <returns>
                The same builder to continue configuration if the annotation was set, <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNonNullAnnotation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasNonNullAnnotation (string name, object? value, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasNonNullAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasNonNullAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasNonNullAnnotation (name As String, value As Object, Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasNonNullAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The name of the annotation to be set.</param>
        <param name="value">The value to be stored in the annotation. <see langword="null" /> to remove the annotations.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the annotation stored under the given name. Overwrites the existing annotation if an
                annotation with the specified name already exists with same or lower <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />.
                Removes the annotation if <see langword="null" /> value is specified.
            </summary>
        <returns>
                The same builder to continue configuration if the annotation was set or removed,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrecision">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasPrecision (int? precision, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasPrecision(valuetype System.Nullable`1&lt;int32&gt; precision, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasPrecision(System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasPrecision (precision As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasPrecision : Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasPrecision (precision, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="precision">The precision of elements of the collection.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the precision of elements of the collection.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasScale">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasScale (int? scale, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasScale(valuetype System.Nullable`1&lt;int32&gt; scale, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasScale(System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasScale (scale As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasScale : Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasScale (scale, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scale">The scale of elements of the collection.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the scale of elements of the collection.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTypeMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasTypeMapping (Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasTypeMapping(class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasTypeMapping (typeMapping As CoreTypeMapping, Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasTypeMapping : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasTypeMapping (typeMapping, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeMapping">The type mapping, or <see langword="null" /> to remove any previously set type mapping.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> for elements of the collection.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, or <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasValueComparer (Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? comparer, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasValueComparer(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasValueComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasValueComparer (comparer As ValueComparer, Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasValueComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasValueComparer (comparer, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparer">The comparer, or <see langword="null" /> to remove any previously set comparer.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for elements of the collection.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, or <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? HasValueComparer (Type? comparerType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder HasValueComparer(class System.Type comparerType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.HasValueComparer(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasValueComparer (comparerType As Type, Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasValueComparer : Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.HasValueComparer (comparerType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparerType" Type="System.Type">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparerType">
                A type that derives from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />, or <see langword="null" /> to remove any previously set comparer.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for elements of the collection.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, or <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? IsRequired (bool? required, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder IsRequired(valuetype System.Nullable`1&lt;bool&gt; required, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.IsRequired(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsRequired (required As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsRequired : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.IsRequired (required, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">A value indicating whether elements of the collection must not be <see langword="null" />.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures whether elements of the collection must have a value or can be <see langword="null" />.
                An element can only be configured as non-required if it is based on a CLR type that can be
                assigned <see langword="null" />.
            </summary>
        <returns>
                The same builder instance if the requiredness was configured,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicode">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder? IsUnicode (bool? unicode, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder IsUnicode(valuetype System.Nullable`1&lt;bool&gt; unicode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.IsUnicode(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnicode (unicode As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionElementTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsUnicode : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder" Usage="iConventionElementTypeBuilder.IsUnicode (unicode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unicode">A value indicating whether elements of the collection can contain unicode characters.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures whether elements of the collection are capable of persisting unicode characters.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionElementType Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionElementType Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Metadata As IConventionElementType" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionElementType" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionElementTypeBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionElementType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the element type being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
