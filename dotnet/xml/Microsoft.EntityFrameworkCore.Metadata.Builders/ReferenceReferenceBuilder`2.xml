<Type Name="ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;">
  <TypeSignature Language="C#" Value="public class ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; : Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder where TEntity : class where TRelatedEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReferenceReferenceBuilder`2&lt;class TEntity, class TRelatedEntity&gt; extends Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2" />
  <TypeSignature Language="VB.NET" Value="Public Class ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)&#xA;Inherits ReferenceReferenceBuilder" />
  <TypeSignature Language="F#" Value="type ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; = class&#xA;    inherit ReferenceReferenceBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TRelatedEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TEntity">To be added.</typeparam>
    <typeparam name="TRelatedEntity">To be added.</typeparam>
    <summary>
                Provides a simple API for configuring a one-to-one relationship.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReferenceReferenceBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType declaringEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType relatedEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType declaringEntityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType relatedEntityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (declaringEntityType As IMutableEntityType, relatedEntityType As IMutableEntityType, foreignKey As IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (declaringEntityType, relatedEntityType, foreignKey)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="declaringEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="relatedEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="declaringEntityType">To be added.</param>
        <param name="relatedEntityType">To be added.</param>
        <param name="foreignKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReferenceReferenceBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType declaringEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType declaringEntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (declaringEntityType As EntityType, relatedEntityType As EntityType, builder As InternalRelationshipBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (declaringEntityType, relatedEntityType, builder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="declaringEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="relatedEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Index="2" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="declaringEntityType">To be added.</param>
        <param name="relatedEntityType">To be added.</param>
        <param name="builder">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReferenceReferenceBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType declaringEntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType declaringEntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType relatedEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As InternalRelationshipBuilder, declaringEntityType As EntityType, relatedEntityType As EntityType)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (builder, declaringEntityType, relatedEntityType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="declaringEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="1" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="relatedEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="2" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="declaringEntityType">To be added.</param>
        <param name="relatedEntityType">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReferenceReferenceBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder oldBuilder, bool inverted = false, bool foreignKeySet = false, bool principalKeySet = false, bool requiredSet = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder builder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder oldBuilder, bool inverted, bool foreignKeySet, bool principalKeySet, bool requiredSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (builder As InternalForeignKeyBuilder, oldBuilder As ReferenceReferenceBuilder, Optional inverted As Boolean = false, Optional foreignKeySet As Boolean = false, Optional principalKeySet As Boolean = false, Optional requiredSet As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder * Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder * bool * bool * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (builder, oldBuilder, inverted, foreignKeySet, principalKeySet, requiredSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="oldBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="inverted" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="foreignKeySet" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKeySet" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="requiredSet" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="oldBuilder">To be added.</param>
        <param name="inverted">To be added.</param>
        <param name="foreignKeySet">To be added.</param>
        <param name="principalKeySet">To be added.</param>
        <param name="requiredSet">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReferenceReferenceBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder oldBuilder, bool inverted = false, bool foreignKeySet = false, bool principalKeySet = false, bool requiredSet = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder oldBuilder, bool inverted, bool foreignKeySet, bool principalKeySet, bool requiredSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (builder As InternalRelationshipBuilder, oldBuilder As ReferenceReferenceBuilder, Optional inverted As Boolean = false, Optional foreignKeySet As Boolean = false, Optional principalKeySet As Boolean = false, Optional requiredSet As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder * Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder * bool * bool * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (builder, oldBuilder, inverted, foreignKeySet, principalKeySet, requiredSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="oldBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="inverted" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="foreignKeySet" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="principalKeySet" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="requiredSet" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="oldBuilder">To be added.</param>
        <param name="inverted">To be added.</param>
        <param name="foreignKeySet">To be added.</param>
        <param name="principalKeySet">To be added.</param>
        <param name="requiredSet">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasAnnotation (string annotation, object value);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.HasAnnotation (annotation, value)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasAnnotation (string annotation, object? value);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the relationship. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasForeignKey (string dependentEntityTypeName, params string[] foreignKeyPropertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasForeignKey(string dependentEntityTypeName, string[] foreignKeyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (dependentEntityTypeName As String, ParamArray foreignKeyPropertyNames As String()) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasForeignKey : string * string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.HasForeignKey (dependentEntityTypeName, foreignKeyPropertyNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependentEntityTypeName" Type="System.String" />
        <Parameter Name="foreignKeyPropertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dependentEntityTypeName">
                The name of entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
        <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
        <summary>
                Configures the property(s) to use as the foreign key for this relationship.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
          <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.String,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasForeignKey (Type dependentEntityType, params string[] foreignKeyPropertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasForeignKey(class System.Type dependentEntityType, string[] foreignKeyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey(System.Type,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (dependentEntityType As Type, ParamArray foreignKeyPropertyNames As String()) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasForeignKey : Type * string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.HasForeignKey (dependentEntityType, foreignKeyPropertyNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependentEntityType" Type="System.Type" />
        <Parameter Name="foreignKeyPropertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dependentEntityType">
                The entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </param>
        <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
        <summary>
                Configures the property(s) to use as the foreign key for this relationship.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
          <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.Type,System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey&lt;TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasForeignKey&lt;TDependentEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TDependentEntity,object&gt;&gt; foreignKeyExpression);" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasForeignKey&lt;TDependentEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TDependentEntity, object&gt;&gt; foreignKeyExpression) cil managed" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey(Of TDependentEntity) (foreignKeyExpression As Expression(Of Func(Of TDependentEntity, Object))) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="F#" Value="override this.HasForeignKey : System.Linq.Expressions.Expression&lt;Func&lt;'DependentEntity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.HasForeignKey foreignKeyExpression" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasForeignKey&lt;TDependentEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TDependentEntity,object&gt;&gt; foreignKeyExpression) where TDependentEntity : class;" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasForeignKey&lt;class TDependentEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TDependentEntity, object&gt;&gt; foreignKeyExpression) cil managed" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey(Of TDependentEntity As Class) (foreignKeyExpression As Expression(Of Func(Of TDependentEntity, Object))) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.HasForeignKey : System.Linq.Expressions.Expression&lt;Func&lt;'DependentEntity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'DependentEntity : null)" Usage="referenceReferenceBuilder.HasForeignKey foreignKeyExpression" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasForeignKey&lt;TDependentEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TDependentEntity,object?&gt;&gt; foreignKeyExpression) where TDependentEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDependentEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="foreignKeyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TDependentEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDependentEntity">
                The entity type that is the dependent in this relationship. That is, the type
                that has the foreign key properties.
            </typeparam>
        <param name="foreignKeyExpression">
          <para>
                    A lambda expression representing the foreign key property(s) (<c>t =&gt; t.Id1</c>).
                </para>
          <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t =&gt; new { t.Id1, t.Id2 }</c>). The order specified should match the order of
                    corresponding keys in <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />.
                </para>
        </param>
        <summary>
                Configures the property(s) to use as the foreign key for this relationship.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
          <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" /> is not specified, then an attempt
                    will be made to match the data type and order of foreign key properties against the primary key of
                    the principal entity type. If they do not match, new shadow state properties that form a unique
                    index will be added to the principal entity type to serve as the reference key.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey&lt;TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasForeignKey&lt;TDependentEntity&gt; (params string[] foreignKeyPropertyNames) where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasForeignKey&lt;class TDependentEntity&gt;(string[] foreignKeyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey``1(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey(Of TDependentEntity As Class) (ParamArray foreignKeyPropertyNames As String()) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasForeignKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'DependentEntity : null)" Usage="referenceReferenceBuilder.HasForeignKey foreignKeyPropertyNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="foreignKeyPropertyNames" Type="System.String[]" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDependentEntity">
                The entity type that is the dependent in this relationship (the type that has the foreign key
                properties).
            </typeparam>
        <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
        <summary>
                Configures the property(s) to use as the foreign key for this relationship.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
          <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the referenced key.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrincipalKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasPrincipalKey (string principalEntityTypeName, params string[] keyPropertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasPrincipalKey(string principalEntityTypeName, string[] keyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrincipalKey (principalEntityTypeName As String, ParamArray keyPropertyNames As String()) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasPrincipalKey : string * string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.HasPrincipalKey (principalEntityTypeName, keyPropertyNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityTypeName" Type="System.String" />
        <Parameter Name="keyPropertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="principalEntityTypeName">
                The name of entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
        <param name="keyPropertyNames">The name(s) of the reference key property(s).</param>
        <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                If multiple principal key properties are specified, the order of principal key properties should
                match the order that the primary key or unique constraint properties were configured on the principal
                entity type.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrincipalKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasPrincipalKey (Type principalEntityType, params string[] keyPropertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasPrincipalKey(class System.Type principalEntityType, string[] keyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey(System.Type,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrincipalKey (principalEntityType As Type, ParamArray keyPropertyNames As String()) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasPrincipalKey : Type * string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.HasPrincipalKey (principalEntityType, keyPropertyNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="System.Type" />
        <Parameter Name="keyPropertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="principalEntityType">
                The entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </param>
        <param name="keyPropertyNames">The name(s) of the reference key property(s).</param>
        <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                If multiple principal key properties are specified, the order of principal key properties should
                match the order that the primary key or unique constraint properties were configured on the principal
                entity type.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrincipalKey&lt;TPrincipalEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasPrincipalKey&lt;TPrincipalEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TPrincipalEntity,object&gt;&gt; keyExpression);" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasPrincipalKey&lt;TPrincipalEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TPrincipalEntity, object&gt;&gt; keyExpression) cil managed" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrincipalKey(Of TPrincipalEntity) (keyExpression As Expression(Of Func(Of TPrincipalEntity, Object))) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="F#" Value="override this.HasPrincipalKey : System.Linq.Expressions.Expression&lt;Func&lt;'PrincipalEntity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.HasPrincipalKey keyExpression" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasPrincipalKey&lt;TPrincipalEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TPrincipalEntity,object&gt;&gt; keyExpression) where TPrincipalEntity : class;" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasPrincipalKey&lt;class TPrincipalEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TPrincipalEntity, object&gt;&gt; keyExpression) cil managed" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrincipalKey(Of TPrincipalEntity As Class) (keyExpression As Expression(Of Func(Of TPrincipalEntity, Object))) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.HasPrincipalKey : System.Linq.Expressions.Expression&lt;Func&lt;'PrincipalEntity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'PrincipalEntity : null)" Usage="referenceReferenceBuilder.HasPrincipalKey keyExpression" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasPrincipalKey&lt;TPrincipalEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TPrincipalEntity,object?&gt;&gt; keyExpression) where TPrincipalEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TPrincipalEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TPrincipalEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TPrincipalEntity">
                The entity type that is the principal in this relationship. That is, the type that has the reference key properties.
            </typeparam>
        <param name="keyExpression">
          <para>
                    A lambda expression representing the reference key property(s) (<c>t =&gt; t.Id</c>).
                </para>
          <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t =&gt; new { t.Id1, t.Id2 }</c>). The order specified should match the order of
                    corresponding properties in <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />.
                </para>
        </param>
        <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                If multiple principal key properties are specified, the order of principal key properties should
                match the order that the primary key or unique constraint properties were configured on the principal
                entity type.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrincipalKey&lt;TPrincipalEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; HasPrincipalKey&lt;TPrincipalEntity&gt; (params string[] keyPropertyNames) where TPrincipalEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; HasPrincipalKey&lt;class TPrincipalEntity&gt;(string[] keyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.HasPrincipalKey``1(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrincipalKey(Of TPrincipalEntity As Class) (ParamArray keyPropertyNames As String()) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasPrincipalKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'PrincipalEntity : null)" Usage="referenceReferenceBuilder.HasPrincipalKey keyPropertyNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TPrincipalEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyPropertyNames" Type="System.String[]" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TPrincipalEntity">
                The entity type that is the principal in this relationship (the type
                that has the reference key properties).
            </typeparam>
        <param name="keyPropertyNames">The name(s) of the reference key property(s).</param>
        <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; IsRequired (bool required = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; IsRequired(bool required) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.IsRequired(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsRequired (Optional required As Boolean = true) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.IsRequired : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.IsRequired required" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">A value indicating whether this is a required relationship.</param>
        <summary>
                Configures whether this is a required relationship (i.e. whether the foreign key property(s) can
                be assigned <see langword="null" />).
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDelete">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; OnDelete (Microsoft.EntityFrameworkCore.DeleteBehavior deleteBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; OnDelete(valuetype Microsoft.EntityFrameworkCore.DeleteBehavior deleteBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.OnDelete(Microsoft.EntityFrameworkCore.DeleteBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnDelete (deleteBehavior As DeleteBehavior) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.OnDelete : Microsoft.EntityFrameworkCore.DeleteBehavior -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.OnDelete deleteBehavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteBehavior" Type="Microsoft.EntityFrameworkCore.DeleteBehavior" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="deleteBehavior">The action to perform.</param>
        <summary>
                Configures the operation applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDelete">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt; OnDelete (Microsoft.EntityFrameworkCore.Metadata.DeleteBehavior deleteBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2&lt;!TEntity, !TRelatedEntity&gt; OnDelete(valuetype Microsoft.EntityFrameworkCore.Metadata.DeleteBehavior deleteBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2.OnDelete(Microsoft.EntityFrameworkCore.Metadata.DeleteBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnDelete (deleteBehavior As DeleteBehavior) As ReferenceReferenceBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.OnDelete : Microsoft.EntityFrameworkCore.Metadata.DeleteBehavior -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt;" Usage="referenceReferenceBuilder.OnDelete deleteBehavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteBehavior" Type="Microsoft.EntityFrameworkCore.Metadata.DeleteBehavior" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="deleteBehavior"> The action to perform. </param>
        <summary>
                Configures how a delete operation is applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
