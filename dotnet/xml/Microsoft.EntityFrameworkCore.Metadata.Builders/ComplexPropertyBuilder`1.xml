<Type Name="ComplexPropertyBuilder&lt;TComplex&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;">
  <TypeSignature Language="C#" Value="public class ComplexPropertyBuilder&lt;TComplex&gt; : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ComplexPropertyBuilder`1&lt;TComplex&gt; extends Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ComplexPropertyBuilder(Of TComplex)&#xA;Inherits ComplexPropertyBuilder" />
  <TypeSignature Language="F#" Value="type ComplexPropertyBuilder&lt;'Complex&gt; = class&#xA;    inherit ComplexPropertyBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TComplex">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TComplex">The complex type being configured.</typeparam>
    <summary>
                Provides a simple API for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
            </summary>
    <remarks>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </remarks>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComplexPropertyBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty complexProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty complexProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (complexProperty As IMutableComplexProperty)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt; : Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt; complexProperty" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty" />
      </Parameters>
      <Docs>
        <param name="complexProperty">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; ComplexProperty (string propertyName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; ComplexProperty(string propertyName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.ComplexProperty(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyName As String, buildAction As Action(Of ComplexPropertyBuilder)) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.ComplexProperty (propertyName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property with this overload the property name must match the
                name of a CLR property or field on the complex type. This overload cannot be used to
                add a new shadow state complex property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; ComplexProperty (Type propertyType, string propertyName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; ComplexProperty(class System.Type propertyType, string propertyName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.ComplexProperty(System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyType As Type, propertyName As String, buildAction As Action(Of ComplexPropertyBuilder)) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.ComplexProperty (propertyType, propertyName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new complex property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; ComplexProperty (Type propertyType, string propertyName, string complexTypeName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; ComplexProperty(class System.Type propertyType, string propertyName, string complexTypeName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.ComplexProperty(System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyType As Type, propertyName As String, complexTypeName As String, buildAction As Action(Of ComplexPropertyBuilder)) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : Type * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.ComplexProperty (propertyType, propertyName, complexTypeName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="complexTypeName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="complexTypeName">The name of the complex type.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new complex property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt; ComplexProperty&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TComplex,TProperty&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt; ComplexProperty&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TComplex, !!TProperty&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyExpression As Expression(Of Func(Of TComplex, TProperty))) As ComplexPropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : System.Linq.Expressions.Expression&lt;Func&lt;'Complex, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;" Usage="complexPropertyBuilder.ComplexProperty propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TComplex,TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Returns an object that can be used to configure a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; ComplexProperty&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TComplex,TProperty&gt;&gt; propertyExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; ComplexProperty&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TComplex, !!TProperty&gt;&gt; propertyExpression, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyExpression As Expression(Of Func(Of TComplex, TProperty)), buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : System.Linq.Expressions.Expression&lt;Func&lt;'Complex, 'Property&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.ComplexProperty (propertyExpression, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TComplex,TProperty&gt;&gt;" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt; ComplexProperty&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TComplex,TProperty&gt;&gt; propertyExpression, string complexTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt; ComplexProperty&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TComplex, !!TProperty&gt;&gt; propertyExpression, string complexTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyExpression As Expression(Of Func(Of TComplex, TProperty)), complexTypeName As String) As ComplexPropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : System.Linq.Expressions.Expression&lt;Func&lt;'Complex, 'Property&gt;&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;" Usage="complexPropertyBuilder.ComplexProperty (propertyExpression, complexTypeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TComplex,TProperty&gt;&gt;" />
        <Parameter Name="complexTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <param name="complexTypeName">The name of the complex type.</param>
        <summary>
                Returns an object that can be used to configure a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; ComplexProperty&lt;TProperty&gt; (string propertyName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; ComplexProperty&lt;TProperty&gt;(string propertyName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.ComplexProperty``1(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyName As String, buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.ComplexProperty (propertyName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; ComplexProperty&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TComplex,TProperty&gt;&gt; propertyExpression, string complexTypeName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; ComplexProperty&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TComplex, !!TProperty&gt;&gt; propertyExpression, string complexTypeName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyExpression As Expression(Of Func(Of TComplex, TProperty)), complexTypeName As String, buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : System.Linq.Expressions.Expression&lt;Func&lt;'Complex, 'Property&gt;&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.ComplexProperty (propertyExpression, complexTypeName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TComplex,TProperty&gt;&gt;" />
        <Parameter Name="complexTypeName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <param name="complexTypeName">The name of the complex type.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; ComplexProperty&lt;TProperty&gt; (string propertyName, string complexTypeName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; ComplexProperty&lt;TProperty&gt;(string propertyName, string complexTypeName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.ComplexProperty``1(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyName As String, complexTypeName As String, buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.ComplexProperty (propertyName, complexTypeName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="complexTypeName" Type="System.String" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="complexTypeName">The name of the complex type.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasChangeTrackingStrategy (changeTrackingStrategy As ChangeTrackingStrategy) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.HasChangeTrackingStrategy changeTrackingStrategy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy">The change tracking strategy to be used.</param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; HasField (string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; HasField(string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.HasField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasField (fieldName As String) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.HasField : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.HasField fieldName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fieldName">The field name.</param>
        <summary>
                Sets the backing field to use for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    Backing fields are normally found by convention.
                    This method is useful for setting backing fields explicitly in cases where the
                    correct field is not found by convention.
                </para>
          <para>
                    By default, the backing field, if one is found or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. This can be changed by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-backing-fields">Backing fields</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPropertyAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; HasPropertyAnnotation (string annotation, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; HasPropertyAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.HasPropertyAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPropertyAnnotation (annotation As String, value As Object) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.HasPropertyAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.HasPropertyAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same typeBuilder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTypeAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; HasTypeAnnotation (string annotation, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; HasTypeAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.HasTypeAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasTypeAnnotation (annotation As String, value As Object) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.HasTypeAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.HasTypeAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same typeBuilder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; Ignore (System.Linq.Expressions.Expression&lt;Func&lt;TComplex,object?&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; Ignore(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TComplex, object&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (propertyExpression As Expression(Of Func(Of TComplex, Object))) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.Ignore : System.Linq.Expressions.Expression&lt;Func&lt;'Complex, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.Ignore propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TComplex,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyExpression">
                A lambda expression representing the property to be ignored
                (<c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                or navigations from the entity type that were added by convention.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; Ignore (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; Ignore(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.Ignore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (propertyName As String) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.Ignore : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.Ignore propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to be removed from the entity type.</param>
        <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                or navigations from the entity type that were added by convention.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; IsRequired (bool required = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; IsRequired(bool required) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.IsRequired(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsRequired (Optional required As Boolean = true) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.IsRequired : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.IsRequired required" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">A value indicating whether the property is required.</param>
        <summary>
                Configures whether this property must have a value assigned or <see langword="null" /> is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned <see langword="null" />.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimitiveCollection&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder&lt;TProperty&gt; PrimitiveCollection&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TComplex,TProperty&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder`1&lt;!!TProperty&gt; PrimitiveCollection&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TComplex, !!TProperty&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.PrimitiveCollection``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimitiveCollection(Of TProperty) (propertyExpression As Expression(Of Func(Of TComplex, TProperty))) As ComplexTypePrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.PrimitiveCollection : System.Linq.Expressions.Expression&lt;Func&lt;'Complex, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder&lt;'Property&gt;" Usage="complexPropertyBuilder.PrimitiveCollection propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TComplex,TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Returns an object that can be used to configure a primitive collection property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; Property&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TComplex,TProperty&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; Property&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TComplex, !!TProperty&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property(Of TProperty) (propertyExpression As Expression(Of Func(Of TComplex, TProperty))) As ComplexTypePropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.Property : System.Linq.Expressions.Expression&lt;Func&lt;'Complex, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;" Usage="complexPropertyBuilder.Property propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TComplex,TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Returns an object that can be used to configure a property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultPropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; UseDefaultPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; UseDefaultPropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.UseDefaultPropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseDefaultPropertyAccessMode (propertyAccessMode As PropertyAccessMode) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.UseDefaultPropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.UseDefaultPropertyAccessMode propertyAccessMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this entity type.</param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt; UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!TComplex&gt; UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As PropertyAccessMode) As ComplexPropertyBuilder(Of TComplex)" />
      <MemberSignature Language="F#" Value="override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Complex&gt;" Usage="complexPropertyBuilder.UsePropertyAccessMode propertyAccessMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TComplex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.</param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. Calling this method will change that behavior
                    for this property as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrides for this property any access mode that was set on the
                    entity type or model.
                </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
