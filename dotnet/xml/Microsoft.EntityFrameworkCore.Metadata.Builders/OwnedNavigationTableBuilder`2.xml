<Type Name="OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;">
  <TypeSignature Language="C#" Value="public class OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt; : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; where TOwnerEntity : class where TDependentEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OwnedNavigationTableBuilder`2&lt;class TOwnerEntity, class TDependentEntity&gt; extends Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TOwnerEntity, !TDependentEntity&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2" />
  <TypeSignature Language="VB.NET" Value="Public Class OwnedNavigationTableBuilder(Of TOwnerEntity, TDependentEntity)&#xA;Inherits OwnedNavigationTableBuilder&#xA;Implements IInfrastructure(Of OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity))" />
  <TypeSignature Language="F#" Value="type OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; = class&#xA;    inherit OwnedNavigationTableBuilder&#xA;    interface IInfrastructure&lt;OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TOwnerEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TDependentEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
    <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
    <summary>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OwnedNavigationTableBuilder (in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier? storeObject, Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor([in]valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&gt;&amp; storeObject, class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TOwnerEntity, !TDependentEntity&gt; ownedNavigationBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2.#ctor(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier}@,Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ByRef storeObject As Nullable(Of StoreObjectIdentifier), ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; : Nullable * Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (storeObject, ownedNavigationBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="storeObject" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="storeObject">To be added.</param>
        <param name="ownedNavigationBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeFromMigrations">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt; ExcludeFromMigrations (bool excluded = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2&lt;!TOwnerEntity, !TDependentEntity&gt; ExcludeFromMigrations(bool excluded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2.ExcludeFromMigrations(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExcludeFromMigrations (Optional excluded As Boolean = true) As OwnedNavigationTableBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="override this.ExcludeFromMigrations : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt;" Usage="ownedNavigationTableBuilder.ExcludeFromMigrations excluded" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="excluded" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="excluded">A value indicating whether the table should be managed by migrations.</param>
        <summary>
                Configures the table to be ignored by migrations.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-migrations">Database migrations</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasComment">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt; HasComment (string? comment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2&lt;!TOwnerEntity, !TDependentEntity&gt; HasComment(string comment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2.HasComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasComment (comment As String) As OwnedNavigationTableBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="override this.HasComment : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt;" Usage="ownedNavigationTableBuilder.HasComment comment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="comment">The comment for the table.</param>
        <summary>
                Configures a comment to be applied to the table
            </summary>
        <returns>A builder to further configure the table.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TOwnerEntity, !TDependentEntity&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity) Implements IInfrastructure(Of OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt;" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder&lt;TProperty&gt; Property&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TDependentEntity,TProperty&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder`1&lt;!!TProperty&gt; Property&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TDependentEntity, !!TProperty&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property(Of TProperty) (propertyExpression As Expression(Of Func(Of TDependentEntity, TProperty))) As ColumnBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.Property : System.Linq.Expressions.Expression&lt;Func&lt;'DependentEntity, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder&lt;'Property&gt;" Usage="ownedNavigationTableBuilder.Property propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TDependentEntity,TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (<c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Maps the property to a column on the current table and returns an object that can be used
                to provide table-specific configuration if the property is mapped to more than one table.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
