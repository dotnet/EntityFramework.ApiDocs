<Type Name="PropertiesConfigurationBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder">
  <TypeSignature Language="C#" Value="public class PropertiesConfigurationBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertiesConfigurationBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertiesConfigurationBuilder" />
  <TypeSignature Language="F#" Value="type PropertiesConfigurationBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Provides a simple API surface for setting property defaults before conventions run.
            </summary>
    <remarks>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </remarks>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertiesConfigurationBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As PropertyConfiguration)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder property" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreUnicode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder AreUnicode (bool unicode = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder AreUnicode(bool unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.AreUnicode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AreUnicode (Optional unicode As Boolean = true) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member AreUnicode : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.AreUnicode : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.AreUnicode unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unicode">A value indicating whether the property can contain unicode characters.</param>
        <summary>
                Configures whether the property as capable of persisting unicode characters.
                Can only be set on <see cref="T:System.String" /> properties.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration Configuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.Configuration" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Configuration As PropertyConfiguration" />
      <MemberSignature Language="F#" Value="member this.Configuration : Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="propertiesConfigurationBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="propertiesConfigurationBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveAnnotation (string annotation, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HaveAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveAnnotation (annotation As String, value As Object) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HaveAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.HaveAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.HaveAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion (Type conversionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion(class System.Type conversionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HaveConversion(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion (conversionType As Type) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HaveConversion : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.HaveConversion : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.HaveConversion conversionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="conversionType">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</param>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion (Type conversionType, Type? comparerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion(class System.Type conversionType, class System.Type comparerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HaveConversion(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion (conversionType As Type, comparerType As Type) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HaveConversion : Type * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.HaveConversion : Type * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.HaveConversion (conversionType, comparerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversionType" Type="System.Type" />
        <Parameter Name="comparerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="conversionType">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</param>
        <param name="comparerType">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />.</param>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion (Type conversionType, Type? comparerType, Type? providerComparerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion(class System.Type conversionType, class System.Type comparerType, class System.Type providerComparerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HaveConversion(System.Type,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion (conversionType As Type, comparerType As Type, providerComparerType As Type) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HaveConversion : Type * Type * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.HaveConversion : Type * Type * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.HaveConversion (conversionType, comparerType, providerComparerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversionType" Type="System.Type" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="comparerType" Type="System.Type" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="providerComparerType" Type="System.Type" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="conversionType">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</param>
        <param name="comparerType">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />.</param>
        <param name="providerComparerType">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> to use for the provider values.</param>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion&lt;TConversion&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion&lt;TConversion&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion&lt;TConversion&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HaveConversion``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion(Of TConversion) () As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HaveConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.HaveConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.HaveConversion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConversion" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TConversion">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</typeparam>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion&lt;TConversion,TComparer&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion&lt;TConversion,TComparer&gt; () where TComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion&lt;TConversion, (class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer) TComparer&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HaveConversion``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion(Of TConversion, TComparer) () As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HaveConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder (requires 'Comparer :&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)&#xA;override this.HaveConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder (requires 'Comparer :&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" Usage="propertiesConfigurationBuilder.HaveConversion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConversion" />
        <TypeParameter Name="TComparer">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TConversion">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</typeparam>
        <typeparam name="TComparer">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />.</typeparam>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion&lt;TConversion,TComparer,TProviderComparer&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion&lt;TConversion,TComparer,TProviderComparer&gt; () where TComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveConversion&lt;TConversion, (class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer) TComparer, TProviderComparer&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HaveConversion``3" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion(Of TConversion, TComparer, TProviderComparer) () As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HaveConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder (requires 'Comparer :&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)&#xA;override this.HaveConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder (requires 'Comparer :&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" Usage="propertiesConfigurationBuilder.HaveConversion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConversion" />
        <TypeParameter Name="TComparer">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TProviderComparer" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TConversion">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</typeparam>
        <typeparam name="TComparer">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />.</typeparam>
        <typeparam name="TProviderComparer">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> to use for the provider values.</typeparam>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveMaxLength">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveMaxLength (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveMaxLength(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HaveMaxLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveMaxLength (maxLength As Integer) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HaveMaxLength : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.HaveMaxLength : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.HaveMaxLength maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">The maximum length of data allowed in the property.</param>
        <summary>
                Configures the maximum length of data that can be stored in this property.
                Maximum length can only be set on array properties (including <see cref="T:System.String" /> properties).
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HavePrecision">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HavePrecision (int precision);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HavePrecision(int32 precision) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HavePrecision(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HavePrecision (precision As Integer) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HavePrecision : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.HavePrecision : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.HavePrecision precision" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precision" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="precision">The precision of the property.</param>
        <summary>
                Configures the precision of the property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HavePrecision">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HavePrecision (int precision, int scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HavePrecision(int32 precision, int32 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HavePrecision(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HavePrecision (precision As Integer, scale As Integer) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HavePrecision : int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.HavePrecision : int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.HavePrecision (precision, scale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precision" Type="System.Int32" />
        <Parameter Name="scale" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="precision">The precision of the property.</param>
        <param name="scale">The scale of the property.</param>
        <summary>
                Configures the precision and scale of the property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveSentinel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveSentinel (object? sentinel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder HaveSentinel(object sentinel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.HaveSentinel(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveSentinel (sentinel As Object) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HaveSentinel : obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.HaveSentinel : obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="propertiesConfigurationBuilder.HaveSentinel sentinel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentinel" Type="System.Object" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sentinel">The sentinel value.</param>
        <summary>
                Configures the value that will be used to determine if the property has been set or not. If the property is set to the
                sentinel value, then it is considered not set. By default, the sentinel value is the CLR default value for the type of
                the property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string? ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="propertiesConfigurationBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
