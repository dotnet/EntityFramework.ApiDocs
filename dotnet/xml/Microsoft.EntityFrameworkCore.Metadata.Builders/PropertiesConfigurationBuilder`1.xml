<Type Name="PropertiesConfigurationBuilder&lt;TProperty&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;">
  <TypeSignature Language="C#" Value="public class PropertiesConfigurationBuilder&lt;TProperty&gt; : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertiesConfigurationBuilder`1&lt;TProperty&gt; extends Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertiesConfigurationBuilder(Of TProperty)&#xA;Inherits PropertiesConfigurationBuilder" />
  <TypeSignature Language="F#" Value="type PropertiesConfigurationBuilder&lt;'Property&gt; = class&#xA;    inherit PropertiesConfigurationBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TProperty" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TProperty">To be added.</typeparam>
    <summary>
                Provides a simple API surface for setting property defaults before conventions run.
            </summary>
    <remarks>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </remarks>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertiesConfigurationBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As PropertyConfiguration)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt; : Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt; property" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreUnicode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; AreUnicode (bool unicode = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!TProperty&gt; AreUnicode(bool unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.AreUnicode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AreUnicode (Optional unicode As Boolean = true) As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.AreUnicode : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="propertiesConfigurationBuilder.AreUnicode unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unicode">A value indicating whether the property can contain unicode characters.</param>
        <summary>
                Configures the property as capable of persisting unicode characters.
                Can only be set on <see cref="T:System.String" /> properties.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; HaveAnnotation (string annotation, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!TProperty&gt; HaveAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.HaveAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveAnnotation (annotation As String, value As Object) As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HaveAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="propertiesConfigurationBuilder.HaveAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the property. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; HaveConversion (Type conversionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!TProperty&gt; HaveConversion(class System.Type conversionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.HaveConversion(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion (conversionType As Type) As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HaveConversion : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="propertiesConfigurationBuilder.HaveConversion conversionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="conversionType">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</param>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; HaveConversion (Type conversionType, Type? comparerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!TProperty&gt; HaveConversion(class System.Type conversionType, class System.Type comparerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.HaveConversion(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion (conversionType As Type, comparerType As Type) As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HaveConversion : Type * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="propertiesConfigurationBuilder.HaveConversion (conversionType, comparerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversionType" Type="System.Type" />
        <Parameter Name="comparerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="conversionType">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</param>
        <param name="comparerType">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />.</param>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion&lt;TConversion&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; HaveConversion&lt;TConversion&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!TProperty&gt; HaveConversion&lt;TConversion&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.HaveConversion``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion(Of TConversion) () As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HaveConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="propertiesConfigurationBuilder.HaveConversion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConversion" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TConversion">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</typeparam>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveConversion&lt;TConversion,TComparer&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; HaveConversion&lt;TConversion,TComparer&gt; () where TComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!TProperty&gt; HaveConversion&lt;TConversion, (class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer) TComparer&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.HaveConversion``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveConversion(Of TConversion, TComparer) () As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HaveConversion : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt; (requires 'Comparer :&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" Usage="propertiesConfigurationBuilder.HaveConversion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConversion" />
        <TypeParameter Name="TComparer">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TConversion">The type to convert to and from or a type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.</typeparam>
        <typeparam name="TComparer">A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />.</typeparam>
        <summary>
                Configures the property so that the property value is converted before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HaveMaxLength">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; HaveMaxLength (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!TProperty&gt; HaveMaxLength(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.HaveMaxLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HaveMaxLength (maxLength As Integer) As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HaveMaxLength : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="propertiesConfigurationBuilder.HaveMaxLength maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">The maximum length of data allowed in the property.</param>
        <summary>
                Configures the maximum length of data that can be stored in this property.
                Maximum length can only be set on array properties (including <see cref="T:System.String" /> properties).
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HavePrecision">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; HavePrecision (int precision);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!TProperty&gt; HavePrecision(int32 precision) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.HavePrecision(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HavePrecision (precision As Integer) As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HavePrecision : int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="propertiesConfigurationBuilder.HavePrecision precision" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precision" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="precision">The precision of the property.</param>
        <summary>
                Configures the precision of the property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HavePrecision">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; HavePrecision (int precision, int scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!TProperty&gt; HavePrecision(int32 precision, int32 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1.HavePrecision(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HavePrecision (precision As Integer, scale As Integer) As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.HavePrecision : int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="propertiesConfigurationBuilder.HavePrecision (precision, scale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precision" Type="System.Int32" />
        <Parameter Name="scale" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="precision">The precision of the property.</param>
        <param name="scale">The scale of the property.</param>
        <summary>
                Configures the precision and scale of the property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
