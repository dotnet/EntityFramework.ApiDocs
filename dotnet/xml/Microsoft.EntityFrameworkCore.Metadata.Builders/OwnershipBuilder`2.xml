<Type Name="OwnershipBuilder&lt;TEntity,TDependentEntity&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt;">
  <TypeSignature Language="C#" Value="public class OwnershipBuilder&lt;TEntity,TDependentEntity&gt; : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder where TEntity : class where TDependentEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OwnershipBuilder`2&lt;class TEntity, class TDependentEntity&gt; extends Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2" />
  <TypeSignature Language="VB.NET" Value="Public Class OwnershipBuilder(Of TEntity, TDependentEntity)&#xA;Inherits OwnershipBuilder" />
  <TypeSignature Language="F#" Value="type OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt; = class&#xA;    inherit OwnershipBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TDependentEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TEntity">To be added.</typeparam>
    <typeparam name="TDependentEntity">To be added.</typeparam>
    <summary>
                Provides a simple API for configuring an ownership.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OwnershipBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType dependentEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType dependentEntityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (principalEntityType As IMutableEntityType, dependentEntityType As IMutableEntityType, foreignKey As IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt; (principalEntityType, dependentEntityType, foreignKey)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        <Parameter Name="dependentEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" />
      </Parameters>
      <Docs>
        <param name="principalEntityType">To be added.</param>
        <param name="dependentEntityType">To be added.</param>
        <param name="foreignKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OwnershipBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder oldBuilder, bool foreignKeySet = false, bool principalKeySet = false, bool requiredSet = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder builder, class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (builder As InternalForeignKeyBuilder, oldBuilder As OwnershipBuilder, Optional foreignKeySet As Boolean = false, Optional principalKeySet As Boolean = false, Optional requiredSet As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder * Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder * bool * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt; (builder, oldBuilder, foreignKeySet, principalKeySet, requiredSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="oldBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="foreignKeySet" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKeySet" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="requiredSet" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="oldBuilder">To be added.</param>
        <param name="foreignKeySet">To be added.</param>
        <param name="principalKeySet">To be added.</param>
        <param name="requiredSet">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OwnershipBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder oldBuilder, bool foreignKeySet = false, bool principalKeySet = false, bool requiredSet = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder builder, class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder,Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (builder As InternalRelationshipBuilder, oldBuilder As OwnershipBuilder, Optional foreignKeySet As Boolean = false, Optional principalKeySet As Boolean = false, Optional requiredSet As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder * Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder * bool * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt; (builder, oldBuilder, foreignKeySet, principalKeySet, requiredSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="oldBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="foreignKeySet" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="principalKeySet" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="requiredSet" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="oldBuilder">To be added.</param>
        <param name="foreignKeySet">To be added.</param>
        <param name="principalKeySet">To be added.</param>
        <param name="requiredSet">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt; HasAnnotation (string annotation, object value);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2&lt;!TEntity, !TDependentEntity&gt; HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As OwnershipBuilder(Of TEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="override this.HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt;" Usage="ownershipBuilder.HasAnnotation (annotation, value)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt; HasAnnotation (string annotation, object? value);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the foreign key. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt; HasForeignKey (System.Linq.Expressions.Expression&lt;Func&lt;TDependentEntity,object&gt;&gt; foreignKeyExpression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2&lt;!TEntity, !TDependentEntity&gt; HasForeignKey(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TDependentEntity, object&gt;&gt; foreignKeyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.HasForeignKey(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (foreignKeyExpression As Expression(Of Func(Of TDependentEntity, Object))) As OwnershipBuilder(Of TEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="override this.HasForeignKey : System.Linq.Expressions.Expression&lt;Func&lt;'DependentEntity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt;" Usage="ownershipBuilder.HasForeignKey foreignKeyExpression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt; HasForeignKey (System.Linq.Expressions.Expression&lt;Func&lt;TDependentEntity,object?&gt;&gt; foreignKeyExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKeyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TDependentEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="foreignKeyExpression">
          <para>
                    A lambda expression representing the foreign key property(s) (<c>t =&gt; t.Id1</c>).
                </para>
          <para>
                    If the foreign key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t =&gt; new { t.Id1, t.Id2 }</c>). The order specified should match the order of
                    corresponding properties in <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />.
                </para>
        </param>
        <summary>
                Configures the property(s) to use as the foreign key for this relationship.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
          <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> is not specified, then an
                    attempt will be made to match the data type and order of foreign key properties against the primary
                    key of the principal entity type. If they do not match, new shadow state properties that form a
                    unique index will be added to the principal entity type to serve as the reference key.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt; HasForeignKey (params string[] foreignKeyPropertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2&lt;!TEntity, !TDependentEntity&gt; HasForeignKey(string[] foreignKeyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.HasForeignKey(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (ParamArray foreignKeyPropertyNames As String()) As OwnershipBuilder(Of TEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="override this.HasForeignKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt;" Usage="ownershipBuilder.HasForeignKey foreignKeyPropertyNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKeyPropertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="foreignKeyPropertyNames">
                The name(s) of the foreign key property(s).
            </param>
        <summary>
                Configures the property(s) to use as the foreign key for this relationship.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    If the specified property name(s) do not exist on the entity type then a new shadow state
                    property(s) will be added to serve as the foreign key. A shadow state property is one
                    that does not have a corresponding property in the entity class. The current value for the
                    property is stored in the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances
                    of the entity class.
                </para>
          <para>
                    If <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.HasPrincipalKey(System.String[])" /> is not specified, then an attempt will be made to
                    match the data type and order of foreign key properties against the primary key of the principal
                    entity type. If they do not match, new shadow state properties that form a unique index will be
                    added to the principal entity type to serve as the reference key.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrincipalKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt; HasPrincipalKey (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; keyExpression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2&lt;!TEntity, !TDependentEntity&gt; HasPrincipalKey(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, object&gt;&gt; keyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.HasPrincipalKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrincipalKey (keyExpression As Expression(Of Func(Of TEntity, Object))) As OwnershipBuilder(Of TEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="override this.HasPrincipalKey : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt;" Usage="ownershipBuilder.HasPrincipalKey keyExpression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt; HasPrincipalKey (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object?&gt;&gt; keyExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="keyExpression">
          <para>
                    A lambda expression representing the reference key property(s) (<c>t =&gt; t.Id</c>).
                </para>
          <para>
                    If the principal key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>t =&gt; new { t.Id1, t.Id2 }</c>). The order specified should match the order of
                    corresponding properties in <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.HasForeignKey(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})" />.
                </para>
        </param>
        <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrincipalKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt; HasPrincipalKey (params string[] keyPropertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2&lt;!TEntity, !TDependentEntity&gt; HasPrincipalKey(string[] keyPropertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2.HasPrincipalKey(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPrincipalKey (ParamArray keyPropertyNames As String()) As OwnershipBuilder(Of TEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="override this.HasPrincipalKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;'Entity, 'DependentEntity (requires 'Entity : null and 'DependentEntity : null)&gt;" Usage="ownershipBuilder.HasPrincipalKey keyPropertyNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder&lt;TEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyPropertyNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyPropertyNames">The name(s) of the reference key property(s).</param>
        <summary>
                Configures the unique property(s) that this relationship targets. Typically you would only call this
                method if you want to use a property(s) other than the primary key as the principal property(s). If
                the specified property(s) is not already a unique constraint (or the primary key) then a new unique
                constraint will be introduced.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
