<Type Name="DbFunctionBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder">
  <TypeSignature Language="C#" Value="public class DbFunctionBuilder" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbFunctionBuilder extends System.Object" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class DbFunctionBuilder" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type DbFunctionBuilder = class" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public class DbFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbFunctionBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public Class DbFunctionBuilder&#xA;Implements IConventionDbFunctionBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="F#" Value="type DbFunctionBuilder = class&#xA;    interface IConventionDbFunctionBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="C#" Value="public class DbFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbFunctionBuilder extends Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class DbFunctionBuilder&#xA;Inherits DbFunctionBuilderBase" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type DbFunctionBuilder = class&#xA;    inherit DbFunctionBuilderBase" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbFunctionBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction function) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As IMutableDbFunction)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder function" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="function" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="function">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbFunctionBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction function) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (function As DbFunction)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder function" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="function" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="function">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbFunctionBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="obj"> The object to compare with the current object. </param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbFunctionBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns> A hash code for the current object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasAnnotation (string annotation, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As DbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&#xA;override this.HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasAnnotation (annotation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the database function. If an annotation with the key specified in
                <paramref name="annotation" /> already exists, its value will be updated.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasName">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasName (name As String) As DbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasName : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&#xA;override this.HasName : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasName name" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="override this.HasName : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasName name" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the function in the database.</param>
        <summary>
                Sets the name of the database function.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasParameter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder HasParameter (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder HasParameter(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasParameter (name As String) As DbFunctionParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasParameter : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder&#xA;override this.HasParameter : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder" Usage="dbFunctionBuilder.HasParameter name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name"> The parameter name. </param>
        <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder" /> for a parameter with the given name.
            </summary>
        <returns> The builder to use for further parameter configuration. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasParameter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasParameter (string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasParameter(string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasParameter(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasParameter (name As String, buildAction As Action(Of DbFunctionParameterBuilder)) As DbFunctionBuilder" />
      <MemberSignature Language="F#" Value="override this.HasParameter : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasParameter (name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The parameter name.</param>
        <param name="buildAction">An action that performs configuration of the parameter.</param>
        <summary>
                Returns an object that can be used to configure a parameter with the given name.
                If no parameter with the given name exists, then a new parameter will be added.
            </summary>
        <returns>The builder to use for further parameter configuration.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSchema">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasSchema (string schema);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasSchema(string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSchema (schema As String) As DbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasSchema : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&#xA;override this.HasSchema : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasSchema schema" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="override this.HasSchema : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasSchema schema" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasSchema (string? schema);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schema">The schema of the function in the database.</param>
        <summary>
                Sets the schema of the database function.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasStoreType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasStoreType (string storeType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasStoreType(string storeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasStoreType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasStoreType (storeType As String) As DbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasStoreType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&#xA;override this.HasStoreType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasStoreType storeType" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasStoreType (string? storeType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeType" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="storeType">The return store type of the function in the database.</param>
        <summary>
                Sets the return store type of the database function.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTranslation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasTranslation (Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasTranslation(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasTranslation (translation As Func(Of IReadOnlyCollection(Of SqlExpression), SqlExpression)) As DbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&#xA;override this.HasTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasTranslation translation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="translation" Type="System.Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="translation"> The translation to use. </param>
        <summary>
          <para>
                    Sets a callback that will be invoked to perform custom translation of this
                    function. The callback takes a collection of expressions corresponding to
                    the parameters passed to the function call. The callback should return an
                    expression representing the desired translation.
          </para>
          <para>
                    See https://go.microsoft.com/fwlink/?linkid=852477 for more information.
                </para>
        </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTranslation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasTranslation (Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt;,System.Linq.Expressions.Expression&gt; translation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasTranslation(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyCollection`1&lt;class System.Linq.Expressions.Expression&gt;, class System.Linq.Expressions.Expression&gt; translation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasTranslation (translation As Func(Of IReadOnlyCollection(Of Expression), Expression)) As DbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt;, System.Linq.Expressions.Expression&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&#xA;override this.HasTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt;, System.Linq.Expressions.Expression&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasTranslation translation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="translation" Type="System.Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt;,System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="translation"> The translation to use. </param>
        <summary>
          <para>
                    Sets a callback that will be invoked to perform custom translation of this
                    function. The callback takes a collection of expressions corresponding to
                    the parameters passed to the function call. The callback should return an
                    expression representing the desired translation.
                </para>
          <para>
                    See https://go.microsoft.com/fwlink/?linkid=852477 for more information.
                </para>
        </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTranslation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasTranslation (Func&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder HasTranslation(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasTranslation(System.Func{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasTranslation (translation As Func(Of IReadOnlyList(Of SqlExpression), SqlExpression)) As DbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasTranslation : Func&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder&#xA;override this.HasTranslation : Func&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.HasTranslation translation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="translation" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="translation">The translation to use.</param>
        <summary>
                Sets a callback that will be invoked to perform custom translation of this
                function. The callback takes a collection of expressions corresponding to
                the parameters passed to the function call. The callback should return an
                expression representing the desired translation.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBuiltIn">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder IsBuiltIn (bool builtIn = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder IsBuiltIn(bool builtIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.IsBuiltIn(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsBuiltIn (Optional builtIn As Boolean = true) As DbFunctionBuilder" />
      <MemberSignature Language="F#" Value="override this.IsBuiltIn : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder" Usage="dbFunctionBuilder.IsBuiltIn builtIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builtIn" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="builtIn">The value indicating whether the database function is built-in.</param>
        <summary>
                Marks whether the database function is built-in.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase IsNullable (bool nullable = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase IsNullable(bool nullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.IsNullable(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsNullable (Optional nullable As Boolean = true) As DbFunctionBuilderBase" />
      <MemberSignature Language="F#" Value="abstract member IsNullable : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase&#xA;override this.IsNullable : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase" Usage="dbFunctionBuilder.IsNullable nullable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nullable" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="nullable">The value indicating whether the database function can return null.</param>
        <summary>
                Marks whether the database function can return null value.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Metadata As IMutableDbFunction" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The function being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName">
      <MemberSignature Language="C#" Value="bool IConventionDbFunctionBuilder.CanSetName (string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetName(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetName (name As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionDbFunctionBuilder.CanSetName" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName : string * bool -&gt; bool" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema">
      <MemberSignature Language="C#" Value="bool IConventionDbFunctionBuilder.CanSetSchema (string schema, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema(string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetSchema(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetSchema (schema As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionDbFunctionBuilder.CanSetSchema" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema : string * bool -&gt; bool" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema (schema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="schema">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType">
      <MemberSignature Language="C#" Value="bool IConventionDbFunctionBuilder.CanSetStoreType (string storeType, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType(string storeType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetStoreType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetStoreType (storeType As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionDbFunctionBuilder.CanSetStoreType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType : string * bool -&gt; bool" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType (storeType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeType" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="storeType">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation">
      <MemberSignature Language="C#" Value="bool IConventionDbFunctionBuilder.CanSetTranslation (Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetTranslation (translation As Func(Of IReadOnlyCollection(Of SqlExpression), SqlExpression), fromDataAnnotation As Boolean) As Boolean Implements IConventionDbFunctionBuilder.CanSetTranslation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * bool -&gt; bool" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation (translation, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="translation" Type="System.Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="translation">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping">
      <MemberSignature Language="C#" Value="bool IConventionDbFunctionBuilder.CanSetTypeMapping (Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping returnTypeMapping, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping(class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping returnTypeMapping, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetTypeMapping (returnTypeMapping As RelationalTypeMapping, fromDataAnnotation As Boolean) As Boolean Implements IConventionDbFunctionBuilder.CanSetTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * bool -&gt; bool" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping (returnTypeMapping, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="returnTypeMapping">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder IConventionDbFunctionBuilder.HasName (string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasName(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasName (name As String, fromDataAnnotation As Boolean) As IConventionDbFunctionBuilder Implements IConventionDbFunctionBuilder.HasName" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder IConventionDbFunctionBuilder.HasSchema (string schema, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema(string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasSchema(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasSchema (schema As String, fromDataAnnotation As Boolean) As IConventionDbFunctionBuilder Implements IConventionDbFunctionBuilder.HasSchema" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema (schema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="schema">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder IConventionDbFunctionBuilder.HasStoreType (string storeType, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType(string storeType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasStoreType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasStoreType (storeType As String, fromDataAnnotation As Boolean) As IConventionDbFunctionBuilder Implements IConventionDbFunctionBuilder.HasStoreType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType (storeType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeType" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="storeType">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder IConventionDbFunctionBuilder.HasTranslation (Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasTranslation (translation As Func(Of IReadOnlyCollection(Of SqlExpression), SqlExpression), fromDataAnnotation As Boolean) As IConventionDbFunctionBuilder Implements IConventionDbFunctionBuilder.HasTranslation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation (translation, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="translation" Type="System.Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="translation">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder IConventionDbFunctionBuilder.HasTypeMapping (Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping returnTypeMapping, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping(class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping returnTypeMapping, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasTypeMapping (returnTypeMapping As RelationalTypeMapping, fromDataAnnotation As Boolean) As IConventionDbFunctionBuilder Implements IConventionDbFunctionBuilder.HasTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="dbFunctionBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping (returnTypeMapping, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="returnTypeMapping">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionDbFunction Implements IConventionDbFunctionBuilder.Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dbFunctionBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns> A string that represents the current object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
