<Type Name="EntityTypeBuilder&lt;TEntity&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;">
  <TypeSignature Language="C#" Value="public class EntityTypeBuilder&lt;TEntity&gt; : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityTypeBuilder`1&lt;class TEntity&gt; extends Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityTypeBuilder(Of TEntity)&#xA;Inherits EntityTypeBuilder" />
  <TypeSignature Language="F#" Value="type EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit EntityTypeBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TEntity">The entity type being configured.</typeparam>
    <summary>
                Provides a simple API for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
            </summary>
    <remarks>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </remarks>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityTypeBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entityType As IMutableEntityType)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; entityType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityTypeBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As InternalEntityTypeBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ComplexProperty (string propertyName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; ComplexProperty(string propertyName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ComplexProperty(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyName As String, buildAction As Action(Of ComplexPropertyBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.ComplexProperty (propertyName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the entity type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property with this overload the property name must match the
                name of a CLR property or field on the complex type. This overload cannot be used to
                add a new shadow state complex property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ComplexProperty (Type propertyType, string propertyName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; ComplexProperty(class System.Type propertyType, string propertyName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ComplexProperty(System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyType As Type, propertyName As String, buildAction As Action(Of ComplexPropertyBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.ComplexProperty (propertyType, propertyName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt;" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Returns an object that can be used to configure a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new complex property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ComplexProperty (Type propertyType, string propertyName, string complexTypeName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; ComplexProperty(class System.Type propertyType, string propertyName, string complexTypeName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ComplexProperty(System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty (propertyType As Type, propertyName As String, complexTypeName As String, buildAction As Action(Of ComplexPropertyBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : Type * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.ComplexProperty (propertyType, propertyName, complexTypeName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="complexTypeName" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&gt;" Index="3" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">The type of the property to be configured.</param>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="complexTypeName">The name of the complex type.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Returns an object that can be used to configure a complex property of the complex type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new complex property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt; ComplexProperty&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TProperty&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt; ComplexProperty&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TProperty&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyExpression As Expression(Of Func(Of TEntity, TProperty))) As ComplexPropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;" Usage="entityTypeBuilder.ComplexProperty propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TProperty&gt;&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Returns an object that can be used to configure a complex property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
        <returns>An object that can be used to configure the complex property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ComplexProperty&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TProperty&gt;&gt; propertyExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; ComplexProperty&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TProperty&gt;&gt; propertyExpression, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyExpression As Expression(Of Func(Of TEntity, TProperty)), buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Property&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.ComplexProperty (propertyExpression, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TProperty&gt;&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt; ComplexProperty&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TProperty&gt;&gt; propertyExpression, string complexTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt; ComplexProperty&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TProperty&gt;&gt; propertyExpression, string complexTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyExpression As Expression(Of Func(Of TEntity, TProperty)), complexTypeName As String) As ComplexPropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Property&gt;&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;" Usage="entityTypeBuilder.ComplexProperty (propertyExpression, complexTypeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TProperty&gt;&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="complexTypeName" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <param name="complexTypeName">The name of the complex type.</param>
        <summary>
                Returns an object that can be used to configure a complex property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
        <returns>An object that can be used to configure the complex property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ComplexProperty&lt;TProperty&gt; (string propertyName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; ComplexProperty&lt;TProperty&gt;(string propertyName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ComplexProperty``1(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyName As String, buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.ComplexProperty (propertyName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the entity type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ComplexProperty&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TProperty&gt;&gt; propertyExpression, string complexTypeName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; ComplexProperty&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TProperty&gt;&gt; propertyExpression, string complexTypeName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyExpression As Expression(Of Func(Of TEntity, TProperty)), complexTypeName As String, buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Property&gt;&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.ComplexProperty (propertyExpression, complexTypeName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TProperty&gt;&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="complexTypeName" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <param name="complexTypeName">The name of the complex type.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ComplexProperty&lt;TProperty&gt; (string propertyName, string complexTypeName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; ComplexProperty&lt;TProperty&gt;(string propertyName, string complexTypeName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ComplexProperty``1(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperty(Of TProperty) (propertyName As String, complexTypeName As String, buildAction As Action(Of ComplexPropertyBuilder(Of TProperty))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.ComplexProperty : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.ComplexProperty (propertyName, complexTypeName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="complexTypeName" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertyBuilder&lt;TProperty&gt;&gt;" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property to be configured.</typeparam>
        <param name="propertyName">The name of the property to be configured.</param>
        <param name="complexTypeName">The name of the complex type.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Configures a complex property of the entity type.
                If no property with the given name exists, then a new property will be added.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
                When adding a new property, if a property with the same name exists in the complex class
                then it will be added to the model. If no property exists in the complex class, then
                a new shadow state complex property will be added. A shadow state property is one that does not have a
                corresponding property in the complex class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the complex class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAlternateKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasAlternateKey (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; keyExpression);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasAlternateKey(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, object&gt;&gt; keyExpression) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasAlternateKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAlternateKey (keyExpression As Expression(Of Func(Of TEntity, Object))) As KeyBuilder" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="override this.HasAlternateKey : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" Usage="entityTypeBuilder.HasAlternateKey keyExpression" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;TEntity&gt; HasAlternateKey (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; keyExpression);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder`1&lt;!TEntity&gt; HasAlternateKey(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, object&gt;&gt; keyExpression) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAlternateKey (keyExpression As Expression(Of Func(Of TEntity, Object))) As KeyBuilder(Of TEntity)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.HasAlternateKey : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasAlternateKey keyExpression" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;TEntity&gt; HasAlternateKey (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object?&gt;&gt; keyExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="keyExpression">
          <para>
                    A lambda expression representing the key property(s) (<c>blog =&gt; blog.Url</c>).
                </para>
          <para>
                    If the key is made up of multiple properties then specify an anonymous type including
                    the properties (<c>post =&gt; new { post.Title, post.BlogId }</c>).
                </para>
        </param>
        <summary>
                Creates an alternate key in the model for this entity type if one does not already exist over the specified
                properties. This will force the properties to be read-only. Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.String[])" /> or
                <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> to specify uniqueness
                in the model that does not force properties to be read-only.
            </summary>
        <returns>An object that can be used to configure the key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAlternateKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;TEntity&gt; HasAlternateKey (params string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder`1&lt;!TEntity&gt; HasAlternateKey(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasAlternateKey(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAlternateKey (ParamArray propertyNames As String()) As KeyBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasAlternateKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasAlternateKey propertyNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyNames">The names of the properties that make up the key.</param>
        <summary>
                Creates an alternate key in the model for this entity type if one does not already exist over the specified
                properties. This will force the properties to be read-only. Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.String[])" /> or
                <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" /> to specify uniqueness
                in the model that does not force properties to be read-only.
            </summary>
        <returns>An object that can be used to configure the key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnnotation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasAnnotation (string annotation, object value);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasAnnotation(string annotation, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasAnnotation (annotation As String, value As Object) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasAnnotation : string * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasAnnotation (annotation, value)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasAnnotation (string annotation, object? value);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The key of the annotation to be added or updated.</param>
        <param name="value">The value to be stored in the annotation.</param>
        <summary>
                Adds or updates an annotation on the entity type. If an annotation with the key specified in
                <paramref name="annotation" /> already exists its value will be updated.
            </summary>
        <returns>The same typeBuilder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasBaseType (string name);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasBaseType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasBaseType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (name As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasBaseType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasBaseType name" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasBaseType (string? name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the base type or <see langword="null" /> to indicate no base type.</param>
        <summary>
                Sets the base type of this entity type in an inheritance hierarchy.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasBaseType (Type entityType);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasBaseType(class System.Type entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasBaseType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType (entityType As Type) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasBaseType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasBaseType entityType" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasBaseType (Type? entityType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="entityType">The base type or <see langword="null" /> to indicate no base type.</param>
        <summary>
                Sets the base type of this entity type in an inheritance hierarchy.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType&lt;TBaseType&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasBaseType&lt;TBaseType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasBaseType&lt;TBaseType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasBaseType``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBaseType(Of TBaseType) () As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasBaseType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasBaseType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TBaseType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TBaseType">The base type or <see langword="null" /> to indicate no base type.</typeparam>
        <summary>
                Sets the base type of this entity type in an inheritance hierarchy.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasChangeTrackingStrategy (changeTrackingStrategy As ChangeTrackingStrategy) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasChangeTrackingStrategy changeTrackingStrategy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy">The change tracking strategy to be used.</param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasChangeTrackingStrategy (Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasChangeTrackingStrategy(valuetype Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasChangeTrackingStrategy (changeTrackingStrategy As ChangeTrackingStrategy) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasChangeTrackingStrategy changeTrackingStrategy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy"> The change tracking strategy to be used. </param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" /> to be used for this entity type.
                This strategy indicates how the context detects changes to properties for an instance of the entity type.
            </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;TEntity&gt; HasData (System.Collections.Generic.IEnumerable&lt;object&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder`1&lt;!TEntity&gt; HasData(class System.Collections.Generic.IEnumerable`1&lt;object&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasData(System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasData (data As IEnumerable(Of Object)) As DataBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasData : seq&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="data">
                A collection of seed data represented by anonymous types.
            </param>
        <summary>
                Adds seed data to this entity type. It is used to generate data motion migrations.
            </summary>
        <returns>An object that can be used to configure the model data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;TEntity&gt; HasData (System.Collections.Generic.IEnumerable&lt;TEntity&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder`1&lt;!TEntity&gt; HasData(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasData(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasData (data As IEnumerable(Of TEntity)) As DataBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasData : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="data">
                A collection of seed data of the same type as the entity.
            </param>
        <summary>
                Adds seed data to this entity type. It is used to generate data motion migrations.
            </summary>
        <returns>An object that can be used to configure the model data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;TEntity&gt; HasData (params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder`1&lt;!TEntity&gt; HasData(object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasData(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasData (ParamArray data As Object()) As DataBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasData : obj[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object[]" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">
                An array of seed data represented by anonymous types.
            </param>
        <summary>
                Adds seed data to this entity type. It is used to generate data motion migrations.
            </summary>
        <returns>An object that can be used to configure the model data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;TEntity&gt; HasData (params TEntity[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder`1&lt;!TEntity&gt; HasData(!TEntity[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasData(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasData (ParamArray data As TEntity()) As DataBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasData : 'Entity[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TEntity[]" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">
                An array of seed data of the same type as the entity.
            </param>
        <summary>
                Adds seed data to this entity type. It is used to generate data motion migrations.
            </summary>
        <returns>An object that can be used to configure the model data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator&lt;TDiscriminator&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TDiscriminator&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1&lt;!!TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TDiscriminator&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasDiscriminator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasDiscriminator(Of TDiscriminator) (propertyExpression As Expression(Of Func(Of TEntity, TDiscriminator))) As DiscriminatorBuilder(Of TDiscriminator)" />
      <MemberSignature Language="F#" Value="override this.HasDiscriminator : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Discriminator&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;'Discriminator&gt;" Usage="entityTypeBuilder.HasDiscriminator propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDiscriminator" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TDiscriminator&gt;&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TDiscriminator">The type of values stored in the discriminator property.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be used as the discriminator (
                <c>blog =&gt; blog.Discriminator</c>).
            </param>
        <summary>
                Configures the discriminator property used to identify the entity type in the store.
            </summary>
        <returns>A builder that allows the discriminator property to be configured.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasIndex (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; indexExpression);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasIndex(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, object&gt;&gt; indexExpression) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (indexExpression As Expression(Of Func(Of TEntity, Object))) As IndexBuilder" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="override this.HasIndex : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="entityTypeBuilder.HasIndex indexExpression" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; HasIndex (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; indexExpression);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!TEntity&gt; HasIndex(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, object&gt;&gt; indexExpression) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (indexExpression As Expression(Of Func(Of TEntity, Object))) As IndexBuilder(Of TEntity)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.HasIndex : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasIndex indexExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; HasIndex (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object?&gt;&gt; indexExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="indexExpression">
          <para>
                    A lambda expression representing the property(s) to be included in the index
                    (<c>blog =&gt; blog.Url</c>).
                </para>
          <para>
                    If the index is made up of multiple properties then specify an anonymous type including the
                    properties (<c>post =&gt; new { post.Title, post.BlogId }</c>).
                </para>
        </param>
        <summary>
                Configures an unnamed index on the specified properties.
                If there is an existing index on the given list of properties,
                then the existing index will be returned for configuration.
            </summary>
        <returns>An object that can be used to configure the index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; HasIndex (params string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!TEntity&gt; HasIndex(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (ParamArray propertyNames As String()) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasIndex : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasIndex propertyNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyNames">The names of the properties that make up the index.</param>
        <summary>
                Configures an unnamed index on the specified properties.
                If there is an existing index on the given list of properties,
                then the existing index will be returned for configuration.
            </summary>
        <returns>An object that can be used to configure the index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; HasIndex (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; indexExpression, string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!TEntity&gt; HasIndex(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, object&gt;&gt; indexExpression, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (indexExpression As Expression(Of Func(Of TEntity, Object)), name As String) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasIndex : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasIndex (indexExpression, name)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; HasIndex (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object?&gt;&gt; indexExpression, string name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="indexExpression">
          <para>
                    A lambda expression representing the property(s) to be included in the index
                    (<c>blog =&gt; blog.Url</c>).
                </para>
          <para>
                    If the index is made up of multiple properties then specify an anonymous type including the
                    properties (<c>post =&gt; new { post.Title, post.BlogId }</c>).
                </para>
        </param>
        <param name="name">The name to assign to the index.</param>
        <summary>
                Configures an index on the specified properties with the given name.
                If there is an existing index on the given list of properties and with
                the given name, then the existing index will be returned for configuration.
            </summary>
        <returns>An object that can be used to configure the index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; HasIndex (string[] propertyNames, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!TEntity&gt; HasIndex(string[] propertyNames, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasIndex (propertyNames As String(), name As String) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasIndex : string[] * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasIndex (propertyNames, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">The names of the properties that make up the index.</param>
        <param name="name">The name to assign to the index.</param>
        <summary>
                Configures an index on the specified properties with the given name.
                If there is an existing index on the given list of properties and with
                the given name, then the existing index will be returned for configuration.
            </summary>
        <returns>An object that can be used to configure the index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasKey (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; keyExpression);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasKey(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, object&gt;&gt; keyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (keyExpression As Expression(Of Func(Of TEntity, Object))) As KeyBuilder" />
      <MemberSignature Language="F#" Value="override this.HasKey : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" Usage="entityTypeBuilder.HasKey keyExpression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder HasKey (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object?&gt;&gt; keyExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="keyExpression">
          <para>
                    A lambda expression representing the primary key property(s) (<c>blog =&gt; blog.Url</c>).
                </para>
          <para>
                    If the primary key is made up of multiple properties then specify an anonymous type including the
                    properties (<c>post =&gt; new { post.Title, post.BlogId }</c>).
                </para>
        </param>
        <summary>
                Sets the properties that make up the primary key for this entity type.
            </summary>
        <returns>An object that can be used to configure the primary key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;TEntity&gt; HasKey (params string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder`1&lt;!TEntity&gt; HasKey(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasKey(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasKey (ParamArray propertyNames As String()) As KeyBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasKey : string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasKey propertyNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyNames">The names of the properties that make up the primary key.</param>
        <summary>
                Sets the properties that make up the primary key for this entity type.
            </summary>
        <returns>An object that can be used to configure the primary key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&lt;TEntity,TRelatedEntity&gt; HasMany&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt; navigationExpression = default) where TRelatedEntity : class;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; HasMany&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, class System.Collections.Generic.IEnumerable`1&lt;!!TRelatedEntity&gt;&gt;&gt; navigationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMany(Of TRelatedEntity As Class) (Optional navigationExpression As Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity))) = Nothing) As CollectionNavigationBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasMany : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, seq&lt;'RelatedEntity&gt;&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.HasMany navigationExpression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&lt;TEntity,TRelatedEntity&gt; HasMany&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;?&gt;&gt;? navigationExpression = default) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationExpression">
                A lambda expression representing the collection navigation property on this entity type that represents
                the relationship (<c>blog =&gt; blog.Posts</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
        <summary>
                Configures a relationship where this entity type has a collection that contains
                instances of the other type in the relationship.
            </summary>
        <returns>An object that can be used to configure the relationship.</returns>
        <remarks>
          <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&lt;TEntity,TRelatedEntity&gt; HasMany&lt;TRelatedEntity&gt; (string navigationName) where TRelatedEntity : class;" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; HasMany&lt;class TRelatedEntity&gt;(string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasMany``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMany(Of TRelatedEntity As Class) (navigationName As String) As CollectionNavigationBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasMany : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.HasMany navigationName" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&lt;TEntity,TRelatedEntity&gt; HasMany&lt;TRelatedEntity&gt; (string? navigationName) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationName">
                The name of the collection navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
                Configures a relationship where this entity type has a collection that contains
                instances of the other type in the relationship.
            </summary>
        <returns>An object that can be used to configure the relationship.</returns>
        <remarks>
          <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoDiscriminator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasNoDiscriminator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasNoDiscriminator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasNoDiscriminator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoDiscriminator () As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasNoDiscriminator : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasNoDiscriminator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Configures the entity type as having no discriminator property.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasNoKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasNoKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasNoKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasNoKey () As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasNoKey : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasNoKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Configures the entity type to have no keys. It will only be usable for queries.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&lt;TEntity,TRelatedEntity&gt; HasOne&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity&gt;&gt; navigationExpression = default) where TRelatedEntity : class;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; HasOne&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; navigationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOne(Of TRelatedEntity As Class) (Optional navigationExpression As Expression(Of Func(Of TEntity, TRelatedEntity)) = Nothing) As ReferenceNavigationBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasOne : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.HasOne navigationExpression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&lt;TEntity,TRelatedEntity&gt; HasOne&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity?&gt;&gt;? navigationExpression = default) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TRelatedEntity&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>post =&gt; post.Blog</c>). If no property is specified, the relationship will be
                configured without a navigation property on this end.
            </param>
        <summary>
                Configures a relationship where this entity type has a reference that points
                to a single instance of the other type in the relationship.
            </summary>
        <returns>An object that can be used to configure the relationship.</returns>
        <remarks>
          <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{`0}}})" />
                    or
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&lt;TEntity,TRelatedEntity&gt; HasOne&lt;TRelatedEntity&gt; (string navigationName) where TRelatedEntity : class;" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; HasOne&lt;class TRelatedEntity&gt;(string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasOne``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasOne(Of TRelatedEntity As Class) (navigationName As String) As ReferenceNavigationBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.HasOne : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.HasOne navigationName" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&lt;TEntity,TRelatedEntity&gt; HasOne&lt;TRelatedEntity&gt; (string? navigationName) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship. If
                no property is specified, the relationship will be configured without a navigation property on this
                end.
            </param>
        <summary>
                Configures a relationship where this entity type has a reference that points
                to a single instance of the other type in the relationship.
            </summary>
        <returns>An object that can be used to configure the relationship.</returns>
        <remarks>
          <para>
                    Note that calling this method with no parameters will explicitly configure this side
                    of the relationship to use no navigation property, even if such a property exists on the
                    entity type. If the navigation property is to be used, then it must be specified.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithMany(System.String)" />
                    or
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2.WithOne(System.String)" />
                    to fully configure the relationship. Calling just this method without the chained call will not
                    produce a valid relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueryFilter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasQueryFilter (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,bool&gt;&gt; filter);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasQueryFilter(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, bool&gt;&gt; filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasQueryFilter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasQueryFilter (filter As Expression(Of Func(Of TEntity, Boolean))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasQueryFilter : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, bool&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasQueryFilter filter" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasQueryFilter (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,bool&gt;&gt;? filter);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Boolean&gt;&gt;" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="filter">The LINQ predicate expression.</param>
        <summary>
                Specifies a LINQ predicate expression that will automatically be applied to any queries targeting
                this entity type.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasQueryFilter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasQueryFilter (System.Linq.Expressions.LambdaExpression filter);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; HasQueryFilter(class System.Linq.Expressions.LambdaExpression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasQueryFilter(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasQueryFilter (filter As LambdaExpression) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.HasQueryFilter : System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.HasQueryFilter filter" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasQueryFilter (System.Linq.Expressions.LambdaExpression? filter);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="filter">The LINQ predicate expression.</param>
        <summary>
                Specifies a LINQ predicate expression that will automatically be applied to any queries targeting
                this entity type.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; Ignore (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; propertyExpression);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; Ignore(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, object&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (propertyExpression As Expression(Of Func(Of TEntity, Object))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.Ignore : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.Ignore propertyExpression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; Ignore (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object?&gt;&gt; propertyExpression);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyExpression">
                A lambda expression representing the property to be ignored
                (<c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                or navigations from the entity type that were added by convention.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; Ignore (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; Ignore(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.Ignore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (propertyName As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.Ignore : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.Ignore propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to be removed from the entity type.</param>
        <summary>
                Excludes the given property from the entity type. This method is typically used to remove properties
                or navigations from the entity type that were added by convention.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigation&lt;TNavigation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder&lt;TEntity,TNavigation&gt; Navigation&lt;TNavigation&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TNavigation&gt;&gt;&gt; navigationExpression) where TNavigation : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder`2&lt;!TEntity, !!TNavigation&gt; Navigation&lt;class TNavigation&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, class System.Collections.Generic.IEnumerable`1&lt;!!TNavigation&gt;&gt;&gt; navigationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Navigation(Of TNavigation As Class) (navigationExpression As Expression(Of Func(Of TEntity, IEnumerable(Of TNavigation)))) As NavigationBuilder(Of TEntity, TNavigation)" />
      <MemberSignature Language="F#" Value="override this.Navigation : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, seq&lt;'Navigation&gt;&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder&lt;'Entity, 'Navigation (requires 'Entity : null and 'Navigation : null)&gt; (requires 'Navigation : null)" Usage="entityTypeBuilder.Navigation navigationExpression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder&lt;TEntity,TNavigation&gt; Navigation&lt;TNavigation&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TNavigation&gt;?&gt;&gt; navigationExpression) where TNavigation : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder&lt;TEntity,TNavigation&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNavigation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TNavigation&gt;&gt;&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TNavigation">The target entity type.</typeparam>
        <param name="navigationExpression">
                A lambda expression representing the navigation property to be configured (
                <c>blog =&gt; blog.Posts</c>).
            </param>
        <summary>
                Returns an object that can be used to configure an existing navigation property of the entity type.
                It is an error for the navigation property not to exist.
            </summary>
        <returns>An object that can be used to configure the navigation property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigation&lt;TNavigation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder&lt;TEntity,TNavigation&gt; Navigation&lt;TNavigation&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TNavigation&gt;&gt; navigationExpression) where TNavigation : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder`2&lt;!TEntity, !!TNavigation&gt; Navigation&lt;class TNavigation&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TNavigation&gt;&gt; navigationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Navigation(Of TNavigation As Class) (navigationExpression As Expression(Of Func(Of TEntity, TNavigation))) As NavigationBuilder(Of TEntity, TNavigation)" />
      <MemberSignature Language="F#" Value="override this.Navigation : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Navigation&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder&lt;'Entity, 'Navigation (requires 'Entity : null and 'Navigation : null)&gt; (requires 'Navigation : null)" Usage="entityTypeBuilder.Navigation navigationExpression" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder&lt;TEntity,TNavigation&gt; Navigation&lt;TNavigation&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TNavigation?&gt;&gt; navigationExpression) where TNavigation : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder&lt;TEntity,TNavigation&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNavigation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TNavigation&gt;&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TNavigation">The target entity type.</typeparam>
        <param name="navigationExpression">
                A lambda expression representing the navigation property to be configured (
                <c>blog =&gt; blog.Posts</c>).
            </param>
        <summary>
                Returns an object that can be used to configure an existing navigation property of the entity type.
                It is an error for the navigation property not to exist.
            </summary>
        <returns>An object that can be used to configure the navigation property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder New (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder New(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.New(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function New (builder As InternalEntityTypeBuilder) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="override this.New : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="entityTypeBuilder.New builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="builder"> The internal builder to create the new builder from. </param>
        <summary>
                Creates a new builder based on the provided internal builder. This overridden implementation creates
                <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1" /> instances so that logic inherited from the base class will
                use those instead of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />.
            </summary>
        <returns> The newly created builder. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany (string ownedTypeName, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsMany(string ownedTypeName, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany (ownedTypeName As String, navigationName As String, buildAction As Action(Of OwnedNavigationBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.OwnsMany (ownedTypeName, navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany (Type ownedType, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsMany(class System.Type ownedType, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany(System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany (ownedType As Type, navigationName As String, buildAction As Action(Of OwnedNavigationBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.OwnsMany (ownedType, navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedType" Type="System.Type" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedType">The entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany (string ownedTypeName, Type ownedType, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsMany(string ownedTypeName, class System.Type ownedType, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany(System.String,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany (ownedTypeName As String, ownedType As Type, navigationName As String, buildAction As Action(Of OwnedNavigationBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string * Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.OwnsMany (ownedTypeName, ownedType, navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="ownedType" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="navigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="ownedType">The CLR type of the entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, class System.Collections.Generic.IEnumerable`1&lt;!!TRelatedEntity&gt;&gt;&gt; navigationExpression) cil managed" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (navigationExpression As Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity)))) As CollectionOwnershipBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, seq&lt;'RelatedEntity&gt;&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany navigationExpression" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, class System.Collections.Generic.IEnumerable`1&lt;!!TRelatedEntity&gt;&gt;&gt; navigationExpression) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (navigationExpression As Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity)))) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, seq&lt;'RelatedEntity&gt;&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany navigationExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;?&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.2">Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt;" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the owned type and the relationship.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string navigationName) where TRelatedEntity : class;" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(string navigationName) cil managed" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (navigationName As String) As CollectionOwnershipBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany navigationName" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string navigationName) where TRelatedEntity : class;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(string navigationName) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (navigationName As String) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany navigationName" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.2">Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the owned type and the relationship.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, class System.Collections.Generic.IEnumerable`1&lt;!!TRelatedEntity&gt;&gt;&gt; navigationExpression, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (navigationExpression As Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity))), buildAction As Action(Of CollectionOwnershipBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, seq&lt;'RelatedEntity&gt;&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany (navigationExpression, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt;" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <param name="buildAction"> An action that performs configuration of the owned type and the relationship. </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, class System.Collections.Generic.IEnumerable`1&lt;!!TRelatedEntity&gt;&gt;&gt; navigationExpression, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (navigationExpression As Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity))), buildAction As Action(Of OwnedNavigationBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, seq&lt;'RelatedEntity&gt;&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany (navigationExpression, buildAction)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;?&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (navigationName As String, buildAction As Action(Of CollectionOwnershipBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany (navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction"> An action that performs configuration of the owned type and the relationship. </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (navigationName As String, buildAction As Action(Of OwnedNavigationBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany (navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string ownedTypeName, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(string ownedTypeName, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, class System.Collections.Generic.IEnumerable`1&lt;!!TRelatedEntity&gt;&gt;&gt; navigationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (ownedTypeName As String, navigationExpression As Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity)))) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, seq&lt;'RelatedEntity&gt;&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany (ownedTypeName, navigationExpression)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string ownedTypeName, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;?&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the owned type and the relationship.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string ownedTypeName, string navigationName) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(string ownedTypeName, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (ownedTypeName As String, navigationName As String) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany (ownedTypeName, navigationName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the owned type and the relationship.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string ownedTypeName, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(string ownedTypeName, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, class System.Collections.Generic.IEnumerable`1&lt;!!TRelatedEntity&gt;&gt;&gt; navigationExpression, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (ownedTypeName As String, navigationExpression As Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity))), buildAction As Action(Of OwnedNavigationBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, seq&lt;'RelatedEntity&gt;&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany (ownedTypeName, navigationExpression, buildAction)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string ownedTypeName, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;?&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Collections.Generic.IEnumerable&lt;TRelatedEntity&gt;&gt;&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsMany&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsMany&lt;TRelatedEntity&gt; (string ownedTypeName, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsMany&lt;class TRelatedEntity&gt;(string ownedTypeName, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsMany``1(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsMany(Of TRelatedEntity As Class) (ownedTypeName As String, navigationName As String, buildAction As Action(Of OwnedNavigationBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsMany : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsMany (ownedTypeName, navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne (string ownedTypeName, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsOne(string ownedTypeName, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedTypeName As String, navigationName As String, buildAction As Action(Of OwnedNavigationBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.OwnsOne (ownedTypeName, navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne (Type ownedType, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsOne(class System.Type ownedType, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne(System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedType As Type, navigationName As String, buildAction As Action(Of OwnedNavigationBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.OwnsOne (ownedType, navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedType" Type="System.Type" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedType">The entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne (string ownedTypeName, Type ownedType, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsOne(string ownedTypeName, class System.Type ownedType, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne(System.String,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne (ownedTypeName As String, ownedType As Type, navigationName As String, buildAction As Action(Of OwnedNavigationBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string * Type * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.OwnsOne (ownedTypeName, ownedType, navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="ownedType" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="navigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="ownedType">The CLR type of the entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; navigationExpression) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (navigationExpression As Expression(Of Func(Of TEntity, TRelatedEntity))) As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne navigationExpression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; navigationExpression) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (navigationExpression As Expression(Of Func(Of TEntity, TRelatedEntity))) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne navigationExpression" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity?&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TRelatedEntity&gt;&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the owned type and the relationship.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string navigationName) where TRelatedEntity : class;" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(string navigationName) cil managed" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (navigationName As String) As ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne navigationName" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string navigationName) where TRelatedEntity : class;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(string navigationName) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (navigationName As String) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne navigationName" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.2">Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-2.2;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the owned type and the relationship.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; navigationExpression, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (navigationExpression As Expression(Of Func(Of TEntity, TRelatedEntity)), buildAction As Action(Of OwnedNavigationBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'RelatedEntity&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne (navigationExpression, buildAction)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity?&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TRelatedEntity&gt;&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; navigationExpression, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (navigationExpression As Expression(Of Func(Of TEntity, TRelatedEntity)), buildAction As Action(Of ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'RelatedEntity&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne (navigationExpression, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TRelatedEntity&gt;&gt;" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <param name="buildAction"> An action that performs configuration of the owned type and the relationship. </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (navigationName As String, buildAction As Action(Of OwnedNavigationBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne (navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (navigationName As String, buildAction As Action(Of ReferenceOwnershipBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne (navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceOwnershipBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction"> An action that performs configuration of the owned type and the relationship. </param>
        <summary>
          <para>
                    Configures a relationship where the target entity is owned by (or part of) this entity.
                </para>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
        </summary>
        <returns> An object that can be used to configure the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string ownedTypeName, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(string ownedTypeName, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; navigationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (ownedTypeName As String, navigationExpression As Expression(Of Func(Of TEntity, TRelatedEntity))) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne (ownedTypeName, navigationExpression)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string ownedTypeName, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity?&gt;&gt; navigationExpression) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the owned type and the relationship.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string ownedTypeName, string navigationName) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(string ownedTypeName, string navigationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (ownedTypeName As String, navigationName As String) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne (ownedTypeName, navigationName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the owned type and the relationship.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string ownedTypeName, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(string ownedTypeName, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; navigationExpression, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (ownedTypeName As String, navigationExpression As Expression(Of Func(Of TEntity, TRelatedEntity)), buildAction As Action(Of OwnedNavigationBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'RelatedEntity&gt;&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne (ownedTypeName, navigationExpression, buildAction)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string ownedTypeName, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TRelatedEntity?&gt;&gt; navigationExpression, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="ownedTypeName">The name of the entity type that this relationship targets.</param>
        <param name="navigationExpression">
                A lambda expression representing the reference navigation property on this entity type that represents
                the relationship (<c>customer =&gt; customer.Address</c>).
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnsOne&lt;TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; OwnsOne&lt;TRelatedEntity&gt; (string ownedTypeName, string navigationName, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt; buildAction) where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; OwnsOne&lt;class TRelatedEntity&gt;(string ownedTypeName, string navigationName, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!TEntity, !!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.OwnsOne``1(System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OwnsOne(Of TRelatedEntity As Class) (ownedTypeName As String, navigationName As String, buildAction As Action(Of OwnedNavigationBuilder(Of TEntity, TRelatedEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.OwnsOne : string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'RelatedEntity : null)" Usage="entityTypeBuilder.OwnsOne (ownedTypeName, navigationName, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedTypeName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
        <param name="ownedTypeName"> The name of the entity type that this relationship targets.</param>
        <param name="navigationName">
                The name of the reference navigation property on this entity type that represents the relationship.
            </param>
        <param name="buildAction">An action that performs configuration of the owned type and the relationship.</param>
        <summary>
                Configures a relationship where the target entity is owned by (or part of) this entity.
            </summary>
        <returns>An object that can be used to configure the entity type.</returns>
        <remarks>
          <para>
                    The target entity type for each ownership relationship is treated as a different entity type
                    even if the navigation is of the same type. Configuration of the target entity type
                    isn't applied to the target entity type of other ownership relationships.
                </para>
          <para>
                    Most operations on an owned entity require accessing it through the owner entity using the corresponding navigation.
                </para>
          <para>
                    After calling this method, you should chain a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2.WithOwner(System.String)" /> to fully configure the relationship.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimitiveCollection&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt; PrimitiveCollection&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TProperty&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder`1&lt;!!TProperty&gt; PrimitiveCollection&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TProperty&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.PrimitiveCollection``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrimitiveCollection(Of TProperty) (propertyExpression As Expression(Of Func(Of TEntity, TProperty))) As PrimitiveCollectionBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.PrimitiveCollection : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;'Property&gt;" Usage="entityTypeBuilder.PrimitiveCollection propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TProperty&gt;&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Returns an object that can be used to configure a property of the entity type where that property represents
                a collection of primitive values, such as strings or integers.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; Property&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TProperty&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; Property&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntity, !!TProperty&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Property(Of TProperty) (propertyExpression As Expression(Of Func(Of TEntity, TProperty))) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="override this.Property : System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="entityTypeBuilder.Property propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyExpression">
                A lambda expression representing the property to be configured (
                <c>blog =&gt; blog.Url</c>).
            </param>
        <summary>
                Returns an object that can be used to configure a property of the entity type.
                If the specified property is not already part of the model, it will be added.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToQuery">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToQuery (System.Linq.Expressions.Expression&lt;Func&lt;System.Linq.IQueryable&lt;TEntity&gt;&gt;&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; ToQuery(class System.Linq.Expressions.Expression`1&lt;class System.Func`1&lt;class System.Linq.IQueryable`1&lt;!TEntity&gt;&gt;&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.ToQuery(System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{`0}}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToQuery (query As Expression(Of Func(Of IQueryable(Of TEntity)))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member ToQuery : System.Linq.Expressions.Expression&lt;Func&lt;System.Linq.IQueryable&lt;'Entity&gt;&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.ToQuery : System.Linq.Expressions.Expression&lt;Func&lt;System.Linq.IQueryable&lt;'Entity&gt;&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.ToQuery query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Use InMemoryEntityTypeBuilderExtensions.ToInMemoryQuery")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use InMemoryEntityTypeBuilderExtensions.ToInMemoryQuery")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Linq.IQueryable&lt;TEntity&gt;&gt;&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="query">The query that will provide the underlying data for the keyless entity type.</param>
        <summary>
                Configures a query used to provide data for a keyless entity type.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; UsePropertyAccessMode (Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As PropertyAccessMode) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.UsePropertyAccessMode propertyAccessMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" Index="0" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for properties of this entity type. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for all properties of this entity type.
                </para>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method witll change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
        </summary>
        <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!TEntity&gt; UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As PropertyAccessMode) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityTypeBuilder.UsePropertyAccessMode propertyAccessMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of this entity type.</param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for all properties of this entity type.
            </summary>
        <returns>The same builder instance so that multiple configuration calls can be chained.</returns>
        <remarks>
          <para>
                    By default, the backing field, if one is found by convention or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses.  Calling this method will change that behavior
                    for all properties of this entity type as described in the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> enum.
                </para>
          <para>
                    Calling this method overrides for all properties of this entity type any access mode that was
                    set on the model.
                </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
