<Type Name="IMigrationsDatabaseLock" FullName="Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock">
  <TypeSignature Language="C#" Value="public interface IMigrationsDatabaseLock : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IMigrationsDatabaseLock implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMigrationsDatabaseLock&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type IMigrationsDatabaseLock = interface&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Represents an exclusive lock on the database that is used to ensure that only one migration application can be run at a time.
            </summary>
    <remarks>
                Typically only database providers implement this.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="HistoryRepository">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository HistoryRepository { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository HistoryRepository" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock.HistoryRepository" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property HistoryRepository As IHistoryRepository" />
      <MemberSignature Language="F#" Value="member this.HistoryRepository : Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository" Usage="Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock.HistoryRepository" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               The history repository.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReacquireIfNeeded">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock ReacquireIfNeeded (bool connectionReopened, bool? transactionRestarted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock ReacquireIfNeeded(bool connectionReopened, valuetype System.Nullable`1&lt;bool&gt; transactionRestarted) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock.ReacquireIfNeeded(System.Boolean,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReacquireIfNeeded (connectionReopened As Boolean, transactionRestarted As Nullable(Of Boolean)) As IMigrationsDatabaseLock" />
      <MemberSignature Language="F#" Value="abstract member ReacquireIfNeeded : bool * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&#xA;override this.ReacquireIfNeeded : bool * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock" Usage="iMigrationsDatabaseLock.ReacquireIfNeeded (connectionReopened, transactionRestarted)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionReopened" Type="System.Boolean" />
        <Parameter Name="transactionRestarted" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="connectionReopened">Indicates whether the connection was reopened.</param>
        <param name="transactionRestarted">
                Indicates whether the transaction was restarted.
                <see langword="null" /> if there's no current transaction.
            </param>
        <summary>
                Acquires an exclusive lock on the database again if the current one was already released.
            </summary>
        <returns>An object that can be disposed to release the lock.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReacquireIfNeededAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&gt; ReacquireIfNeededAsync (bool connectionReopened, bool? transactionRestarted, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&gt; ReacquireIfNeededAsync(bool connectionReopened, valuetype System.Nullable`1&lt;bool&gt; transactionRestarted, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock.ReacquireIfNeededAsync(System.Boolean,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReacquireIfNeededAsync (connectionReopened As Boolean, transactionRestarted As Nullable(Of Boolean), Optional cancellationToken As CancellationToken = Nothing) As Task(Of IMigrationsDatabaseLock)" />
      <MemberSignature Language="F#" Value="abstract member ReacquireIfNeededAsync : bool * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&gt;&#xA;override this.ReacquireIfNeededAsync : bool * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&gt;" Usage="iMigrationsDatabaseLock.ReacquireIfNeededAsync (connectionReopened, transactionRestarted, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionReopened" Type="System.Boolean" />
        <Parameter Name="transactionRestarted" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="connectionReopened">Indicates whether the connection was reopened.</param>
        <param name="transactionRestarted">
                Indicates whether the transaction was restarted.
                <see langword="null" /> if there's no current transaction.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Acquires an exclusive lock on the database again, if the current one was already released.
            </summary>
        <returns>An object that can be disposed to release the lock.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
