<Type Name="IHistoryRepository" FullName="Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository">
  <TypeSignature Language="C#" Value="public interface IHistoryRepository" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHistoryRepository" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHistoryRepository" />
  <TypeSignature Language="F#" Value="type IHistoryRepository = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IHistoryRepository" FrameworkAlternate="efcore-8.0;efcore-9.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                An interface for the repository used to access the '__EFMigrationsHistory' table that tracks metadata
                about EF Core Migrations such as which migrations have been applied.
            </summary>
    <remarks>
      <para>
                    Database providers typically implement this service by inheriting from <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository" />.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-migrations">Database migrations</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AcquireDatabaseLock">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock AcquireDatabaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock AcquireDatabaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.AcquireDatabaseLock" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireDatabaseLock () As IMigrationsDatabaseLock" />
      <MemberSignature Language="F#" Value="abstract member AcquireDatabaseLock : unit -&gt; Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock" Usage="iHistoryRepository.AcquireDatabaseLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Acquires an exclusive lock on the database.
            </summary>
        <returns>An object that can be disposed to release the lock.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireDatabaseLockAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&gt; AcquireDatabaseLockAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&gt; AcquireDatabaseLockAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.AcquireDatabaseLockAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireDatabaseLockAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of IMigrationsDatabaseLock)" />
      <MemberSignature Language="F#" Value="abstract member AcquireDatabaseLockAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&gt;" Usage="iHistoryRepository.AcquireDatabaseLockAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Migrations.IMigrationsDatabaseLock&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Acquires an exclusive lock on the database asynchronously.
            </summary>
        <returns>An object that can be disposed to release the lock.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public void Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Create" />
      <MemberSignature Language="VB.NET" Value="Public Sub Create ()" />
      <MemberSignature Language="F#" Value="abstract member Create : unit -&gt; unit" Usage="iHistoryRepository.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates the history table.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.CreateAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iHistoryRepository.CreateAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Creates the history table.
            </summary>
        <returns>
                A task that represents the asynchronous operation.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateIfNotExists">
      <MemberSignature Language="C#" Value="public virtual bool CreateIfNotExists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateIfNotExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.CreateIfNotExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIfNotExists () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CreateIfNotExists : unit -&gt; bool&#xA;override this.CreateIfNotExists : unit -&gt; bool" Usage="iHistoryRepository.CreateIfNotExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates the history table if it doesn't exist.
            </summary>
        <returns>
          <see langword="true" /> if the table was created, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CreateIfNotExistsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateIfNotExistsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.CreateIfNotExistsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIfNotExistsAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateIfNotExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CreateIfNotExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iHistoryRepository.CreateIfNotExistsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Creates the history table.
            </summary>
        <returns>
                A task that represents the asynchronous operation. The task result contains
                <see langword="true" /> if the table was created, <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Exists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Exists : unit -&gt; bool" Usage="iHistoryRepository.Exists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Checks whether the history table exists.
            </summary>
        <returns>
          <see langword="true" /> if the table already exists, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ExistsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ExistsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExistsAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iHistoryRepository.ExistsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Checks whether the history table exists.
            </summary>
        <returns>
                A task that represents the asynchronous operation. The task result contains
                <see langword="true" /> if the table already exists, <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAppliedMigrations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.HistoryRow&gt; GetAppliedMigrations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Migrations.HistoryRow&gt; GetAppliedMigrations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppliedMigrations () As IReadOnlyList(Of HistoryRow)" />
      <MemberSignature Language="F#" Value="abstract member GetAppliedMigrations : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.HistoryRow&gt;" Usage="iHistoryRepository.GetAppliedMigrations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.HistoryRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Queries the history table for all migrations that have been applied.
            </summary>
        <returns>The list of applied migrations, as <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entities.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppliedMigrationsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.HistoryRow&gt;&gt; GetAppliedMigrationsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Migrations.HistoryRow&gt;&gt; GetAppliedMigrationsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppliedMigrationsAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of HistoryRow))" />
      <MemberSignature Language="F#" Value="abstract member GetAppliedMigrationsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.HistoryRow&gt;&gt;" Usage="iHistoryRepository.GetAppliedMigrationsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Migrations.HistoryRow&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Queries the history table for all migrations that have been applied.
            </summary>
        <returns>
                A task that represents the asynchronous operation. The task result contains
                the list of applied migrations, as <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entities.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBeginIfExistsScript">
      <MemberSignature Language="C#" Value="public string GetBeginIfExistsScript (string migrationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetBeginIfExistsScript(string migrationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBeginIfExistsScript (migrationId As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GetBeginIfExistsScript : string -&gt; string" Usage="iHistoryRepository.GetBeginIfExistsScript migrationId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="migrationId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="migrationId">The migration identifier.</param>
        <summary>
                Generates a SQL Script that will <c>BEGIN</c> a block
                of SQL if and only if the migration with the given identifier already exists in the history table.
            </summary>
        <returns>The generated SQL.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBeginIfNotExistsScript">
      <MemberSignature Language="C#" Value="public string GetBeginIfNotExistsScript (string migrationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetBeginIfNotExistsScript(string migrationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBeginIfNotExistsScript (migrationId As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GetBeginIfNotExistsScript : string -&gt; string" Usage="iHistoryRepository.GetBeginIfNotExistsScript migrationId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="migrationId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="migrationId">The migration identifier.</param>
        <summary>
                Generates a SQL Script that will <c>BEGIN</c> a block
                of SQL if and only if the migration with the given identifier does not already exist in the history table.
            </summary>
        <returns>The generated SQL.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCreateIfNotExistsScript">
      <MemberSignature Language="C#" Value="public string GetCreateIfNotExistsScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCreateIfNotExistsScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCreateIfNotExistsScript () As String" />
      <MemberSignature Language="F#" Value="abstract member GetCreateIfNotExistsScript : unit -&gt; string" Usage="iHistoryRepository.GetCreateIfNotExistsScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Generates a SQL script that will create the history table if and only if it does not already exist.
            </summary>
        <returns>The SQL script.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCreateScript">
      <MemberSignature Language="C#" Value="public string GetCreateScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCreateScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCreateScript () As String" />
      <MemberSignature Language="F#" Value="abstract member GetCreateScript : unit -&gt; string" Usage="iHistoryRepository.GetCreateScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Generates a SQL script that will create the history table.
            </summary>
        <returns>The SQL script.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteScript">
      <MemberSignature Language="C#" Value="public string GetDeleteScript (string migrationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetDeleteScript(string migrationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeleteScript (migrationId As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GetDeleteScript : string -&gt; string" Usage="iHistoryRepository.GetDeleteScript migrationId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="migrationId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="migrationId">The migration identifier of the row to delete.</param>
        <summary>
                Generates a SQL script to delete a row from the history table.
            </summary>
        <returns>The generated SQL.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEndIfScript">
      <MemberSignature Language="C#" Value="public string GetEndIfScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEndIfScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEndIfScript () As String" />
      <MemberSignature Language="F#" Value="abstract member GetEndIfScript : unit -&gt; string" Usage="iHistoryRepository.GetEndIfScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Generates a SQL script to <c>END</c> the SQL block.
            </summary>
        <returns>The generated SQL.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertScript">
      <MemberSignature Language="C#" Value="public string GetInsertScript (Microsoft.EntityFrameworkCore.Migrations.HistoryRow row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetInsertScript(class Microsoft.EntityFrameworkCore.Migrations.HistoryRow row) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertScript (row As HistoryRow) As String" />
      <MemberSignature Language="F#" Value="abstract member GetInsertScript : Microsoft.EntityFrameworkCore.Migrations.HistoryRow -&gt; string" Usage="iHistoryRepository.GetInsertScript row" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="Microsoft.EntityFrameworkCore.Migrations.HistoryRow" />
      </Parameters>
      <Docs>
        <param name="row">The row to insert, represented as a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entity.</param>
        <summary>
                Generates a SQL script to insert a row into the history table.
            </summary>
        <returns>The generated SQL.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockReleaseBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Migrations.LockReleaseBehavior LockReleaseBehavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.Migrations.LockReleaseBehavior LockReleaseBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.LockReleaseBehavior" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LockReleaseBehavior As LockReleaseBehavior" />
      <MemberSignature Language="F#" Value="member this.LockReleaseBehavior : Microsoft.EntityFrameworkCore.Migrations.LockReleaseBehavior" Usage="Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.LockReleaseBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Migrations.LockReleaseBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The condition under witch the lock is released implicitly.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
