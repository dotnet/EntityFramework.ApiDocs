<Type Name="ProviderConventionSetBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder">
  <TypeSignature Language="C#" Value="public class ProviderConventionSetBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IProviderConventionSetBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProviderConventionSetBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IProviderConventionSetBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConventionSetBuilder&#xA;Implements IProviderConventionSetBuilder" />
  <TypeSignature Language="F#" Value="type ProviderConventionSetBuilder = class&#xA;    interface IProviderConventionSetBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IProviderConventionSetBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    A service on the EF internal service provider that creates the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" />
                    for the current database provider. This is combined with <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetPlugin" />
                    instances to produce the full convention set exposed by the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder" />
                    service.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
      <para>
                    Database providers should implement this service by inheriting from either
                    this class (for non-relational providers) or `RelationalConventionSetBuilder` (for relational providers).
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConventionSetBuilder (Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As ProviderConventionSetBuilderDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">Parameter object containing dependencies for this service.</param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConventionSet">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet CreateConventionSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet CreateConventionSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder.CreateConventionSet" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateConventionSet () As ConventionSet" />
      <MemberSignature Language="F#" Value="abstract member CreateConventionSet : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet&#xA;override this.CreateConventionSet : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" Usage="providerConventionSetBuilder.CreateConventionSet " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IProviderConventionSetBuilder.CreateConventionSet</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Builds and returns the convention set for the current database provider.
            </summary>
        <returns>The convention set for the current database provider.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As ProviderConventionSetBuilderDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceConvention&lt;TConvention,TImplementation&gt;">
      <MemberSignature Language="C#" Value="protected virtual bool ReplaceConvention&lt;TConvention,TImplementation&gt; (System.Collections.Generic.IList&lt;TConvention&gt; conventionsList, TImplementation newConvention) where TImplementation : TConvention;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReplaceConvention&lt;TConvention, (!!TConvention) TImplementation&gt;(class System.Collections.Generic.IList`1&lt;!!TConvention&gt; conventionsList, !!TImplementation newConvention) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder.ReplaceConvention``2(System.Collections.Generic.IList{``0},``1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ReplaceConvention(Of TConvention, TImplementation) (conventionsList As IList(Of TConvention), newConvention As TImplementation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ReplaceConvention : System.Collections.Generic.IList&lt;'Convention&gt; * 'Implementation -&gt; bool&#xA;override this.ReplaceConvention : System.Collections.Generic.IList&lt;'Convention&gt; * 'Implementation -&gt; bool" Usage="providerConventionSetBuilder.ReplaceConvention (conventionsList, newConvention)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConvention" />
        <TypeParameter Name="TImplementation">
          <Constraints>
            <BaseTypeName>TConvention</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="conventionsList" Type="System.Collections.Generic.IList&lt;TConvention&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="newConvention" Type="TImplementation" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TConvention">The type of convention being replaced.</typeparam>
        <typeparam name="TImplementation">The type of the old convention.</typeparam>
        <param name="conventionsList">The list of existing convention instances to scan.</param>
        <param name="newConvention">The new convention.</param>
        <summary>
                Replaces an existing convention with a derived convention.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceConvention&lt;TConvention,TImplementation&gt;">
      <MemberSignature Language="C#" Value="protected virtual bool ReplaceConvention&lt;TConvention,TImplementation&gt; (System.Collections.Generic.List&lt;TConvention&gt; conventionsList, TImplementation newConvention) where TImplementation : TConvention;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReplaceConvention&lt;TConvention, (!!TConvention) TImplementation&gt;(class System.Collections.Generic.List`1&lt;!!TConvention&gt; conventionsList, !!TImplementation newConvention) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder.ReplaceConvention``2(System.Collections.Generic.List{``0},``1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ReplaceConvention(Of TConvention, TImplementation) (conventionsList As List(Of TConvention), newConvention As TImplementation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ReplaceConvention : System.Collections.Generic.List&lt;'Convention&gt; * 'Implementation -&gt; bool&#xA;override this.ReplaceConvention : System.Collections.Generic.List&lt;'Convention&gt; * 'Implementation -&gt; bool" Usage="providerConventionSetBuilder.ReplaceConvention (conventionsList, newConvention)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TConvention" />
        <TypeParameter Name="TImplementation">
          <Constraints>
            <BaseTypeName>TConvention</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="conventionsList" Type="System.Collections.Generic.List&lt;TConvention&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="newConvention" Type="TImplementation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TConvention">The type of convention being replaced.</typeparam>
        <typeparam name="TImplementation">The type of the old convention.</typeparam>
        <param name="conventionsList">The list of existing convention instances to scan.</param>
        <param name="newConvention">The new convention.</param>
        <summary>
                Replaces an existing convention with a derived convention.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
