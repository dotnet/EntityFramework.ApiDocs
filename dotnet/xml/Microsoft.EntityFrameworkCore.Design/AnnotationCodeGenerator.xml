<Type Name="AnnotationCodeGenerator" FullName="Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator">
  <TypeSignature Language="C#" Value="public class AnnotationCodeGenerator : Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AnnotationCodeGenerator extends System.Object implements class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class AnnotationCodeGenerator&#xA;Implements IAnnotationCodeGenerator" />
  <TypeSignature Language="F#" Value="type AnnotationCodeGenerator = class&#xA;    interface IAnnotationCodeGenerator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Base class to be used by database providers when implementing an <see cref="T:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" /></summary>
    <remarks>
      <para>
                    This implementation returns <see langword="false" /> for all 'IsHandledByConvention' methods and
                    <see langword="null" /> for all 'GenerateFluentApi' methods. Providers should override for the
                    annotations that they understand.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnnotationCodeGenerator (Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As AnnotationCodeGeneratorDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator : Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies -&gt; Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator" Usage="new Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">Parameter object containing dependencies for this service.</param>
        <summary>
                Initializes a new instance of this class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As AnnotationCodeGeneratorDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies" Usage="Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterIgnoredAnnotations">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; FilterIgnoredAnnotations (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; FilterIgnoredAnnotations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.FilterIgnoredAnnotations(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FilterIgnoredAnnotations (annotations As IEnumerable(Of IAnnotation)) As IEnumerable(Of IAnnotation)" />
      <MemberSignature Language="F#" Value="abstract member FilterIgnoredAnnotations : seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;&#xA;override this.FilterIgnoredAnnotations : seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Usage="annotationCodeGenerator.FilterIgnoredAnnotations annotations" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.FilterIgnoredAnnotations(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateDataAnnotation">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment GenerateDataAnnotation (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment GenerateDataAnnotation(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateDataAnnotation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateDataAnnotation (entityType As IEntityType, annotation As IAnnotation) As AttributeCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateDataAnnotation : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&#xA;override this.GenerateDataAnnotation : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment" Usage="annotationCodeGenerator.GenerateDataAnnotation (entityType, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment? GenerateDataAnnotation (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a data annotation attribute code fragment for the given <paramref name="annotation" />,
                or <see langword="null" /> if no data annotation exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDataAnnotation">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment GenerateDataAnnotation (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment GenerateDataAnnotation(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateDataAnnotation(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateDataAnnotation (property As IProperty, annotation As IAnnotation) As AttributeCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateDataAnnotation : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&#xA;override this.GenerateDataAnnotation : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment" Usage="annotationCodeGenerator.GenerateDataAnnotation (property, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment? GenerateDataAnnotation (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a data annotation attribute code fragment for the given <paramref name="annotation" />,
                or <see langword="null" /> if no data annotation exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDataAnnotationAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes (Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes(class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateDataAnnotationAttributes (annotatable As IAnnotatable, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;&#xA;override this.GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateDataAnnotationAttributes (annotatable, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotatable">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateDataAnnotationAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateDataAnnotationAttributes (entityType As IEntityType, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;&#xA;override this.GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateDataAnnotationAttributes (entityType, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateDataAnnotationAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes (Microsoft.EntityFrameworkCore.Metadata.IProperty property, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateDataAnnotationAttributes (property As IProperty, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;&#xA;override this.GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateDataAnnotationAttributes (property, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (checkConstraint As ICheckConstraint, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (checkConstraint, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkConstraint" Type="Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="checkConstraint">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (complexProperty As IComplexProperty, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (complexProperty, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexProperty">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IComplexType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (complexType As IComplexType, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IComplexType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IComplexType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (complexType, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexType" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexType">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IComplexType" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (entityType As IEntityType, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (entityType, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (entityType As IEntityType, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (fragment As IEntityTypeMappingFragment, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (fragment, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fragment">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (foreignKey As IForeignKey, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (foreignKey, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (foreignKey As IForeignKey, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (index As IIndex, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (index, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (index As IIndex, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (key As IKey, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (key, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (key As IKey, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (model As IModel, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (model, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (model As IModel, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="model">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (navigation As INavigation, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (navigation, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (property As IProperty, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (property, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (property As IProperty, annotation As IAnnotation) As MethodCallCodeFragment" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (overrides As IRelationalPropertyOverrides, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (overrides, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrides" Type="Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="overrides">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.ISequence,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (sequence As ISequence, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.ISequence * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.ISequence * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (sequence, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="Microsoft.EntityFrameworkCore.Metadata.ISequence" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sequence">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (navigation As ISkipNavigation, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (navigation, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment? GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.ITrigger,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateFluentApi (trigger As ITrigger, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.ITrigger * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.ITrigger * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="annotationCodeGenerator.GenerateFluentApi (trigger, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="Microsoft.EntityFrameworkCore.Metadata.ITrigger" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="trigger">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITrigger" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                if no fluent API call exists for it.
            </summary>
        <returns>
          <see langword="null" />.</returns>
        <remarks>
                The default implementation always returns <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (entityType As IEntityType, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="annotationCodeGenerator.GenerateFluentApi (entityType, annotation, language)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Returns <c>null</c> unless overridden to do otherwise.
            </summary>
        <returns>
          <c>Null.</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (foreignKey As IForeignKey, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="annotationCodeGenerator.GenerateFluentApi (foreignKey, annotation, language)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="foreignKey"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Returns <c>null</c> unless overridden to do otherwise.
            </summary>
        <returns>
          <c>Null.</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (index As IIndex, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="annotationCodeGenerator.GenerateFluentApi (index, annotation, language)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="index"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Returns <c>null</c> unless overridden to do otherwise.
            </summary>
        <returns>
          <c>Null.</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (key As IKey, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="annotationCodeGenerator.GenerateFluentApi (key, annotation, language)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="key"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Returns <c>null</c> unless overridden to do otherwise.
            </summary>
        <returns>
          <c>Null.</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (model As IModel, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="annotationCodeGenerator.GenerateFluentApi (model, annotation, language)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Returns <c>null</c> unless overridden to do otherwise.
            </summary>
        <returns>
          <c>Null.</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public virtual string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApi (property As IProperty, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string&#xA;override this.GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="annotationCodeGenerator.GenerateFluentApi (property, annotation, language)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Returns <c>null</c> unless overridden to do otherwise.
            </summary>
        <returns>
          <c>Null.</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (annotatable As IAnnotatable, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (annotatable, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotatable">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (checkConstraint As ICheckConstraint, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (checkConstraint, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkConstraint" Type="Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="checkConstraint">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (complexProperty As IComplexProperty, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (complexProperty, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexProperty">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IComplexType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (complexType As IComplexType, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IComplexType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IComplexType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (complexType, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IComplexType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexType" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexType">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (entityType As IEntityType, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (entityType, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (fragment As IEntityTypeMappingFragment, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (fragment, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fragment">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IIndex index, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (index As IIndex, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IIndex * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IIndex * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (index, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IKey key, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (key As IKey, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (key, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IModel model, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (model As IModel, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IModel * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IModel * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (model, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (navigation As INavigation, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (navigation, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IProperty property, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (property As IProperty, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (property, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (overrides As IRelationalPropertyOverrides, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (overrides, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrides" Type="Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="overrides">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ISequence,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (sequence As ISequence, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ISequence * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ISequence * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (sequence, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ISequence,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="Microsoft.EntityFrameworkCore.Metadata.ISequence" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sequence">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (navigation As ISkipNavigation, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (navigation, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ITrigger,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (trigger As ITrigger, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ITrigger * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ITrigger * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (trigger, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ITrigger,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="Microsoft.EntityFrameworkCore.Metadata.ITrigger" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="trigger">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IForeignKey navigation, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey navigation, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (navigation As IForeignKey, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (navigation, annotations)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (foreignKey As IForeignKey, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="annotationCodeGenerator.GenerateFluentApiCalls (foreignKey, annotations)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="foreignKey">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (checkConstraint As ICheckConstraint, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (checkConstraint, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkConstraint" Type="Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="checkConstraint">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="checkConstraint" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (complexProperty As IComplexProperty, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (complexProperty, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexProperty">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="complexProperty" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IComplexType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (complexType As IComplexType, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IComplexType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IComplexType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (complexType, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexType" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexType">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IComplexType" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="complexType" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsHandledByConvention (entityType As IEntityType, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (entityType, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (entityType As IEntityType, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="entityType">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="entityType" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (fragment As IEntityTypeMappingFragment, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (fragment, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fragment">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="fragment" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsHandledByConvention (foreignKey As IForeignKey, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (foreignKey, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (foreignKey As IForeignKey, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="foreignKey">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="foreignKey" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsHandledByConvention (index As IIndex, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (index, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (index As IIndex, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="index">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="index" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsHandledByConvention (key As IKey, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (key, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (key As IKey, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="key" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsHandledByConvention (model As IModel, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (model, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (model As IModel, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="model">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="model" />.
            </summary>
        <returns>
          <see langword="true" /> if the annotation is handled by convention;
                <see langword="false" /> if code must be generated.
            </returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (navigation As INavigation, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (navigation, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="navigation" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsHandledByConvention (property As IProperty, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (property, annotation)" />
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (property As IProperty, annotation As IAnnotation) As Boolean" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />
      </Parameters>
      <Docs>
        <param name="property">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="property" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (overrides As IRelationalPropertyOverrides, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (overrides, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrides" Type="Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="overrides">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="overrides" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.ISequence,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (sequence As ISequence, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.ISequence * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.ISequence * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (sequence, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="Microsoft.EntityFrameworkCore.Metadata.ISequence" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sequence">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="sequence" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (navigation As ISkipNavigation, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (navigation, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="navigation" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="protected virtual bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.ITrigger,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsHandledByConvention (trigger As ITrigger, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.ITrigger * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool&#xA;override this.IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.ITrigger * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="annotationCodeGenerator.IsHandledByConvention (trigger, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="Microsoft.EntityFrameworkCore.Metadata.ITrigger" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="trigger">The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITrigger" />.</param>
        <param name="annotation">The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.</param>
        <summary>
                Checks if the given <paramref name="annotation" /> is handled by convention when
                applied to the given <paramref name="trigger" />.
            </summary>
        <returns>
          <see langword="false" />.</returns>
        <remarks>
                The default implementation always returns <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (annotatable As IAnnotatable, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (annotatable, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotatable">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (checkConstraint As ICheckConstraint, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (checkConstraint, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkConstraint" Type="Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="checkConstraint">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (complexProperty As IComplexProperty, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (complexProperty, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexProperty">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IComplexType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (complexType As IComplexType, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IComplexType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IComplexType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (complexType, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IComplexType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexType" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexType">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (entityType As IEntityType, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (entityType, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (fragment As IEntityTypeMappingFragment, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (fragment, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fragment">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (foreignKey As IForeignKey, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (foreignKey, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IIndex index, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (index As IIndex, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IIndex * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IIndex * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (index, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IKey key, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (key As IKey, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (key, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IModel model, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (model As IModel, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IModel * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IModel * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (model, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (navigation As INavigation, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (navigation, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IProperty property, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (property As IProperty, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (property, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (overrides As IRelationalPropertyOverrides, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (overrides, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrides" Type="Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="overrides">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ISequence,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (sequence As ISequence, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ISequence * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ISequence * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (sequence, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ISequence,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="Microsoft.EntityFrameworkCore.Metadata.ISequence" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sequence">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (navigation As ISkipNavigation, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (navigation, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ITrigger,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (trigger As ITrigger, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ITrigger * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ITrigger * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="annotationCodeGenerator.RemoveAnnotationsHandledByConventions (trigger, annotations)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ITrigger,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="Microsoft.EntityFrameworkCore.Metadata.ITrigger" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="trigger">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
