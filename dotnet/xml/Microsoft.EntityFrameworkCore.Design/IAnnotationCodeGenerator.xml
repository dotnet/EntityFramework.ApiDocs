<Type Name="IAnnotationCodeGenerator" FullName="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator">
  <TypeSignature Language="C#" Value="public interface IAnnotationCodeGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAnnotationCodeGenerator" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAnnotationCodeGenerator" />
  <TypeSignature Language="F#" Value="type IAnnotationCodeGenerator = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IAnnotationCodeGenerator" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                Implemented by database providers to control which annotations need to
                have code generated (as opposed to being handled by convention) and then to generate
                the code if needed.
            </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FilterIgnoredAnnotations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; FilterIgnoredAnnotations (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; FilterIgnoredAnnotations(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.FilterIgnoredAnnotations(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterIgnoredAnnotations (annotations As IEnumerable(Of IAnnotation)) As IEnumerable(Of IAnnotation)" />
      <MemberSignature Language="F#" Value="abstract member FilterIgnoredAnnotations : seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Usage="iAnnotationCodeGenerator.FilterIgnoredAnnotations annotations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotations">The annotations from which to filter the ignored ones.</param>
        <summary>
                Filters out annotations in <paramref name="annotations" /> for which code should never be generated.
            </summary>
        <returns>The filtered annotations.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDataAnnotationAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes (Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes(class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateDataAnnotationAttributes (annotatable As IAnnotatable, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;&#xA;override this.GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateDataAnnotationAttributes (annotatable, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotatable">The annotatable to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding data annotation attributes, returns those attribute code fragments
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDataAnnotationAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateDataAnnotationAttributes (entityType As IEntityType, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;&#xA;override this.GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateDataAnnotationAttributes (entityType, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding data annotation attributes, returns those attribute code fragments
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDataAnnotationAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes (Microsoft.EntityFrameworkCore.Metadata.IProperty property, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GenerateDataAnnotationAttributes(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateDataAnnotationAttributes (property As IProperty, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;&#xA;override this.GenerateDataAnnotationAttributes : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateDataAnnotationAttributes (property, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding data annotation attributes, returns those attribute code fragments
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (entityType As IEntityType, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (entityType, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (foreignKey As IForeignKey, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (foreignKey, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="foreignKey"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (index As IIndex, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (index, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (key As IKey, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (key, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="key"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (model As IModel, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (model, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (property As IProperty, annotation As IAnnotation) As MethodCallCodeFragment" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" Usage="iAnnotationCodeGenerator.GenerateFluentApi (property, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (entityType As IEntityType, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (entityType, annotation, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IEntityType, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IEntityType, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (foreignKey As IForeignKey, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (foreignKey, annotation, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IForeignKey, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IForeignKey, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="foreignKey"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (index As IIndex, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (index, annotation, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IIndex, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IIndex, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="index"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (key As IKey, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (key, annotation, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IKey, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IKey, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="key"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (model As IModel, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (model, annotation, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IModel, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IModel, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApi">
      <MemberSignature Language="C#" Value="public string GenerateFluentApi (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateFluentApi(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateFluentApi (property As IProperty, annotation As IAnnotation, language As String) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApi : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation * string -&gt; string" Usage="iAnnotationCodeGenerator.GenerateFluentApi (property, annotation, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GenerateFluentApi(IProperty, IAnnotation) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="language" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> for which code should be generated. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> for which code should be generated.</param>
        <param name="language"> The programming language to use. For example, CSharp. </param>
        <summary>
                Generates fluent API calls for the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> in the given programming language.
            </summary>
        <returns> The generated code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (annotatable As IAnnotatable, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (annotatable, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotatable">The annotatable to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (checkConstraint As ICheckConstraint, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (checkConstraint, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkConstraint" Type="Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="checkConstraint">The check constraint to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (complexProperty As IComplexProperty, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (complexProperty, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexProperty">The complex property to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IComplexType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (complexType As IComplexType, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IComplexType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IComplexType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (complexType, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexType" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexType">The entity type to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (entityType As IEntityType, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (entityType, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (fragment As IEntityTypeMappingFragment, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (fragment, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fragment">The entity mapping fragment to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (foreignKey As IForeignKey, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (foreignKey, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">The foreign key to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IIndex index, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (index As IIndex, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IIndex * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IIndex * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (index, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">The index to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IKey key, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (key As IKey, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (key, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">The key to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IModel model, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (model As IModel, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IModel * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IModel * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (model, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="model">The model to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (navigation As INavigation, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (navigation, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">The navigation to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IProperty property, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (property As IProperty, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (property, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (overrides As IRelationalPropertyOverrides, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (overrides, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrides" Type="Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="overrides">The property overrides to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ISequence,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (sequence As ISequence, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ISequence * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ISequence * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (sequence, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="Microsoft.EntityFrameworkCore.Metadata.ISequence" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sequence">The sequence to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (navigation As ISkipNavigation, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (navigation, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">The skip navigation to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFluentApiCalls">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls (Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt; GenerateFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ITrigger,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateFluentApiCalls (trigger As ITrigger, annotations As IDictionary(Of String, IAnnotation)) As IReadOnlyList(Of MethodCallCodeFragment)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ITrigger * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;&#xA;override this.GenerateFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ITrigger * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;" Usage="iAnnotationCodeGenerator.GenerateFluentApiCalls (trigger, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="Microsoft.EntityFrameworkCore.Metadata.ITrigger" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="trigger">The trigger to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (entityType As IEntityType, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (entityType, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.
            </summary>
        <returns> True if the annotation is handled by convention; false if code must be generated. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (foreignKey As IForeignKey, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (foreignKey, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="foreignKey"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (index As IIndex, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (index, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="index"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (key As IKey, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (key, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="key"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (model As IModel, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (model, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </summary>
        <returns> True if the annotation is handled by convention; false if code must be generated. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public bool IsHandledByConvention (Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHandledByConvention (property As IProperty, annotation As IAnnotation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation -&gt; bool" Usage="iAnnotationCodeGenerator.IsHandledByConvention (property, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />. </param>
        <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
        <summary>
                Checks if the given <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" /> is handled by convention when
                applied to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable annotatable, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (annotatable As IAnnotatable, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (annotatable, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotatable" Type="Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="annotatable">The annotatable to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to generate fluent API calls.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint checkConstraint, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (checkConstraint As ICheckConstraint, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (checkConstraint, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkConstraint" Type="Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="checkConstraint">The check constraint to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IComplexProperty complexProperty, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (complexProperty As IComplexProperty, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (complexProperty, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexProperty">The complex property to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IComplexType complexType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IComplexType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (complexType As IComplexType, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IComplexType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IComplexType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (complexType, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexType" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexType">The complex type to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment fragment, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (fragment As IEntityTypeMappingFragment, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (fragment, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fragment">The entity mapping fragment to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (foreignKey As IForeignKey, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (foreignKey, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">The foreign key to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IIndex index, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (index As IIndex, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IIndex * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IIndex * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (index, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">The index to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IKey key, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (key As IKey, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IKey * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (key, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">The key to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IModel model, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (model As IModel, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IModel * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IModel * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (model, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="model">The model to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (navigation As INavigation, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (navigation, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">The navigation to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IProperty property, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (property As IProperty, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IProperty * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (property, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides overrides, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (overrides As IRelationalPropertyOverrides, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (overrides, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrides" Type="Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="overrides">The property overrides to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ISequence,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (sequence As ISequence, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ISequence * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ISequence * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (sequence, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="Microsoft.EntityFrameworkCore.Metadata.ISequence" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sequence">The sequence to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation navigation, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (navigation As ISkipNavigation, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (navigation, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">The navigation to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.ITrigger trigger, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.ITrigger,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (trigger As ITrigger, annotations As IDictionary(Of String, IAnnotation))" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ITrigger * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.ITrigger * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (trigger, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="Microsoft.EntityFrameworkCore.Metadata.ITrigger" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="trigger">The trigger to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotationsHandledByConventions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IEntityType entity, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entity, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (entity As IEntityType, annotations As IDictionary(Of String, IAnnotation))" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (entity, annotations)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotationsHandledByConventions (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Collections.Generic.IDictionary&lt;string,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotationsHandledByConventions(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; annotations) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAnnotationsHandledByConventions (entityType As IEntityType, annotations As IDictionary(Of String, IAnnotation))" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit&#xA;override this.RemoveAnnotationsHandledByConventions : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Collections.Generic.IDictionary&lt;string, Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt; -&gt; unit" Usage="iAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions (entityType, annotations)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="annotations" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entity">The entity to which the annotations are applied.</param>
        <param name="entityType">The entity type to which the annotations are applied.</param>
        <param name="annotations">The set of annotations from which to remove the conventional ones.</param>
        <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
