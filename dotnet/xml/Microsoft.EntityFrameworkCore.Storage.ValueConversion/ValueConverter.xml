<Type Name="ValueConverter" FullName="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter">
  <TypeSignature Language="C#" Value="public abstract class ValueConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValueConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueConverter" />
  <TypeSignature Language="F#" Value="type ValueConverter = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Defines conversions from an object of one type in a model to an object of the same or
                different type in the store.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueConverter (System.Linq.Expressions.LambdaExpression convertToProviderExpression, System.Linq.Expressions.LambdaExpression convertFromProviderExpression, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = default);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.LambdaExpression convertToProviderExpression, class System.Linq.Expressions.LambdaExpression convertFromProviderExpression, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.#ctor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (convertToProviderExpression As LambdaExpression, convertFromProviderExpression As LambdaExpression, Optional mappingHints As ConverterMappingHints = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter : System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints -&gt; Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Usage="new Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter (convertToProviderExpression, convertFromProviderExpression, mappingHints)" />
      <MemberSignature Language="C#" Value="protected ValueConverter (System.Linq.Expressions.LambdaExpression convertToProviderExpression, System.Linq.Expressions.LambdaExpression convertFromProviderExpression, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints? mappingHints = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="convertToProviderExpression" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="convertFromProviderExpression" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="mappingHints" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints" />
      </Parameters>
      <Docs>
        <param name="convertToProviderExpression">
                The expression to convert objects when writing data to the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </param>
        <param name="convertFromProviderExpression">
                The expression to convert objects when reading data from the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </param>
        <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" /> to create data types with appropriate
                facets for the converted data.
            </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> class.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueConverter (System.Linq.Expressions.LambdaExpression convertToProviderExpression, System.Linq.Expressions.LambdaExpression convertFromProviderExpression, bool convertsNulls, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints? mappingHints = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.LambdaExpression convertToProviderExpression, class System.Linq.Expressions.LambdaExpression convertFromProviderExpression, bool convertsNulls, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.#ctor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Boolean,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (convertToProviderExpression As LambdaExpression, convertFromProviderExpression As LambdaExpression, convertsNulls As Boolean, Optional mappingHints As ConverterMappingHints = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter : System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.LambdaExpression * bool * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints -&gt; Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Usage="new Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter (convertToProviderExpression, convertFromProviderExpression, convertsNulls, mappingHints)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="convertToProviderExpression" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="convertFromProviderExpression" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="convertsNulls" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="mappingHints" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="convertToProviderExpression">
                The expression to convert objects when writing data to the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </param>
        <param name="convertFromProviderExpression">
                The expression to convert objects when reading data from the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </param>
        <param name="convertsNulls">
                If <see langword="true" />, then the nulls will be passed to the converter for conversion. Otherwise null
                values always remain null.
            </param>
        <param name="mappingHints">
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" /> to create data types with appropriate
                facets for the converted data.
            </param>
        <summary>
          <para>
                    Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> class, allowing conversion of
                    nulls.
                </para>
          <para>
                    Warning: this is currently an internal API since converting nulls to and from the database can lead to broken
                    queries and other issues. See <see href="https://github.com/dotnet/efcore/issues/26230">GitHub issue #26230</see>
                    for more information and examples.
                </para>
        </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckTypeSupported">
      <MemberSignature Language="C#" Value="protected static Type CheckTypeSupported (Type type, Type converterType, params Type[] supportedTypes);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Type CheckTypeSupported(class System.Type type, class System.Type converterType, class System.Type[] supportedTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.CheckTypeSupported(System.Type,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CheckTypeSupported (type As Type, converterType As Type, ParamArray supportedTypes As Type()) As Type" />
      <MemberSignature Language="F#" Value="static member CheckTypeSupported : Type * Type * Type[] -&gt; Type" Usage="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.CheckTypeSupported (type, converterType, supportedTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="converterType" Type="System.Type" />
        <Parameter Name="supportedTypes" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">The type to check.</param>
        <param name="converterType">The value converter type.</param>
        <param name="supportedTypes">The types that are supported.</param>
        <summary>
                Checks that the type used with a value converter is supported by that converter and throws if not.
            </summary>
        <returns>The given type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComposeWith">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter ComposeWith (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter secondConverter);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter ComposeWith(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter secondConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ComposeWith(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComposeWith (secondConverter As ValueConverter) As ValueConverter" />
      <MemberSignature Language="F#" Value="abstract member ComposeWith : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&#xA;override this.ComposeWith : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Usage="valueConverter.ComposeWith secondConverter" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter ComposeWith (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? secondConverter);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secondConverter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
      </Parameters>
      <Docs>
        <param name="secondConverter">The second converter.</param>
        <summary>
                Composes another <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> instance with this one such that
                the result of the first conversion is used as the input to the second conversion.
            </summary>
        <returns>The composed converter.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromProvider">
      <MemberSignature Language="C#" Value="public abstract Func&lt;object,object&gt; ConvertFromProvider { get; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;object, object&gt; ConvertFromProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertFromProvider" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ConvertFromProvider As Func(Of Object, Object)" />
      <MemberSignature Language="F#" Value="member this.ConvertFromProvider : Func&lt;obj, obj&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertFromProvider" />
      <MemberSignature Language="C#" Value="public abstract Func&lt;object?,object?&gt; ConvertFromProvider { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the function to convert objects when reading data from the store,
                setup to handle nulls, boxing, and non-exact matches of simple types.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromProviderExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression ConvertFromProviderExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression ConvertFromProviderExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertFromProviderExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConvertFromProviderExpression As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.ConvertFromProviderExpression : System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertFromProviderExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the expression to convert objects when reading data from the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertsNulls">
      <MemberSignature Language="C#" Value="public virtual bool ConvertsNulls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertsNulls" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertsNulls" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConvertsNulls As Boolean" />
      <MemberSignature Language="F#" Value="member this.ConvertsNulls : bool" Usage="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertsNulls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                If <see langword="true" />, then the nulls will be passed to the converter for conversion. Otherwise null
                values always remain null.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    By default, value converters do not handle nulls so that a value converter for a non-nullable property (such as
                    a primary key) can be used for correlated nullable properties, such as any corresponding foreign key properties.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToProvider">
      <MemberSignature Language="C#" Value="public abstract Func&lt;object,object&gt; ConvertToProvider { get; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;object, object&gt; ConvertToProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertToProvider" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ConvertToProvider As Func(Of Object, Object)" />
      <MemberSignature Language="F#" Value="member this.ConvertToProvider : Func&lt;obj, obj&gt;" Usage="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertToProvider" />
      <MemberSignature Language="C#" Value="public abstract Func&lt;object?,object?&gt; ConvertToProvider { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the function to convert objects when writing data to the store,
                setup to handle nulls, boxing, and non-exact matches of simple types.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToProviderExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression ConvertToProviderExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression ConvertToProviderExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertToProviderExpression" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConvertToProviderExpression As LambdaExpression" />
      <MemberSignature Language="F#" Value="member this.ConvertToProviderExpression : System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ConvertToProviderExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the expression to convert objects when writing data to the store,
                exactly as supplied and may not handle
                nulls, boxing, and non-exact matches of simple types.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MappingHints">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints MappingHints { get; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints MappingHints" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.MappingHints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MappingHints As ConverterMappingHints" />
      <MemberSignature Language="F#" Value="member this.MappingHints : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints" Usage="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.MappingHints" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints? MappingHints { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Hints that can be used by the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" /> to create data types with appropriate
                facets for the converted data.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelClrType">
      <MemberSignature Language="C#" Value="public abstract Type ModelClrType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ModelClrType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ModelClrType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ModelClrType As Type" />
      <MemberSignature Language="F#" Value="member this.ModelClrType : Type" Usage="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ModelClrType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The CLR type used in the EF model.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderClrType">
      <MemberSignature Language="C#" Value="public abstract Type ProviderClrType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ProviderClrType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ProviderClrType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ProviderClrType As Type" />
      <MemberSignature Language="F#" Value="member this.ProviderClrType : Type" Usage="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter.ProviderClrType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The CLR type used when reading and writing from the store.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-value-converters">EF Core value converters</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
