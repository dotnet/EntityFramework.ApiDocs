<Type Name="InfrastructureExtensions" FullName="Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions">
  <TypeSignature Language="C#" Value="public static class InfrastructureExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit InfrastructureExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Class InfrastructureExtensions" />
  <TypeSignature Language="F#" Value="type InfrastructureExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public static object GetService (Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt; accessor, Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetService(class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt; accessor, class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions.GetService(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider},System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetService (accessor As IInfrastructure(Of IServiceProvider), serviceType As Type) As Object" />
      <MemberSignature Language="F#" Value="static member GetService : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt; * Type -&gt; obj" Usage="Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions.GetService (accessor, serviceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessor" Type="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="serviceType" Type="System.Type" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="accessor">To be added.</param>
        <param name="serviceType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public static TService GetService&lt;TService&gt; (Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt; accessor);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TService GetService&lt;TService&gt;(class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt; accessor) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetService(Of TService) (accessor As IInfrastructure(Of IServiceProvider)) As TService" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member GetService : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt; -&gt; 'Service" Usage="Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions.GetService accessor" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public static TService GetService&lt;TService&gt; (Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt; accessor) where TService : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TService GetService&lt;class TService&gt;(class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt; accessor) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetService(Of TService As Class) (accessor As IInfrastructure(Of IServiceProvider)) As TService" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="static member GetService : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt; -&gt; 'Service (requires 'Service : null)" Usage="Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions.GetService accessor" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TService</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="accessor" Type="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">To be added.</typeparam>
        <param name="accessor">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
