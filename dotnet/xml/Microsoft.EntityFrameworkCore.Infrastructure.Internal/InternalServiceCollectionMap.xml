<Type Name="InternalServiceCollectionMap" FullName="Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap">
  <TypeSignature Language="C#" Value="public class InternalServiceCollectionMap : Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalServiceCollectionMap extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalServiceCollectionMap&#xA;Implements IInternalServiceCollectionMap" />
  <TypeSignature Language="F#" Value="type InternalServiceCollectionMap = class&#xA;    interface IInternalServiceCollectionMap" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalServiceCollectionMap (Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceCollection As IServiceCollection)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap serviceCollection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Parameters>
      <Docs>
        <param name="serviceCollection">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDependency">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap AddDependency (Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap AddDependency(class System.Type serviceType, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap.AddDependency(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddDependency (serviceType As Type, lifetime As ServiceLifetime) As IInternalServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member AddDependency : Type * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&#xA;override this.AddDependency : Type * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap" Usage="internalServiceCollectionMap.AddDependency (serviceType, lifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <param name="serviceType">To be added.</param>
        <param name="lifetime">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDependencyScoped&lt;TDependencies&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap AddDependencyScoped&lt;TDependencies&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap AddDependencyScoped&lt;TDependencies&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap.AddDependencyScoped``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddDependencyScoped(Of TDependencies) () As IInternalServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member AddDependencyScoped : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&#xA;override this.AddDependencyScoped : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap" Usage="internalServiceCollectionMap.AddDependencyScoped " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap.AddDependencyScoped``1</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDependencies">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TDependencies">To be added.</typeparam>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDependencySingleton&lt;TDependencies&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap AddDependencySingleton&lt;TDependencies&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap AddDependencySingleton&lt;TDependencies&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap.AddDependencySingleton``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddDependencySingleton(Of TDependencies) () As IInternalServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member AddDependencySingleton : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&#xA;override this.AddDependencySingleton : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap" Usage="internalServiceCollectionMap.AddDependencySingleton " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap.AddDependencySingleton``1</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDependencies">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TDependencies">To be added.</typeparam>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNewDescriptor">
      <MemberSignature Language="C#" Value="public virtual void AddNewDescriptor (System.Collections.Generic.IList&lt;int&gt; indexes, Microsoft.Extensions.DependencyInjection.ServiceDescriptor newDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddNewDescriptor(class System.Collections.Generic.IList`1&lt;int32&gt; indexes, class Microsoft.Extensions.DependencyInjection.ServiceDescriptor newDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap.AddNewDescriptor(System.Collections.Generic.IList{System.Int32},Microsoft.Extensions.DependencyInjection.ServiceDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddNewDescriptor (indexes As IList(Of Integer), newDescriptor As ServiceDescriptor)" />
      <MemberSignature Language="F#" Value="abstract member AddNewDescriptor : System.Collections.Generic.IList&lt;int&gt; * Microsoft.Extensions.DependencyInjection.ServiceDescriptor -&gt; unit&#xA;override this.AddNewDescriptor : System.Collections.Generic.IList&lt;int&gt; * Microsoft.Extensions.DependencyInjection.ServiceDescriptor -&gt; unit" Usage="internalServiceCollectionMap.AddNewDescriptor (indexes, newDescriptor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.Collections.Generic.IList&lt;System.Int32&gt;" />
        <Parameter Name="newDescriptor" Type="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <param name="newDescriptor">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoPatchInjection&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap DoPatchInjection&lt;TService&gt; () where TService : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap DoPatchInjection&lt;class TService&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap.DoPatchInjection``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DoPatchInjection(Of TService As Class) () As InternalServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member DoPatchInjection : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap (requires 'Service : null)&#xA;override this.DoPatchInjection : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap (requires 'Service : null)" Usage="internalServiceCollectionMap.DoPatchInjection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService">The service contract.</typeparam>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>
          <para>
                    Re-writes the registration for the given service such that if the implementation type
                    implements <see cref="T:Microsoft.EntityFrameworkCore.Internal.IPatchServiceInjectionSite" />, then
                    <see cref="M:Microsoft.EntityFrameworkCore.Internal.IPatchServiceInjectionSite.InjectServices(System.IServiceProvider)" /> will be called while resolving
                    the service allowing additional services to be injected without breaking the existing
                    constructor.
                </para>
          <para>
                    This mechanism should only be used to allow new services to be injected in a patch or
                    point release without making binary breaking changes.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateDescriptorIndexes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;int&gt; GetOrCreateDescriptorIndexes (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;int32&gt; GetOrCreateDescriptorIndexes(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap.GetOrCreateDescriptorIndexes(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateDescriptorIndexes (serviceType As Type) As IList(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateDescriptorIndexes : Type -&gt; System.Collections.Generic.IList&lt;int&gt;&#xA;override this.GetOrCreateDescriptorIndexes : Type -&gt; System.Collections.Generic.IList&lt;int&gt;" Usage="internalServiceCollectionMap.GetOrCreateDescriptorIndexes serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceCollection">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap.ServiceCollection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ServiceCollection As IServiceCollection" />
      <MemberSignature Language="F#" Value="member this.ServiceCollection : Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap.ServiceCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
