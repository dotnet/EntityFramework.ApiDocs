<Type Name="InMemoryEntityTypeExtensions" FullName="Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions">
  <TypeSignature Language="C#" Value="public static class InMemoryEntityTypeExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit InMemoryEntityTypeExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module InMemoryEntityTypeExtensions" />
  <TypeSignature Language="F#" Value="type InMemoryEntityTypeExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" /> for the in-memory provider.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-in-memory">The EF Core in-memory database provider</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetDefiningQueryConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetDefiningQueryConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetDefiningQueryConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.GetDefiningQueryConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefiningQueryConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetDefiningQueryConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.GetDefiningQueryConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.GetInMemoryQuery(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />.
            </summary>
        <returns>The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.GetInMemoryQuery(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInMemoryQuery">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression GetInMemoryQuery (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression GetInMemoryQuery(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.GetInMemoryQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetInMemoryQuery (entityType As IEntityType) As LambdaExpression" />
      <MemberSignature Language="F#" Value="static member GetInMemoryQuery : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.GetInMemoryQuery entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-5.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the in-memory query for. </param>
        <summary>
                Gets the LINQ query used as the default source for queries of this type.
            </summary>
        <returns> The LINQ query used as the default source. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInMemoryQuery">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression? GetInMemoryQuery (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression GetInMemoryQuery(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.GetInMemoryQuery(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetInMemoryQuery (entityType As IReadOnlyEntityType) As LambdaExpression" />
      <MemberSignature Language="F#" Value="static member GetInMemoryQuery : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.GetInMemoryQuery entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the in-memory query for.</param>
        <summary>
                Gets the LINQ query used as the default source for queries of this type.
            </summary>
        <returns>The LINQ query used as the default source.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInMemoryQuery">
      <MemberSignature Language="C#" Value="public static void SetInMemoryQuery (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Linq.Expressions.LambdaExpression inMemoryQuery);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetInMemoryQuery(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Linq.Expressions.LambdaExpression inMemoryQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.SetInMemoryQuery(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetInMemoryQuery (entityType As IMutableEntityType, inMemoryQuery As LambdaExpression)" />
      <MemberSignature Language="F#" Value="static member SetInMemoryQuery : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.SetInMemoryQuery (entityType, inMemoryQuery)" />
      <MemberSignature Language="C#" Value="public static void SetInMemoryQuery (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Linq.Expressions.LambdaExpression? inMemoryQuery);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        <Parameter Name="inMemoryQuery" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="inMemoryQuery">The LINQ query used as the default source.</param>
        <summary>
                Sets the LINQ query used as the default source for queries of this type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInMemoryQuery">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression SetInMemoryQuery (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Linq.Expressions.LambdaExpression inMemoryQuery, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression SetInMemoryQuery(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Linq.Expressions.LambdaExpression inMemoryQuery, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.SetInMemoryQuery(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetInMemoryQuery (entityType As IConventionEntityType, inMemoryQuery As LambdaExpression, Optional fromDataAnnotation As Boolean = false) As LambdaExpression" />
      <MemberSignature Language="F#" Value="static member SetInMemoryQuery : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Linq.Expressions.LambdaExpression * bool -&gt; System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.InMemoryEntityTypeExtensions.SetInMemoryQuery (entityType, inMemoryQuery, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression? SetInMemoryQuery (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Linq.Expressions.LambdaExpression? inMemoryQuery, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
        <Parameter Name="inMemoryQuery" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="inMemoryQuery">The LINQ query used as the default source.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the LINQ query used as the default source for queries of this type.
            </summary>
        <returns>The configured entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
