<Type Name="SqlitePropertyBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class SqlitePropertyBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqlitePropertyBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SqlitePropertyBuilderExtensions" />
  <TypeSignature Language="F#" Value="type SqlitePropertyBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                SQLite-specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanSetGeometricDimension">
      <MemberSignature Language="C#" Value="public static bool CanSetGeometricDimension (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string dimension, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetGeometricDimension(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string dimension, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.CanSetGeometricDimension(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetGeometricDimension (propertyBuilder As IConventionPropertyBuilder, dimension As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetGeometricDimension : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.CanSetGeometricDimension (propertyBuilder, dimension, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="dimension" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="dimension"> The dimension. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given value can be set as the dimension for the column.
            </summary>
        <returns>
          <c>true</c> if the given value can be set as the dimension for the column. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetSrid">
      <MemberSignature Language="C#" Value="public static bool CanSetSrid (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? srid, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetSrid(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; srid, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.CanSetSrid(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetSrid (propertyBuilder As IConventionPropertyBuilder, srid As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetSrid : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.CanSetSrid (propertyBuilder, srid, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="srid" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="srid">The SRID.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given value can be set as the SRID for the column.
            </summary>
        <returns>
          <see langword="true" /> if the given value can be set as the SRID for the column.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasColumnName">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasColumnName (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasColumnName(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasColumnName (propertyBuilder As PropertyBuilder, name As String) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName (propertyBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="name"> The name of the column. </param>
        <summary>
                Configures the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasColumnName&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqliteHasColumnName&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqliteHasColumnName&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasColumnName(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), name As String) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName (propertyBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="name"> The name of the column. </param>
        <summary>
                Configures the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasColumnType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasColumnType (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasColumnType(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasColumnType (propertyBuilder As PropertyBuilder, type As String) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType (propertyBuilder, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="type" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="type"> The name of the data type of the column. </param>
        <summary>
                Configures the data type of the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasColumnType&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqliteHasColumnType&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqliteHasColumnType&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasColumnType(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), type As String) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType (propertyBuilder, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="type" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="type"> The name of the data type of the column. </param>
        <summary>
                Configures the data type of the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasDefaultValue">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasDefaultValue (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasDefaultValue(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasDefaultValue (propertyBuilder As PropertyBuilder, value As Object) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue (propertyBuilder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="value"> The default value of the column. </param>
        <summary>
                Configures the default value for the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasDefaultValue&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqliteHasDefaultValue&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqliteHasDefaultValue&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasDefaultValue(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), value As Object) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue (propertyBuilder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="value"> The default value of the column. </param>
        <summary>
                Configures the default value for the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasDefaultValueSql">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasDefaultValueSql (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasDefaultValueSql(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasDefaultValueSql (propertyBuilder As PropertyBuilder, sql As String) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql (propertyBuilder, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="sql"> The SQL expression for the default value of the column. </param>
        <summary>
                Configures the default value expression for the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasDefaultValueSql&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqliteHasDefaultValueSql&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqliteHasDefaultValueSql&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasDefaultValueSql(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), sql As String) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql (propertyBuilder, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="sql"> The SQL expression for the default value of the column. </param>
        <summary>
                Configures the default value expression for the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasDimension">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqliteHasDimension (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string dimension, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqliteHasDimension(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string dimension, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDimension(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasDimension (propertyBuilder As IConventionPropertyBuilder, dimension As String, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasDimension : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDimension (propertyBuilder, dimension, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use HasGeometricDimension")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use HasGeometricDimension")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="dimension" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="dimension"> The dimension. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the dimension of the column that the property maps to when targeting SQLite.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasSrid">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasSrid (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int srid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqliteHasSrid(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int32 srid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasSrid(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasSrid (propertyBuilder As PropertyBuilder, srid As Integer) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasSrid : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasSrid (propertyBuilder, srid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use HasSrid")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use HasSrid")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="srid" Type="System.Int32" Index="1" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="srid"> The SRID. </param>
        <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasSrid">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqliteHasSrid (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? srid, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqliteHasSrid(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; srid, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasSrid(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasSrid (propertyBuilder As IConventionPropertyBuilder, srid As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasSrid : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasSrid (propertyBuilder, srid, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use HasSrid")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use HasSrid")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="srid" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="srid"> The SRID. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteHasSrid&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqliteHasSrid&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, int srid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqliteHasSrid&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, int32 srid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasSrid``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteHasSrid(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), srid As Integer) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqliteHasSrid : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasSrid (propertyBuilder, srid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use HasSrid")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use HasSrid")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="srid" Type="System.Int32" Index="1" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="srid"> The SRID. </param>
        <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasGeometricDimension">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasGeometricDimension (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string dimension, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasGeometricDimension(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string dimension, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasGeometricDimension(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasGeometricDimension (propertyBuilder As IConventionPropertyBuilder, dimension As String, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasGeometricDimension : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasGeometricDimension (propertyBuilder, dimension, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="dimension" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="dimension"> The dimension. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the dimension of the column that the property maps to when targeting SQLite.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSrid">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasSrid (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int srid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder HasSrid(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int32 srid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasSrid(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasSrid (propertyBuilder As PropertyBuilder, srid As Integer) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasSrid : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasSrid (propertyBuilder, srid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="srid" Type="System.Int32" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="srid">The SRID.</param>
        <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSrid">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasSrid (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? srid, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasSrid(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; srid, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasSrid(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasSrid (propertyBuilder As IConventionPropertyBuilder, srid As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasSrid : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasSrid (propertyBuilder, srid, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? HasSrid (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? srid, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="srid" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="srid">The SRID.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSrid&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; HasSrid&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, int srid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; HasSrid&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, int32 srid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasSrid``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasSrid(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), srid As Integer) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member HasSrid : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.HasSrid (propertyBuilder, srid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="srid" Type="System.Int32" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="srid">The SRID.</param>
        <summary>
                Configures the SRID of the column that the property maps to when targeting SQLite.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-spatial">Spatial data</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
