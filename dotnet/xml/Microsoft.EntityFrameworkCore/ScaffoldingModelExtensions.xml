<Type Name="ScaffoldingModelExtensions" FullName="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions">
  <TypeSignature Language="C#" Value="public static class ScaffoldingModelExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ScaffoldingModelExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ScaffoldingModelExtensions" />
  <TypeSignature Language="F#" Value="type ScaffoldingModelExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Design-time model extensions.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetDataAnnotations">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GetDataAnnotations (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GetDataAnnotations(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDataAnnotations(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetDataAnnotations (entityType As IEntityType, annotationCodeGenerator As IAnnotationCodeGenerator) As IEnumerable(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="static member GetDataAnnotations : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; seq&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDataAnnotations (entityType, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions+&lt;GetDataAnnotations&gt;d__5))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions+&lt;GetDataAnnotations&gt;d__5))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the data annotations to configure an entity type.
            </summary>
        <returns>The data annotations.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataAnnotations">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GetDataAnnotations (this Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GetDataAnnotations(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDataAnnotations(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetDataAnnotations (navigation As INavigation, annotationCodeGenerator As IAnnotationCodeGenerator) As IEnumerable(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="static member GetDataAnnotations : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; seq&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDataAnnotations (navigation, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions+&lt;GetDataAnnotations&gt;d__7))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions+&lt;GetDataAnnotations&gt;d__7))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="navigation">The navigation property.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the data annotations to configure a navigation property.
            </summary>
        <returns>The data annotations.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataAnnotations">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GetDataAnnotations (this Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GetDataAnnotations(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDataAnnotations(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetDataAnnotations (property As IProperty, annotationCodeGenerator As IAnnotationCodeGenerator) As IEnumerable(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="static member GetDataAnnotations : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; seq&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDataAnnotations (property, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions+&lt;GetDataAnnotations&gt;d__6))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions+&lt;GetDataAnnotations&gt;d__6))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="property">The property.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the data annotations to configure a property.
            </summary>
        <returns>The data annotations.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataAnnotations">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GetDataAnnotations (this Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation skipNavigation, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt; GetDataAnnotations(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation skipNavigation, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDataAnnotations(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetDataAnnotations (skipNavigation As ISkipNavigation, annotationCodeGenerator As IAnnotationCodeGenerator) As IEnumerable(Of AttributeCodeFragment)" />
      <MemberSignature Language="F#" Value="static member GetDataAnnotations : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; seq&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDataAnnotations (skipNavigation, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions+&lt;GetDataAnnotations&gt;d__8))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions+&lt;GetDataAnnotations&gt;d__8))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="skipNavigation">The skip navigation property.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the data annotations to configure a skip navigation property.
            </summary>
        <returns>The data annotations.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDbSetName">
      <MemberSignature Language="C#" Value="public static string GetDbSetName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDbSetName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDbSetName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDbSetName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDbSetName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetDbSetName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets the name that should be used for the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> property on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> class for this entity
                type.
            </summary>
        <returns>The property name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFluentApiCalls">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment? GetFluentApiCalls (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment GetFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFluentApiCalls (entityType As IEntityType, annotationCodeGenerator As IAnnotationCodeGenerator) As FluentApiCodeFragment" />
      <MemberSignature Language="F#" Value="static member GetFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls (entityType, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the fluent API calls to configure an entity type.
            </summary>
        <returns>The fluent API calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFluentApiCalls">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment? GetFluentApiCalls (this Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment GetFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFluentApiCalls (index As IIndex, annotationCodeGenerator As IAnnotationCodeGenerator) As FluentApiCodeFragment" />
      <MemberSignature Language="F#" Value="static member GetFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls (index, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the fluent API calls to configure an index.
            </summary>
        <returns>The fluent API calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFluentApiCalls">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment? GetFluentApiCalls (this Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment GetFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFluentApiCalls (key As IKey, annotationCodeGenerator As IAnnotationCodeGenerator) As FluentApiCodeFragment" />
      <MemberSignature Language="F#" Value="static member GetFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls (key, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="key">The key.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the fluent API calls to configure a key.
            </summary>
        <returns>The fluent API calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFluentApiCalls">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment? GetFluentApiCalls (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment GetFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFluentApiCalls (model As IModel, annotationCodeGenerator As IAnnotationCodeGenerator) As FluentApiCodeFragment" />
      <MemberSignature Language="F#" Value="static member GetFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls (model, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="model">The model.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the fluent API calls to configure a model.
            </summary>
        <returns>The fluent API calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFluentApiCalls">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment? GetFluentApiCalls (this Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment GetFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFluentApiCalls (property As IProperty, annotationCodeGenerator As IAnnotationCodeGenerator) As FluentApiCodeFragment" />
      <MemberSignature Language="F#" Value="static member GetFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls (property, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="property">The property.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the fluent API calls to configure a property.
            </summary>
        <returns>The fluent API calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFluentApiCalls">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment? GetFluentApiCalls (this Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment GetFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.ISequence sequence, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ISequence,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFluentApiCalls (sequence As ISequence, annotationCodeGenerator As IAnnotationCodeGenerator) As FluentApiCodeFragment" />
      <MemberSignature Language="F#" Value="static member GetFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.ISequence * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls (sequence, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="Microsoft.EntityFrameworkCore.Metadata.ISequence" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="sequence">The sequence.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets the fluent API calls to configure a sequence.
            </summary>
        <returns>The fluent API calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFluentApiCalls">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment? GetFluentApiCalls (this Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator, bool useStrings = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment GetFluentApiCalls(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator, bool useStrings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFluentApiCalls (foreignKey As IForeignKey, annotationCodeGenerator As IAnnotationCodeGenerator, Optional useStrings As Boolean = false) As FluentApiCodeFragment" />
      <MemberSignature Language="F#" Value="static member GetFluentApiCalls : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator * bool -&gt; Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.GetFluentApiCalls (foreignKey, annotationCodeGenerator, useStrings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Design.FluentApiCodeFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
        <Parameter Name="useStrings" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="foreignKey">The foreign key.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <param name="useStrings">A value indicating wheter to use string fluent API overloads instead of ones that take a property accessor lambda.</param>
        <summary>
                Gets the fluent API calls to configure a foreign key.
            </summary>
        <returns>The fluent API calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByConvention">
      <MemberSignature Language="C#" Value="public static bool IsHandledByConvention (this Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHandledByConvention(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsHandledByConvention (key As IKey) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsHandledByConvention : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.IsHandledByConvention key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" RefType="this" />
      </Parameters>
      <Docs>
        <param name="key">The key to check.</param>
        <summary>
                Gets a value indicating whether the key would be configured by conventions.
            </summary>
        <returns>
          <see langword="true" /> if the key would be configured by conventions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHandledByDataAnnotations">
      <MemberSignature Language="C#" Value="public static bool IsHandledByDataAnnotations (this Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHandledByDataAnnotations(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator annotationCodeGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.IsHandledByDataAnnotations(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsHandledByDataAnnotations (index As IIndex, annotationCodeGenerator As IAnnotationCodeGenerator) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsHandledByDataAnnotations : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.IsHandledByDataAnnotations (index, annotationCodeGenerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" RefType="this" />
        <Parameter Name="annotationCodeGenerator" Type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <param name="annotationCodeGenerator">The provider's annotation code generator.</param>
        <summary>
                Gets value indicating whether this index can be entirely reperesented by a data annotation.
            </summary>
        <returns>
          <see langword="true" /> if this index can be reperesented by a data annotation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLeftNavigation">
      <MemberSignature Language="C#" Value="public static bool IsLeftNavigation (this Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation skipNavigation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeftNavigation(class Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation skipNavigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.IsLeftNavigation(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsLeftNavigation (skipNavigation As ISkipNavigation) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsLeftNavigation : Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.IsLeftNavigation skipNavigation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="skipNavigation">The skip navigation to check.</param>
        <summary>
                Gets a value indicating whether the specified skip navigation represents the left side of the relationship.
            </summary>
        <returns>
          <see langword="true" /> if it represents the left side.</returns>
        <remarks>
                The designation of left and right is arbitrary but deterministic. This method exists primarily to avoid configuring the same
                many-to-many relationship from both of its ends.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSimpleManyToManyJoinEntityType">
      <MemberSignature Language="C#" Value="public static bool IsSimpleManyToManyJoinEntityType (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSimpleManyToManyJoinEntityType(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.IsSimpleManyToManyJoinEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSimpleManyToManyJoinEntityType (entityType As IEntityType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSimpleManyToManyJoinEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ScaffoldingModelExtensions.IsSimpleManyToManyJoinEntityType entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to check.</param>
        <summary>
                Check whether an entity type could be considered a many-to-many join entity type.
            </summary>
        <returns>
          <see langword="true" /> if the entity type could be considered a join entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
