<Type Name="MutableEntityTypeExtensions" FullName="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions">
  <TypeSignature Language="C#" Value="public static class MutableEntityTypeExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MutableEntityTypeExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module MutableEntityTypeExtensions" />
  <TypeSignature Language="F#" Value="type MutableEntityTypeExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <AttributeName Language="C#">[System.Obsolete("Use IMutableEntityType")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Use IMutableEntityType")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddForeignKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey AddForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey AddForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddForeignKey (entityType As IMutableEntityType, property As IMutableProperty, principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey" />
      <MemberSignature Language="F#" Value="static member AddForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.Metadata.IMutableKey * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey (entityType, property, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property that the foreign key is defined on. </param>
        <param name="principalKey"> The primary or alternate key that is referenced. </param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Adds a new relationship to this entity type.
            </summary>
        <returns> The newly created foreign key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndex">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableIndex AddIndex (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex AddIndex(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddIndex (entityType As IMutableEntityType, property As IMutableProperty) As IMutableIndex" />
      <MemberSignature Language="F#" Value="static member AddIndex : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to be indexed. </param>
        <summary>
                Adds an index to this entity type.
            </summary>
        <returns> The newly created index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndexerProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddIndexerProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, Type propertyType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddIndexerProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, class System.Type propertyType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndexerProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddIndexerProperty (entityType As IMutableEntityType, name As String, propertyType As Type) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member AddIndexerProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndexerProperty (entityType, name, propertyType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="propertyType" Type="System.Type" Index="2" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the property to add. </param>
        <param name="propertyType"> The type of value the property will hold. </param>
        <summary>
                Adds a property backed up by an indexer to this entity type.
            </summary>
        <returns> The newly created property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey AddKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey AddKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddKey (entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member AddKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to use as an alternate key. </param>
        <summary>
                Adds a new alternate key to this entity type.
            </summary>
        <returns> The newly created key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddProperty (entityType As IMutableEntityType, memberInfo As MemberInfo) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member AddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty (entityType, memberInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="memberInfo"> The corresponding member on the entity class. </param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns> The newly created property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddProperty (entityType As IMutableEntityType, propertyInfo As PropertyInfo) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member AddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty (entityType, propertyInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to add the property to. </param>
        <param name="propertyInfo"> The corresponding property in the entity class. </param>
        <summary>
                Adds a property to this entity.
            </summary>
        <returns> The newly created property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddProperty (entityType As IMutableEntityType, name As String) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member AddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the property to add. </param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns> The newly created property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, Type propertyType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty AddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, class System.Type propertyType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddProperty (entityType As IMutableEntityType, name As String, propertyType As Type) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member AddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty (entityType, name, propertyType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="propertyType" Type="System.Type" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the property to add. </param>
        <param name="propertyType"> The type of value the property will hold. </param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns> The newly created property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindDeclaredForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindDeclaredForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDeclaredForeignKeys (entityType As IMutableEntityType, properties As IReadOnlyList(Of IProperty)) As IEnumerable(Of IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindDeclaredForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindDeclaredForeignKeys (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties to find the foreign keys on. </param>
        <summary>
                Gets the foreign keys declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" /> using the given properties.
            </summary>
        <returns> Declared foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredNavigation">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindDeclaredNavigation (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindDeclaredNavigation(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindDeclaredNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDeclaredNavigation (entityType As IMutableEntityType, name As String) As IMutableNavigation" />
      <MemberSignature Language="F#" Value="static member FindDeclaredNavigation : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindDeclaredNavigation (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the navigation property on the entity class. </param>
        <summary>
                Gets a navigation property on the given entity type. Does not return navigation properties defined on a base type.
                Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns> The navigation property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty FindDeclaredProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty FindDeclaredProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindDeclaredProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDeclaredProperty (entityType As IMutableEntityType, name As String) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member FindDeclaredProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindDeclaredProperty (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The property name. </param>
        <summary>
                Finds a property declared on the type with the given name.
                Does not return properties defined on a base type.
            </summary>
        <returns> The property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDefiningNavigation">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindDefiningNavigation(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDefiningNavigation (entityType As IMutableEntityType) As IMutableNavigation" />
      <MemberSignature Language="F#" Value="static member FindDefiningNavigation : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindDefiningNavigation entityType" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation? FindDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Entity types with defining navigations have been replaced by shared-type entity types")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Entity types with defining navigations have been replaced by shared-type entity types")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns the defining navigation if one exists or <see langword="null" /> otherwise.
            </summary>
        <returns>The defining navigation if one exists or <see langword="null" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey FindForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey FindForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKey (entityType As IMutableEntityType, property As IProperty, principalKey As IKey, principalEntityType As IEntityType) As IMutableForeignKey" />
      <MemberSignature Language="F#" Value="static member FindForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey (entityType, property, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property that the foreign key is defined on. </param>
        <param name="principalKey"> The primary or alternate key that is referenced. </param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns <see langword="null" />
                if no foreign key is found.
            </summary>
        <returns> The foreign key, or <see langword="null" /> if none is defined. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKeys (entityType As IMutableEntityType, property As IProperty) As IEnumerable(Of IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to find the foreign keys on. </param>
        <summary>
                Gets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified
                property are returned. Composite foreign keys that include the specified property are not returned.
            </summary>
        <returns> The foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKeys (entityType As IMutableEntityType, properties As IReadOnlyList(Of IProperty)) As IEnumerable(Of IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties to find the foreign keys on. </param>
        <summary>
                Gets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified
                set of properties are returned.
            </summary>
        <returns> The foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableIndex FindIndex (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex FindIndex(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndex (entityType As IMutableEntityType, property As IProperty) As IMutableIndex" />
      <MemberSignature Language="F#" Value="static member FindIndex : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to find the index on. </param>
        <summary>
                Gets the index defined on the given property. Returns null if no index is defined.
            </summary>
        <returns> The index, or null if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey FindKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey FindKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindKey (entityType As IMutableEntityType, property As IProperty) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member FindKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property that the key is defined on. </param>
        <summary>
                Gets the primary or alternate key that is defined on the given property. Returns <see langword="null" /> if no key is defined
                for the given property.
            </summary>
        <returns> The key, or null if none is defined. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNavigation">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigation (entityType As IMutableEntityType, memberInfo As MemberInfo) As IMutableNavigation" />
      <MemberSignature Language="F#" Value="static member FindNavigation : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation (entityType, memberInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="memberInfo"> The navigation property on the entity class. </param>
        <summary>
                Gets a navigation property on the given entity type. Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns> The navigation property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNavigation">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigation (entityType As IMutableEntityType, propertyInfo As PropertyInfo) As IMutableNavigation" />
      <MemberSignature Language="F#" Value="static member FindNavigation : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation (entityType, propertyInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to find the navigation property on. </param>
        <param name="propertyInfo"> The navigation property on the entity class. </param>
        <summary>
                Gets a navigation property on the given entity type. Returns null if no navigation property is found.
            </summary>
        <returns> The navigation property, or null if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNavigation">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation FindNavigation(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigation (entityType As IMutableEntityType, name As String) As IMutableNavigation" />
      <MemberSignature Language="F#" Value="static member FindNavigation : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the navigation property on the entity class. </param>
        <summary>
                Gets a navigation property on the given entity type. Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns> The navigation property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindOwnership">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey FindOwnership (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey FindOwnership(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindOwnership(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindOwnership (entityType As IMutableEntityType) As IMutableForeignKey" />
      <MemberSignature Language="F#" Value="static member FindOwnership : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindOwnership entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns the relationship to the owner if this is an owned type or <see langword="null" /> otherwise.
            </summary>
        <returns> The relationship to the owner if this is an owned type or <see langword="null" /> otherwise. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindProperties">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; FindProperties (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; FindProperties(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperties(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindProperties (entityType As IMutableEntityType, propertyNames As IReadOnlyList(Of String)) As IReadOnlyList(Of IMutableProperty)" />
      <MemberSignature Language="F#" Value="static member FindProperties : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperties (entityType, propertyNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="propertyNames"> The property names. </param>
        <summary>
          <para>
                    Finds matching properties on the given entity type. Returns <see langword="null" /> if any property is not found.
                </para>
          <para>
                    This API only finds scalar properties and does not find navigation properties.
                </para>
        </summary>
        <returns> The properties, or <see langword="null" /> if any property is not found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty FindProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty FindProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindProperty (entityType As IMutableEntityType, propertyInfo As PropertyInfo) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member FindProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty (entityType, propertyInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="propertyInfo"> The property on the entity class. </param>
        <summary>
          <para>
                    Gets a property on the given entity type. Returns <see langword="null" /> if no property is found.
                </para>
          <para>
                    This API only finds scalar properties and does not find navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.MemberInfo)" /> to find a navigation property.
                </para>
        </summary>
        <returns> The property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetAllBaseTypes (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetAllBaseTypes(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetAllBaseTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllBaseTypes (entityType As IMutableEntityType) As IEnumerable(Of IMutableEntityType)" />
      <MemberSignature Language="F#" Value="static member GetAllBaseTypes : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetAllBaseTypes entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all types in the model from which a given entity type derives, starting with the root.
            </summary>
        <returns>
                The base types.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypesAscending">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetAllBaseTypesAscending (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetAllBaseTypesAscending(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetAllBaseTypesAscending(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllBaseTypesAscending (entityType As IMutableEntityType) As IEnumerable(Of IMutableEntityType)" />
      <MemberSignature Language="F#" Value="static member GetAllBaseTypesAscending : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetAllBaseTypesAscending entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all types in the model from which a given entity type derives, starting with the closest one.
            </summary>
        <returns>
                The base types.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetDeclaredForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetDeclaredForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredForeignKeys (entityType As IMutableEntityType) As IEnumerable(Of IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredForeignKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all foreign keys declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
                </para>
          <para>
                    This method does not return foreign keys declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same foreign key more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetForeignKeys" /> to also return foreign keys declared on base types.
                </para>
        </summary>
        <returns> Declared foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredIndexes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableIndex&gt; GetDeclaredIndexes (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex&gt; GetDeclaredIndexes(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredIndexes (entityType As IMutableEntityType) As IEnumerable(Of IMutableIndex)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredIndexes : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableIndex&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredIndexes entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all indexes declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
                </para>
          <para>
                    This method does not return indexes declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same index more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetForeignKeys" /> to also return indexes declared on base types.
                </para>
        </summary>
        <returns> Declared indexes. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt; GetDeclaredKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt; GetDeclaredKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredKeys (entityType As IMutableEntityType) As IEnumerable(Of IMutableKey)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all keys declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.
                </para>
          <para>
                    This method does not return keys declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same key more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetKeys" /> to also return keys declared on base types.
                </para>
        </summary>
        <returns> Declared keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredNavigations">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt; GetDeclaredNavigations (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt; GetDeclaredNavigations(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredNavigations (entityType As IMutableEntityType) As IEnumerable(Of IMutableNavigation)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredNavigations : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredNavigations entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all navigation properties declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
                </para>
          <para>
                    This method does not return navigation properties declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same navigation property more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" /> to also return navigation properties declared on base types.
                </para>
        </summary>
        <returns> Declared navigation properties. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredProperties">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; GetDeclaredProperties (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; GetDeclaredProperties(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredProperties (entityType As IMutableEntityType) As IEnumerable(Of IMutableProperty)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredProperties : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredProperties entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all non-navigation properties declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
                </para>
          <para>
                    This method does not return properties declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same property more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetProperties" /> to also return properties declared on base types.
                </para>
        </summary>
        <returns> Declared non-navigation properties. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredReferencingForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetDeclaredReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetDeclaredReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredReferencingForeignKeys (entityType As IMutableEntityType) As IEnumerable(Of IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredReferencingForeignKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                is the principal).
            </summary>
        <returns> The foreign keys that reference the given entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredServiceProperties">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty&gt; GetDeclaredServiceProperties (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty&gt; GetDeclaredServiceProperties(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredServiceProperties(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredServiceProperties (entityType As IMutableEntityType) As IEnumerable(Of IMutableServiceProperty)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredServiceProperties : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDeclaredServiceProperties entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all service properties declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
                </para>
          <para>
                    This method does not return properties declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same property more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetServiceProperties" /> to also return properties declared on base types.
                </para>
        </summary>
        <returns> Declared service properties. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetDerivedForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetDerivedForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDerivedForeignKeys (entityType As IMutableEntityType) As IEnumerable(Of IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="static member GetDerivedForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedForeignKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all foreign keys declared on the types derived from the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
                </para>
          <para>
                    This method does not return foreign keys declared on the given entity type itself.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetForeignKeys" /> to return foreign keys declared on this
                    and base entity typed types.
                </para>
        </summary>
        <returns> Derived foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDerivedTypes (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDerivedTypes(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDerivedTypes (entityType As IMutableEntityType) As IEnumerable(Of IMutableEntityType)" />
      <MemberSignature Language="F#" Value="static member GetDerivedTypes : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all types in the model that derive from a given entity type.
            </summary>
        <returns> The derived types. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedTypesInclusive">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDerivedTypesInclusive (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDerivedTypesInclusive(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDerivedTypesInclusive (entityType As IMutableEntityType) As IEnumerable(Of IMutableEntityType)" />
      <MemberSignature Language="F#" Value="static member GetDerivedTypesInclusive : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypesInclusive entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns all derived types of the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />, including the type itself.
            </summary>
        <returns> Derived types. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectlyDerivedTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDirectlyDerivedTypes (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetDirectlyDerivedTypes(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDirectlyDerivedTypes (entityType As IMutableEntityType) As IEnumerable(Of IMutableEntityType)" />
      <MemberSignature Language="F#" Value="static member GetDirectlyDerivedTypes : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDirectlyDerivedTypes entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all types in the model that directly derive from a given entity type.
            </summary>
        <returns> The derived types. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiscriminatorProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetDiscriminatorProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetDiscriminatorProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDiscriminatorProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDiscriminatorProperty (entityType As IMutableEntityType) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member GetDiscriminatorProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDiscriminatorProperty entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" /> that will be used for storing a discriminator value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNavigations">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt; GetNavigations (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt; GetNavigations(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetNavigations (entityType As IMutableEntityType) As IEnumerable(Of IMutableNavigation)" />
      <MemberSignature Language="F#" Value="static member GetNavigations : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all navigation properties on the given entity type.
            </summary>
        <returns> All navigation properties on the given entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddForeignKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey GetOrAddForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey GetOrAddForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddForeignKey (entityType As IMutableEntityType, property As IMutableProperty, principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey" />
      <MemberSignature Language="F#" Value="static member GetOrAddForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.Metadata.IMutableKey * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey (entityType, property, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or add the foreign key to. </param>
        <param name="property"> The property that the foreign key is defined on. </param>
        <param name="principalKey"> The primary or alternate key that is referenced. </param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Gets an existing relationship, or creates a new one if one is not already defined.
            </summary>
        <returns> The existing or newly created foreign key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddForeignKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey GetOrAddForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey GetOrAddForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties, class Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddForeignKey (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty), principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey" />
      <MemberSignature Language="F#" Value="static member GetOrAddForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IMutableKey * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey (entityType, properties, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or add the foreign key to. </param>
        <param name="properties"> The properties that the foreign key is defined on. </param>
        <param name="principalKey"> The primary or alternate key that is referenced. </param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Gets an existing relationship, or creates a new one if one is not already defined.
            </summary>
        <returns> The existing or newly created foreign key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddIndex">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableIndex GetOrAddIndex (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex GetOrAddIndex(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddIndex (entityType As IMutableEntityType, property As IMutableProperty) As IMutableIndex" />
      <MemberSignature Language="F#" Value="static member GetOrAddIndex : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or add the index to. </param>
        <param name="property"> The property to be indexed. </param>
        <summary>
                Gets the index defined on the given property or creates a new one if one is not already defined.
            </summary>
        <returns> The existing or newly created index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddIndex">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableIndex GetOrAddIndex (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex GetOrAddIndex(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddIndex (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableIndex" />
      <MemberSignature Language="F#" Value="static member GetOrAddIndex : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or add the index to. </param>
        <param name="properties"> The properties to be indexed. </param>
        <summary>
                Gets the index defined on the given property or creates a new one if one is not already defined.
            </summary>
        <returns> The existing or newly created index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrAddKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrAddKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddKey (entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member GetOrAddKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or create the alternate key on. </param>
        <param name="property"> The property that is used as the alternate key. </param>
        <summary>
                Gets the existing alternate key defined on a property, or creates a new one if one is not
                already defined.
            </summary>
        <returns> The existing or newly created alternate key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrAddKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrAddKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddKey (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member GetOrAddKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or create the alternate key on. </param>
        <param name="properties"> The properties that are used as the alternate key. </param>
        <summary>
                Gets the existing alternate key defined on a set of properties, or creates a new one if one is not
                already defined.
            </summary>
        <returns> The existing or newly created alternate key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.PropertyInfo propertyInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.PropertyInfo propertyInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddProperty (entityType As IMutableEntityType, propertyInfo As PropertyInfo) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member GetOrAddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.PropertyInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty (entityType, propertyInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or add the property to. </param>
        <param name="propertyInfo"> The corresponding property in the entity class. </param>
        <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
        <returns> The existing or newly created property. </returns>
        <remarks> The returned property might not have the specified type. </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, Type propertyType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, class System.Type propertyType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddProperty (entityType As IMutableEntityType, name As String, propertyType As Type) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member GetOrAddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty (entityType, name, propertyType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyType" Type="System.Type" Index="2" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or add the property to. </param>
        <param name="name"> The name of the property. </param>
        <param name="propertyType"> The type of value the property will hold. </param>
        <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
        <returns> The existing or newly created property. </returns>
        <remarks> The returned property might not have the specified type. </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, Type propertyType, bool shadow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty GetOrAddProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, class System.Type propertyType, bool shadow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddProperty (entityType As IMutableEntityType, name As String, propertyType As Type, shadow As Boolean) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member GetOrAddProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string * Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty (entityType, name, propertyType, shadow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-1.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="propertyType" Type="System.Type" Index="2" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="shadow" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or add the property to. </param>
        <param name="name"> The name of the property. </param>
        <param name="propertyType"> The type of value the property will hold. </param>
        <param name="shadow"> Whether the property is in shadow-state. </param>
        <summary>
                Gets the property with the given name, or creates a new one if one is not already defined.
            </summary>
        <returns> The existing or newly created property. </returns>
        <remarks> The returned property might not have the specified type and shadowness. </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrSetPrimaryKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrSetPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrSetPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrSetPrimaryKey (entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member GetOrSetPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or set the key on. </param>
        <param name="property"> The property to set as the primary key if one is not already defined. </param>
        <summary>
                Gets the existing primary key of an entity, or sets it if one is not defined.
            </summary>
        <returns> The existing or newly created key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrSetPrimaryKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrSetPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetOrSetPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrSetPrimaryKey (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member GetOrSetPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get or set the key on. </param>
        <param name="properties"> The properties to set as the primary key if one is not already defined. </param>
        <summary>
                Gets the existing primary key of an entity, or sets it if one is not defined.
            </summary>
        <returns> The existing or newly created key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencingForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReferencingForeignKeys (entityType As IMutableEntityType) As IEnumerable(Of IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="static member GetReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                or a type it's derived from is the principal).
            </summary>
        <returns> The foreign keys that reference the given entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRootType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetRootType (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetRootType(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetRootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRootType (entityType As IMutableEntityType) As IMutableEntityType" />
      <MemberSignature Language="F#" Value="static member GetRootType : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetRootType entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets the root base type for a given entity type.
            </summary>
        <returns>
                The root base type. If the given entity type is not a derived type, then the same entity type is returned.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDiscriminatorValue">
      <MemberSignature Language="C#" Value="public static void RemoveDiscriminatorValue (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveDiscriminatorValue(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveDiscriminatorValue(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RemoveDiscriminatorValue (entityType As IMutableEntityType)" />
      <MemberSignature Language="F#" Value="static member RemoveDiscriminatorValue : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveDiscriminatorValue entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Removes the discriminator value for this entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveForeignKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey RemoveForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey RemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties, class Microsoft.EntityFrameworkCore.Metadata.IMutableKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveForeignKey (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty), principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey" />
      <MemberSignature Language="F#" Value="static member RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IMutableKey * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveForeignKey (entityType, properties, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties that the foreign key is defined on. </param>
        <param name="principalKey"> The primary or alternate key that is referenced. </param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Removes a foreign key from this entity type.
            </summary>
        <returns> The foreign key that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIndex">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableIndex RemoveIndex (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex RemoveIndex(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveIndex (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableIndex" />
      <MemberSignature Language="F#" Value="static member RemoveIndex : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveIndex (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties that make up the index. </param>
        <summary>
                Removes an index from this entity type.
            </summary>
        <returns> The index that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey RemoveKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey RemoveKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveKey (entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member RemoveKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveKey (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties that make up the key. </param>
        <summary>
                Removes a primary or alternate key from this entity type.
            </summary>
        <returns> The key that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty RemoveProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty RemoveProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveProperty (entityType As IMutableEntityType, name As String) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member RemoveProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RemoveProperty (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the property to remove. </param>
        <summary>
                Removes a property from this entity type.
            </summary>
        <returns> The property that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RootType (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RootType(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RootType (entityType As IMutableEntityType) As IMutableEntityType" />
      <MemberSignature Language="F#" Value="static member RootType : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use GetRootType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GetRootType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entityType"> The type to find the root of. </param>
        <summary>
                Gets the root base type for a given entity type.
            </summary>
        <returns>
                The root base type. If the given entity type is not a derived type, then the same entity type is returned.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public static void SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetChangeTrackingStrategy (entityType As IMutableEntityType, changeTrackingStrategy As ChangeTrackingStrategy)" />
      <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetChangeTrackingStrategy (entityType, changeTrackingStrategy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to set the change tracking strategy for. </param>
        <param name="changeTrackingStrategy"> The strategy to use. </param>
        <summary>
                Sets the change tracking strategy to use for this entity type. This strategy indicates how the
                context detects changes to properties for an instance of the entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public static void SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetChangeTrackingStrategy (entityType As IMutableEntityType, changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy))" />
      <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetChangeTrackingStrategy (entityType, changeTrackingStrategy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="changeTrackingStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="changeTrackingStrategy"> The strategy to use. </param>
        <summary>
                Sets the change tracking strategy to use for this entity type. This strategy indicates how the
                context detects changes to properties for an instance of the entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefiningQuery">
      <MemberSignature Language="C#" Value="public static void SetDefiningQuery (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Linq.Expressions.LambdaExpression definingQuery);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDefiningQuery(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Linq.Expressions.LambdaExpression definingQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetDefiningQuery(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetDefiningQuery (entityType As IMutableEntityType, definingQuery As LambdaExpression)" />
      <MemberSignature Language="F#" Value="static member SetDefiningQuery : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetDefiningQuery (entityType, definingQuery)" />
      <MemberSignature Language="C#" Value="public static void SetDefiningQuery (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Linq.Expressions.LambdaExpression? definingQuery);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Use InMemoryEntityTypeExtensions.SetInMemoryQuery")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use InMemoryEntityTypeExtensions.SetInMemoryQuery")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="definingQuery" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="definingQuery">The LINQ query used as the default source.</param>
        <summary>
                Sets the LINQ query used as the default source for queries of this type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDiscriminatorMappingComplete">
      <MemberSignature Language="C#" Value="public static void SetDiscriminatorMappingComplete (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, bool? complete);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDiscriminatorMappingComplete(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetDiscriminatorMappingComplete(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetDiscriminatorMappingComplete (entityType As IMutableEntityType, complete As Nullable(Of Boolean))" />
      <MemberSignature Language="F#" Value="static member SetDiscriminatorMappingComplete : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetDiscriminatorMappingComplete (entityType, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="complete" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="complete"> The value indicating whether the discriminator mapping is complete. </param>
        <summary>
                Sets the value indicating whether the discriminator mapping is complete.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDiscriminatorProperty">
      <MemberSignature Language="C#" Value="public static void SetDiscriminatorProperty (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDiscriminatorProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetDiscriminatorProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetDiscriminatorProperty (entityType As IMutableEntityType, property As IProperty)" />
      <MemberSignature Language="F#" Value="static member SetDiscriminatorProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetDiscriminatorProperty (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to set. </param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> that will be used for storing a discriminator value.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDiscriminatorValue">
      <MemberSignature Language="C#" Value="public static void SetDiscriminatorValue (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDiscriminatorValue(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetDiscriminatorValue(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetDiscriminatorValue (entityType As IMutableEntityType, value As Object)" />
      <MemberSignature Language="F#" Value="static member SetDiscriminatorValue : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * obj -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetDiscriminatorValue (entityType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="value"> The value to set. </param>
        <summary>
                Sets the discriminator value for this entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNavigationAccessMode">
      <MemberSignature Language="C#" Value="public static void SetNavigationAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetNavigationAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetNavigationAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetNavigationAccessMode (entityType As IMutableEntityType, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
      <MemberSignature Language="F#" Value="static member SetNavigationAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetNavigationAccessMode (entityType, propertyAccessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type for which to set the access mode. </param>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for navigations of this entity type.
                </para>
          <para>
                    Note that individual navigations can override this access mode. The value set here will
                    be used for any navigation for which no override has been specified.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPrimaryKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey SetPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey SetPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetPrimaryKey (entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member SetPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to set the key on. </param>
        <param name="property"> The primary key property. </param>
        <summary>
                Sets the primary key for this entity type.
            </summary>
        <returns> The newly created key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode? propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (entityType As IMutableEntityType, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
      <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode (entityType, propertyAccessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type for which to set the access mode. </param>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" />, or null to clear the mode set.</param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for properties of this entity type.
                </para>
          <para>
                    Note that individual properties can override this access mode. The value set here will
                    be used for any property for which no override has been specified.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (entityType As IMutableEntityType, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
      <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode (entityType, propertyAccessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type for which to set the access mode. </param>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or null to clear the mode set.</param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties and navigations of this entity type.
                </para>
          <para>
                    Note that individual properties and navigations can override this access mode. The value set here will
                    be used for any property or navigation for which no override has been specified.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetQueryFilter">
      <MemberSignature Language="C#" Value="public static void SetQueryFilter (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Linq.Expressions.LambdaExpression queryFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetQueryFilter(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Linq.Expressions.LambdaExpression queryFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetQueryFilter(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetQueryFilter (entityType As IMutableEntityType, queryFilter As LambdaExpression)" />
      <MemberSignature Language="F#" Value="static member SetQueryFilter : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetQueryFilter (entityType, queryFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="queryFilter" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="queryFilter"> The LINQ expression filter. </param>
        <summary>
                Sets the LINQ expression filter automatically applied to queries for this entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
