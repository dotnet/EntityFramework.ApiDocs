<Type Name="ModelConfigurationBuilder" FullName="Microsoft.EntityFrameworkCore.ModelConfigurationBuilder">
  <TypeSignature Language="C#" Value="public class ModelConfigurationBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ModelConfigurationBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ModelConfigurationBuilder" />
  <TypeSignature Language="F#" Value="type ModelConfigurationBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Provides a simple API surface for setting defaults and configuring conventions before they run.
            </summary>
    <remarks>
      <para>
                    You can use <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" /> to configure the conventions for a context by overriding
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.ConfigureConventions(Microsoft.EntityFrameworkCore.ModelConfigurationBuilder)" /> on your derived context.
                    Alternatively you can create the model externally and set it on a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> instance
                    that is passed to the context constructor.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModelConfigurationBuilder (Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (conventions As ConventionSet)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ModelConfigurationBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" Usage="new Microsoft.EntityFrameworkCore.ModelConfigurationBuilder conventions" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="conventions" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" Index="0" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="conventions">The conventions to be applied during model building.</param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" />.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModelConfigurationBuilder (Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventions, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (conventions As ConventionSet, serviceProvider As IServiceProvider)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ModelConfigurationBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet * IServiceProvider -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" Usage="new Microsoft.EntityFrameworkCore.ModelConfigurationBuilder (conventions, serviceProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="conventions" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="conventions">To be added.</param>
        <param name="serviceProvider">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperties">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder ComplexProperties (Type propertyType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder ComplexProperties(class System.Type propertyType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.ComplexProperties(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperties (propertyType As Type) As ComplexPropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperties : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder&#xA;override this.ComplexProperties : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder" Usage="modelConfigurationBuilder.ComplexProperties propertyType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyType">The property type to be configured.</param>
        <summary>
                Marks the given and derived types as corresponding to complex properties.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
          <para>
                    This can also be called on an interface or an unbound generic type to apply the configuration to all
                    properties of implementing and constructed types.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperties&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder&lt;TProperty&gt; ComplexProperties&lt;TProperty&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder`1&lt;!!TProperty&gt; ComplexProperties&lt;TProperty&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.ComplexProperties``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexProperties(Of TProperty) () As ComplexPropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="abstract member ComplexProperties : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder&lt;'Property&gt;&#xA;override this.ComplexProperties : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder&lt;'Property&gt;" Usage="modelConfigurationBuilder.ComplexProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexPropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TProperty">The property type to be configured.</typeparam>
        <summary>
                Marks the given and derived types as corresponding to complex properties.
            </summary>
        <returns>An object that can be used to configure the properties.</returns>
        <remarks>
          <para>
                    This can also be called on an interface to apply the configuration to all properties of implementing types.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conventions">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.ConventionSetBuilder Conventions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.ConventionSetBuilder Conventions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Conventions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Conventions As ConventionSetBuilder" />
      <MemberSignature Language="F#" Value="member this.Conventions : Microsoft.EntityFrameworkCore.Metadata.Builders.ConventionSetBuilder" Usage="Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Conventions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ConventionSetBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the builder for the conventions that will be used in the model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateModelBuilder">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelBuilder CreateModelBuilder (Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies? modelDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelBuilder CreateModelBuilder(class Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies modelDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.CreateModelBuilder(Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateModelBuilder (modelDependencies As ModelDependencies) As ModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member CreateModelBuilder : Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies -&gt; Microsoft.EntityFrameworkCore.ModelBuilder&#xA;override this.CreateModelBuilder : Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies -&gt; Microsoft.EntityFrameworkCore.ModelBuilder" Usage="modelConfigurationBuilder.CreateModelBuilder modelDependencies" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelDependencies" Type="Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies" />
      </Parameters>
      <Docs>
        <param name="modelDependencies">The dependencies object used during model building.</param>
        <summary>
                Creates the configured <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> used to create the model. This is done automatically when using
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />; this method allows it to be run
                explicitly in cases where the automatic execution is not possible.
            </summary>
        <returns>The configured <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" />.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder DefaultTypeMapping (Type scalarType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder DefaultTypeMapping(class System.Type scalarType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.DefaultTypeMapping(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DefaultTypeMapping (scalarType As Type) As TypeMappingConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member DefaultTypeMapping : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&#xA;override this.DefaultTypeMapping : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder" Usage="modelConfigurationBuilder.DefaultTypeMapping scalarType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalarType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="scalarType">The scalar type to be configured.</param>
        <summary>
                Marks the given type as a scalar, even when used outside of entity types. This allows values of this type
                to be used in queries that are not referencing property of this type.
            </summary>
        <returns>An object that can be used to configure the scalars.</returns>
        <remarks>
          <para>
                    Unlike <see cref="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties(System.Type)" /> this method should only be called on a non-nullable concrete type.
                    Calling it on a base type will not apply the configuration to the derived types.
                </para>
          <para>
                    Calling this is rarely needed. If there are properties of the given type calling <see cref="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties(System.Type)" />
                    should be enough in most cases.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelConfigurationBuilder DefaultTypeMapping (Type scalarType, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelConfigurationBuilder DefaultTypeMapping(class System.Type scalarType, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.DefaultTypeMapping(System.Type,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DefaultTypeMapping (scalarType As Type, buildAction As Action(Of TypeMappingConfigurationBuilder)) As ModelConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member DefaultTypeMapping : Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder&#xA;override this.DefaultTypeMapping : Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" Usage="modelConfigurationBuilder.DefaultTypeMapping (scalarType, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalarType" Type="System.Type" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="scalarType">The scalar type to be configured.</param>
        <param name="buildAction">An action that performs configuration for the scalars.</param>
        <summary>
                Marks the given type as a scalar, even when used outside of entity types. This allows values of this type
                to be used in queries that are not referencing property of this type.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>
          <para>
                    Unlike <see cref="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties(System.Type)" /> this method should only be called on a non-nullable concrete type.
                    Calling it on a base type will not apply the configuration to the derived types.
                </para>
          <para>
                    Calling this is rarely needed. If there are properties of the given type calling <see cref="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties(System.Type)" />
                    should be enough in most cases.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTypeMapping&lt;TScalar&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&lt;TScalar&gt; DefaultTypeMapping&lt;TScalar&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder`1&lt;!!TScalar&gt; DefaultTypeMapping&lt;TScalar&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.DefaultTypeMapping``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DefaultTypeMapping(Of TScalar) () As TypeMappingConfigurationBuilder(Of TScalar)" />
      <MemberSignature Language="F#" Value="abstract member DefaultTypeMapping : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&lt;'Scalar&gt;&#xA;override this.DefaultTypeMapping : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&lt;'Scalar&gt;" Usage="modelConfigurationBuilder.DefaultTypeMapping " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&lt;TScalar&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScalar" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TScalar">The scalar type to be configured.</typeparam>
        <summary>
                Marks the given type as a scalar, even when used outside of entity types. This allows values of this type
                to be used in queries that are not referencing property of this type.
            </summary>
        <returns>An object that can be used to configure the scalars.</returns>
        <remarks>
          <para>
                    Unlike <see cref="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties``1" /> this method should only be called on a non-nullable concrete type.
                    Calling it on a base type will not apply the configuration to the derived types.
                </para>
          <para>
                    Calling this is rarely needed. If there are properties of the given type calling <see cref="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties``1" />
                    should be enough in most cases.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTypeMapping&lt;TScalar&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelConfigurationBuilder DefaultTypeMapping&lt;TScalar&gt; (Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&lt;TScalar&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelConfigurationBuilder DefaultTypeMapping&lt;TScalar&gt;(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder`1&lt;!!TScalar&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.DefaultTypeMapping``1(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DefaultTypeMapping(Of TScalar) (buildAction As Action(Of TypeMappingConfigurationBuilder(Of TScalar))) As ModelConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member DefaultTypeMapping : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&lt;'Scalar&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder&#xA;override this.DefaultTypeMapping : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&lt;'Scalar&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" Usage="modelConfigurationBuilder.DefaultTypeMapping buildAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelConfigurationBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScalar" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder&lt;TScalar&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TScalar">The scalar type to be configured.</typeparam>
        <param name="buildAction">An action that performs configuration for the scalars.</param>
        <summary>
                Marks the given type as a scalar, even when used outside of entity types. This allows values of this type
                to be used in queries that are not referencing property of this type.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>
          <para>
                    Unlike <see cref="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties``1" /> this method should only be called on a non-nullable concrete type.
                    Calling it on a base type will not apply the configuration to the derived types.
                </para>
          <para>
                    Calling this is rarely needed. If there are properties of the given type calling <see cref="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties``1" />
                    should be enough in most cases.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="modelConfigurationBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="modelConfigurationBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreAny">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelConfigurationBuilder IgnoreAny (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelConfigurationBuilder IgnoreAny(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.IgnoreAny(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IgnoreAny (type As Type) As ModelConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member IgnoreAny : Type -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder&#xA;override this.IgnoreAny : Type -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" Usage="modelConfigurationBuilder.IgnoreAny type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type to be ignored.</param>
        <summary>
                Prevents the conventions from the given type from discovering properties of the given or derived types.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelConfigurationBuilder IgnoreAny&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelConfigurationBuilder IgnoreAny&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.IgnoreAny``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IgnoreAny(Of T) () As ModelConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member IgnoreAny : unit -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder&#xA;override this.IgnoreAny : unit -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" Usage="modelConfigurationBuilder.IgnoreAny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelConfigurationBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type to be ignored.</typeparam>
        <summary>
                Prevents the conventions from the given type from discovering properties of the given or derived types.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelConfiguration">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration ModelConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration ModelConfiguration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.ModelConfiguration" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ModelConfiguration As ModelConfiguration" />
      <MemberSignature Language="F#" Value="member this.ModelConfiguration : Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration" Usage="Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.ModelConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder Properties (Type propertyType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder Properties(class System.Type propertyType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Properties (propertyType As Type) As PropertiesConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member Properties : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&#xA;override this.Properties : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder" Usage="modelConfigurationBuilder.Properties propertyType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="propertyType">The property type to be configured.</param>
        <summary>
                Marks the given and derived types as corresponding to entity type properties.
            </summary>
        <returns>An object that can be used to configure the property.</returns>
        <remarks>
          <para>
                    This can also be called on an interface or an unbound generic type to apply the configuration to all
                    properties of implementing and constructed types.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelConfigurationBuilder Properties (Type propertyType, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelConfigurationBuilder Properties(class System.Type propertyType, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties(System.Type,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Properties (propertyType As Type, buildAction As Action(Of PropertiesConfigurationBuilder)) As ModelConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member Properties : Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder&#xA;override this.Properties : Type * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" Usage="modelConfigurationBuilder.Properties (propertyType, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyType">The property type to be configured.</param>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Marks the given and derived types as corresponding to entity type properties.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>
          <para>
                    This can also be called on an interface or an unbound generic type to apply the configuration to all
                    properties of implementing and constructed types.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt; Properties&lt;TProperty&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!!TProperty&gt; Properties&lt;TProperty&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Properties(Of TProperty) () As PropertiesConfigurationBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="abstract member Properties : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;&#xA;override this.Properties : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;" Usage="modelConfigurationBuilder.Properties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TProperty">The property type to be configured.</typeparam>
        <summary>
                Marks the given and derived types as corresponding to entity type properties.
            </summary>
        <returns>An object that can be used to configure the properties.</returns>
        <remarks>
          <para>
                    This can also be called on an interface to apply the configuration to all properties of implementing types.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ModelConfigurationBuilder Properties&lt;TProperty&gt; (Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ModelConfigurationBuilder Properties&lt;TProperty&gt;(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1&lt;!!TProperty&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.Properties``1(System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Properties(Of TProperty) (buildAction As Action(Of PropertiesConfigurationBuilder(Of TProperty))) As ModelConfigurationBuilder" />
      <MemberSignature Language="F#" Value="abstract member Properties : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder&#xA;override this.Properties : Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;'Property&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" Usage="modelConfigurationBuilder.Properties buildAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ModelConfigurationBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder&lt;TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The property type to be configured.</typeparam>
        <param name="buildAction">An action that performs configuration of the property.</param>
        <summary>
                Marks the given and derived types as corresponding to entity type properties.
            </summary>
        <returns>
                The same <see cref="T:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder" /> instance so that additional configuration calls can be chained.
            </returns>
        <remarks>
          <para>
                    This can also be called on an interface to apply the configuration to all properties of implementing types.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-pre-convention">Pre-convention model building in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string? ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelConfigurationBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="modelConfigurationBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
