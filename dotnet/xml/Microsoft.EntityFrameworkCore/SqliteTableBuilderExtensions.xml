<Type Name="SqliteTableBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class SqliteTableBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqliteTableBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SqliteTableBuilderExtensions" />
  <TypeSignature Language="F#" Value="type SqliteTableBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Sqlite-specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="UseSqlReturningClause">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder UseSqlReturningClause (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder tableBuilder, bool useSqlReturningClause = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder UseSqlReturningClause(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder tableBuilder, bool useSqlReturningClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlReturningClause (tableBuilder As OwnedNavigationTableBuilder, Optional useSqlReturningClause As Boolean = true) As OwnedNavigationTableBuilder" />
      <MemberSignature Language="F#" Value="static member UseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause (tableBuilder, useSqlReturningClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tableBuilder">The builder for the table being configured.</param>
        <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
        <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with  certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlReturningClause">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder UseSqlReturningClause (this Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder tableBuilder, bool useSqlReturningClause = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder UseSqlReturningClause(class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder tableBuilder, bool useSqlReturningClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlReturningClause (tableBuilder As SplitTableBuilder, Optional useSqlReturningClause As Boolean = true) As SplitTableBuilder" />
      <MemberSignature Language="F#" Value="static member UseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause (tableBuilder, useSqlReturningClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tableBuilder">The builder for the table being configured.</param>
        <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
        <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlReturningClause">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder UseSqlReturningClause (this Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder tableBuilder, bool useSqlReturningClause = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder UseSqlReturningClause(class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder tableBuilder, bool useSqlReturningClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlReturningClause (tableBuilder As TableBuilder, Optional useSqlReturningClause As Boolean = true) As TableBuilder" />
      <MemberSignature Language="F#" Value="static member UseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause (tableBuilder, useSqlReturningClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tableBuilder">The builder for the table being configured.</param>
        <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
        <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlReturningClause&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;TEntity&gt; UseSqlReturningClause&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;TEntity&gt; tableBuilder, bool useSqlReturningClause = true) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder`1&lt;!!TEntity&gt; UseSqlReturningClause&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder`1&lt;!!TEntity&gt; tableBuilder, bool useSqlReturningClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause``1(Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlReturningClause(Of TEntity As Class) (tableBuilder As SplitTableBuilder(Of TEntity), Optional useSqlReturningClause As Boolean = true) As SplitTableBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member UseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;'Entity (requires 'Entity : null)&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause (tableBuilder, useSqlReturningClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="tableBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="tableBuilder">The builder for the table being configured.</param>
        <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
        <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlReturningClause&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt; UseSqlReturningClause&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt; tableBuilder, bool useSqlReturningClause = true) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1&lt;!!TEntity&gt; UseSqlReturningClause&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1&lt;!!TEntity&gt; tableBuilder, bool useSqlReturningClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlReturningClause(Of TEntity As Class) (tableBuilder As TableBuilder(Of TEntity), Optional useSqlReturningClause As Boolean = true) As TableBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member UseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;'Entity (requires 'Entity : null)&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause (tableBuilder, useSqlReturningClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="tableBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="tableBuilder">The builder for the table being configured.</param>
        <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
        <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlReturningClause&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt; UseSqlReturningClause&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt; tableBuilder, bool useSqlReturningClause = true) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; UseSqlReturningClause&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; tableBuilder, bool useSqlReturningClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder{``0,``1},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlReturningClause(Of TOwnerEntity As Class, TDependentEntity As Class) (tableBuilder As OwnedNavigationTableBuilder(Of TOwnerEntity, TDependentEntity), Optional useSqlReturningClause As Boolean = true) As OwnedNavigationTableBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member UseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.SqliteTableBuilderExtensions.UseSqlReturningClause (tableBuilder, useSqlReturningClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="tableBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="tableBuilder">The builder for the table being configured.</param>
        <param name="useSqlReturningClause">A value indicating whether to use the RETURNING clause when saving changes to the table.</param>
        <summary>
                Configures whether to use the SQL RETURNING clause when saving changes to the table. The RETURNING clause is incompatible with
                certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlite-returning-clause">Using the SQL RETURNING clause with Sqlite</see> for more
                information and examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
