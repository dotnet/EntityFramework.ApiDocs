<Type Name="SqliteDbFunctionsExtensions" FullName="Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions">
  <TypeSignature Language="C#" Value="public static class SqliteDbFunctionsExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqliteDbFunctionsExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SqliteDbFunctionsExtensions" />
  <TypeSignature Language="F#" Value="type SqliteDbFunctionsExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Contains extension methods on <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> for the Microsoft.EntityFrameworkCore.Sqlite provider.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Glob">
      <MemberSignature Language="C#" Value="public static bool Glob (this Microsoft.EntityFrameworkCore.DbFunctions _, string matchExpression, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Glob(class Microsoft.EntityFrameworkCore.DbFunctions _, string matchExpression, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Glob(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Glob (_ As DbFunctions, matchExpression As String, pattern As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member Glob : Microsoft.EntityFrameworkCore.DbFunctions * string * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Glob (_, matchExpression, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
        <Parameter Name="matchExpression" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
        <param name="matchExpression">The string that is to be matched.</param>
        <param name="pattern">The pattern which may involve wildcards <c>*,?,[,^,-,]</c>.</param>
        <summary>
                Maps to the SQLite <c>glob</c> function which is similar to
                <see cref="M:Microsoft.EntityFrameworkCore.DbFunctionsExtensions.Like(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)" /> but uses the file system globbing
                syntax instead.
            </summary>
        <returns>
          <see langword="true" /> if there is a match.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (this Microsoft.EntityFrameworkCore.DbFunctions _, byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(class Microsoft.EntityFrameworkCore.DbFunctions _, unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Hex(Microsoft.EntityFrameworkCore.DbFunctions,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Hex (_ As DbFunctions, bytes As Byte()) As String" />
      <MemberSignature Language="F#" Value="static member Hex : Microsoft.EntityFrameworkCore.DbFunctions * byte[] -&gt; string" Usage="Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Hex (_, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
        <param name="bytes">The binary value.</param>
        <summary>
                Maps to the SQLite <c>hex</c> function which returns a hexadecimal string representing the specified value.
            </summary>
        <returns>A hexadecimal string.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Substr">
      <MemberSignature Language="C#" Value="public static byte[] Substr (this Microsoft.EntityFrameworkCore.DbFunctions _, byte[] bytes, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Substr(class Microsoft.EntityFrameworkCore.DbFunctions _, unsigned int8[] bytes, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Substr(Microsoft.EntityFrameworkCore.DbFunctions,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Substr (_ As DbFunctions, bytes As Byte(), startIndex As Integer) As Byte()" />
      <MemberSignature Language="F#" Value="static member Substr : Microsoft.EntityFrameworkCore.DbFunctions * byte[] * int -&gt; byte[]" Usage="Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Substr (_, bytes, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
        <param name="bytes">The binary value.</param>
        <param name="startIndex">The 1-based starting index. If negative, the index is relative to the end of the value.</param>
        <summary>
                Maps to the SQLite <c>substr</c> function which returns a subarray of the specified value. The subarray starts
                at <paramref name="startIndex" /> and continues to the end of the value.
            </summary>
        <returns>The subarray.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        <remarks>
                Use <see cref="M:System.String.Substring(System.Int32)" /> for string values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Substr">
      <MemberSignature Language="C#" Value="public static byte[] Substr (this Microsoft.EntityFrameworkCore.DbFunctions _, byte[] bytes, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Substr(class Microsoft.EntityFrameworkCore.DbFunctions _, unsigned int8[] bytes, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Substr(Microsoft.EntityFrameworkCore.DbFunctions,System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Substr (_ As DbFunctions, bytes As Byte(), startIndex As Integer, length As Integer) As Byte()" />
      <MemberSignature Language="F#" Value="static member Substr : Microsoft.EntityFrameworkCore.DbFunctions * byte[] * int * int -&gt; byte[]" Usage="Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Substr (_, bytes, startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" RefType="this" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
        <param name="bytes">The binary value.</param>
        <param name="startIndex">The 1-based starting index. If negative, the index is relative to the end of the value.</param>
        <param name="length">
                The length of the subarray. If negative, bytes preceding <paramref name="startIndex" /> are returned.
            </param>
        <summary>
                Maps to the SQLite substr function which returns a subarray of the specified value. The subarray starts
                at <paramref name="startIndex" /> and has the specified <paramref name="length" />.
            </summary>
        <returns>The subarray.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
        <remarks>
                Use <see cref="M:System.String.Substring(System.Int32,System.Int32)" /> for string values.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unhex">
      <MemberSignature Language="C#" Value="public static byte[] Unhex (this Microsoft.EntityFrameworkCore.DbFunctions _, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Unhex(class Microsoft.EntityFrameworkCore.DbFunctions _, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Unhex(Microsoft.EntityFrameworkCore.DbFunctions,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Unhex (_ As DbFunctions, value As String) As Byte()" />
      <MemberSignature Language="F#" Value="static member Unhex : Microsoft.EntityFrameworkCore.DbFunctions * string -&gt; byte[]" Usage="Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Unhex (_, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
        <param name="value">The hexadecimal string.</param>
        <summary>
                Maps to the SQLite <c>unhex</c> function which returns a BLOB representing decoding of the hexadecimal string.
            </summary>
        <returns>Decoded hexadecimal string as binary value.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unhex">
      <MemberSignature Language="C#" Value="public static byte[] Unhex (this Microsoft.EntityFrameworkCore.DbFunctions _, string value, string ignoreChars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Unhex(class Microsoft.EntityFrameworkCore.DbFunctions _, string value, string ignoreChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Unhex(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Unhex (_ As DbFunctions, value As String, ignoreChars As String) As Byte()" />
      <MemberSignature Language="F#" Value="static member Unhex : Microsoft.EntityFrameworkCore.DbFunctions * string * string -&gt; byte[]" Usage="Microsoft.EntityFrameworkCore.SqliteDbFunctionsExtensions.Unhex (_, value, ignoreChars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_" Type="Microsoft.EntityFrameworkCore.DbFunctions" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="ignoreChars" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
        <param name="value">The hexadecimal string.</param>
        <param name="ignoreChars">Characters that are ignored in <paramref name="value" />.</param>
        <summary>
                Maps to the SQLite <c>unhex</c> function which returns a BLOB representing decoding of the hexadecimal string.
            </summary>
        <returns>Decoded hexadecimal string as binary value.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing SQLite databases with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
