<Type Name="ExecutionStrategyExtensions" FullName="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions">
  <TypeSignature Language="C#" Value="public static class ExecutionStrategyExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExecutionStrategyExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ExecutionStrategyExtensions" />
  <TypeSignature Language="F#" Value="type ExecutionStrategyExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /></summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public static void Execute (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Action operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Execute(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Action operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Execute (strategy As IExecutionStrategy, operation As Action)" />
      <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Action -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
        <summary>
                Executes the specified operation.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Execute&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TResult&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Execute&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;!!TResult&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Execute(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'Result&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <summary>
                Executes the specified operation and returns the result.
            </summary>
        <returns>The result from the operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static void Execute&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Action&lt;TState&gt; operation, TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Execute&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Action`1&lt;!!TState&gt; operation, !!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Execute(Of TState) (strategy As IExecutionStrategy, operation As Action(Of TState), state As TState)" />
      <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Action&lt;'State&gt; * 'State -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-1.1" RefType="this" />
        <Parameter Name="operation" Type="System.Action&lt;TState&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="state" Type="TState" Index="2" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <summary>
                Executes the specified operation.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static void Execute&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Action&lt;TState&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Execute&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Action`1&lt;!!TState&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Execute(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Action(Of TState))" />
      <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Action&lt;'State&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, state, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Action&lt;TState&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
        <summary>
                Executes the specified operation.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Execute&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,TResult&gt; operation, TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Execute&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, !!TResult&gt; operation, !!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Execute(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, TResult), state As TState) As TResult" />
      <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, 'Result&gt; * 'State -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-1.1" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="state" Type="TState" Index="2" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="state">The state that will be passed to the operation.</param>
        <summary>
                Executes the specified operation and returns the result.
            </summary>
        <returns>The result from the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Execute&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,TResult&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Execute&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, !!TResult&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Execute(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, TResult)) As TResult" />
      <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, 'Result&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, state, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <summary>
                Executes the specified operation and returns the result.
            </summary>
        <returns>The result from the operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Execute&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,TResult&gt; operation, Func&lt;TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt; verifySucceeded, TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Execute&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1&lt;!!TResult&gt;&gt; verifySucceeded, !!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},System.Func{``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Execute(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, ExecutionResult(Of TResult)), state As TState) As TResult" />
      <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, 'Result&gt; * Func&lt;'State, Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;'Result&gt;&gt; * 'State -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, operation, verifySucceeded, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use overload that takes the state first")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use overload that takes the state first")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="state" Type="TState" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state. </typeparam>
        <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded"> A delegate that tests whether the operation succeeded even though an exception was thrown. </param>
        <param name="state"> The state that will be passed to the operation. </param>
        <summary>
                Executes the specified operation and returns the result.
            </summary>
        <returns> The result from the operation. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Execute&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Execute&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,TResult&gt; operation, Func&lt;TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt; verifySucceeded);" FrameworkAlternate="efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Execute&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1&lt;!!TResult&gt;&gt; verifySucceeded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Execute(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, ExecutionResult(Of TResult))) As TResult" />
      <MemberSignature Language="F#" Value="static member Execute : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, 'Result&gt; * Func&lt;'State, Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;'Result&gt;&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute (strategy, state, operation, verifySucceeded)" />
      <MemberSignature Language="C#" Value="public static TResult Execute&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,TResult&gt; operation, Func&lt;TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;? verifySucceeded);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" Index="2" FrameworkAlternate="efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;" Index="3" FrameworkAlternate="efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">A delegate that tests whether the operation succeeded even though an exception was thrown.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <summary>
                Executes the specified operation and returns the result.
            </summary>
        <returns>The result from the operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.Tasks.Task&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync (strategy As IExecutionStrategy, operation As Func(Of Task)) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">A function that returns a started task.</param>
        <summary>
                Executes the specified asynchronous operation.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync (strategy As IExecutionStrategy, operation As Func(Of CancellationToken, Task), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">A function that returns a started task.</param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of CancellationToken, Task(Of TResult)), cancellationToken As CancellationToken) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.Tasks.Task&gt; operation, TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, class System.Threading.Tasks.Task&gt; operation, !!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState) (strategy As IExecutionStrategy, operation As Func(Of TState, Task), state As TState) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.Tasks.Task&gt; * 'State -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-1.1" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="state" Type="TState" Index="2" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">A function that returns a started task.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <summary>
                Executes the specified asynchronous operation.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.Tasks.Task&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, class System.Threading.Tasks.Task&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, Task)) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.Tasks.Task&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">A function that returns a started task.</param>
        <summary>
                Executes the specified asynchronous operation.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, TState state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, !!TState state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState) (strategy As IExecutionStrategy, operation As Func(Of TState, CancellationToken, Task), state As TState, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * 'State * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-1.1" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="state" Type="TState" Index="2" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">A function that returns a started task.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, CancellationToken, Task), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">A function that returns a started task.</param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, !!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, Task(Of TResult)), state As TState) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * 'State -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-1.1" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="state" Type="TState" Index="2" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="state">The state that will be passed to the operation.</param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.Tasks.Task{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, TState state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, !!TState state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, CancellationToken, Task(Of TResult)), state As TState, cancellationToken As CancellationToken) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * 'State * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, operation, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-1.1" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="state" Type="TState" Index="2" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, CancellationToken, Task(Of TResult)), cancellationToken As CancellationToken) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">
                The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1&lt;!!TResult&gt;&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteAsync(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, CancellationToken, Task(Of TResult)), verifySucceeded As Func(Of TState, CancellationToken, Task(Of ExecutionResult(Of TResult))), Optional cancellationToken As CancellationToken = Nothing) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;'Result&gt;&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync (strategy, state, operation, verifySucceeded, cancellationToken)" />
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;&gt;? verifySucceeded, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.ExecutionResult&lt;TResult&gt;&gt;&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">A delegate that tests whether the operation succeeded even though an exception was thrown.</param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction">
      <MemberSignature Language="C#" Value="public static void ExecuteInTransaction (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Action operation, Func&lt;bool&gt; verifySucceeded);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecuteInTransaction(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Action operation, class System.Func`1&lt;bool&gt; verifySucceeded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action,System.Func{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ExecuteInTransaction (strategy As IExecutionStrategy, operation As Action, verifySucceeded As Func(Of Boolean))" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Action * Func&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Action" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A delegate representing an executable operation.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TResult&gt; operation, Func&lt;bool&gt; verifySucceeded);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;!!TResult&gt; operation, class System.Func`1&lt;bool&gt; verifySucceeded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0},System.Func{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransaction(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of TResult), verifySucceeded As Func(Of Boolean)) As TResult" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'Result&gt; * Func&lt;bool&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TResult&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>The result from the operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static void ExecuteInTransaction&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Action&lt;TState&gt; operation, Func&lt;TState,bool&gt; verifySucceeded);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecuteInTransaction&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Action`1&lt;!!TState&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ExecuteInTransaction(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Action(Of TState), verifySucceeded As Func(Of TState, Boolean))" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Action&lt;'State&gt; * Func&lt;'State, bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, state, operation, verifySucceeded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Action&lt;TState&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A delegate representing an executable operation.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,TResult&gt; operation, Func&lt;TState,bool&gt; verifySucceeded);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransaction(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, Boolean)) As TResult" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, 'Result&gt; * Func&lt;'State, bool&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, state, operation, verifySucceeded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>The result from the operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,TResult&gt; operation, Func&lt;TState,bool&gt; verifySucceeded, TState state, Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded, !!TState state, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,``1},System.Func{``0,System.Boolean},``0,Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransaction(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, Boolean), state As TState, context As DbContext) As TResult" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, 'Result&gt; * Func&lt;'State, bool&gt; * 'State * Microsoft.EntityFrameworkCore.DbContext -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, operation, verifySucceeded, state, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-1.1" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="state" Type="TState" Index="3" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="4" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state. </typeparam>
        <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="state"> The state that will be passed to the operation. </param>
        <param name="context"> The context that will be used to start the transaction. </param>
        <summary>
                Executes the specified operation in a transaction and returns the result after commiting it.
            </summary>
        <returns> The result from the operation. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                Thrown if the operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransaction&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult ExecuteInTransaction&lt;TState,TResult&gt; (Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,TResult&gt; operation, Func&lt;TState,bool&gt; verifySucceeded, Func&lt;Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt; beginTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult ExecuteInTransaction&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`2&lt;!!TState, !!TResult&gt; operation, class System.Func`2&lt;!!TState, bool&gt; verifySucceeded, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.DbContext, class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt; beginTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean},System.Func{Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteInTransaction(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, TResult), verifySucceeded As Func(Of TState, Boolean), beginTransaction As Func(Of DbContext, IDbContextTransaction)) As TResult" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransaction : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, 'Result&gt; * Func&lt;'State, bool&gt; * Func&lt;Microsoft.EntityFrameworkCore.DbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt; -&gt; 'Result" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransaction (strategy, state, operation, verifySucceeded, beginTransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,TResult&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="beginTransaction" Type="System.Func&lt;Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;" Index="4" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="beginTransaction">A delegate that begins a transaction using the given context.</param>
        <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>The result from the operation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.Tasks.Task&gt; operation, Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; operation, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task{System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync (strategy As IExecutionStrategy, operation As Func(Of Task), verifySucceeded As Func(Of Task(Of Boolean))) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.Tasks.Task&gt; * Func&lt;System.Threading.Tasks.Task&lt;bool&gt;&gt; -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A function that returns a started task.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync (strategy As IExecutionStrategy, operation As Func(Of CancellationToken, Task), verifySucceeded As Func(Of CancellationToken, Task(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A function that returns a started task.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync(Of TResult) (strategy As IExecutionStrategy, operation As Func(Of CancellationToken, Task(Of TResult)), verifySucceeded As Func(Of CancellationToken, Task(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteInTransactionAsync&lt;TState&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteInTransactionAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync(Of TState) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, CancellationToken, Task), verifySucceeded As Func(Of TState, CancellationToken, Task(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, state, operation, verifySucceeded, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A function that returns a started task.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, CancellationToken, Task(Of TResult)), verifySucceeded As Func(Of TState, CancellationToken, Task(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, state, operation, verifySucceeded, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TState,TResult&gt; (this Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, TState state, Microsoft.EntityFrameworkCore.DbContext context, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, !!TState state, class Microsoft.EntityFrameworkCore.DbContext context, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},``0,Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteInTransactionAsync(Of TState, TResult) (strategy As IExecutionStrategy, operation As Func(Of TState, CancellationToken, Task(Of TResult)), verifySucceeded As Func(Of TState, CancellationToken, Task(Of Boolean)), state As TState, context As DbContext, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * 'State * Microsoft.EntityFrameworkCore.DbContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, operation, verifySucceeded, state, context, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-1.1" RefType="this" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="2" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="state" Type="TState" Index="3" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="4" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TState"> The type of the state. </typeparam>
        <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="state"> The state that will be passed to the operation. </param>
        <param name="context"> The context that will be used to start the transaction. </param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                Thrown if the operation has not succeeded after the configured number of retries.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInTransactionAsync&lt;TState,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; ExecuteInTransactionAsync&lt;TState,TResult&gt; (Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, TState state, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt; operation, Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; verifySucceeded, Func&lt;Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;&gt; beginTransaction, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ExecuteInTransactionAsync&lt;TState, TResult&gt;(class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy strategy, !!TState state, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; operation, class System.Func`3&lt;!!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; verifySucceeded, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.DbContext, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;&gt; beginTransaction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Func{Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteInTransactionAsync(Of TState, TResult) (strategy As IExecutionStrategy, state As TState, operation As Func(Of TState, CancellationToken, Task(Of TResult)), verifySucceeded As Func(Of TState, CancellationToken, Task(Of Boolean)), beginTransaction As Func(Of DbContext, CancellationToken, Task(Of IDbContextTransaction)), Optional cancellationToken As CancellationToken = Nothing) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member ExecuteInTransactionAsync : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy * 'State * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Func&lt;'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * Func&lt;Microsoft.EntityFrameworkCore.DbContext, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteInTransactionAsync (strategy, state, operation, verifySucceeded, beginTransaction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="strategy" Type="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="operation" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="verifySucceeded" Type="System.Func&lt;TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="beginTransaction" Type="System.Func&lt;Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;&gt;" Index="4" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state.</typeparam>
        <typeparam name="TResult">The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.</typeparam>
        <param name="strategy">The strategy that will be used for the execution.</param>
        <param name="state">The state that will be passed to the operation.</param>
        <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
        <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
        <param name="beginTransaction">A delegate that begins a transaction using the given context.</param>
        <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
        <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
        <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
        <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
