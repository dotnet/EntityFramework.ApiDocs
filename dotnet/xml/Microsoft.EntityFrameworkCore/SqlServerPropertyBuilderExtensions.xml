<Type Name="SqlServerPropertyBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class SqlServerPropertyBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqlServerPropertyBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SqlServerPropertyBuilderExtensions" />
  <TypeSignature Language="F#" Value="type SqlServerPropertyBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanSetHiLoSequence">
      <MemberSignature Language="C#" Value="public static bool CanSetHiLoSequence (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetHiLoSequence(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetHiLoSequence (propertyBuilder As IConventionPropertyBuilder, name As String, schema As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetHiLoSequence : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * string * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetHiLoSequence (propertyBuilder, name, schema, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static bool CanSetHiLoSequence (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given name and schema can be set for the hi-lo sequence.
            </summary>
        <returns>
          <see langword="true" /> if the given name and schema can be set for the hi-lo sequence.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIdentityColumnIncrement">
      <MemberSignature Language="C#" Value="public static bool CanSetIdentityColumnIncrement (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? increment, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetIdentityColumnIncrement(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; increment, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetIdentityColumnIncrement (propertyBuilder As IConventionPropertyBuilder, increment As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetIdentityColumnIncrement : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnIncrement (propertyBuilder, increment, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given value can be set as the increment for SQL Server IDENTITY.
            </summary>
        <returns>
          <see langword="true" /> if the given value can be set as the default increment for SQL Server IDENTITY.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIdentityColumnIncrement">
      <MemberSignature Language="C#" Value="public static bool CanSetIdentityColumnIncrement (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? increment, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetIdentityColumnIncrement(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; increment, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetIdentityColumnIncrement (propertyBuilder As IConventionPropertyBuilder, increment As Nullable(Of Integer), ByRef storeObject As StoreObjectIdentifier, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetIdentityColumnIncrement : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * StoreObjectIdentifier * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnIncrement (propertyBuilder, increment, storeObject, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <param name="storeObject">The table identifier.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given value can be set as the increment for SQL Server IDENTITY
                for a particular table.
            </summary>
        <returns>
          <see langword="true" /> if the given value can be set as the default increment for SQL Server IDENTITY.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIdentityColumnSeed">
      <MemberSignature Language="C#" Value="public static bool CanSetIdentityColumnSeed (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? seed, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetIdentityColumnSeed(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; seed, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetIdentityColumnSeed (propertyBuilder As IConventionPropertyBuilder, seed As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetIdentityColumnSeed : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnSeed (propertyBuilder, seed, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="seed"> The value that is used for the very first row loaded into the table. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given value can be set as the seed for SQL Server IDENTITY.
            </summary>
        <returns>
          <see langword="true" /> if the given value can be set as the seed for SQL Server IDENTITY. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIdentityColumnSeed">
      <MemberSignature Language="C#" Value="public static bool CanSetIdentityColumnSeed (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, long? seed, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetIdentityColumnSeed(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int64&gt; seed, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int64},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetIdentityColumnSeed (propertyBuilder As IConventionPropertyBuilder, seed As Nullable(Of Long), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetIdentityColumnSeed : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int64&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnSeed (propertyBuilder, seed, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given value can be set as the seed for SQL Server IDENTITY.
            </summary>
        <returns>
          <see langword="true" /> if the given value can be set as the seed for SQL Server IDENTITY.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIdentityColumnSeed">
      <MemberSignature Language="C#" Value="public static bool CanSetIdentityColumnSeed (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, long? seed, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetIdentityColumnSeed(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int64&gt; seed, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetIdentityColumnSeed (propertyBuilder As IConventionPropertyBuilder, seed As Nullable(Of Long), ByRef storeObject As StoreObjectIdentifier, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetIdentityColumnSeed : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int64&gt; * StoreObjectIdentifier * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnSeed (propertyBuilder, seed, storeObject, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="storeObject">The table identifier.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given value can be set as the seed for SQL Server IDENTITY
                for a particular table.
            </summary>
        <returns>
          <see langword="true" /> if the given value can be set as the seed for SQL Server IDENTITY.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsSparse">
      <MemberSignature Language="C#" Value="public static bool CanSetIsSparse (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder property, bool? sparse, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetIsSparse(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder property, valuetype System.Nullable`1&lt;bool&gt; sparse, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetIsSparse (property As IConventionPropertyBuilder, sparse As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetIsSparse : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;bool&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIsSparse (property, sparse, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sparse" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The builder for the property being configured.</param>
        <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the property's column can be configured as sparse when targeting SQL Server.
            </summary>
        <returns>The same builder instance if the configuration was applied, <see langword="null" /> otherwise.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetSequence">
      <MemberSignature Language="C#" Value="public static bool CanSetSequence (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetSequence(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetSequence (propertyBuilder As IConventionPropertyBuilder, name As String, schema As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetSequence : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * string * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetSequence (propertyBuilder, name, schema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given name and schema can be set for the key value generation sequence.
            </summary>
        <returns>
          <see langword="true" /> if the given name and schema can be set for the key value generation sequence.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetValueGenerationStrategy">
      <MemberSignature Language="C#" Value="public static bool CanSetValueGenerationStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetValueGenerationStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; valueGenerationStrategy, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetValueGenerationStrategy (propertyBuilder As IConventionPropertyBuilder, valueGenerationStrategy As Nullable(Of SqlServerValueGenerationStrategy), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetValueGenerationStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetValueGenerationStrategy (propertyBuilder, valueGenerationStrategy, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="valueGenerationStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="valueGenerationStrategy">The value generation strategy.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given value can be set as the value generation strategy.
            </summary>
        <returns>
          <see langword="true" /> if the given value can be set as the default value generation strategy.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetValueGenerationStrategy">
      <MemberSignature Language="C#" Value="public static bool CanSetValueGenerationStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy? valueGenerationStrategy, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetValueGenerationStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; valueGenerationStrategy, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetValueGenerationStrategy (propertyBuilder As IConventionPropertyBuilder, valueGenerationStrategy As Nullable(Of SqlServerValueGenerationStrategy), ByRef storeObject As StoreObjectIdentifier, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetValueGenerationStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; * StoreObjectIdentifier * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetValueGenerationStrategy (propertyBuilder, valueGenerationStrategy, storeObject, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="valueGenerationStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="valueGenerationStrategy">The value generation strategy.</param>
        <param name="storeObject">The table identifier.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given value can be set as the value generation strategy for a particular table.
            </summary>
        <returns>
          <see langword="true" /> if the given value can be set as the default value generation strategy.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasColumnName">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasColumnName (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasColumnName(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasColumnName (propertyBuilder As PropertyBuilder, name As String) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName (propertyBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="name"> The name of the column. </param>
        <summary>
                Configures the column that the property maps to when targeting SQL Server.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasColumnName&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasColumnName&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasColumnName&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasColumnName(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), name As String) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasColumnName : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnName (propertyBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="name"> The name of the column. </param>
        <summary>
                Configures the column that the property maps to when targeting SQL Server.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasColumnType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasColumnType (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasColumnType(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasColumnType (propertyBuilder As PropertyBuilder, typeName As String) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType (propertyBuilder, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="typeName" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="typeName"> The name of the data type of the column. </param>
        <summary>
                Configures the data type of the column that the property maps to when targeting SQL Server.
                This should be the complete type name, including precision, scale, length, etc.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasColumnType&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasColumnType&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasColumnType&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasColumnType(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), typeName As String) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasColumnType : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasColumnType (propertyBuilder, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="typeName" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="typeName"> The name of the data type of the column. </param>
        <summary>
                Configures the data type of the column that the property maps to when targeting SQL Server.
                This should be the complete type name, including precision, scale, length, etc.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasComputedColumnSql">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasComputedColumnSql (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasComputedColumnSql(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasComputedColumnSql (propertyBuilder As PropertyBuilder, sql As String) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasComputedColumnSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql (propertyBuilder, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="sql"> The SQL expression that computes values for the column. </param>
        <summary>
                Configures the property to map to a computed column when targeting SQL Server.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasComputedColumnSql&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasComputedColumnSql&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasComputedColumnSql&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasComputedColumnSql(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), sql As String) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasComputedColumnSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasComputedColumnSql (propertyBuilder, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="sql"> The SQL expression that computes values for the column. </param>
        <summary>
                Configures the property to map to a computed column when targeting SQL Server.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasDefaultValue">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasDefaultValue (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasDefaultValue(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasDefaultValue (propertyBuilder As PropertyBuilder, value As Object) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue (propertyBuilder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="value"> The default value of the column. </param>
        <summary>
                Configures the default value for the column that the property maps to when targeting SQL Server.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasDefaultValue&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasDefaultValue&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasDefaultValue&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasDefaultValue(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), value As Object) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValue (propertyBuilder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="value"> The default value of the column. </param>
        <summary>
                Configures the default value for the column that the property maps to when targeting SQL Server.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasDefaultValueSql">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasDefaultValueSql (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerHasDefaultValueSql(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasDefaultValueSql (propertyBuilder As PropertyBuilder, sql As String) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql (propertyBuilder, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="sql"> The SQL expression for the default value of the column. </param>
        <summary>
                Configures the default value expression for the column that the property maps to when targeting SQL Server.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasDefaultValueSql&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerHasDefaultValueSql&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerHasDefaultValueSql&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasDefaultValueSql(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), sql As String) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasDefaultValueSql : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasDefaultValueSql (propertyBuilder, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="sql" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="sql"> The SQL expression for the default value of the column. </param>
        <summary>
                Configures the default value expression for the column that the property maps to when targeting SQL Server.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasHiLoSequence">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder ForSqlServerHasHiLoSequence (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder ForSqlServerHasHiLoSequence(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasHiLoSequence (propertyBuilder As IConventionPropertyBuilder, name As String, schema As String, Optional fromDataAnnotation As Boolean = false) As IConventionSequenceBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasHiLoSequence : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasHiLoSequence (propertyBuilder, name, schema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use HasHiLoSequence")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use HasHiLoSequence")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="name"> The name of the sequence. </param>
        <param name="schema">The schema of the sequence. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the database sequence used for the hi-lo pattern to generate values for the key property,
                when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the sequence. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasIdentityIncrement">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqlServerHasIdentityIncrement (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? increment, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqlServerHasIdentityIncrement(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; increment, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasIdentityIncrement (propertyBuilder As IConventionPropertyBuilder, increment As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasIdentityIncrement : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasIdentityIncrement (propertyBuilder, increment, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use HasIdentityColumnIncrement")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use HasIdentityColumnIncrement")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="increment" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="increment"> The incremental value that is added to the identity value of the previous row that was loaded. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the increment for SQL Server IDENTITY.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasIdentitySeed">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqlServerHasIdentitySeed (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? seed, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqlServerHasIdentitySeed(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; seed, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasIdentitySeed (propertyBuilder As IConventionPropertyBuilder, seed As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasIdentitySeed : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasIdentitySeed (propertyBuilder, seed, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use HasIdentityColumnSeed")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use HasIdentityColumnSeed")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="seed"> The value that is used for the very first row loaded into the table. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the seed for SQL Server IDENTITY.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasValueGenerationStrategy">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqlServerHasValueGenerationStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ForSqlServerHasValueGenerationStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; valueGenerationStrategy, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerHasValueGenerationStrategy (propertyBuilder As IConventionPropertyBuilder, valueGenerationStrategy As Nullable(Of SqlServerValueGenerationStrategy), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasValueGenerationStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerHasValueGenerationStrategy (propertyBuilder, valueGenerationStrategy, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use HasValueGenerationStrategy")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use HasValueGenerationStrategy")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="valueGenerationStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="valueGenerationStrategy"> The value generation strategy. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the value generation strategy for the key property, when targeting SQL Server.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerUseSequenceHiLo">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerUseSequenceHiLo (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name = default, string schema = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder ForSqlServerUseSequenceHiLo(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerUseSequenceHiLo (propertyBuilder As PropertyBuilder, Optional name As String = Nothing, Optional schema As String = Nothing) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerUseSequenceHiLo : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo (propertyBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use UseHiLo")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use UseHiLo")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="name"> The name of the sequence. </param>
        <param name="schema"> The schema of the sequence. </param>
        <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerUseSequenceHiLo&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; ForSqlServerUseSequenceHiLo&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string name = default, string schema = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; ForSqlServerUseSequenceHiLo&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerUseSequenceHiLo(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), Optional name As String = Nothing, Optional schema As String = Nothing) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerUseSequenceHiLo : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.ForSqlServerUseSequenceHiLo (propertyBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use UseHiLo")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use UseHiLo")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="name"> The name of the sequence. </param>
        <param name="schema"> The schema of the sequence. </param>
        <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasHiLoSequence">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder HasHiLoSequence (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder HasHiLoSequence(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasHiLoSequence (propertyBuilder As IConventionPropertyBuilder, name As String, schema As String, Optional fromDataAnnotation As Boolean = false) As IConventionSequenceBuilder" />
      <MemberSignature Language="F#" Value="static member HasHiLoSequence : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasHiLoSequence (propertyBuilder, name, schema, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder? HasHiLoSequence (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the database sequence used for the hi-lo pattern to generate values for the key property,
                when targeting SQL Server.
            </summary>
        <returns>A builder to further configure the sequence.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIdentityColumnIncrement">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasIdentityColumnIncrement (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? increment, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasIdentityColumnIncrement(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; increment, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasIdentityColumnIncrement (propertyBuilder As IConventionPropertyBuilder, increment As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasIdentityColumnIncrement : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnIncrement (propertyBuilder, increment, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? HasIdentityColumnIncrement (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? increment, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the increment for SQL Server IDENTITY.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIdentityColumnIncrement">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? HasIdentityColumnIncrement (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? increment, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasIdentityColumnIncrement(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; increment, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasIdentityColumnIncrement (propertyBuilder As IConventionPropertyBuilder, increment As Nullable(Of Integer), ByRef storeObject As StoreObjectIdentifier, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasIdentityColumnIncrement : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * StoreObjectIdentifier * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnIncrement (propertyBuilder, increment, storeObject, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <param name="storeObject">The table identifier.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the increment for SQL Server IDENTITY for a particular table.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIdentityColumnSeed">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasIdentityColumnSeed (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, int? seed, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasIdentityColumnSeed(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int32&gt; seed, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasIdentityColumnSeed (propertyBuilder As IConventionPropertyBuilder, seed As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasIdentityColumnSeed : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnSeed (propertyBuilder, seed, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="seed"> The value that is used for the very first row loaded into the table. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the seed for SQL Server IDENTITY.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIdentityColumnSeed">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? HasIdentityColumnSeed (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, long? seed, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasIdentityColumnSeed(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int64&gt; seed, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int64},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasIdentityColumnSeed (propertyBuilder As IConventionPropertyBuilder, seed As Nullable(Of Long), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasIdentityColumnSeed : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int64&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnSeed (propertyBuilder, seed, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the seed for SQL Server IDENTITY.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIdentityColumnSeed">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? HasIdentityColumnSeed (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, long? seed, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasIdentityColumnSeed(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;int64&gt; seed, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasIdentityColumnSeed (propertyBuilder As IConventionPropertyBuilder, seed As Nullable(Of Long), ByRef storeObject As StoreObjectIdentifier, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasIdentityColumnSeed : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;int64&gt; * StoreObjectIdentifier * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnSeed (propertyBuilder, seed, storeObject, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Nullable&lt;System.Int64&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="storeObject">The table identifier.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the seed for SQL Server IDENTITY for a particular table.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSequence">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder? HasSequence (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string? name, string? schema, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder HasSequence(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasSequence (propertyBuilder As IConventionPropertyBuilder, name As String, schema As String, Optional fromDataAnnotation As Boolean = false) As IConventionSequenceBuilder" />
      <MemberSignature Language="F#" Value="static member HasSequence : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasSequence (propertyBuilder, name, schema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the database sequence used for the key value generation pattern to generate values for the key property,
                when targeting SQL Server.
            </summary>
        <returns>A builder to further configure the sequence.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueGenerationStrategy">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasValueGenerationStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasValueGenerationStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; valueGenerationStrategy, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasValueGenerationStrategy (propertyBuilder As IConventionPropertyBuilder, valueGenerationStrategy As Nullable(Of SqlServerValueGenerationStrategy), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasValueGenerationStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasValueGenerationStrategy (propertyBuilder, valueGenerationStrategy, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? HasValueGenerationStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="valueGenerationStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="valueGenerationStrategy">The value generation strategy.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the value generation strategy for the key property, when targeting SQL Server.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueGenerationStrategy">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? HasValueGenerationStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy? valueGenerationStrategy, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasValueGenerationStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; valueGenerationStrategy, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasValueGenerationStrategy (propertyBuilder As IConventionPropertyBuilder, valueGenerationStrategy As Nullable(Of SqlServerValueGenerationStrategy), ByRef storeObject As StoreObjectIdentifier, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member HasValueGenerationStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt; * StoreObjectIdentifier * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasValueGenerationStrategy (propertyBuilder, valueGenerationStrategy, storeObject, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="valueGenerationStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="valueGenerationStrategy">The value generation strategy.</param>
        <param name="storeObject">The table identifier.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the value generation strategy for the key property, when targeting SQL Server for a particular table.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSparse">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder IsSparse (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, bool sparse = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder IsSparse(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, bool sparse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSparse (propertyBuilder As PropertyBuilder, Optional sparse As Boolean = true) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member IsSparse : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.IsSparse (propertyBuilder, sparse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sparse" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
        <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
        <returns>A builder to further configure the property.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSparse">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder? IsSparse (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, bool? sparse, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IsSparse(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder propertyBuilder, valuetype System.Nullable`1&lt;bool&gt; sparse, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSparse (propertyBuilder As IConventionPropertyBuilder, sparse As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="static member IsSparse : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.IsSparse (propertyBuilder, sparse, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sparse" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
        <returns>The same builder instance if the configuration was applied, <see langword="null" /> otherwise.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSparse&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; IsSparse&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, bool sparse = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; IsSparse&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, bool sparse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.IsSparse``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSparse(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), Optional sparse As Boolean = true) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member IsSparse : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.IsSparse (propertyBuilder, sparse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sparse" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
        <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
        <returns>A builder to further configure the property.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHiLo">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseHiLo (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name = default, string schema = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseHiLo(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseHiLo(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHiLo (propertyBuilder As PropertyBuilder, Optional name As String = Nothing, Optional schema As String = Nothing) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member UseHiLo : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseHiLo (propertyBuilder, name, schema)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseHiLo (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string? name = default, string? schema = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHiLo&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; UseHiLo&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string name = default, string schema = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; UseHiLo&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseHiLo``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHiLo(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), Optional name As String = Nothing, Optional schema As String = Nothing) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseHiLo : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseHiLo (propertyBuilder, name, schema)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; UseHiLo&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string? name = default, string? schema = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property being configured.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder UseIdentityColumn (this Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder columnBuilder, long seed = 1, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder UseIdentityColumn(class Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder columnBuilder, int64 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder,System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn (columnBuilder As ColumnBuilder, Optional seed As Long = 1, Optional increment As Integer = 1) As ColumnBuilder" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder * int64 * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn (columnBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Int64" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Int32" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="columnBuilder">The builder for the column being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key column to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseIdentityColumn (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int seed = 1, int increment = 1);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseIdentityColumn(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int32 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn (propertyBuilder As PropertyBuilder, Optional seed As Integer = 1, Optional increment As Integer = 1) As PropertyBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseIdentityColumn (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int seed, int increment = 1);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn (propertyBuilder As PropertyBuilder, seed As Integer, Optional increment As Integer = 1) As PropertyBuilder" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Int32" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Int32" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseIdentityColumn (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, long seed = 1, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseIdentityColumn(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int64 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn (propertyBuilder As PropertyBuilder, Optional seed As Long = 1, Optional increment As Integer = 1) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * int64 * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Int64" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Int32" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder&lt;TProperty&gt; UseIdentityColumn&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder&lt;TProperty&gt; columnBuilder, long seed = 1, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder`1&lt;!!TProperty&gt; UseIdentityColumn&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder`1&lt;!!TProperty&gt; columnBuilder, int64 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder{``0},System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn(Of TProperty) (columnBuilder As ColumnBuilder(Of TProperty), Optional seed As Long = 1, Optional increment As Integer = 1) As ColumnBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder&lt;'Property&gt; * int64 * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn (columnBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="columnBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Int64" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Int32" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property being configured.</typeparam>
        <param name="columnBuilder">The builder for the column being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key column to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; UseIdentityColumn&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, int seed = 1, int increment = 1);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; UseIdentityColumn&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, int32 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), Optional seed As Integer = 1, Optional increment As Integer = 1) As PropertyBuilder(Of TProperty)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; UseIdentityColumn&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, int seed, int increment = 1);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), seed As Integer, Optional increment As Integer = 1) As PropertyBuilder(Of TProperty)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Int32" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Int32" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property being configured.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; UseIdentityColumn&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, long seed = 1, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; UseIdentityColumn&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, int64 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), Optional seed As Long = 1, Optional increment As Integer = 1) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * int64 * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="seed" Type="System.Int64" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="increment" Type="System.Int32" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property being configured.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSequence">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseSequence (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string? name = default, string? schema = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseSequence(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSequence (propertyBuilder As PropertyBuilder, Optional name As String = Nothing, Optional schema As String = Nothing) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member UseSequence : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSequence (propertyBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <summary>
                Configures the key property to use a sequence-based key value generation pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSequence&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; UseSequence&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, string? name = default, string? schema = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; UseSequence&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSequence``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSequence(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), Optional name As String = Nothing, Optional schema As String = Nothing) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseSequence : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSequence (propertyBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property being configured.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <summary>
                Configures the key property to use a sequence-based key value generation pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlServerIdentityColumn">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseSqlServerIdentityColumn (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseSqlServerIdentityColumn(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlServerIdentityColumn (propertyBuilder As PropertyBuilder) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member UseSqlServerIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn propertyBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlServerIdentityColumn">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseSqlServerIdentityColumn (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int seed = 1, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder UseSqlServerIdentityColumn(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder propertyBuilder, int32 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlServerIdentityColumn (propertyBuilder As PropertyBuilder, Optional seed As Integer = 1, Optional increment As Integer = 1) As PropertyBuilder" />
      <MemberSignature Language="F#" Value="static member UseSqlServerIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder * int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use UseIdentityColumn")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use UseIdentityColumn")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="seed" Type="System.Int32" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="increment" Type="System.Int32" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="seed"> The value that is used for the very first row loaded into the table. </param>
        <param name="increment"> The incremental value that is added to the identity value of the previous row that was loaded. </param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlServerIdentityColumn&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; UseSqlServerIdentityColumn&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; UseSqlServerIdentityColumn&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlServerIdentityColumn(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty)) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseSqlServerIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn propertyBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlServerIdentityColumn&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; UseSqlServerIdentityColumn&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt; propertyBuilder, int seed = 1, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; UseSqlServerIdentityColumn&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, int32 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlServerIdentityColumn(Of TProperty) (propertyBuilder As PropertyBuilder(Of TProperty), Optional seed As Integer = 1, Optional increment As Integer = 1) As PropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseSqlServerIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt; * int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSqlServerIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use UseIdentityColumn")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use UseIdentityColumn")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder&lt;TProperty&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="seed" Type="System.Int32" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="increment" Type="System.Int32" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property being configured. </typeparam>
        <param name="propertyBuilder"> The builder for the property being configured. </param>
        <param name="seed"> The value that is used for the very first row loaded into the table. </param>
        <param name="increment"> The incremental value that is added to the identity value of the previous row that was loaded. </param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
