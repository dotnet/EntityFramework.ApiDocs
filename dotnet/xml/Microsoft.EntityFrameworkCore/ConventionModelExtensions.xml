<Type Name="ConventionModelExtensions" FullName="Microsoft.EntityFrameworkCore.ConventionModelExtensions">
  <TypeSignature Language="C#" Value="public static class ConventionModelExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ConventionModelExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ConventionModelExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ConventionModelExtensions" />
  <TypeSignature Language="F#" Value="type ConventionModelExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-6.0">
      <AttributeName Language="C#">[System.Obsolete("Use IConventionModel")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Use IConventionModel")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionModel" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddIgnored">
      <MemberSignature Language="C#" Value="public static void AddIgnored (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type clrType, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddIgnored(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type clrType, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.AddIgnored(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddIgnored (model As IConventionModel, clrType As Type, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member AddIgnored : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.AddIgnored (model, clrType, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static string AddIgnored (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string AddIgnored(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddIgnored (model As IConventionModel, type As Type, Optional fromDataAnnotation As Boolean = false) As String" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member AddIgnored : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.AddIgnored (model, type, fromDataAnnotation)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="clrType"> The entity type to be ignored. </param>
        <param name="model"> The model to add the ignored type to. </param>
        <param name="type"> The entity type to be ignored. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Marks the given entity type as ignored.
            </summary>
        <returns> The name of the ignored entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwned">
      <MemberSignature Language="C#" Value="public static void AddOwned (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type clrType, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOwned(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type clrType, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.AddOwned(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddOwned (model As IConventionModel, clrType As Type, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member AddOwned : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.AddOwned (model, clrType, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static void AddOwned (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOwned(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddOwned (model As IConventionModel, type As Type, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member AddOwned : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.AddOwned (model, type, fromDataAnnotation)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="clrType"> The type of the entity type that should be owned. </param>
        <param name="model"> The model to add the owned type to. </param>
        <param name="type"> The type of the entity type that should be owned. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Marks the given entity type as owned, indicating that when discovered entity types using the given type
                should be configured as owned.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddShared">
      <MemberSignature Language="C#" Value="public static void AddShared (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddShared(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.AddShared(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddShared (model As IConventionModel, type As Type, Optional fromDataAnnotation As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member AddShared : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.AddShared (model, type, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to add the shared type to. </param>
        <param name="type"> The type of the entity type that should be shared. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Marks the given entity type as shared, indicating that when discovered matching entity types
                should be configured as shared type entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeModel">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IModel FinalizeModel (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IModel FinalizeModel(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.FinalizeModel(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FinalizeModel (model As IConventionModel) As IModel" />
      <MemberSignature Language="F#" Value="static member FinalizeModel : Microsoft.EntityFrameworkCore.Metadata.IConventionModel -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.FinalizeModel model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to finalize. </param>
        <summary>
                Forces post-processing on the model such that it is ready for use by the runtime. This post
                processing happens automatically when using <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />; this method allows it to be run
                explicitly in cases where the automatic execution is not possible.
            </summary>
        <returns> The finalized <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindEntityType (model As IConventionModel, type As Type) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindEntityType (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity type in. </param>
        <param name="type"> The type to find the corresponding entity type for. </param>
        <summary>
                Gets the entity that maps the given entity class. Returns <see langword="null" /> if no entity type with the given name is found.
            </summary>
        <returns> The entity type, or <see langword="null" /> if none if found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindEntityType (model As IConventionModel, type As Type, definingNavigationName As String, definingEntityType As IConventionEntityType) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type * string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindEntityType (model, type, definingNavigationName, definingEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="definingNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity type in. </param>
        <param name="type"> The type of the entity type to find. </param>
        <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
        <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
        <summary>
                Gets the entity type for the given name, defining navigation name
                and the defining entity type. Returns <see langword="null" /> if no matching entity type is found.
            </summary>
        <returns> The entity type, or <see langword="null" /> if none are found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIgnoredConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? FindIgnoredConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; FindIgnoredConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindIgnoredConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIgnoredConfigurationSource (model As IConventionModel, type As Type) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member FindIgnoredConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindIgnoredConfigurationSource (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to check for ignored type. </param>
        <param name="type"> The entity type that might be ignored. </param>
        <summary>
                Indicates whether the given entity type is ignored.
            </summary>
        <returns>
                The configuration source if the given entity type is ignored,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIsOwnedConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? FindIsOwnedConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type clrType);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; FindIsOwnedConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type clrType) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindIsOwnedConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIsOwnedConfigurationSource (model As IConventionModel, clrType As Type) As Nullable(Of ConfigurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member FindIsOwnedConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindIsOwnedConfigurationSource (model, clrType)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? FindIsOwnedConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; FindIsOwnedConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIsOwnedConfigurationSource (model As IConventionModel, type As Type) As Nullable(Of ConfigurationSource)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member FindIsOwnedConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindIsOwnedConfigurationSource (model, type)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="clrType"> The type of the entity type that could be owned. </param>
        <param name="model"> The model. </param>
        <param name="type"> The type of the entity type that could be owned. </param>
        <summary>
                Returns a value indicating whether the entity types using the given type should be configured
                as owned types when discovered.
            </summary>
        <returns>
                The configuration source if the given type name is marked as owned,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLeastDerivedEntityTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; FindLeastDerivedEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,bool&gt; condition = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; FindLeastDerivedEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType, bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindLeastDerivedEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type,System.Func{Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindLeastDerivedEntityTypes (model As IConventionModel, type As Type, Optional condition As Func(Of IConventionEntityType, Boolean) = Nothing) As IReadOnlyList(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="static member FindLeastDerivedEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType, bool&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.FindLeastDerivedEntityTypes (model, type, condition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="condition" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity types in. </param>
        <param name="type"> The base type. </param>
        <param name="condition"> An optional condition for filtering entity types. </param>
        <summary>
                Returns the entity types corresponding to the least derived types from the given.
            </summary>
        <returns> List of entity types corresponding to the least derived types from the given. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangeTrackingStrategyConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetChangeTrackingStrategyConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetChangeTrackingStrategyConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.GetChangeTrackingStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChangeTrackingStrategyConfigurationSource (model As IConventionModel) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetChangeTrackingStrategyConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionModel -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.GetChangeTrackingStrategyConfigurationSource model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find configuration source for. </param>
        <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)" />.
            </summary>
        <returns> The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)" />. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IConventionModel, name As String) As IReadOnlyCollection(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * string -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.GetEntityTypes (model, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use FindEntityTypes(Type) or FindEntityType(string)")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use FindEntityTypes(Type) or FindEntityType(string)")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="model">The model to find the entity type in.</param>
        <param name="name">The name of the entity type to find.</param>
        <summary>
                Gets the entity types matching the given name.
            </summary>
        <returns>The entity types found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IConventionModel, type As Type) As IReadOnlyCollection(Of IConventionEntityType)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.GetEntityTypes (model, type)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IConventionModel, type As Type) As IEnumerable(Of IConventionEntityType)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.GetEntityTypes (model, type)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use IConventionEntityType.FindEntityTypes")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IConventionEntityType.FindEntityTypes")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0">System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="model">The model to find the entity type in.</param>
        <param name="type">The type of the entity type to find.</param>
        <summary>
                Gets the entity types matching the given type.
            </summary>
        <returns>The entity types found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccessModeConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetPropertyAccessModeConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetPropertyAccessModeConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.GetPropertyAccessModeConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessModeConfigurationSource (model As IConventionModel) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessModeConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionModel -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.GetPropertyAccessModeConfigurationSource model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find configuration source for. </param>
        <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)" />.
            </summary>
        <returns> The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)" />. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIgnored">
      <MemberSignature Language="C#" Value="public static bool IsIgnored (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIgnored(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.IsIgnored(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsIgnored (model As IConventionModel, typeName As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIgnored : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.IsIgnored (model, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="typeName" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to check for ignored type. </param>
        <param name="typeName"> The name of the entity type that could be ignored. </param>
        <summary>
                Indicates whether the given entity type name is ignored.
            </summary>
        <returns>
          <see langword="true" /> if the given entity type name is ignored. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIgnored">
      <MemberSignature Language="C#" Value="public static bool IsIgnored (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIgnored(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.IsIgnored(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsIgnored (model As IConventionModel, type As Type) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIgnored : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.IsIgnored (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to check for ignored type. </param>
        <param name="type"> The entity type that might be ignored. </param>
        <summary>
                Indicates whether the given entity type is ignored.
            </summary>
        <returns>
          <see langword="true" /> if the given entity type is ignored. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOwned">
      <MemberSignature Language="C#" Value="public static bool IsOwned (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type clrType);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsOwned(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type clrType) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.IsOwned(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOwned (model As IConventionModel, clrType As Type) As Boolean" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member IsOwned : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.IsOwned (model, clrType)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static bool IsOwned (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsOwned(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOwned (model As IConventionModel, type As Type) As Boolean" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member IsOwned : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.IsOwned (model, type)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="clrType"> The type of the entity type that could be owned. </param>
        <param name="model"> The model. </param>
        <param name="type"> The type of the entity type that could be owned. </param>
        <summary>
                Returns a value indicating whether the entity types using the given type should be configured
                as owned types when discovered.
            </summary>
        <returns>
          <see langword="true" /> if the given type name is marked as owned,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveEntityType (model As IConventionModel, name As String) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveEntityType (model, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the entity type from. </param>
        <param name="name"> The name of the entity type to be removed. </param>
        <summary>
                Removes an entity type without a defining navigation from the model.
            </summary>
        <returns> The entity type that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveEntityType (model As IConventionModel, type As Type) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveEntityType (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the entity type from. </param>
        <param name="type"> The entity type to be removed. </param>
        <summary>
                Removes an entity type from the model.
            </summary>
        <returns> The entity type that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveEntityType (model As IConventionModel, name As String, definingNavigationName As String, definingEntityType As IConventionEntityType) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * string * string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveEntityType (model, name, definingNavigationName, definingEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="definingNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the entity type from. </param>
        <param name="name"> The name of the entity type to be removed. </param>
        <param name="definingNavigationName"> The defining navigation. </param>
        <param name="definingEntityType"> The defining entity type. </param>
        <summary>
                Removes an entity type with a defining navigation from the model.
            </summary>
        <returns> The entity type that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveEntityType (model As IConventionModel, type As Type, definingNavigationName As String, definingEntityType As IConventionEntityType) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type * string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveEntityType (model, type, definingNavigationName, definingEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="definingNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the entity type from. </param>
        <param name="type"> The CLR class that is used to represent instances of this entity type. </param>
        <param name="definingNavigationName"> The defining navigation. </param>
        <param name="definingEntityType"> The defining entity type. </param>
        <summary>
                Removes an entity type with a defining navigation from the model.
            </summary>
        <returns> The entity type that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOwned">
      <MemberSignature Language="C#" Value="public static void RemoveOwned (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type clrType);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveOwned(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type clrType) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveOwned(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RemoveOwned (model As IConventionModel, clrType As Type)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member RemoveOwned : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveOwned (model, clrType)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static string RemoveOwned (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Type type);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RemoveOwned(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveOwned (model As IConventionModel, type As Type) As String" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member RemoveOwned : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type -&gt; string" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.RemoveOwned (model, type)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="clrType"> The type of the entity type that should not be owned. </param>
        <param name="model"> The model to remove the owned type name from. </param>
        <param name="type"> The type of the entity type that should not be owned. </param>
        <summary>
                Removes the given owned type, indicating that when discovered matching entity types
                should not be configured as owned.
            </summary>
        <returns> The name of the removed owned type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public static void SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetChangeTrackingStrategy (model As IConventionModel, changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy), Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.SetChangeTrackingStrategy (model, changeTrackingStrategy, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetChangeTrackingStrategy (model As IConventionModel, changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy), Optional fromDataAnnotation As Boolean = false) As Nullable(Of ChangeTrackingStrategy)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.SetChangeTrackingStrategy (model, changeTrackingStrategy, fromDataAnnotation)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="changeTrackingStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to set the default change tracking strategy for. </param>
        <param name="changeTrackingStrategy"> The strategy to use. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the default change tracking strategy to use for entities in the model. This strategy indicates how the
                context detects changes to properties for an instance of an entity type.
            </summary>
        <returns> The configured value. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (model As IConventionModel, propertyAccessMode As Nullable(Of PropertyAccessMode), Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.SetPropertyAccessMode (model, propertyAccessMode, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.PropertyAccessMode? SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetPropertyAccessMode (model As IConventionModel, propertyAccessMode As Nullable(Of PropertyAccessMode), Optional fromDataAnnotation As Boolean = false) As Nullable(Of PropertyAccessMode)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionModelExtensions.SetPropertyAccessMode (model, propertyAccessMode, fromDataAnnotation)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to set the access mode for. </param>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or <see langword="null" /> to clear the mode set.</param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of all entity types
                    in this model.
                </para>
          <para>
                    Note that individual entity types can override this access mode, and individual properties of
                    entity types can override the access mode set on the entity type. The value set here will
                    be used for any property for which no override has been specified.
                </para>
        </summary>
        <returns> The configured value. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
