<Type Name="RelationalQueryTypeBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class RelationalQueryTypeBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RelationalQueryTypeBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RelationalQueryTypeBuilderExtensions" />
  <TypeSignature Language="F#" Value="type RelationalQueryTypeBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="HasDiscriminator">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator (queryTypeBuilder As QueryTypeBuilder) As DiscriminatorBuilder" />
      <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator queryTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
        <summary>
                Configures the discriminator column used to identify which query type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        <returns> A builder that allows the discriminator column to be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name, Type discriminatorType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name, class System.Type discriminatorType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator (queryTypeBuilder As QueryTypeBuilder, name As String, discriminatorType As Type) As DiscriminatorBuilder" />
      <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder * string * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator (queryTypeBuilder, name, discriminatorType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="discriminatorType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
        <param name="name"> The name of the discriminator column. </param>
        <param name="discriminatorType"> The type of values stored in the discriminator column. </param>
        <summary>
                Configures the discriminator column used to identify which query type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        <returns> A builder that allows the discriminator column to be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator&lt;TDiscriminator&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1&lt;!!TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator(Of TDiscriminator) (queryTypeBuilder As QueryTypeBuilder, name As String) As DiscriminatorBuilder(Of TDiscriminator)" />
      <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;'Discriminator&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator (queryTypeBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDiscriminator" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TDiscriminator"> The type of values stored in the discriminator column. </typeparam>
        <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
        <param name="name"> The name of the discriminator column. </param>
        <summary>
                Configures the discriminator column used to identify which query type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        <returns> A builder that allows the discriminator column to be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator&lt;TQuery,TDiscriminator&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt; HasDiscriminator&lt;TQuery,TDiscriminator&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; queryTypeBuilder, System.Linq.Expressions.Expression&lt;Func&lt;TQuery,TDiscriminator&gt;&gt; propertyExpression) where TQuery : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1&lt;!!TDiscriminator&gt; HasDiscriminator&lt;class TQuery, TDiscriminator&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; queryTypeBuilder, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TQuery, !!TDiscriminator&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator(Of TQuery As Class, TDiscriminator As Class) (queryTypeBuilder As QueryTypeBuilder(Of TQuery), propertyExpression As Expression(Of Func(Of TQuery, TDiscriminator))) As DiscriminatorBuilder(Of TDiscriminator)" />
      <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Query, 'Discriminator&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;'Discriminator&gt; (requires 'Query : null)" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.HasDiscriminator (queryTypeBuilder, propertyExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TQuery">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDiscriminator" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;" RefType="this" />
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TQuery,TDiscriminator&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TQuery"> The query type being configured. </typeparam>
        <typeparam name="TDiscriminator"> The type of values stored in the discriminator column. </typeparam>
        <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
        <param name="propertyExpression">
                A lambda expression representing the property to be used as the discriminator (
                <c>blog =&gt; blog.Discriminator</c>).
            </param>
        <summary>
                Configures the discriminator column used to identify which query type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        <returns> A builder that allows the discriminator column to be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (queryTypeBuilder As QueryTypeBuilder, name As String) As QueryTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView (queryTypeBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
        <param name="name"> The name of the view or table. </param>
        <summary>
                Configures the view or table that the view maps to when targeting a relational database.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name, string schema);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder queryTypeBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (queryTypeBuilder As QueryTypeBuilder, name As String, schema As String) As QueryTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView (queryTypeBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
        <param name="name"> The name of the view or table. </param>
        <param name="schema"> The schema of the view or table. </param>
        <summary>
                Configures the view or table that the view maps to when targeting a relational database.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TQuery&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; ToView&lt;TQuery&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; queryTypeBuilder, string name) where TQuery : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; ToView&lt;class TQuery&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; queryTypeBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TQuery As Class) (queryTypeBuilder As QueryTypeBuilder(Of TQuery), name As String) As QueryTypeBuilder(Of TQuery)" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; (requires 'Query : null)" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView (queryTypeBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TQuery">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TQuery"> The query type being configured. </typeparam>
        <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
        <param name="name"> The name of the view or table. </param>
        <summary>
                Configures the view or table that the view maps to when targeting a relational database.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TQuery&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; ToView&lt;TQuery&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt; queryTypeBuilder, string name, string schema) where TQuery : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; ToView&lt;class TQuery&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1&lt;!!TQuery&gt; queryTypeBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder{``0},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TQuery As Class) (queryTypeBuilder As QueryTypeBuilder(Of TQuery), name As String, schema As String) As QueryTypeBuilder(Of TQuery)" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;'Query (requires 'Query : null)&gt; (requires 'Query : null)" Usage="Microsoft.EntityFrameworkCore.RelationalQueryTypeBuilderExtensions.ToView (queryTypeBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TQuery">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder&lt;TQuery&gt;" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TQuery"> The query type being configured. </typeparam>
        <param name="queryTypeBuilder"> The builder for the query type being configured. </param>
        <param name="name"> The name of the view or table. </param>
        <param name="schema"> The schema of the view or table. </param>
        <summary>
                Configures the view or table that the view maps to when targeting a relational database.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
