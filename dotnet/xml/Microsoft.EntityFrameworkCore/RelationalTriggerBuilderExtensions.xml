<Type Name="RelationalTriggerBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class RelationalTriggerBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RelationalTriggerBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RelationalTriggerBuilderExtensions" />
  <TypeSignature Language="F#" Value="type RelationalTriggerBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TriggerBuilder" />.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-triggers">Database triggers</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanSetDatabaseName">
      <MemberSignature Language="C#" Value="public static bool CanSetDatabaseName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string? name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetDatabaseName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.CanSetDatabaseName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetDatabaseName (triggerBuilder As IConventionTriggerBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetDatabaseName : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.CanSetDatabaseName (triggerBuilder, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="triggerBuilder">The builder for the trigger being configured.</param>
        <param name="name">The database name of the trigger.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given name can be set for the trigger.
            </summary>
        <returns>
          <see langword="true" /> if the database name can be set for the trigger.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetTableName">
      <MemberSignature Language="C#" Value="public static bool CanSetTableName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string? name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetTableName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.CanSetTableName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetTableName (triggerBuilder As IConventionTriggerBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetTableName : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.CanSetTableName (triggerBuilder, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="triggerBuilder">The builder for the trigger being configured.</param>
        <param name="name">The name of the table on which this trigger is defined.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given table name can be set for the trigger.
            </summary>
        <returns>
          <see langword="true" /> if the table name can be set for the trigger.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetTableSchema">
      <MemberSignature Language="C#" Value="public static bool CanSetTableSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string? schema, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetTableSchema(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.CanSetTableSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetTableSchema (triggerBuilder As IConventionTriggerBuilder, schema As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetTableSchema : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.CanSetTableSchema (triggerBuilder, schema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" RefType="this" />
        <Parameter Name="schema" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="triggerBuilder">The builder for the trigger being configured.</param>
        <param name="schema">The schema of the table on which this trigger is defined.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given table schema can be set for the trigger.
            </summary>
        <returns>
          <see langword="true" /> if the database name can be set for the trigger.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDatabaseName">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder? HasDatabaseName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string? name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder HasDatabaseName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.HasDatabaseName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDatabaseName (triggerBuilder As IConventionTriggerBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As IConventionTriggerBuilder" />
      <MemberSignature Language="F#" Value="static member HasDatabaseName : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.HasDatabaseName (triggerBuilder, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="triggerBuilder">The builder for the trigger being configured.</param>
        <param name="name">The database name of the trigger.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the database name of the trigger.
            </summary>
        <returns>The same builder instance if the configuration was applied, <see langword="null" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTableName">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder? HasTableName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string? name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder HasTableName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.HasTableName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasTableName (triggerBuilder As IConventionTriggerBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As IConventionTriggerBuilder" />
      <MemberSignature Language="F#" Value="static member HasTableName : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.HasTableName (triggerBuilder, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="triggerBuilder">The builder for the trigger being configured.</param>
        <param name="name">The name of the table on which this trigger is defined.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets name of the table on which this trigger is defined.
            </summary>
        <returns>The same builder instance if the configuration was applied, <see langword="null" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTableSchema">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder? HasTableSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string? schema, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder HasTableSchema(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder triggerBuilder, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.HasTableSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasTableSchema (triggerBuilder As IConventionTriggerBuilder, schema As String, Optional fromDataAnnotation As Boolean = false) As IConventionTriggerBuilder" />
      <MemberSignature Language="F#" Value="static member HasTableSchema : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalTriggerBuilderExtensions.HasTableSchema (triggerBuilder, schema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder" RefType="this" />
        <Parameter Name="schema" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="triggerBuilder">The builder for the trigger being configured.</param>
        <param name="schema">The schema of the table on which this trigger is defined.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the schema of the table on which this trigger is defined.
            </summary>
        <returns>The same builder instance if the configuration was applied, <see langword="null" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
