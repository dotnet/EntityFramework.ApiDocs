<Type Name="PropertyBaseExtensions" FullName="Microsoft.EntityFrameworkCore.PropertyBaseExtensions">
  <TypeSignature Language="C#" Value="public static class PropertyBaseExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PropertyBaseExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.PropertyBaseExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module PropertyBaseExtensions" />
  <TypeSignature Language="F#" Value="type PropertyBaseExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (this System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase&gt; properties, bool includeTypes = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase&gt; properties, bool includeTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.Format(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Format (properties As IEnumerable(Of IReadOnlyPropertyBase), Optional includeTypes As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member Format : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase&gt; * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.Format (properties, includeTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="includeTypes" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties to format.</param>
        <param name="includeTypes">If true, then type names are included in the string. The default is <see langword="false" />.</param>
        <summary>
                Creates a formatted string representation of the given properties such as is useful
                when throwing exceptions about keys, indexes, etc. that use the properties.
            </summary>
        <returns>The string representation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueComparer">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IComparer&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; GetCurrentValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IComparer`1&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt; GetCurrentValueComparer(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetCurrentValueComparer(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCurrentValueComparer (propertyBase As IPropertyBase) As IComparer(Of IUpdateEntry)" />
      <MemberSignature Language="F#" Value="static member GetCurrentValueComparer : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; System.Collections.Generic.IComparer&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetCurrentValueComparer propertyBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase"> The property. </param>
        <summary>
          <para>
                    Gets a <see cref="T:System.Collections.Generic.IComparer`1" /> for comparing values in tracked <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" /> entries.
                </para>
        </summary>
        <returns> The comparer. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFieldName">
      <MemberSignature Language="C#" Value="public static string GetFieldName (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFieldName(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetFieldName(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFieldName (propertyBase As IPropertyBase) As String" />
      <MemberSignature Language="F#" Value="static member GetFieldName : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetFieldName propertyBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase"> The property for which the backing field will be returned. </param>
        <summary>
                Gets the name of the backing field for this property, or <see langword="null" /> if the backing field
                is not known.
            </summary>
        <returns> The name of the backing field, or <see langword="null" />. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGetter">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IClrPropertyGetter GetGetter (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IClrPropertyGetter GetGetter(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetGetter(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetGetter (propertyBase As IPropertyBase) As IClrPropertyGetter" />
      <MemberSignature Language="F#" Value="static member GetGetter : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Microsoft.EntityFrameworkCore.Metadata.IClrPropertyGetter" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetGetter propertyBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IClrPropertyGetter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase"> The property. </param>
        <summary>
          <para>
                    Gets a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IClrPropertyGetter" /> for reading the value of this property.
                </para>
          <para>
                    Note that it is an error to call this method for a shadow property (<see cref="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.IsShadowProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />) since
                    such a property has no associated <see cref="T:System.Reflection.MemberInfo" />.
                </para>
        </summary>
        <returns> The accessor. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndex">
      <MemberSignature Language="C#" Value="public static int GetIndex (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetIndex(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetIndex (property As IPropertyBase) As Integer" />
      <MemberSignature Language="F#" Value="static member GetIndex : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; int" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetIndex property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property for which the property index will be returned. </param>
        <summary>
                Gets the property index for this property.
            </summary>
        <returns> The index of the property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMemberInfo">
      <MemberSignature Language="C#" Value="public static System.Reflection.MemberInfo GetMemberInfo (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool forMaterialization, bool forSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MemberInfo GetMemberInfo(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool forMaterialization, bool forSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetMemberInfo(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMemberInfo (propertyBase As IPropertyBase, forMaterialization As Boolean, forSet As Boolean) As MemberInfo" />
      <MemberSignature Language="F#" Value="static member GetMemberInfo : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * bool * bool -&gt; System.Reflection.MemberInfo" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetMemberInfo (propertyBase, forMaterialization, forSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="forMaterialization" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="forSet" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase"> The property. </param>
        <param name="forMaterialization"> If true, then the member to use for query materialization will be returned. </param>
        <param name="forSet">
                If true, then the member to use for setting the property value will be returned, otherwise
                the member to use for getting the property value will be returned.
            </param>
        <summary>
          <para>
                    Gets the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that should be used to
                    get or set a value for the given property.
                </para>
          <para>
                    Note that it is an error to call this method for a shadow property (<see cref="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.IsShadowProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />) since
                    such a property has no associated <see cref="T:System.Reflection.MemberInfo" />.
                </para>
        </summary>
        <returns> The <see cref="T:System.Reflection.MemberInfo" /> to use. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode? GetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; GetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessMode (propertyBase As IPropertyBase) As Nullable(Of PropertyAccessMode)" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetPropertyAccessMode propertyBase" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.PropertyAccessMode? GetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; GetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetPropertyAccessMode propertyBase" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.PropertyAccessMode GetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode GetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessMode (propertyBase As IPropertyBase) As PropertyAccessMode" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; Microsoft.EntityFrameworkCore.PropertyAccessMode" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.GetPropertyAccessMode propertyBase" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.1">System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.PropertyAccessMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyBase"> The property for which to get the access mode. </param>
        <summary>
          <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> being used for this property.
                    <c>null</c> indicates that the default property access mode is being used.
                </para>
        </summary>
        <returns> The access mode being used, or <c>null</c> if the default access mode is being used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIndexerProperty">
      <MemberSignature Language="C#" Value="public static bool IsIndexerProperty (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIndexerProperty(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.IsIndexerProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsIndexerProperty (property As IPropertyBase) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIndexerProperty : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; bool" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.IsIndexerProperty property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to check. </param>
        <summary>
                Gets a value indicating whether this is an indexer property. An indexer property is one that is accessed through
                an indexer on the entity class.
            </summary>
        <returns>
          <see langword="true" /> if the property is an indexer property, otherwise <see langword="false" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShadowProperty">
      <MemberSignature Language="C#" Value="public static bool IsShadowProperty (this Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsShadowProperty(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.PropertyBaseExtensions.IsShadowProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsShadowProperty (property As IPropertyBase) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsShadowProperty : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; bool" Usage="Microsoft.EntityFrameworkCore.PropertyBaseExtensions.IsShadowProperty property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use IReadOnlyPropertyBase.IsShadowProperty")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IReadOnlyPropertyBase.IsShadowProperty")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to check.</param>
        <summary>
                Gets a value indicating whether this is a shadow property. A shadow property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </summary>
        <returns>
          <see langword="true" /> if the property is a shadow property, otherwise <see langword="false" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
