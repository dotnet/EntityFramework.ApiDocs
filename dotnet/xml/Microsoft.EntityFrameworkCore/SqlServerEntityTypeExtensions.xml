<Type Name="SqlServerEntityTypeExtensions" FullName="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions">
  <TypeSignature Language="C#" Value="public static class SqlServerEntityTypeExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqlServerEntityTypeExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SqlServerEntityTypeExtensions" />
  <TypeSignature Language="F#" Value="type SqlServerEntityTypeExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Entity type extension methods for SQL Server-specific metadata.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetHistoryTableName">
      <MemberSignature Language="C#" Value="public static string? GetHistoryTableName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetHistoryTableName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHistoryTableName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetHistoryTableName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns a value representing the name of the history table associated with the entity mapped to a temporal table.
            </summary>
        <returns>Name of the history table.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHistoryTableNameConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetHistoryTableNameConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetHistoryTableNameConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHistoryTableNameConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetHistoryTableNameConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableNameConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets the configuration source for the temporal history table name setting.
            </summary>
        <returns>The configuration source for the temporal history table name setting.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHistoryTableSchema">
      <MemberSignature Language="C#" Value="public static string? GetHistoryTableSchema (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetHistoryTableSchema(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHistoryTableSchema (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetHistoryTableSchema : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableSchema entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns a value representing the schema of the history table associated with the entity mapped to a temporal table.
            </summary>
        <returns>Name of the history table.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHistoryTableSchemaConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetHistoryTableSchemaConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetHistoryTableSchemaConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHistoryTableSchemaConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetHistoryTableSchemaConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableSchemaConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets the configuration source for the temporal history table schema setting.
            </summary>
        <returns>The configuration source for the temporal history table schema setting.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsMemoryOptimizedConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetIsMemoryOptimizedConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetIsMemoryOptimizedConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetIsMemoryOptimizedConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetIsMemoryOptimizedConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetIsMemoryOptimizedConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetIsMemoryOptimizedConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets the configuration source for the memory-optimized setting.
            </summary>
        <returns>The configuration source for the memory-optimized setting.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsTemporalConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetIsTemporalConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetIsTemporalConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetIsTemporalConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetIsTemporalConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetIsTemporalConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetIsTemporalConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets the configuration source for the temporal table setting.
            </summary>
        <returns>The configuration source for the temporal table setting.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPeriodEndPropertyName">
      <MemberSignature Language="C#" Value="public static string? GetPeriodEndPropertyName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPeriodEndPropertyName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodEndPropertyName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPeriodEndPropertyName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetPeriodEndPropertyName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodEndPropertyName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns a value representing the name of the period end property of the entity mapped to a temporal table.
            </summary>
        <returns>Name of the period start property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPeriodEndPropertyNameConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetPeriodEndPropertyNameConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetPeriodEndPropertyNameConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodEndPropertyNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPeriodEndPropertyNameConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetPeriodEndPropertyNameConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodEndPropertyNameConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets the configuration source for the temporal table period end property name setting.
            </summary>
        <returns>The configuration source for the temporal table period end property name setting.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPeriodStartPropertyName">
      <MemberSignature Language="C#" Value="public static string? GetPeriodStartPropertyName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPeriodStartPropertyName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodStartPropertyName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPeriodStartPropertyName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetPeriodStartPropertyName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodStartPropertyName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns a value representing the name of the period start property of the entity mapped to a temporal table.
            </summary>
        <returns>Name of the period start property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPeriodStartPropertyNameConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetPeriodStartPropertyNameConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetPeriodStartPropertyNameConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodStartPropertyNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPeriodStartPropertyNameConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetPeriodStartPropertyNameConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodStartPropertyNameConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets the configuration source for the temporal table period start property name setting.
            </summary>
        <returns>The configuration source for the temporal table period start property name setting.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUseSqlOutputClauseConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetUseSqlOutputClauseConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetUseSqlOutputClauseConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetUseSqlOutputClauseConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUseSqlOutputClauseConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetUseSqlOutputClauseConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetUseSqlOutputClauseConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets the configuration source for whether to use the SQL OUTPUT clause when saving changes to the table.
            </summary>
        <returns>The configuration source for the memory-optimized setting.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMemoryOptimized">
      <MemberSignature Language="C#" Value="public static bool IsMemoryOptimized (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMemoryOptimized(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsMemoryOptimized (entityType As IEntityType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsMemoryOptimized : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsMemoryOptimized entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns a value indicating whether the entity type is mapped to a memory-optimized table.
            </summary>
        <returns>
          <see langword="true" /> if the entity type is mapped to a memory-optimized table. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMemoryOptimized">
      <MemberSignature Language="C#" Value="public static bool IsMemoryOptimized (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMemoryOptimized(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsMemoryOptimized (entityType As IReadOnlyEntityType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsMemoryOptimized : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsMemoryOptimized entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns a value indicating whether the entity type is mapped to a memory-optimized table.
            </summary>
        <returns>
          <see langword="true" /> if the entity type is mapped to a memory-optimized table.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSqlOutputClauseUsed">
      <MemberSignature Language="C#" Value="public static bool IsSqlOutputClauseUsed (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSqlOutputClauseUsed(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsSqlOutputClauseUsed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSqlOutputClauseUsed (entityType As IReadOnlyEntityType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSqlOutputClauseUsed : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsSqlOutputClauseUsed entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
        <returns>
          <see langword="true" /> if the SQL OUTPUT clause is used to save changes to the table.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSqlOutputClauseUsed">
      <MemberSignature Language="C#" Value="public static bool IsSqlOutputClauseUsed (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSqlOutputClauseUsed(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsSqlOutputClauseUsed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSqlOutputClauseUsed (entityType As IReadOnlyEntityType, ByRef storeObject As StoreObjectIdentifier) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSqlOutputClauseUsed : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType * StoreObjectIdentifier -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsSqlOutputClauseUsed (entityType, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="1" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="storeObject">The identifier of the table-like store object.</param>
        <summary>
                Returns a value indicating whether to use the SQL OUTPUT clause when saving changes to the specified table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
        <returns>A value indicating whether the SQL OUTPUT clause is used to save changes to the associated table.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporal">
      <MemberSignature Language="C#" Value="public static bool IsTemporal (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTemporal(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsTemporal(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsTemporal (entityType As IReadOnlyEntityType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsTemporal : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsTemporal entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns a value indicating whether the entity type is mapped to a temporal table.
            </summary>
        <returns>
          <see langword="true" /> if the entity type is mapped to a temporal table.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHistoryTableName">
      <MemberSignature Language="C#" Value="public static void SetHistoryTableName (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? historyTableName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHistoryTableName(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string historyTableName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHistoryTableName (entityType As IMutableEntityType, historyTableName As String)" />
      <MemberSignature Language="F#" Value="static member SetHistoryTableName : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableName (entityType, historyTableName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="historyTableName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="historyTableName">The value to set.</param>
        <summary>
                Sets a value representing the name of the history table associated with the entity mapped to a temporal table.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHistoryTableName">
      <MemberSignature Language="C#" Value="public static string? SetHistoryTableName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? historyTableName, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetHistoryTableName(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string historyTableName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetHistoryTableName (entityType As IConventionEntityType, historyTableName As String, Optional fromDataAnnotation As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member SetHistoryTableName : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableName (entityType, historyTableName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="historyTableName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="historyTableName">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value representing the name of the history table associated with the entity mapped to a temporal table.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHistoryTableSchema">
      <MemberSignature Language="C#" Value="public static void SetHistoryTableSchema (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? historyTableSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHistoryTableSchema(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string historyTableSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHistoryTableSchema (entityType As IMutableEntityType, historyTableSchema As String)" />
      <MemberSignature Language="F#" Value="static member SetHistoryTableSchema : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableSchema (entityType, historyTableSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="historyTableSchema" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="historyTableSchema">The value to set.</param>
        <summary>
                Sets a value representing the schema of the history table associated with the entity mapped to a temporal table.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHistoryTableSchema">
      <MemberSignature Language="C#" Value="public static string? SetHistoryTableSchema (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? historyTableSchema, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetHistoryTableSchema(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string historyTableSchema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetHistoryTableSchema (entityType As IConventionEntityType, historyTableSchema As String, Optional fromDataAnnotation As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member SetHistoryTableSchema : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableSchema (entityType, historyTableSchema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="historyTableSchema" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="historyTableSchema">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value representing the schema of the history table associated with the entity mapped to a temporal table.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsMemoryOptimized">
      <MemberSignature Language="C#" Value="public static void SetIsMemoryOptimized (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, bool memoryOptimized);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsMemoryOptimized(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, bool memoryOptimized) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetIsMemoryOptimized (entityType As IMutableEntityType, memoryOptimized As Boolean)" />
      <MemberSignature Language="F#" Value="static member SetIsMemoryOptimized : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsMemoryOptimized (entityType, memoryOptimized)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        <Parameter Name="memoryOptimized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="memoryOptimized">The value to set.</param>
        <summary>
                Sets a value indicating whether the entity type is mapped to a memory-optimized table.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsMemoryOptimized">
      <MemberSignature Language="C#" Value="public static void SetIsMemoryOptimized (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool? memoryOptimized, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsMemoryOptimized(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; memoryOptimized, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetIsMemoryOptimized (entityType As IConventionEntityType, memoryOptimized As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetIsMemoryOptimized : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsMemoryOptimized (entityType, memoryOptimized, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static bool? SetIsMemoryOptimized (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool? memoryOptimized, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;bool&gt; SetIsMemoryOptimized(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; memoryOptimized, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetIsMemoryOptimized (entityType As IConventionEntityType, memoryOptimized As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Nullable(Of Boolean)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="static member SetIsMemoryOptimized : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * bool -&gt; Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsMemoryOptimized (entityType, memoryOptimized, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
        <Parameter Name="memoryOptimized" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="memoryOptimized">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value indicating whether the entity type is mapped to a memory-optimized table.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsTemporal">
      <MemberSignature Language="C#" Value="public static void SetIsTemporal (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, bool temporal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsTemporal(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, bool temporal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsTemporal(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetIsTemporal (entityType As IMutableEntityType, temporal As Boolean)" />
      <MemberSignature Language="F#" Value="static member SetIsTemporal : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsTemporal (entityType, temporal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="temporal" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="temporal">The value to set.</param>
        <summary>
                Sets a value indicating whether the entity type is mapped to a temporal table.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsTemporal">
      <MemberSignature Language="C#" Value="public static bool? SetIsTemporal (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool? temporal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;bool&gt; SetIsTemporal(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; temporal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsTemporal(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetIsTemporal (entityType As IConventionEntityType, temporal As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member SetIsTemporal : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * bool -&gt; Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsTemporal (entityType, temporal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="temporal" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="temporal">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value indicating whether the entity type is mapped to a temporal table.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPeriodEndPropertyName">
      <MemberSignature Language="C#" Value="public static void SetPeriodEndPropertyName (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? periodEndPropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPeriodEndPropertyName(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string periodEndPropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodEndPropertyName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPeriodEndPropertyName (entityType As IMutableEntityType, periodEndPropertyName As String)" />
      <MemberSignature Language="F#" Value="static member SetPeriodEndPropertyName : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodEndPropertyName (entityType, periodEndPropertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="periodEndPropertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="periodEndPropertyName">The value to set.</param>
        <summary>
                Sets a value representing the name of the period end property of the entity mapped to a temporal table.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPeriodEndPropertyName">
      <MemberSignature Language="C#" Value="public static string? SetPeriodEndPropertyName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? periodEndPropertyName, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetPeriodEndPropertyName(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string periodEndPropertyName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodEndPropertyName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetPeriodEndPropertyName (entityType As IConventionEntityType, periodEndPropertyName As String, Optional fromDataAnnotation As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member SetPeriodEndPropertyName : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodEndPropertyName (entityType, periodEndPropertyName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="periodEndPropertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="periodEndPropertyName">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value representing the name of the period end property of the entity mapped to a temporal table.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPeriodStartPropertyName">
      <MemberSignature Language="C#" Value="public static void SetPeriodStartPropertyName (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? periodStartPropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPeriodStartPropertyName(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string periodStartPropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodStartPropertyName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPeriodStartPropertyName (entityType As IMutableEntityType, periodStartPropertyName As String)" />
      <MemberSignature Language="F#" Value="static member SetPeriodStartPropertyName : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodStartPropertyName (entityType, periodStartPropertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="periodStartPropertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="periodStartPropertyName">The value to set.</param>
        <summary>
                Sets a value representing the name of the period start property of the entity mapped to a temporal table.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPeriodStartPropertyName">
      <MemberSignature Language="C#" Value="public static string? SetPeriodStartPropertyName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? periodStartPropertyName, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetPeriodStartPropertyName(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string periodStartPropertyName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodStartPropertyName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetPeriodStartPropertyName (entityType As IConventionEntityType, periodStartPropertyName As String, Optional fromDataAnnotation As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member SetPeriodStartPropertyName : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodStartPropertyName (entityType, periodStartPropertyName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="periodStartPropertyName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="periodStartPropertyName">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value representing the name of the period start property of the entity mapped to a temporal table.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlOutputClause">
      <MemberSignature Language="C#" Value="public static void UseSqlOutputClause (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, bool? useSqlOutputClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSqlOutputClause(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; useSqlOutputClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSqlOutputClause (entityType As IMutableEntityType, useSqlOutputClause As Nullable(Of Boolean))" />
      <MemberSignature Language="F#" Value="static member UseSqlOutputClause : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause (entityType, useSqlOutputClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="useSqlOutputClause" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="useSqlOutputClause">The value to set.</param>
        <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlOutputClause">
      <MemberSignature Language="C#" Value="public static bool? UseSqlOutputClause (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool? useSqlOutputClause, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;bool&gt; UseSqlOutputClause(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; useSqlOutputClause, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlOutputClause (entityType As IConventionEntityType, useSqlOutputClause As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member UseSqlOutputClause : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * bool -&gt; Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause (entityType, useSqlOutputClause, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="useSqlOutputClause" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="useSqlOutputClause">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlOutputClause">
      <MemberSignature Language="C#" Value="public static void UseSqlOutputClause (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, bool? useSqlOutputClause, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseSqlOutputClause(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; useSqlOutputClause, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub UseSqlOutputClause (entityType As IMutableEntityType, useSqlOutputClause As Nullable(Of Boolean), ByRef storeObject As StoreObjectIdentifier)" />
      <MemberSignature Language="F#" Value="static member UseSqlOutputClause : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;bool&gt; * StoreObjectIdentifier -&gt; unit" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause (entityType, useSqlOutputClause, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="useSqlOutputClause" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="useSqlOutputClause">The value to set.</param>
        <param name="storeObject">The identifier of the table-like store object.</param>
        <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlOutputClause">
      <MemberSignature Language="C#" Value="public static bool? UseSqlOutputClause (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool? useSqlOutputClause, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;bool&gt; UseSqlOutputClause(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; useSqlOutputClause, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlOutputClause (entityType As IConventionEntityType, useSqlOutputClause As Nullable(Of Boolean), ByRef storeObject As StoreObjectIdentifier, Optional fromDataAnnotation As Boolean = false) As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member UseSqlOutputClause : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * StoreObjectIdentifier * bool -&gt; Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause (entityType, useSqlOutputClause, storeObject, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="useSqlOutputClause" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="useSqlOutputClause">The value to set.</param>
        <param name="storeObject">The identifier of the table-like store object.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
