<Type Name="ModelExtensions" FullName="Microsoft.EntityFrameworkCore.ModelExtensions">
  <TypeSignature Language="C#" Value="public static class ModelExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ModelExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ModelExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ModelExtensions" />
  <TypeSignature Language="F#" Value="type ModelExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-6.0">
      <AttributeName Language="C#">[System.Obsolete("Use IReadOnlyModel")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Use IReadOnlyModel")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindEntityType (model As IModel, type As Type) As IEntityType" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType (model, type)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType? FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindEntityType (model As IModel, type As Type) As IReadOnlyEntityType" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType (model, type)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use IReadOnlyEntityType.FindEntityType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IReadOnlyEntityType.FindEntityType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0">Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="model">The model to find the entity type in.</param>
        <param name="type">The type to find the corresponding entity type for.</param>
        <summary>
                Gets the entity that maps the given entity class. Returns <see langword="null" /> if no entity type with
                the given CLR type is found or the given CLR type is being used by shared type entity type
                or the entity type has a defining navigation.
            </summary>
        <returns>The entity type, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindEntityType (model As IModel, type As Type, definingNavigationName As String, definingEntityType As IEntityType) As IEntityType" />
      <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IModel * Type * string * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType (model, type, definingNavigationName, definingEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="definingNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity type in. </param>
        <param name="type"> The type of the entity type to find. </param>
        <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
        <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
        <summary>
                Gets the entity type for the given type, defining navigation name
                and the defining entity type. Returns <see langword="null" /> if no matching entity type is found.
            </summary>
        <returns> The entity type, or <see langword="null" /> if none are found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindRuntimeEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityType FindRuntimeEntityType (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindRuntimeEntityType(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.FindRuntimeEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindRuntimeEntityType (model As IModel, type As Type) As IEntityType" />
      <MemberSignature Language="F#" Value="static member FindRuntimeEntityType : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.FindRuntimeEntityType (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity type in. </param>
        <param name="type"> The type to find the corresponding entity type for. </param>
        <summary>
                Gets the entity that maps the given entity class, where the class may be a proxy derived from the
                actual entity type. Returns <see langword="null" /> if no entity type with the given CLR type is found
                or the given CLR type is being used by shared type entity type
                or the entity type has a defining navigation.
            </summary>
        <returns> The entity type, or <see langword="null" /> if none if found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy GetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy GetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChangeTrackingStrategy (model As IModel) As ChangeTrackingStrategy" />
      <MemberSignature Language="F#" Value="static member GetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy model" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTrackingStrategy GetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy GetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member GetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy model" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1">Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy</ReturnType>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0">Microsoft.EntityFrameworkCore.ChangeTrackingStrategy</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to get the default change tracking strategy for. </param>
        <summary>
                Gets the default change tracking strategy being used for entities in the model. This strategy indicates how the
                context detects changes to properties for an instance of an entity type.
            </summary>
        <returns> The change tracking strategy. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IModel model, string name);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string name) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IModel, name As String) As IReadOnlyCollection(Of EntityType)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IModel * string -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes (model, name)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IModel model, string name);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string name) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IModel, name As String) As IReadOnlyCollection(Of IEntityType)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IModel * string -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes (model, name)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IModel model, string name);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string name) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IModel, name As String) As IReadOnlyCollection(Of IReadOnlyEntityType)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IModel * string -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes (model, name)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use FindEntityTypes(Type) or FindEntityType(string)")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use FindEntityTypes(Type) or FindEntityType(string)")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0">System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="model">The model to find the entity type in.</param>
        <param name="name">The name of the entity type to find.</param>
        <summary>
                Gets the entity types matching the given name.
            </summary>
        <returns>The entity types found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IModel, type As Type) As IReadOnlyCollection(Of EntityType)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes (model, type)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IModel, type As Type) As IReadOnlyCollection(Of IEntityType)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes (model, type)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IModel, type As Type) As IEnumerable(Of IReadOnlyEntityType)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetEntityTypes (model, type)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use IReadOnlyEntityType.FindEntityTypes")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IReadOnlyEntityType.FindEntityTypes")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0">System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-5.0;efcore-6.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="model">The model to find the entity type in.</param>
        <param name="type">The type of the entity type to find.</param>
        <summary>
                Gets the entity types matching the given type.
            </summary>
        <returns>The entity types found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProductVersion">
      <MemberSignature Language="C#" Value="public static string GetProductVersion (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetProductVersion(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetProductVersion(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetProductVersion (model As IModel) As String" />
      <MemberSignature Language="F#" Value="static member GetProductVersion : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; string" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetProductVersion model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to get the version for. </param>
        <summary>
                Gets the EF Core assembly version used to build this model
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode? GetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; GetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessMode (model As IModel) As Nullable(Of PropertyAccessMode)" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode model" FrameworkAlternate="efcore-1.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.PropertyAccessMode? GetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; GetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode model" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.PropertyAccessMode GetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode GetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessMode (model As IModel) As PropertyAccessMode" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.PropertyAccessMode" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode model" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.1">System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">Microsoft.EntityFrameworkCore.PropertyAccessMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to get the access mode for. </param>
        <summary>
          <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> being used for properties of entity types in this model.
                </para>
          <para>
                    Note that individual entity types can override this access mode, and individual properties of
                    entity types can override the access mode set on the entity type. The value returned here will
                    be used for any property for which no override has been specified.
                </para>
        </summary>
        <returns> The access mode being used, or null if the default access mode is being used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEntityTypeWithDefiningNavigation">
      <MemberSignature Language="C#" Value="public static bool HasEntityTypeWithDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IModel model, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasEntityTypeWithDefiningNavigation(class Microsoft.EntityFrameworkCore.Metadata.IModel model, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasEntityTypeWithDefiningNavigation (model As IModel, name As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member HasEntityTypeWithDefiningNavigation : Microsoft.EntityFrameworkCore.Metadata.IModel * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation (model, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use FindEntityType(string)?.HasSharedClrType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use FindEntityType(string)?.HasSharedClrType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="model">The model to find the entity type in.</param>
        <param name="name">The name used to find an entity type with a defining navigation.</param>
        <summary>
                Gets a value indicating whether the model contains a corresponding entity type with a defining navigation.
            </summary>
        <returns>
          <see langword="true" /> if the model contains a corresponding entity type with a defining navigation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEntityTypeWithDefiningNavigation">
      <MemberSignature Language="C#" Value="public static bool HasEntityTypeWithDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasEntityTypeWithDefiningNavigation(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasEntityTypeWithDefiningNavigation (model As IModel, type As Type) As Boolean" />
      <MemberSignature Language="F#" Value="static member HasEntityTypeWithDefiningNavigation : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.HasEntityTypeWithDefiningNavigation (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use IsShared(Type)")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IsShared(Type)")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="model">The model to find the entity type in.</param>
        <param name="type">The type used to find an entity type a defining navigation.</param>
        <summary>
                Gets a value indicating whether the model contains a corresponding entity type with a defining navigation.
            </summary>
        <returns>
          <see langword="true" /> if the model contains a corresponding entity type with a defining navigation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIndexerMethod">
      <MemberSignature Language="C#" Value="public static bool IsIndexerMethod (this Microsoft.EntityFrameworkCore.Metadata.IModel model, System.Reflection.MethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIndexerMethod(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Reflection.MethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.IsIndexerMethod(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsIndexerMethod (model As IModel, methodInfo As MethodInfo) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIndexerMethod : Microsoft.EntityFrameworkCore.Metadata.IModel * System.Reflection.MethodInfo -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.IsIndexerMethod (model, methodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to use. </param>
        <param name="methodInfo"> The MethodInfo to check for. </param>
        <summary>
                Gets a value indicating whether the given MethodInfo reprensent an indexer access.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public static bool IsShared (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsShared(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.IsShared(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsShared (model As IModel, type As Type) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsShared : Microsoft.EntityFrameworkCore.Metadata.IModel * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.IsShared (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity type in. </param>
        <param name="type"> The CLR type. </param>
        <summary>
                Gets whether the CLR type is used by shared type entities in the model.
            </summary>
        <returns> Whether the CLR type is used by shared type entities in the model. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDebugString">
      <MemberSignature Language="C#" Value="public static string ToDebugString (this Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions options, int indent = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDebugString(class Microsoft.EntityFrameworkCore.Metadata.IModel model, valuetype Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions options, int32 indent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ModelExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDebugString (model As IModel, options As MetadataDebugStringOptions, Optional indent As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member ToDebugString : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions * int -&gt; string" Usage="Microsoft.EntityFrameworkCore.ModelExtensions.ToDebugString (model, options, indent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="indent" Type="System.Int32" Index="2" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model"> The metadata item. </param>
        <param name="options"> Options for generating the string. </param>
        <param name="indent"> The number of indent spaces to use before each new line. </param>
        <summary>
          <para>
                    Creates a human-readable representation of the given metadata.
                </para>
          <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
        </summary>
        <returns> A human-readable representation. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
