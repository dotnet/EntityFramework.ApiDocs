<Type Name="RelationalEntityTypeExtensions" FullName="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions">
  <TypeSignature Language="C#" Value="public static class RelationalEntityTypeExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RelationalEntityTypeExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RelationalEntityTypeExtensions" />
  <TypeSignature Language="F#" Value="type RelationalEntityTypeExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Entity type extension methods for relational database metadata.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint AddCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, string sql);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint AddCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, string sql) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.AddCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCheckConstraint (entityType As IMutableEntityType, name As String, sql As String) As ICheckConstraint" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member AddCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.AddCheckConstraint (entityType, name, sql)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint AddCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, string sql);" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint AddCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name, string sql) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCheckConstraint (entityType As IMutableEntityType, name As String, sql As String) As IMutableCheckConstraint" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="static member AddCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.AddCheckConstraint (entityType, name, sql)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0">Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to add the check constraint to.</param>
        <param name="name">The check constraint name.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <summary>
                Creates a new check constraint with the given name on entity type. Throws an exception
                if a check constraint with the same name exists on the same entity type.
            </summary>
        <returns>The new check constraint.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint AddCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, string sql, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint AddCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, string sql, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.AddCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCheckConstraint (entityType As IConventionEntityType, name As String, sql As String, Optional fromDataAnnotation As Boolean = false) As IConventionCheckConstraint" />
      <MemberSignature Language="F#" Value="static member AddCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.AddCheckConstraint (entityType, name, sql, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to add the check constraint to.</param>
        <param name="name">The check constraint name.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Creates a new check constraint with the given name on entity type. Throws an exception
                if a check constraint with the same name exists on the same entity type.
            </summary>
        <returns>The new check constraint.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultQueryNameBase">
      <MemberSignature Language="C#" Value="public static readonly string DefaultQueryNameBase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultQueryNameBase" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.DefaultQueryNameBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly DefaultQueryNameBase As String " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultQueryNameBase : string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.DefaultQueryNameBase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the name used for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery" /> mapped using
                <see cref="O:RelationalEntityTypeBuilderExtensions.ToSqlQuery" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint FindCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint FindCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindCheckConstraint (entityType As IConventionEntityType, name As String) As IConventionCheckConstraint" />
      <MemberSignature Language="F#" Value="static member FindCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint (entityType, name)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint? FindCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find the check constraint for.</param>
        <param name="name">The check constraint name.</param>
        <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" /> with the given name.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" /> or <see langword="null" /> if no check constraint with the
                given name in the given entity type was found.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint FindCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string name);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint FindCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindCheckConstraint (entityType As IEntityType, name As String) As ICheckConstraint" />
      <MemberSignature Language="F#" Value="static member FindCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint (entityType, name)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint? FindCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string name);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find the check constraint for.</param>
        <param name="name">The check constraint name.</param>
        <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" /> with the given name.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" /> or <see langword="null" /> if no check constraint with the
                given name in the given entity type was found.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint FindCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint FindCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindCheckConstraint (entityType As IMutableEntityType, name As String) As IMutableCheckConstraint" />
      <MemberSignature Language="F#" Value="static member FindCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint (entityType, name)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint? FindCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find the check constraint for.</param>
        <param name="name">The check constraint name.</param>
        <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint" /> with the given name.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint" /> or <see langword="null" /> if no check constraint with the
                given name in the given entity type was found.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint? FindCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint FindCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindCheckConstraint (entityType As IReadOnlyEntityType, name As String) As IReadOnlyCheckConstraint" />
      <MemberSignature Language="F#" Value="static member FindCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find the check constraint for.</param>
        <param name="name">The check constraint name.</param>
        <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint" /> with the given name.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint" /> or <see langword="null" /> if no check constraint with the
                given name in the given entity type was found.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindRowInternalForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindRowInternalForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindRowInternalForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindRowInternalForeignKeys (entityType As IConventionEntityType, ByRef storeObject As StoreObjectIdentifier) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindRowInternalForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * StoreObjectIdentifier -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys (entityType, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="storeObject">The identifier of the store object.</param>
        <summary>
                Gets the foreign keys for the given entity type that point to other entity types
                sharing the same table-like store object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindRowInternalForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; FindRowInternalForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; FindRowInternalForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindRowInternalForeignKeys (entityType As IEntityType, ByRef storeObject As StoreObjectIdentifier) As IEnumerable(Of IForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindRowInternalForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IEntityType * StoreObjectIdentifier -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys (entityType, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="1" FrameworkAlternate="efcore-6.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="storeObject">The identifier of the store object.</param>
        <summary>
                Gets the foreign keys for the given entity type that point to other entity types
                sharing the same table-like store object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindRowInternalForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; FindRowInternalForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; FindRowInternalForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function FindRowInternalForeignKeys (entityType As IEntityType, storeObject As StoreObjectIdentifier) As IEnumerable(Of IForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindRowInternalForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys (entityType, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions+&lt;FindRowInternalForeignKeys&gt;d__50))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions+&lt;FindRowInternalForeignKeys&gt;d__50))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="storeObject"> The identifier of the store object. </param>
        <summary>
                Gets the foreign keys for the given entity type that point to other entity types
                sharing the same table-like store object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindRowInternalForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindRowInternalForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; FindRowInternalForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindRowInternalForeignKeys (entityType As IMutableEntityType, ByRef storeObject As StoreObjectIdentifier) As IEnumerable(Of IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindRowInternalForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * StoreObjectIdentifier -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys (entityType, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="storeObject">The identifier of the store object.</param>
        <summary>
                Gets the foreign keys for the given entity type that point to other entity types
                sharing the same table-like store object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindRowInternalForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt; FindRowInternalForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt; FindRowInternalForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function FindRowInternalForeignKeys (entityType As IReadOnlyEntityType, storeObject As StoreObjectIdentifier) As IEnumerable(Of IReadOnlyForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindRowInternalForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType * Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys (entityType, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions+&lt;FindRowInternalForeignKeys&gt;d__57))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions+&lt;FindRowInternalForeignKeys&gt;d__57))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="1" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="storeObject">The identifier of the store object.</param>
        <summary>
                Gets the foreign keys for the given entity type that point to other entity types
                sharing the same table-like store object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCheckConstraints">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint&gt; GetCheckConstraints (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint&gt; GetCheckConstraints(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCheckConstraints (entityType As IConventionEntityType) As IEnumerable(Of IConventionCheckConstraint)" />
      <MemberSignature Language="F#" Value="static member GetCheckConstraints : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the check constraints for.</param>
        <summary>
                Returns all check constraints contained in the entity type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCheckConstraints">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint&gt; GetCheckConstraints (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint&gt; GetCheckConstraints(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCheckConstraints (entityType As IEntityType) As IEnumerable(Of ICheckConstraint)" />
      <MemberSignature Language="F#" Value="static member GetCheckConstraints : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the check constraints for.</param>
        <summary>
                Returns all check constraints contained in the entity type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCheckConstraints">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint&gt; GetCheckConstraints (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint&gt; GetCheckConstraints(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCheckConstraints (entityType As IMutableEntityType) As IEnumerable(Of IMutableCheckConstraint)" />
      <MemberSignature Language="F#" Value="static member GetCheckConstraints : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the check constraints for.</param>
        <summary>
                Returns all check constraints contained in the entity type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCheckConstraints">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint&gt; GetCheckConstraints (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint&gt; GetCheckConstraints(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCheckConstraints (entityType As IReadOnlyEntityType) As IEnumerable(Of IReadOnlyCheckConstraint)" />
      <MemberSignature Language="F#" Value="static member GetCheckConstraints : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the check constraints for.</param>
        <summary>
                Returns all check constraints contained in the entity type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComment">
      <MemberSignature Language="C#" Value="public static string GetComment (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetComment(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetComment(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComment (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetComment : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetComment entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns the comment for the table this entity is mapped to.
            </summary>
        <returns> The comment for the table this entity is mapped to. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComment">
      <MemberSignature Language="C#" Value="public static string? GetComment (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetComment(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetComment(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComment (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetComment : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetComment entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns the comment for the table this entity is mapped to.
            </summary>
        <returns>The comment for the table this entity is mapped to.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommentConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetCommentConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetCommentConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCommentConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCommentConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetCommentConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCommentConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find configuration source for.</param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the table comment.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the table comment.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredCheckConstraints">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint&gt; GetDeclaredCheckConstraints (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint&gt; GetDeclaredCheckConstraints(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDeclaredCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredCheckConstraints (entityType As IConventionEntityType) As IEnumerable(Of IConventionCheckConstraint)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredCheckConstraints : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDeclaredCheckConstraints entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the check constraints for.</param>
        <summary>
          <para>
                    Returns all check constraints declared on the entity type.
                </para>
          <para>
                    This method does not return check constraints declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same check constraint more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" /> to also return check constraints declared on base types.
                </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredCheckConstraints">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint&gt; GetDeclaredCheckConstraints (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint&gt; GetDeclaredCheckConstraints(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDeclaredCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredCheckConstraints (entityType As IEntityType) As IEnumerable(Of ICheckConstraint)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredCheckConstraints : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDeclaredCheckConstraints entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the check constraints for.</param>
        <summary>
          <para>
                    Returns all check constraints declared on the entity type.
                </para>
          <para>
                    This method does not return check constraints declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same check constraint more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" /> to also return check constraints declared on base types.
                </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredCheckConstraints">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint&gt; GetDeclaredCheckConstraints (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint&gt; GetDeclaredCheckConstraints(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDeclaredCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredCheckConstraints (entityType As IMutableEntityType) As IEnumerable(Of IMutableCheckConstraint)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredCheckConstraints : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDeclaredCheckConstraints entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the check constraints for.</param>
        <summary>
          <para>
                    Returns all check constraints declared on the entity type.
                </para>
          <para>
                    This method does not return check constraints declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same check constraint more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" /> to also return check constraints declared on base types.
                </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredCheckConstraints">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint&gt; GetDeclaredCheckConstraints (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint&gt; GetDeclaredCheckConstraints(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDeclaredCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredCheckConstraints (entityType As IReadOnlyEntityType) As IEnumerable(Of IReadOnlyCheckConstraint)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredCheckConstraints : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDeclaredCheckConstraints entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the check constraints for.</param>
        <summary>
          <para>
                    Returns all check constraints declared on the entity type.
                </para>
          <para>
                    This method does not return check constraints declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same check constraint more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" /> to also return check constraints declared on base types.
                </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase&gt; GetDefaultMappings (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase&gt; GetDefaultMappings(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultMappings (entityType As IEntityType) As IEnumerable(Of ITableMappingBase)" />
      <MemberSignature Language="F#" Value="static member GetDefaultMappings : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultMappings entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the table mappings for.</param>
        <summary>
                Returns the default mappings that the entity type would use.
            </summary>
        <returns>The tables to which the entity type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSchema">
      <MemberSignature Language="C#" Value="public static string GetDefaultSchema (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultSchema(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSchema(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultSchema (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultSchema : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSchema entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the schema for. </param>
        <summary>
                Returns the default database schema that would be used for this entity type.
            </summary>
        <returns> The default database schema to which the entity type would be mapped. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSchema">
      <MemberSignature Language="C#" Value="public static string? GetDefaultSchema (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultSchema(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultSchema (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultSchema : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSchema entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the schema for.</param>
        <summary>
                Returns the default database schema that would be used for this entity type.
            </summary>
        <returns>The default database schema to which the entity type would be mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSqlQueryName">
      <MemberSignature Language="C#" Value="public static string GetDefaultSqlQueryName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultSqlQueryName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSqlQueryName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultSqlQueryName (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultSqlQueryName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSqlQueryName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets the default SQL query name that would be used for this entity type when mapped using
                <see cref="M:RelationalEntityTypeBuilderExtensions.ToSqlQuery" />.
            </summary>
        <returns> Gets the default SQL query name. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSqlQueryName">
      <MemberSignature Language="C#" Value="public static string GetDefaultSqlQueryName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultSqlQueryName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSqlQueryName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultSqlQueryName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultSqlQueryName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSqlQueryName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets the default SQL query name that would be used for this entity type when mapped using
                <see cref="O:RelationalEntityTypeBuilderExtensions.ToSqlQuery" />.
            </summary>
        <returns>Gets the default SQL query name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultTableName">
      <MemberSignature Language="C#" Value="public static string GetDefaultTableName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultTableName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultTableName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultTableName (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultTableName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultTableName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the table name for. </param>
        <summary>
                Returns the default table name that would be used for this entity type.
            </summary>
        <returns> The default name of the table to which the entity type would be mapped. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultTableName">
      <MemberSignature Language="C#" Value="public static string GetDefaultTableName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, bool truncate = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultTableName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, bool truncate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultTableName(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultTableName (entityType As IEntityType, Optional truncate As Boolean = true) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultTableName : Microsoft.EntityFrameworkCore.Metadata.IEntityType * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultTableName (entityType, truncate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="truncate" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the table name for. </param>
        <param name="truncate"> A value indicating whether the name should be truncated to the max identifier length. </param>
        <summary>
                Returns the default table name that would be used for this entity type.
            </summary>
        <returns> The default name of the table to which the entity type would be mapped. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultTableName">
      <MemberSignature Language="C#" Value="public static string? GetDefaultTableName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, bool truncate = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultTableName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, bool truncate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultTableName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultTableName (entityType As IReadOnlyEntityType, Optional truncate As Boolean = true) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultTableName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultTableName (entityType, truncate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
        <Parameter Name="truncate" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the table name for.</param>
        <param name="truncate">A value indicating whether the name should be truncated to the max identifier length.</param>
        <summary>
                Returns the default table name that would be used for this entity type.
            </summary>
        <returns>The default name of the table to which the entity type would be mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultViewName">
      <MemberSignature Language="C#" Value="public static string GetDefaultViewName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultViewName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultViewName (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultViewName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the table name for. </param>
        <summary>
                Returns the default view name that would be used for this entity type.
            </summary>
        <returns> The default name of the table to which the entity type would be mapped. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultViewName">
      <MemberSignature Language="C#" Value="public static string? GetDefaultViewName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultViewName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultViewName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultViewName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the table name for.</param>
        <summary>
                Returns the default view name that would be used for this entity type.
            </summary>
        <returns>The default name of the table to which the entity type would be mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultViewSchema">
      <MemberSignature Language="C#" Value="public static string GetDefaultViewSchema (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultViewSchema(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewSchema(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultViewSchema (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultViewSchema : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewSchema entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the view schema for. </param>
        <summary>
                Returns the default database schema that would be used for this entity view.
            </summary>
        <returns> The default database schema to which the entity type would be mapped. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultViewSchema">
      <MemberSignature Language="C#" Value="public static string? GetDefaultViewSchema (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDefaultViewSchema(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultViewSchema (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetDefaultViewSchema : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewSchema entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the view schema for.</param>
        <summary>
                Returns the default database schema that would be used for this entity view.
            </summary>
        <returns>The default database schema to which the entity type would be mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping&gt; GetFunctionMappings (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping&gt; GetFunctionMappings(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFunctionMappings (entityType As IEntityType) As IEnumerable(Of IFunctionMapping)" />
      <MemberSignature Language="F#" Value="static member GetFunctionMappings : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionMappings entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the function mappings for.</param>
        <summary>
                Returns the functions to which the entity type is mapped.
            </summary>
        <returns>The functions to which the entity type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionName">
      <MemberSignature Language="C#" Value="public static string GetFunctionName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFunctionName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFunctionName (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetFunctionName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the function name for. </param>
        <summary>
                Returns the name of the function to which the entity type is mapped or <see langword="null" /> if not mapped to a function.
            </summary>
        <returns> The name of the function to which the entity type is mapped. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionName">
      <MemberSignature Language="C#" Value="public static string? GetFunctionName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFunctionName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFunctionName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetFunctionName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the function name for.</param>
        <summary>
                Returns the name of the function to which the entity type is mapped or <see langword="null" /> if not mapped to a function.
            </summary>
        <returns>The name of the function to which the entity type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionNameConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetFunctionNameConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetFunctionNameConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFunctionNameConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetFunctionNameConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionNameConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find configuration source for.</param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the function name.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the function name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsTableExcludedFromMigrationsConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetIsTableExcludedFromMigrationsConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetIsTableExcludedFromMigrationsConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetIsTableExcludedFromMigrationsConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetIsTableExcludedFromMigrationsConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetIsTableExcludedFromMigrationsConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetIsTableExcludedFromMigrationsConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find configuration source for.</param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for <see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for <see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public static string GetSchema (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSchema(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchema(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchema (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetSchema : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchema entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the schema for. </param>
        <summary>
                Returns the database schema that contains the mapped table.
            </summary>
        <returns> The database schema that contains the mapped table. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public static string? GetSchema (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSchema(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchema (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetSchema : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchema entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the schema for.</param>
        <summary>
                Returns the database schema that contains the mapped table.
            </summary>
        <returns>The database schema that contains the mapped table.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetSchemaConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetSchemaConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetSchemaConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find configuration source for.</param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the database schema.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the database schema.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaQualifiedTableName">
      <MemberSignature Language="C#" Value="public static string GetSchemaQualifiedTableName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSchemaQualifiedTableName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedTableName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaQualifiedTableName (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetSchemaQualifiedTableName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedTableName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the table name for. </param>
        <summary>
                Returns the name of the table to which the entity type is mapped prepended by the schema
                or <see langword="null" /> if not mapped to a table.
            </summary>
        <returns> The name of the table to which the entity type is mapped prepended by the schema. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaQualifiedTableName">
      <MemberSignature Language="C#" Value="public static string? GetSchemaQualifiedTableName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSchemaQualifiedTableName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedTableName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaQualifiedTableName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetSchemaQualifiedTableName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedTableName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the table name for.</param>
        <summary>
                Returns the name of the table to which the entity type is mapped prepended by the schema
                or <see langword="null" /> if not mapped to a table.
            </summary>
        <returns>The name of the table to which the entity type is mapped prepended by the schema.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaQualifiedViewName">
      <MemberSignature Language="C#" Value="public static string GetSchemaQualifiedViewName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSchemaQualifiedViewName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedViewName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaQualifiedViewName (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetSchemaQualifiedViewName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedViewName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the table name for. </param>
        <summary>
                Returns the name of the view to which the entity type is mapped prepended by the schema
                or <see langword="null" /> if not mapped to a view.
            </summary>
        <returns> The name of the table to which the entity type is mapped prepended by the schema. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaQualifiedViewName">
      <MemberSignature Language="C#" Value="public static string? GetSchemaQualifiedViewName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSchemaQualifiedViewName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedViewName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaQualifiedViewName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetSchemaQualifiedViewName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedViewName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the table name for.</param>
        <summary>
                Returns the name of the view to which the entity type is mapped prepended by the schema
                or <see langword="null" /> if not mapped to a view.
            </summary>
        <returns>The name of the table to which the entity type is mapped prepended by the schema.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlQuery">
      <MemberSignature Language="C#" Value="public static string GetSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSqlQuery(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSqlQuery (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetSqlQuery : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQuery entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns the SQL string used to provide data for the entity type or <see langword="null" /> if not mapped to a SQL string.
            </summary>
        <returns> The SQL string used to provide data for the entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlQuery">
      <MemberSignature Language="C#" Value="public static string? GetSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSqlQuery(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSqlQuery (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetSqlQuery : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQuery entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns the SQL string used to provide data for the entity type or <see langword="null" /> if not mapped to a SQL string.
            </summary>
        <returns>The SQL string used to provide data for the entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlQueryConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetSqlQueryConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetSqlQueryConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQueryConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSqlQueryConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetSqlQueryConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQueryConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find configuration source for.</param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the query SQL string.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the query SQL string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlQueryMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping&gt; GetSqlQueryMappings (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping&gt; GetSqlQueryMappings(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQueryMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSqlQueryMappings (entityType As IEntityType) As IEnumerable(Of ISqlQueryMapping)" />
      <MemberSignature Language="F#" Value="static member GetSqlQueryMappings : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQueryMappings entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the function mappings for.</param>
        <summary>
                Returns the SQL string mappings.
            </summary>
        <returns>The functions to which the entity type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTableMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMapping&gt; GetTableMappings (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ITableMapping&gt; GetTableMappings(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTableMappings (entityType As IEntityType) As IEnumerable(Of ITableMapping)" />
      <MemberSignature Language="F#" Value="static member GetTableMappings : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableMappings entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the table mappings for.</param>
        <summary>
                Returns the tables to which the entity type is mapped.
            </summary>
        <returns>The tables to which the entity type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTableName">
      <MemberSignature Language="C#" Value="public static string GetTableName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTableName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTableName (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetTableName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the table name for. </param>
        <summary>
                Returns the name of the table to which the entity type is mapped
                or <see langword="null" /> if not mapped to a table.
            </summary>
        <returns> The name of the table to which the entity type is mapped. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTableName">
      <MemberSignature Language="C#" Value="public static string? GetTableName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTableName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTableName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetTableName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the table name for.</param>
        <summary>
                Returns the name of the table to which the entity type is mapped
                or <see langword="null" /> if not mapped to a table.
            </summary>
        <returns>The name of the table to which the entity type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTableNameConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetTableNameConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetTableNameConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTableNameConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetTableNameConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableNameConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find configuration source for.</param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the table name.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the table name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IViewMapping&gt; GetViewMappings (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IViewMapping&gt; GetViewMappings(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewMappings (entityType As IEntityType) As IEnumerable(Of IViewMapping)" />
      <MemberSignature Language="F#" Value="static member GetViewMappings : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IViewMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewMappings entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IViewMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the view mappings for.</param>
        <summary>
                Returns the views to which the entity type is mapped.
            </summary>
        <returns>The views to which the entity type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewName">
      <MemberSignature Language="C#" Value="public static string GetViewName (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetViewName(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewName (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetViewName : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the view name for. </param>
        <summary>
                Returns the name of the view to which the entity type is mapped or <see langword="null" /> if not mapped to a view.
            </summary>
        <returns> The name of the view to which the entity type is mapped. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewName">
      <MemberSignature Language="C#" Value="public static string? GetViewName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetViewName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewName (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetViewName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewName entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the view name for.</param>
        <summary>
                Returns the name of the view to which the entity type is mapped or <see langword="null" /> if not mapped to a view.
            </summary>
        <returns>The name of the view to which the entity type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewNameConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetViewNameConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetViewNameConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewNameConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetViewNameConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewNameConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find configuration source for.</param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the view name.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the view name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewSchema">
      <MemberSignature Language="C#" Value="public static string GetViewSchema (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetViewSchema(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewSchema(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewSchema (entityType As IEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetViewSchema : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewSchema entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to get the view schema for. </param>
        <summary>
                Returns the database schema that contains the mapped view.
            </summary>
        <returns> The database schema that contains the mapped view. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewSchema">
      <MemberSignature Language="C#" Value="public static string? GetViewSchema (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetViewSchema(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewSchema (entityType As IReadOnlyEntityType) As String" />
      <MemberSignature Language="F#" Value="static member GetViewSchema : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewSchema entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to get the view schema for.</param>
        <summary>
                Returns the database schema that contains the mapped view.
            </summary>
        <returns>The database schema that contains the mapped view.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewSchemaConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetViewSchemaConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetViewSchemaConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewSchemaConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetViewSchemaConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewSchemaConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to find configuration source for.</param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the view schema.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the view schema.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIgnoredByMigrations">
      <MemberSignature Language="C#" Value="public static bool IsIgnoredByMigrations (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIgnoredByMigrations(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsIgnoredByMigrations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsIgnoredByMigrations (entityType As IEntityType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIgnoredByMigrations : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsIgnoredByMigrations entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets a value indicating whether the entity type is ignored by Migrations.
            </summary>
        <returns>A value indicating whether the entity type is ignored by Migrations.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTableExcludedFromMigrations">
      <MemberSignature Language="C#" Value="public static bool IsTableExcludedFromMigrations (this Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTableExcludedFromMigrations(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsTableExcludedFromMigrations (entityType As IEntityType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsTableExcludedFromMigrations : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsTableExcludedFromMigrations entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets a value indicating whether the associated table is ignored by Migrations.
            </summary>
        <returns>A value indicating whether the associated table is ignored by Migrations.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTableExcludedFromMigrations">
      <MemberSignature Language="C#" Value="public static bool IsTableExcludedFromMigrations (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTableExcludedFromMigrations(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsTableExcludedFromMigrations (entityType As IReadOnlyEntityType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsTableExcludedFromMigrations : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsTableExcludedFromMigrations entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Gets a value indicating whether the associated table is ignored by Migrations.
            </summary>
        <returns>A value indicating whether the associated table is ignored by Migrations.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCheckConstraint">
      <MemberSignature Language="C#" Value="public static bool RemoveCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RemoveCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.RemoveCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveCheckConstraint (entityType As IConventionEntityType, name As String) As Boolean" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member RemoveCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.RemoveCheckConstraint (entityType, name)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint RemoveCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint RemoveCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveCheckConstraint (entityType As IConventionEntityType, name As String) As IConventionCheckConstraint" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="static member RemoveCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.RemoveCheckConstraint (entityType, name)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint? RemoveCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Boolean</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0">Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to remove the check constraint from.</param>
        <param name="name">The check constraint name.</param>
        <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" /> with the given name.
            </summary>
        <returns>The removed check constraint.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCheckConstraint">
      <MemberSignature Language="C#" Value="public static bool RemoveCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RemoveCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.RemoveCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveCheckConstraint (entityType As IMutableEntityType, name As String) As Boolean" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member RemoveCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.RemoveCheckConstraint (entityType, name)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint RemoveCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint RemoveCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveCheckConstraint (entityType As IMutableEntityType, name As String) As IMutableCheckConstraint" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="static member RemoveCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.RemoveCheckConstraint (entityType, name)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint? RemoveCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Boolean</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0">Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to remove the check constraint from.</param>
        <param name="name">The check constraint name to be removed.</param>
        <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" /> with the given name.
            </summary>
        <returns>The removed check constraint.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetComment">
      <MemberSignature Language="C#" Value="public static void SetComment (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string comment);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetComment(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string comment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetComment(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetComment (entityType As IMutableEntityType, comment As String)" />
      <MemberSignature Language="F#" Value="static member SetComment : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetComment (entityType, comment)" />
      <MemberSignature Language="C#" Value="public static void SetComment (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? comment);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        <Parameter Name="comment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="comment">The comment for the table this entity is mapped to.</param>
        <summary>
                Configures a comment to be applied to the table this entity is mapped to.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetComment">
      <MemberSignature Language="C#" Value="public static void SetComment (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string comment, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetComment(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string comment, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetComment(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetComment (entityType As IConventionEntityType, comment As String, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetComment : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetComment (entityType, comment, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static string SetComment (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string comment, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetComment(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string comment, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetComment (entityType As IConventionEntityType, comment As String, Optional fromDataAnnotation As Boolean = false) As String" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="static member SetComment : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetComment (entityType, comment, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public static string? SetComment (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? comment, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0">System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
        <Parameter Name="comment" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="comment">The comment for the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures a comment to be applied to the table this entity is mapped to.
            </summary>
        <returns>The configured comment.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFunctionName">
      <MemberSignature Language="C#" Value="public static void SetFunctionName (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFunctionName(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetFunctionName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetFunctionName (entityType As IMutableEntityType, name As String)" />
      <MemberSignature Language="F#" Value="static member SetFunctionName : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetFunctionName (entityType, name)" />
      <MemberSignature Language="C#" Value="public static void SetFunctionName (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? name);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the function name for.</param>
        <param name="name">The name to set.</param>
        <summary>
                Sets the name of the function to which the entity type is mapped.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFunctionName">
      <MemberSignature Language="C#" Value="public static string SetFunctionName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetFunctionName(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetFunctionName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetFunctionName (entityType As IConventionEntityType, name As String, Optional fromDataAnnotation As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member SetFunctionName : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetFunctionName (entityType, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static string? SetFunctionName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the function name for.</param>
        <param name="name">The name to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the name of the function to which the entity type is mapped.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsTableExcludedFromMigrations">
      <MemberSignature Language="C#" Value="public static void SetIsTableExcludedFromMigrations (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, bool? excluded);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsTableExcludedFromMigrations(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; excluded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetIsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetIsTableExcludedFromMigrations (entityType As IMutableEntityType, excluded As Nullable(Of Boolean))" />
      <MemberSignature Language="F#" Value="static member SetIsTableExcludedFromMigrations : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * Nullable&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetIsTableExcludedFromMigrations (entityType, excluded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="excluded" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="excluded">A value indicating whether the associated table is ignored by Migrations.</param>
        <summary>
                Sets a value indicating whether the associated table is ignored by Migrations.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsTableExcludedFromMigrations">
      <MemberSignature Language="C#" Value="public static bool? SetIsTableExcludedFromMigrations (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool? excluded, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;bool&gt; SetIsTableExcludedFromMigrations(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; excluded, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetIsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetIsTableExcludedFromMigrations (entityType As IConventionEntityType, excluded As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member SetIsTableExcludedFromMigrations : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * bool -&gt; Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetIsTableExcludedFromMigrations (entityType, excluded, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="excluded" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="excluded">A value indicating whether the associated table is ignored by Migrations.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value indicating whether the associated table is ignored by Migrations.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSchema">
      <MemberSignature Language="C#" Value="public static void SetSchema (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string value);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSchema(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetSchema (entityType As IMutableEntityType, value As String)" />
      <MemberSignature Language="F#" Value="static member SetSchema : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSchema (entityType, value)" />
      <MemberSignature Language="C#" Value="public static void SetSchema (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? value);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the schema for.</param>
        <param name="value">The value to set.</param>
        <summary>
                Sets the database schema that contains the mapped table.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSchema">
      <MemberSignature Language="C#" Value="public static void SetSchema (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string value, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSchema(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string value, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetSchema (entityType As IConventionEntityType, value As String, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetSchema : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSchema (entityType, value, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static string SetSchema (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string value, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetSchema(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string value, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetSchema (entityType As IConventionEntityType, value As String, Optional fromDataAnnotation As Boolean = false) As String" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="static member SetSchema : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSchema (entityType, value, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public static string? SetSchema (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? value, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0">System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the schema for.</param>
        <param name="value">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the database schema that contains the mapped table.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSqlQuery">
      <MemberSignature Language="C#" Value="public static void SetSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSqlQuery(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetSqlQuery (entityType As IMutableEntityType, name As String)" />
      <MemberSignature Language="F#" Value="static member SetSqlQuery : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSqlQuery (entityType, name)" />
      <MemberSignature Language="C#" Value="public static void SetSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? name);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="name">The SQL string to set.</param>
        <summary>
                Sets the SQL string used to provide data for the entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSqlQuery">
      <MemberSignature Language="C#" Value="public static string SetSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetSqlQuery(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetSqlQuery (entityType As IConventionEntityType, name As String, Optional fromDataAnnotation As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member SetSqlQuery : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSqlQuery (entityType, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static string? SetSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="name">The SQL string to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the SQL string used to provide data for the entity type.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTableName">
      <MemberSignature Language="C#" Value="public static void SetTableName (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTableName(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetTableName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetTableName (entityType As IMutableEntityType, name As String)" />
      <MemberSignature Language="F#" Value="static member SetTableName : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetTableName (entityType, name)" />
      <MemberSignature Language="C#" Value="public static void SetTableName (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? name);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the table name for.</param>
        <param name="name">The name to set.</param>
        <summary>
                Sets the name of the table to which the entity type is mapped.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTableName">
      <MemberSignature Language="C#" Value="public static void SetTableName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTableName(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetTableName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetTableName (entityType As IConventionEntityType, name As String, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetTableName : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetTableName (entityType, name, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static string SetTableName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetTableName(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetTableName (entityType As IConventionEntityType, name As String, Optional fromDataAnnotation As Boolean = false) As String" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="static member SetTableName : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetTableName (entityType, name, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public static string? SetTableName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0">System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the table name for.</param>
        <param name="name">The name to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the name of the table to which the entity type is mapped.
            </summary>
        <returns>The configured table name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetViewName">
      <MemberSignature Language="C#" Value="public static void SetViewName (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetViewName(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetViewName (entityType As IMutableEntityType, name As String)" />
      <MemberSignature Language="F#" Value="static member SetViewName : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewName (entityType, name)" />
      <MemberSignature Language="C#" Value="public static void SetViewName (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? name);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the view name for.</param>
        <param name="name">The name to set.</param>
        <summary>
                Sets the name of the view to which the entity type is mapped.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetViewName">
      <MemberSignature Language="C#" Value="public static string SetViewName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetViewName(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetViewName (entityType As IConventionEntityType, name As String, Optional fromDataAnnotation As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member SetViewName : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewName (entityType, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static string? SetViewName (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the view name for.</param>
        <param name="name">The name to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the name of the view to which the entity type is mapped.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetViewSchema">
      <MemberSignature Language="C#" Value="public static void SetViewSchema (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string value);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetViewSchema(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetViewSchema (entityType As IMutableEntityType, value As String)" />
      <MemberSignature Language="F#" Value="static member SetViewSchema : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewSchema (entityType, value)" />
      <MemberSignature Language="C#" Value="public static void SetViewSchema (this Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, string? value);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the view schema for.</param>
        <param name="value">The value to set.</param>
        <summary>
                Sets the database schema that contains the mapped view.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetViewSchema">
      <MemberSignature Language="C#" Value="public static string SetViewSchema (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string value, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string SetViewSchema(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetViewSchema (entityType As IConventionEntityType, value As String, Optional fromDataAnnotation As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member SetViewSchema : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewSchema (entityType, value, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static string? SetViewSchema (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string? value, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type to set the view schema for.</param>
        <param name="value">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the database schema that contains the mapped view.
            </summary>
        <returns>The configured schema.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
