<Type Name="SqliteEntityTypeBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class SqliteEntityTypeBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqliteEntityTypeBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SqliteEntityTypeBuilderExtensions" />
  <TypeSignature Language="F#" Value="type SqliteEntityTypeBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Entity type builder extension methods for Sqlite-specific metadata.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlite">Accessing Sqlite databases with EF Core</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanUseSqlReturningClause">
      <MemberSignature Language="C#" Value="public static bool CanUseSqlReturningClause (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool? useSqlReturningClause, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanUseSqlReturningClause(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, valuetype System.Nullable`1&lt;bool&gt; useSqlReturningClause, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.CanUseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanUseSqlReturningClause (entityTypeBuilder As IConventionEntityTypeBuilder, useSqlReturningClause As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanUseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * Nullable&lt;bool&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.CanUseSqlReturningClause (entityTypeBuilder, useSqlReturningClause, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-9.0" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="useSqlReturningClause">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether this entity type can be configured to use the SQL RETURNING clause
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanUseSqlReturningClause">
      <MemberSignature Language="C#" Value="public static bool CanUseSqlReturningClause (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool? useSqlReturningClause, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanUseSqlReturningClause(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, valuetype System.Nullable`1&lt;bool&gt; useSqlReturningClause, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.CanUseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanUseSqlReturningClause (entityTypeBuilder As IConventionEntityTypeBuilder, useSqlReturningClause As Nullable(Of Boolean), ByRef storeObject As StoreObjectIdentifier, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanUseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * Nullable&lt;bool&gt; * StoreObjectIdentifier * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.CanUseSqlReturningClause (entityTypeBuilder, useSqlReturningClause, storeObject, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-9.0" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="useSqlReturningClause">The value to set.</param>
        <param name="storeObject">The identifier of the table-like store object.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether this entity type can be configured to use the SQL RETURNING clause
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqliteToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder builder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ForSqliteToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder builder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteToTable (builder As EntityTypeBuilder, name As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqliteToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable (builder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="builder"> The builder for the entity type being configured. </param>
        <param name="name"> The name of the table. </param>
        <summary>
                Configures the table that the entity maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqliteToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ForSqliteToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; builder, string name) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ForSqliteToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; builder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqliteToTable(Of TEntity As Class) (builder As EntityTypeBuilder(Of TEntity), name As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ForSqliteToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable (builder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type being configured. </typeparam>
        <param name="builder"> The builder for the entity type being configured. </param>
        <param name="name"> The name of the table. </param>
        <summary>
                Configures the table that the entity maps to when targeting SQLite.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlReturningClause">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? UseSqlReturningClause (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool? useSqlReturningClause, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder UseSqlReturningClause(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, valuetype System.Nullable`1&lt;bool&gt; useSqlReturningClause, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlReturningClause (entityTypeBuilder As IConventionEntityTypeBuilder, useSqlReturningClause As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member UseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.UseSqlReturningClause (entityTypeBuilder, useSqlReturningClause, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-9.0" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="useSqlReturningClause">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSqlReturningClause">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? UseSqlReturningClause (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool? useSqlReturningClause, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder UseSqlReturningClause(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, valuetype System.Nullable`1&lt;bool&gt; useSqlReturningClause, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.UseSqlReturningClause(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSqlReturningClause (entityTypeBuilder As IConventionEntityTypeBuilder, useSqlReturningClause As Nullable(Of Boolean), ByRef storeObject As StoreObjectIdentifier, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member UseSqlReturningClause : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * Nullable&lt;bool&gt; * StoreObjectIdentifier * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.UseSqlReturningClause (entityTypeBuilder, useSqlReturningClause, storeObject, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-9.0" RefType="this" />
        <Parameter Name="useSqlReturningClause" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-9.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref" Index="2" FrameworkAlternate="efcore-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-9.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="useSqlReturningClause">The value to set.</param>
        <param name="storeObject">The identifier of the table-like store object.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value indicating whether to use the SQL RETURNING clause when saving changes to the table.
                The RETURNING clause is incompatible with certain Sqlite features, such as virtual tables or tables with AFTER triggers.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
