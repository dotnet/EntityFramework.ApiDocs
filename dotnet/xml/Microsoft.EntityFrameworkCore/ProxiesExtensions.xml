<Type Name="ProxiesExtensions" FullName="Microsoft.EntityFrameworkCore.ProxiesExtensions">
  <TypeSignature Language="C#" Value="public static class ProxiesExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProxiesExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ProxiesExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ProxiesExtensions" />
  <TypeSignature Language="F#" Value="type ProxiesExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Extension methods related to use of proxies with Entity Framework Core.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateProxy">
      <MemberSignature Language="C#" Value="public static object CreateProxy (this Microsoft.EntityFrameworkCore.DbContext context, Type entityType, params object[] constructorArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateProxy(class Microsoft.EntityFrameworkCore.DbContext context, class System.Type entityType, object[] constructorArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy(Microsoft.EntityFrameworkCore.DbContext,System.Type,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateProxy (context As DbContext, entityType As Type, ParamArray constructorArguments As Object()) As Object" />
      <MemberSignature Language="F#" Value="static member CreateProxy : Microsoft.EntityFrameworkCore.DbContext * Type * obj[] -&gt; obj" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy (context, entityType, constructorArguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" RefType="this" />
        <Parameter Name="entityType" Type="System.Type" />
        <Parameter Name="constructorArguments" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.</param>
        <param name="entityType">The entity type for which a proxy is needed.</param>
        <param name="constructorArguments">Arguments to pass to the entity type constructor.</param>
        <summary>
                Creates a proxy instance for an entity type if proxy creation has been turned on.
            </summary>
        <returns>The proxy instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProxy&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static TEntity CreateProxy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbContext context, params object[] constructorArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEntity CreateProxy&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.DbContext context, object[] constructorArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy``1(Microsoft.EntityFrameworkCore.DbContext,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateProxy(Of TEntity) (context As DbContext, ParamArray constructorArguments As Object()) As TEntity" />
      <MemberSignature Language="F#" Value="static member CreateProxy : Microsoft.EntityFrameworkCore.DbContext * obj[] -&gt; 'Entity" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy (context, constructorArguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" RefType="this" />
        <Parameter Name="constructorArguments" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type for which a proxy is needed.</typeparam>
        <param name="context">The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.</param>
        <param name="constructorArguments">Arguments to pass to the entity type constructor.</param>
        <summary>
                Creates a proxy instance for an entity type if proxy creation has been turned on.
            </summary>
        <returns>The proxy instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProxy&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static TEntity CreateProxy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; set, params object[] constructorArguments) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEntity CreateProxy&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TEntity&gt; set, object[] constructorArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateProxy(Of TEntity As Class) (set As DbSet(Of TEntity), ParamArray constructorArguments As Object()) As TEntity" />
      <MemberSignature Language="F#" Value="static member CreateProxy : Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; * obj[] -&gt; 'Entity (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy (set, constructorArguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="set" Type="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="constructorArguments" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type for which a proxy is needed.</typeparam>
        <param name="set">The <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />.</param>
        <param name="constructorArguments">Arguments to pass to the entity type constructor.</param>
        <summary>
                Creates a proxy instance for an entity type if proxy creation has been turned on.
            </summary>
        <returns>The proxy instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProxy&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static TEntity CreateProxy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbContext context, Action&lt;TEntity&gt; configureEntity, params object[] constructorArguments);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEntity CreateProxy&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.DbContext context, class System.Action`1&lt;!!TEntity&gt; configureEntity, object[] constructorArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy``1(Microsoft.EntityFrameworkCore.DbContext,System.Action{``0},System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateProxy(Of TEntity) (context As DbContext, configureEntity As Action(Of TEntity), ParamArray constructorArguments As Object()) As TEntity" />
      <MemberSignature Language="F#" Value="static member CreateProxy : Microsoft.EntityFrameworkCore.DbContext * Action&lt;'Entity&gt; * obj[] -&gt; 'Entity" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy (context, configureEntity, constructorArguments)" />
      <MemberSignature Language="C#" Value="public static TEntity CreateProxy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbContext context, Action&lt;TEntity&gt;? configureEntity, params object[] constructorArguments);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureEntity" Type="System.Action&lt;TEntity&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructorArguments" Type="System.Object[]" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type for which a proxy is needed.</typeparam>
        <param name="context">The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.</param>
        <param name="configureEntity">Called after the entity is created to set property values, etc.</param>
        <param name="constructorArguments">Arguments to pass to the entity type constructor.</param>
        <summary>
                Creates a proxy instance for an entity type if proxy creation has been turned on.
            </summary>
        <returns>The proxy instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProxy&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static TEntity CreateProxy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; set, Action&lt;TEntity&gt; configureEntity, params object[] constructorArguments) where TEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEntity CreateProxy&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TEntity&gt; set, class System.Action`1&lt;!!TEntity&gt; configureEntity, object[] constructorArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Action{``0},System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateProxy(Of TEntity As Class) (set As DbSet(Of TEntity), configureEntity As Action(Of TEntity), ParamArray constructorArguments As Object()) As TEntity" />
      <MemberSignature Language="F#" Value="static member CreateProxy : Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; * Action&lt;'Entity (requires 'Entity : null)&gt; * obj[] -&gt; 'Entity (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.CreateProxy (set, configureEntity, constructorArguments)" />
      <MemberSignature Language="C#" Value="public static TEntity CreateProxy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; set, Action&lt;TEntity&gt;? configureEntity, params object[] constructorArguments) where TEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="set" Type="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureEntity" Type="System.Action&lt;TEntity&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructorArguments" Type="System.Object[]" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type for which a proxy is needed.</typeparam>
        <param name="set">The <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />.</param>
        <param name="configureEntity">Called after the entity is created to set property values, etc.</param>
        <param name="constructorArguments">Arguments to pass to the entity type constructor.</param>
        <summary>
                Creates a proxy instance for an entity type if proxy creation has been turned on.
            </summary>
        <returns>The proxy instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseChangeTrackingProxies">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseChangeTrackingProxies (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, bool useChangeTrackingProxies = true, bool checkEquality = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseChangeTrackingProxies(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, bool useChangeTrackingProxies, bool checkEquality) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseChangeTrackingProxies(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseChangeTrackingProxies (optionsBuilder As DbContextOptionsBuilder, Optional useChangeTrackingProxies As Boolean = true, Optional checkEquality As Boolean = true) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="static member UseChangeTrackingProxies : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * bool * bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.UseChangeTrackingProxies (optionsBuilder, useChangeTrackingProxies, checkEquality)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="useChangeTrackingProxies" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="checkEquality" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="optionsBuilder">
                The options builder, as passed to <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                or exposed AddDbContext.
            </param>
        <param name="useChangeTrackingProxies">
          <see langword="true" /> to use change tracking proxies; <see langword="false" /> to prevent their
                use.
            </param>
        <param name="checkEquality">
          <see langword="true" /> if proxy change detection should check if the incoming value is equal to the current
                value before notifying. Defaults to <see langword="true" />.
            </param>
        <summary>
                Turns on the creation of change tracking proxies.
            </summary>
        <returns>The same builder to allow method calls to be chained.</returns>
        <remarks>
          <para>
                    Note that this requires appropriate services to be available in the EF internal service provider. Normally this
                    will happen automatically, but if the application is controlling the service provider, then a call to
                    <see cref="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> may be needed.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-notification-entities">Notification entities</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseChangeTrackingProxies&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseChangeTrackingProxies&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, bool useChangeTrackingProxies = true, bool checkEquality = true) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseChangeTrackingProxies&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, bool useChangeTrackingProxies, bool checkEquality) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseChangeTrackingProxies``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseChangeTrackingProxies(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), Optional useChangeTrackingProxies As Boolean = true, Optional checkEquality As Boolean = true) As DbContextOptionsBuilder(Of TContext)" />
      <MemberSignature Language="F#" Value="static member UseChangeTrackingProxies : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * bool * bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.UseChangeTrackingProxies (optionsBuilder, useChangeTrackingProxies, checkEquality)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="useChangeTrackingProxies" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="checkEquality" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.</typeparam>
        <param name="optionsBuilder">
                The options builder, as passed to <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                or exposed AddDbContext.
            </param>
        <param name="useChangeTrackingProxies">
          <see langword="true" /> to use change tracking proxies; <see langword="false" /> to prevent their
                use.
            </param>
        <param name="checkEquality">
          <see langword="true" /> if proxy change detection should check if the incoming value is equal to the current
                value before notifying. Defaults to <see langword="true" />.
            </param>
        <summary>
                Turns on the creation of change tracking proxies.
            </summary>
        <returns>The same builder to allow method calls to be chained.</returns>
        <remarks>
          <para>
                    Note that this requires appropriate services to be available in the EF internal service provider. Normally this
                    will happen automatically, but if the application is controlling the service provider, then a call to
                    <see cref="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> may be needed.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-notification-entities">Notification entities</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLazyLoadingProxies">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLazyLoadingProxies (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, Action&lt;Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder&gt; lazyLoadingProxiesOptionsAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLazyLoadingProxies(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder&gt; lazyLoadingProxiesOptionsAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Action{Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseLazyLoadingProxies (optionsBuilder As DbContextOptionsBuilder, lazyLoadingProxiesOptionsAction As Action(Of LazyLoadingProxiesOptionsBuilder)) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="static member UseLazyLoadingProxies : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * Action&lt;Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies (optionsBuilder, lazyLoadingProxiesOptionsAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="lazyLoadingProxiesOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="optionsBuilder">
                The options builder, as passed to <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                or exposed AddDbContext.
            </param>
        <param name="lazyLoadingProxiesOptionsAction">An optional action to allow additional proxy-specific configuration.</param>
        <summary>
                Turns on the creation of lazy loading proxies.
            </summary>
        <returns>The same builder to allow method calls to be chained.</returns>
        <remarks>
          <para>
                    Note that this requires appropriate services to be available in the EF internal service provider. Normally this
                    will happen automatically, but if the application is controlling the service provider, then a call to
                    <see cref="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> may be needed.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-lazy-loading">Lazy loading</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLazyLoadingProxies">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLazyLoadingProxies (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, bool useLazyLoadingProxies = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLazyLoadingProxies(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder optionsBuilder, bool useLazyLoadingProxies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseLazyLoadingProxies (optionsBuilder As DbContextOptionsBuilder, Optional useLazyLoadingProxies As Boolean = true) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="static member UseLazyLoadingProxies : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder * bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies (optionsBuilder, useLazyLoadingProxies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" RefType="this" />
        <Parameter Name="useLazyLoadingProxies" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="optionsBuilder">
                The options builder, as passed to <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                or exposed AddDbContext.
            </param>
        <param name="useLazyLoadingProxies">
          <see langword="true" /> to use lazy loading proxies; <see langword="false" /> to prevent their use.</param>
        <summary>
                Turns on the creation of lazy loading proxies.
            </summary>
        <returns>The same builder to allow method calls to be chained.</returns>
        <remarks>
          <para>
                    Note that this requires appropriate services to be available in the EF internal service provider. Normally this
                    will happen automatically, but if the application is controlling the service provider, then a call to
                    <see cref="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> may be needed.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-lazy-loading">Lazy loading</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLazyLoadingProxies&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseLazyLoadingProxies&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, Action&lt;Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder&gt; lazyLoadingProxiesOptionsAction) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseLazyLoadingProxies&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder&gt; lazyLoadingProxiesOptionsAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseLazyLoadingProxies(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), lazyLoadingProxiesOptionsAction As Action(Of LazyLoadingProxiesOptionsBuilder)) As DbContextOptionsBuilder(Of TContext)" />
      <MemberSignature Language="F#" Value="static member UseLazyLoadingProxies : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * Action&lt;Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies (optionsBuilder, lazyLoadingProxiesOptionsAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="lazyLoadingProxiesOptionsAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.LazyLoadingProxiesOptionsBuilder&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.</typeparam>
        <param name="optionsBuilder">
                The options builder, as passed to <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                or exposed AddDbContext.
            </param>
        <param name="lazyLoadingProxiesOptionsAction">An optional action to allow additional proxy-specific configuration.</param>
        <summary>
                Turns on the creation of lazy loading proxies.
            </summary>
        <returns>The same builder to allow method calls to be chained.</returns>
        <remarks>
          <para>
                    Note that this requires appropriate services to be available in the EF internal service provider. Normally this
                    will happen automatically, but if the application is controlling the service provider, then a call to
                    <see cref="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> may be needed.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-lazy-loading">Lazy loading</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLazyLoadingProxies&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; UseLazyLoadingProxies&lt;TContext&gt; (this Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt; optionsBuilder, bool useLazyLoadingProxies = true) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; UseLazyLoadingProxies&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1&lt;!!TContext&gt; optionsBuilder, bool useLazyLoadingProxies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseLazyLoadingProxies(Of TContext As DbContext) (optionsBuilder As DbContextOptionsBuilder(Of TContext), Optional useLazyLoadingProxies As Boolean = true) As DbContextOptionsBuilder(Of TContext)" />
      <MemberSignature Language="F#" Value="static member UseLazyLoadingProxies : Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies (optionsBuilder, useLazyLoadingProxies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="optionsBuilder" Type="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&lt;TContext&gt;" RefType="this" />
        <Parameter Name="useLazyLoadingProxies" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TContext">The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.</typeparam>
        <param name="optionsBuilder">
                The options builder, as passed to <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />
                or exposed AddDbContext.
            </param>
        <param name="useLazyLoadingProxies">
          <see langword="true" /> to use lazy loading proxies; <see langword="false" /> to prevent their use.</param>
        <summary>
                Turns on the creation of lazy loading proxies.
            </summary>
        <returns>The same builder to allow method calls to be chained.</returns>
        <remarks>
          <para>
                    Note that this requires appropriate services to be available in the EF internal service provider. Normally this
                    will happen automatically, but if the application is controlling the service provider, then a call to
                    <see cref="M:Microsoft.Extensions.DependencyInjection.ProxiesServiceCollectionExtensions.AddEntityFrameworkProxies(Microsoft.Extensions.DependencyInjection.IServiceCollection)" /> may be needed.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-lazy-loading">Lazy loading</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
