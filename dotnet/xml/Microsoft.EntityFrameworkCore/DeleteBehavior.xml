<Type Name="DeleteBehavior" FullName="Microsoft.EntityFrameworkCore.DeleteBehavior">
  <TypeSignature Language="C#" Value="public enum DeleteBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DeleteBehavior extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.DeleteBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Enum DeleteBehavior" />
  <TypeSignature Language="F#" Value="type DeleteBehavior = " />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <para>
                    Indicates how a delete operation is applied to dependent entities in a relationship when the
                    principal is deleted or the relationship is severed.
                </para>
      <para>
                    Behaviors in the database are dependent on the database schema being created
                    appropriately. Using Entity Framework Migrations or <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" />
                    will create the appropriate schema.
                </para>
      <para>
                    Note that the in-memory behavior for entities that are currently tracked by
                    the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> can be different from the behavior that happens in the database.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-cascading">Cascade delete and deleting orphans in EF Core</see> for more information.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cascade">
      <MemberSignature Language="C#" Value="Cascade" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.DeleteBehavior Cascade = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.DeleteBehavior.Cascade" />
      <MemberSignature Language="VB.NET" Value="Cascade" />
      <MemberSignature Language="F#" Value="Cascade = 3" Usage="Microsoft.EntityFrameworkCore.DeleteBehavior.Cascade" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DeleteBehavior</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
          <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, dependent entities
                    will be deleted when the related principal is deleted.
                </para>
          <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database is
                    the same as is described above for tracked entities. Keep in mind that some databases cannot easily
                    support this behavior, especially if there are cycles in relationships, in which case it may
                    be better to use <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.ClientCascade" /> which will allow EF to perform cascade deletes
                    on loaded entities even if the database does not support this.
                </para>
          <para>
                    This is the default for required relationships. That is, for relationships that have
                    non-nullable foreign keys.
                </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ClientCascade">
      <MemberSignature Language="C#" Value="ClientCascade" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.DeleteBehavior ClientCascade = int32(4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.DeleteBehavior.ClientCascade" />
      <MemberSignature Language="VB.NET" Value="ClientCascade" />
      <MemberSignature Language="F#" Value="ClientCascade = 4" Usage="Microsoft.EntityFrameworkCore.DeleteBehavior.ClientCascade" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DeleteBehavior</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
          <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, dependent entities
                    will be deleted when the related principal is deleted.
                </para>
          <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database
                    is to generate an error if a foreign key constraint is violated.
                </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ClientNoAction">
      <MemberSignature Language="C#" Value="ClientNoAction" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.DeleteBehavior ClientNoAction = int32(6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.DeleteBehavior.ClientNoAction" />
      <MemberSignature Language="VB.NET" Value="ClientNoAction" />
      <MemberSignature Language="F#" Value="ClientNoAction = 6" Usage="Microsoft.EntityFrameworkCore.DeleteBehavior.ClientNoAction" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DeleteBehavior</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>
          <para>
                    Note: it is unusual to use this value. Consider using <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.ClientSetNull" /> instead to match
                    the behavior of EF6 with cascading deletes disabled.
                </para>
          <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, the values of foreign key properties in
                    dependent entities are not changed when the related principal entity is deleted.
                    This can result in an inconsistent graph of entities where the values of foreign key properties do
                    not match the relationships in the graph.
                </para>
          <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database
                    is to generate an error if a foreign key constraint is violated.
                </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ClientSetNull">
      <MemberSignature Language="C#" Value="ClientSetNull" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.DeleteBehavior ClientSetNull = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.DeleteBehavior.ClientSetNull" />
      <MemberSignature Language="VB.NET" Value="ClientSetNull" />
      <MemberSignature Language="F#" Value="ClientSetNull = 0" Usage="Microsoft.EntityFrameworkCore.DeleteBehavior.ClientSetNull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DeleteBehavior</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, the values of foreign key properties in
                    dependent entities are set to null when the related principal is deleted.
                    This helps keep the graph of entities in a consistent state while they are being tracked, such that a
                    fully consistent graph can then be written to the database. If a property cannot be set to null because
                    it is not a nullable type, then an exception will be thrown when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database
                    is to generate an error if a foreign key constraint is violated.
                </para>
          <para>
                    This is the default for optional relationships. That is, for relationships that have
                    nullable foreign keys.
                </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NoAction">
      <MemberSignature Language="C#" Value="NoAction" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.DeleteBehavior NoAction = int32(5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.DeleteBehavior.NoAction" />
      <MemberSignature Language="VB.NET" Value="NoAction" />
      <MemberSignature Language="F#" Value="NoAction = 5" Usage="Microsoft.EntityFrameworkCore.DeleteBehavior.NoAction" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DeleteBehavior</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
          <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, the values of foreign key properties in
                    dependent entities are set to null when the related principal is deleted.
                    This helps keep the graph of entities in a consistent state while they are being tracked, such that a
                    fully consistent graph can then be written to the database. If a property cannot be set to null because
                    it is not a nullable type, then an exception will be thrown when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database
                    is to generate an error if a foreign key constraint is violated.
                </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Restrict">
      <MemberSignature Language="C#" Value="Restrict" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.DeleteBehavior Restrict = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.DeleteBehavior.Restrict" />
      <MemberSignature Language="VB.NET" Value="Restrict" />
      <MemberSignature Language="F#" Value="Restrict = 1" Usage="Microsoft.EntityFrameworkCore.DeleteBehavior.Restrict" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DeleteBehavior</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, the values of foreign key properties in
                    dependent entities are set to null when the related principal is deleted.
                    This helps keep the graph of entities in a consistent state while they are being tracked, such that a
                    fully consistent graph can then be written to the database. If a property cannot be set to null because
                    it is not a nullable type, then an exception will be thrown when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database
                    is to generate an error if a foreign key constraint is violated.
                </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SetNull">
      <MemberSignature Language="C#" Value="SetNull" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.DeleteBehavior SetNull = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.DeleteBehavior.SetNull" />
      <MemberSignature Language="VB.NET" Value="SetNull" />
      <MemberSignature Language="F#" Value="SetNull = 2" Usage="Microsoft.EntityFrameworkCore.DeleteBehavior.SetNull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DeleteBehavior</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <para>
                    For entities being tracked by the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />, the values of foreign key properties in
                    dependent entities are set to null when the related principal is deleted.
                    This helps keep the graph of entities in a consistent state while they are being tracked, such that a
                    fully consistent graph can then be written to the database. If a property cannot be set to null because
                    it is not a nullable type, then an exception will be thrown when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    If the database has been created from the model using Entity Framework Migrations or the
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> method, then the behavior in the database is
                    the same as is described above for tracked entities. Keep in mind that some databases cannot easily
                    support this behavior, especially if there are cycles in relationships, in which case it may
                    be better to use <see cref="F:Microsoft.EntityFrameworkCore.DeleteBehavior.ClientSetNull" /> which will allow EF to cascade null values
                    on loaded entities even if the database does not support this.
                </para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>
