<Type Name="RelationalEntityTypeBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class RelationalEntityTypeBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RelationalEntityTypeBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RelationalEntityTypeBuilderExtensions" />
  <TypeSignature Language="F#" Value="type RelationalEntityTypeBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanExcludeTableFromMigrations">
      <MemberSignature Language="C#" Value="public static bool CanExcludeTableFromMigrations (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool? excludedFromMigrations, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanExcludeTableFromMigrations(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, valuetype System.Nullable`1&lt;bool&gt; excludedFromMigrations, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanExcludeTableFromMigrations(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanExcludeTableFromMigrations (entityTypeBuilder As IConventionEntityTypeBuilder, excludedFromMigrations As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanExcludeTableFromMigrations : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * Nullable&lt;bool&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanExcludeTableFromMigrations (entityTypeBuilder, excludedFromMigrations, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="excludedFromMigrations" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="excludedFromMigrations">A value indicating whether the table should be managed by migrations.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the table that this entity type is mapped to can be excluded from migrations
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-migrations">Database migrations</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveCheckConstraint">
      <MemberSignature Language="C#" Value="public static bool CanHaveCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string? sql, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanHaveCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanHaveCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanHaveCheckConstraint (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, sql As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanHaveCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanHaveCheckConstraint (entityTypeBuilder, name, sql, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the check constraint can be configured.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetCheckConstraint">
      <MemberSignature Language="C#" Value="public static bool CanSetCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetCheckConstraint (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, sql As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetCheckConstraint (entityTypeBuilder, name, sql, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static bool CanSetCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string? sql, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use CanHaveCheckConstraint")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use CanHaveCheckConstraint")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the check constraint can be configured.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetComment">
      <MemberSignature Language="C#" Value="public static bool CanSetComment (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string comment, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetComment(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string comment, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetComment(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetComment (entityTypeBuilder As IConventionEntityTypeBuilder, comment As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetComment : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetComment (entityTypeBuilder, comment, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static bool CanSetComment (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? comment, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="comment" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="comment">The comment for the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether a comment can be set for this entity type
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetFunction">
      <MemberSignature Language="C#" Value="public static bool CanSetFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, System.Reflection.MethodInfo? function, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, class System.Reflection.MethodInfo function, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetFunction (entityTypeBuilder As IConventionEntityTypeBuilder, function As MethodInfo, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * System.Reflection.MethodInfo * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetFunction (entityTypeBuilder, function, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the function name can be set for this entity type
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetFunction">
      <MemberSignature Language="C#" Value="public static bool CanSetFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetFunction (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetFunction (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static bool CanSetFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the function name can be set for this entity type
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetJsonPropertyName">
      <MemberSignature Language="C#" Value="public static bool CanSetJsonPropertyName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetJsonPropertyName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetJsonPropertyName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetJsonPropertyName (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetJsonPropertyName : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetJsonPropertyName (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">JSON property name to be used.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the given value can be used as a JSON property name for the entity type.
            </summary>
        <returns>
          <see langword="true" /> if the given value can be set as JSON property name for this entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetMappingStrategy">
      <MemberSignature Language="C#" Value="public static bool CanSetMappingStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? strategy, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetMappingStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string strategy, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetMappingStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetMappingStrategy (entityTypeBuilder As IConventionEntityTypeBuilder, strategy As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetMappingStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetMappingStrategy (entityTypeBuilder, strategy, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="strategy" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="strategy">The mapping strategy for the derived types.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the hierarchy mapping strategy can be configured
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-migrations">Database migrations</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetSchema">
      <MemberSignature Language="C#" Value="public static bool CanSetSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetSchema(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetSchema (entityTypeBuilder As IConventionEntityTypeBuilder, schema As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetSchema : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetSchema (entityTypeBuilder, schema, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static bool CanSetSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="schema">The schema of the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the schema of the table name can be set for this entity type
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetSqlQuery">
      <MemberSignature Language="C#" Value="public static bool CanSetSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetSqlQuery(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetSqlQuery (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetSqlQuery : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetSqlQuery (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static bool CanSetSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The SQL query that will provide the underlying data for the entity type.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the query SQL string can be set for this entity type
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetTable">
      <MemberSignature Language="C#" Value="public static bool CanSetTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetTable(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetTable (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetTable : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetTable (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static bool CanSetTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the table name can be set for this entity type
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetView">
      <MemberSignature Language="C#" Value="public static bool CanSetView (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetView(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetView(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetView (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetView : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetView (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static bool CanSetView (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the view name can be set for this entity type
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetViewSchema">
      <MemberSignature Language="C#" Value="public static bool CanSetViewSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetViewSchema(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetViewSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetViewSchema (entityTypeBuilder As IConventionEntityTypeBuilder, schema As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetViewSchema : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetViewSchema (entityTypeBuilder, schema, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static bool CanSetViewSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="schema">The schema of the view.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Returns a value indicating whether the schema of the view can be set for this entity type
                using the specified configuration source.
            </summary>
        <returns>
          <see langword="true" /> if the configuration can be applied.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder DeleteUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder DeleteUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure (entityTypeBuilder As EntityTypeBuilder, buildAction As Action(Of StoredProcedureBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (entityTypeBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder? DeleteUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder DeleteUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure (entityTypeBuilder As IConventionEntityTypeBuilder, Optional fromDataAnnotation As Boolean = false) As IConventionStoredProcedureBuilder" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (entityTypeBuilder, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>
                The builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder DeleteUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder DeleteUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure (ownedNavigationBuilder As OwnedNavigationBuilder, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (ownedNavigationBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder DeleteUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder DeleteUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure (entityTypeBuilder As EntityTypeBuilder, name As String, buildAction As Action(Of StoredProcedureBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder DeleteUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder DeleteUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder DeleteUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder DeleteUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure (entityTypeBuilder As EntityTypeBuilder, name As String, schema As String, buildAction As Action(Of StoredProcedureBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder DeleteUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder DeleteUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, schema As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; DeleteUsingStoredProcedure&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; DeleteUsingStoredProcedure&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), buildAction As Action(Of StoredProcedureBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (entityTypeBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; DeleteUsingStoredProcedure&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; DeleteUsingStoredProcedure&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, buildAction As Action(Of StoredProcedureBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; DeleteUsingStoredProcedure&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; DeleteUsingStoredProcedure&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String, buildAction As Action(Of StoredProcedureBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; DeleteUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; DeleteUsingStoredProcedure&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), buildAction As Action(Of OwnedNavigationStoredProcedureBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (ownedNavigationBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; DeleteUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; DeleteUsingStoredProcedure&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; DeleteUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; DeleteUsingStoredProcedure&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteUsingStoredProcedure(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, schema As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member DeleteUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.DeleteUsingStoredProcedure (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for deletes when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeTableFromMigrations">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ExcludeTableFromMigrations (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool? excludedFromMigrations, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ExcludeTableFromMigrations(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, valuetype System.Nullable`1&lt;bool&gt; excludedFromMigrations, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ExcludeTableFromMigrations(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExcludeTableFromMigrations (entityTypeBuilder As IConventionEntityTypeBuilder, excludedFromMigrations As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ExcludeTableFromMigrations : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ExcludeTableFromMigrations (entityTypeBuilder, excludedFromMigrations, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ExcludeTableFromMigrations (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool? excludedFromMigrations, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="excludedFromMigrations" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="excludedFromMigrations">A value indicating whether the table should be managed by migrations.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Mark the table that this entity type is mapped to as excluded from migrations.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-migrations">Database migrations</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string sql);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint (entityTypeBuilder As EntityTypeBuilder, name As String, sql As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (entityTypeBuilder, name, sql)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string? sql);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The entity type builder.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
        <returns>A builder to further configure the entity type.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder HasCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string? sql);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder HasCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, sql As String) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (ownedNavigationBuilder, name, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The navigation builder for the owned type.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
        <returns>A builder to further configure the navigation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string sql, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string sql, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint (entityTypeBuilder As EntityTypeBuilder, name As String, sql As String, buildAction As Action(Of CheckConstraintBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (entityTypeBuilder, name, sql, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The entity type builder.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <param name="buildAction">An action that performs configuration of the check constraint.</param>
        <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
        <returns>A builder to further configure the entity type.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder HasCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder HasCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, sql As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (entityTypeBuilder, name, sql, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder? HasCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string? sql, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder HasCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string sql, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, sql As String, Optional fromDataAnnotation As Boolean = false) As IConventionCheckConstraintBuilder" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (entityTypeBuilder, name, sql, fromDataAnnotation)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionCheckConstraintBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The entity type builder.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
        <returns>
                The same builder instance if the check constraint was configured,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCheckConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder HasCheckConstraint (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string sql, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder HasCheckConstraint(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string sql, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, sql As String, buildAction As Action(Of CheckConstraintBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (ownedNavigationBuilder, name, sql, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The navigation builder for the owned type.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <param name="buildAction">An action that performs configuration of the check constraint.</param>
        <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
        <returns>A builder to further configure the navigation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCheckConstraint&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasCheckConstraint&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string sql) where TEntity : class;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; HasCheckConstraint&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, sql As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (entityTypeBuilder, name, sql)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasCheckConstraint&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string? sql) where TEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The entity type builder.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
        <returns>A builder to further configure the entity type.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCheckConstraint&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasCheckConstraint&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string sql, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; HasCheckConstraint&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string sql, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, sql As String, buildAction As Action(Of CheckConstraintBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (entityTypeBuilder, name, sql, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The entity type builder.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <param name="buildAction">An action that performs configuration of the check constraint.</param>
        <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
        <returns>A builder to further configure the entity type.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCheckConstraint&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; HasCheckConstraint&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string? sql) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; HasCheckConstraint&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, sql As String) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (ownedNavigationBuilder, name, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The navigation builder for the owned type.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
        <returns>A builder to further configure the navigation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCheckConstraint&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; HasCheckConstraint&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string sql, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; HasCheckConstraint&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string sql, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasCheckConstraint(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, sql As String, buildAction As Action(Of CheckConstraintBuilder)) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member HasCheckConstraint : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint (ownedNavigationBuilder, name, sql, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasCheckConstraint()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sql" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.CheckConstraintBuilder&gt;" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The navigation builder for the owned type.</param>
        <param name="name">The name of the check constraint.</param>
        <param name="sql">The logical constraint sql used in the check constraint.</param>
        <param name="buildAction">An action that performs configuration of the check constraint.</param>
        <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
        <returns>A builder to further configure the navigation.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-check-constraints">Database check constraints</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasComment">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasComment (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string comment);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasComment(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string comment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasComment(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasComment (entityTypeBuilder As EntityTypeBuilder, comment As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member HasComment : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasComment (entityTypeBuilder, comment)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder HasComment (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string? comment);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasComment()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasComment()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="comment" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="comment">The comment for the table.</param>
        <summary>
                Configures a comment to be applied to the table
            </summary>
        <returns>A builder to further configure the entity type.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasComment">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder HasComment (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string comment, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder HasComment(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string comment, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasComment(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasComment (entityTypeBuilder As IConventionEntityTypeBuilder, comment As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member HasComment : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasComment (entityTypeBuilder, comment, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? HasComment (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? comment, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="comment" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="comment">The comment for the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures a comment to be applied to the table
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasComment&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasComment&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string comment) where TEntity : class;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; HasComment&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string comment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasComment``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasComment(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), comment As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member HasComment : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasComment (entityTypeBuilder, comment)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; HasComment&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string? comment) where TEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Configure this using ToTable(t =&gt; t.HasComment()) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Configure this using ToTable(t =&gt; t.HasComment()) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="comment" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The entity type builder.</param>
        <param name="comment">The comment for the table.</param>
        <summary>
                Configures a comment to be applied to the table
            </summary>
        <returns>A builder to further configure the entity type.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator (entityTypeBuilder As EntityTypeBuilder) As DiscriminatorBuilder" />
      <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator entityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
        <summary>
                Configures the discriminator column used to identify which entity type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        <returns> A builder that allows the discriminator column to be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Type discriminatorType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder HasDiscriminator(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Type discriminatorType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator (entityTypeBuilder As EntityTypeBuilder, name As String, discriminatorType As Type) As DiscriminatorBuilder" />
      <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator (entityTypeBuilder, name, discriminatorType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="discriminatorType" Type="System.Type" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
        <param name="name"> The name of the discriminator column. </param>
        <param name="discriminatorType"> The type of values stored in the discriminator column. </param>
        <summary>
                Configures the discriminator column used to identify which entity type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        <returns> A builder that allows the discriminator column to be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator&lt;TDiscriminator&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1&lt;!!TDiscriminator&gt; HasDiscriminator&lt;TDiscriminator&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator(Of TDiscriminator) (entityTypeBuilder As EntityTypeBuilder, name As String) As DiscriminatorBuilder(Of TDiscriminator)" />
      <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;'Discriminator&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator (entityTypeBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDiscriminator" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TDiscriminator"> The type of values stored in the discriminator column. </typeparam>
        <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
        <param name="name"> The name of the discriminator column. </param>
        <summary>
                Configures the discriminator column used to identify which entity type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        <returns> A builder that allows the discriminator column to be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDiscriminator&lt;TEntity,TDiscriminator&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt; HasDiscriminator&lt;TEntity,TDiscriminator&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,TDiscriminator&gt;&gt; propertyExpression) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1&lt;!!TDiscriminator&gt; HasDiscriminator&lt;class TEntity, TDiscriminator&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, !!TDiscriminator&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasDiscriminator(Of TEntity As Class, TDiscriminator As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), propertyExpression As Expression(Of Func(Of TEntity, TDiscriminator))) As DiscriminatorBuilder(Of TDiscriminator)" />
      <MemberSignature Language="F#" Value="static member HasDiscriminator : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, 'Discriminator&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;'Discriminator&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator (entityTypeBuilder, propertyExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder&lt;TDiscriminator&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDiscriminator" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,TDiscriminator&gt;&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type being configured. </typeparam>
        <typeparam name="TDiscriminator"> The type of values stored in the discriminator column. </typeparam>
        <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
        <param name="propertyExpression">
                A lambda expression representing the property to be used as the discriminator (
                <c>blog =&gt; blog.Discriminator</c>).
            </param>
        <summary>
                Configures the discriminator column used to identify which entity type each row in a table represents
                when an inheritance hierarchy is mapped to a single table in a relational database.
            </summary>
        <returns> A builder that allows the discriminator column to be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasJsonPropertyName">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? HasJsonPropertyName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder HasJsonPropertyName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasJsonPropertyName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasJsonPropertyName (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member HasJsonPropertyName : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasJsonPropertyName (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">JSON property name to be used.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the entity mapped to a JSON column, mapping it to the given JSON property,
                rather than using the navigation name leading to it.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder InsertUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder InsertUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure (entityTypeBuilder As EntityTypeBuilder, buildAction As Action(Of StoredProcedureBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (entityTypeBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder? InsertUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder InsertUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure (entityTypeBuilder As IConventionEntityTypeBuilder, Optional fromDataAnnotation As Boolean = false) As IConventionStoredProcedureBuilder" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (entityTypeBuilder, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>
                The builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder InsertUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder InsertUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure (ownedNavigationBuilder As OwnedNavigationBuilder, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (ownedNavigationBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder InsertUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder InsertUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure (entityTypeBuilder As EntityTypeBuilder, name As String, buildAction As Action(Of StoredProcedureBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder InsertUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder InsertUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder InsertUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder InsertUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure (entityTypeBuilder As EntityTypeBuilder, name As String, schema As String, buildAction As Action(Of StoredProcedureBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder InsertUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder InsertUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, schema As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; InsertUsingStoredProcedure&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; InsertUsingStoredProcedure&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), buildAction As Action(Of StoredProcedureBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (entityTypeBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; InsertUsingStoredProcedure&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; InsertUsingStoredProcedure&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, buildAction As Action(Of StoredProcedureBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; InsertUsingStoredProcedure&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; InsertUsingStoredProcedure&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String, buildAction As Action(Of StoredProcedureBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; InsertUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; InsertUsingStoredProcedure&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), buildAction As Action(Of OwnedNavigationStoredProcedureBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (ownedNavigationBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; InsertUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; InsertUsingStoredProcedure&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; InsertUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; InsertUsingStoredProcedure&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InsertUsingStoredProcedure(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, schema As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member InsertUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.InsertUsingStoredProcedure (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for inserts when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder SplitToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder SplitToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToTable (entityTypeBuilder As EntityTypeBuilder, name As String, buildAction As Action(Of SplitTableBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member SplitToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different table.
                The primary key properties are mapped to all tables, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder SplitToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder SplitToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToTable (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, buildAction As Action(Of OwnedNavigationSplitTableBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member SplitToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different table.
                The primary key properties are mapped to all tables, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder SplitToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder SplitToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToTable (entityTypeBuilder As EntityTypeBuilder, name As String, schema As String, buildAction As Action(Of SplitTableBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member SplitToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different table.
                The primary key properties are mapped to all tables, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder SplitToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder SplitToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToTable (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, schema As String, buildAction As Action(Of OwnedNavigationSplitTableBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member SplitToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different table.
                The primary key properties are mapped to all tables, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; SplitToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; SplitToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, buildAction As Action(Of SplitTableBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member SplitToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;TEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different table.
                The primary key properties are mapped to all tables, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; SplitToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; SplitToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String, buildAction As Action(Of SplitTableBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member SplitToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder&lt;TEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different table.
                The primary key properties are mapped to all tables, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToTable&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; SplitToTable&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; SplitToTable&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToTable(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, buildAction As Action(Of OwnedNavigationSplitTableBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member SplitToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different table.
                The primary key properties are mapped to all tables, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToTable&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; SplitToTable&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; SplitToTable&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToTable(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, schema As String, buildAction As Action(Of OwnedNavigationSplitTableBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member SplitToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToTable (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different table.
                The primary key properties are mapped to all tables, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder SplitToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder SplitToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToView (entityTypeBuilder As EntityTypeBuilder, name As String, buildAction As Action(Of SplitViewBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member SplitToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different view.
                The primary key properties are mapped to all views, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder SplitToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder SplitToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToView (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, buildAction As Action(Of OwnedNavigationSplitViewBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member SplitToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different view.
                The primary key properties are mapped to all views, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder SplitToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder SplitToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToView (entityTypeBuilder As EntityTypeBuilder, name As String, schema As String, buildAction As Action(Of SplitViewBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member SplitToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different view.
                The primary key properties are mapped to all views, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder SplitToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder SplitToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToView (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, schema As String, buildAction As Action(Of OwnedNavigationSplitViewBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member SplitToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different view.
                The primary key properties are mapped to all views, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToView&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; SplitToView&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; SplitToView&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToView(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, buildAction As Action(Of SplitViewBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member SplitToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&lt;TEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different view.
                The primary key properties are mapped to all views, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToView&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; SplitToView&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; SplitToView&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToView(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String, buildAction As Action(Of SplitViewBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member SplitToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.SplitViewBuilder&lt;TEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different view.
                The primary key properties are mapped to all views, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToView&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; SplitToView&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; SplitToView&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToView(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, buildAction As Action(Of OwnedNavigationSplitViewBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member SplitToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different view.
                The primary key properties are mapped to all views, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitToView&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; SplitToView&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; SplitToView&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitToView(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, schema As String, buildAction As Action(Of OwnedNavigationSplitViewBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member SplitToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.SplitToView (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationSplitViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures some of the properties on this entity type to be mapped to a different view.
                The primary key properties are mapped to all views, other properties must be explicitly mapped.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, System.Reflection.MethodInfo? function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, class System.Reflection.MethodInfo function) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (entityTypeBuilder As EntityTypeBuilder, function As MethodInfo) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * System.Reflection.MethodInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, function)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The function configuration builder.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (entityTypeBuilder As EntityTypeBuilder, name As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, name)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string? name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The function configuration builder.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, System.Reflection.MethodInfo? function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, class System.Reflection.MethodInfo function) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (ownedNavigationBuilder As OwnedNavigationBuilder, function As MethodInfo) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * System.Reflection.MethodInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, function)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The function configuration builder.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (ownedNavigationBuilder As OwnedNavigationBuilder, name As String) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, name)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string? name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The function configuration builder.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, System.Reflection.MethodInfo function, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, class System.Reflection.MethodInfo function, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (entityTypeBuilder As EntityTypeBuilder, function As MethodInfo, configureFunction As Action(Of TableValuedFunctionBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * System.Reflection.MethodInfo * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, function, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (entityTypeBuilder As EntityTypeBuilder, name As String, configureFunction As Action(Of TableValuedFunctionBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, name, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, System.Reflection.MethodInfo? function, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, class System.Reflection.MethodInfo function, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (entityTypeBuilder As IConventionEntityTypeBuilder, function As MethodInfo, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * System.Reflection.MethodInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, function, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, System.Reflection.MethodInfo function, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&gt; configureFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, class System.Reflection.MethodInfo function, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (ownedNavigationBuilder As OwnedNavigationBuilder, function As MethodInfo, configureFunction As Action(Of OwnedNavigationTableValuedFunctionBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * System.Reflection.MethodInfo * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, function, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, System.Reflection.MethodInfo function, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, class System.Reflection.MethodInfo function, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (ownedNavigationBuilder As OwnedNavigationBuilder, function As MethodInfo, configureFunction As Action(Of TableValuedFunctionBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * System.Reflection.MethodInfo * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, function, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&gt; configureFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, configureFunction As Action(Of OwnedNavigationTableValuedFunctionBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, name, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToFunction(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, configureFunction As Action(Of TableValuedFunctionBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, name, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToFunction&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, System.Reflection.MethodInfo? function) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToFunction&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, class System.Reflection.MethodInfo function) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), function As MethodInfo) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * System.Reflection.MethodInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, function)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The function configuration builder.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToFunction&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name) where TEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToFunction&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, name)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToFunction&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string? name) where TEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The function configuration builder.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToFunction&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, System.Reflection.MethodInfo function, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&lt;TEntity&gt;&gt; configureFunction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToFunction&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, class System.Reflection.MethodInfo function, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder`1&lt;!!TEntity&gt;&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), function As MethodInfo, configureFunction As Action(Of TableValuedFunctionBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * System.Reflection.MethodInfo * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, function, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&lt;TEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToFunction&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, System.Reflection.MethodInfo function, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToFunction&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, class System.Reflection.MethodInfo function, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), function As MethodInfo, configureFunction As Action(Of TableValuedFunctionBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * System.Reflection.MethodInfo * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, function, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToFunction&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&lt;TEntity&gt;&gt; configureFunction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToFunction&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder`1&lt;!!TEntity&gt;&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, configureFunction As Action(Of TableValuedFunctionBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, name, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&lt;TEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToFunction&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToFunction&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, configureFunction As Action(Of TableValuedFunctionBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (entityTypeBuilder, name, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToFunction&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, System.Reflection.MethodInfo? function) where TOwnerEntity : class where TDependentEntity : class;" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToFunction&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, class System.Reflection.MethodInfo function) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.Reflection.MethodInfo)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), function As MethodInfo) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * System.Reflection.MethodInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, function)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity" Index="0" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity" Index="1" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The function configuration builder.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToFunction&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string? name) where TOwnerEntity : class where TDependentEntity : class;" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToFunction&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, name)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity" Index="0" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity" Index="1" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The function configuration builder.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToFunction&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, System.Reflection.MethodInfo function, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; configureFunction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToFunction&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, class System.Reflection.MethodInfo function, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), function As MethodInfo, configureFunction As Action(Of OwnedNavigationTableValuedFunctionBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * System.Reflection.MethodInfo * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, function, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToFunction&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; configureFunction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToFunction&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, configureFunction As Action(Of OwnedNavigationTableValuedFunctionBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (ownedNavigationBuilder, name, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableValuedFunctionBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TOwnerEntity,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; ToFunction&lt;TOwnerEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; referenceOwnershipBuilder, System.Reflection.MethodInfo function, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) where TOwnerEntity : class where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; ToFunction&lt;class TOwnerEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, class System.Reflection.MethodInfo function, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TOwnerEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity), function As MethodInfo, configureFunction As Action(Of TableValuedFunctionBuilder)) As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; * System.Reflection.MethodInfo * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; (requires 'OwnerEntity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (referenceOwnershipBuilder, function, configureFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="function" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">To be added.</typeparam>
        <typeparam name="TRelatedEntity">To be added.</typeparam>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="function">The method representing the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFunction&lt;TOwnerEntity,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; ToFunction&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) where TEntity : class where TRelatedEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; ToFunction&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TEntity, TRelatedEntity), name As String, configureFunction As Action(Of TableValuedFunctionBuilder)) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (referenceOwnershipBuilder, name, configureFunction)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; ToFunction&lt;TOwnerEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) where TOwnerEntity : class where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; ToFunction&lt;class TOwnerEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; configureFunction) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFunction(Of TOwnerEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity), name As String, configureFunction As Action(Of TableValuedFunctionBuilder)) As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="static member ToFunction : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; (requires 'OwnerEntity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction (referenceOwnershipBuilder, name, configureFunction)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" Index="0" FrameworkAlternate="efcore-5.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TOwnerEntity" Index="0" FrameworkAlternate="efcore-6.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity" Index="1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="configureFunction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        <typeparam name="TOwnerEntity">To be added.</typeparam>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the function.</param>
        <param name="configureFunction">The function configuration action.</param>
        <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSchema">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToSchema(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSchema (entityTypeBuilder As IConventionEntityTypeBuilder, schema As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToSchema : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSchema (entityTypeBuilder, schema, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ToSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="schema">The schema of the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the schema of the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSqlQuery">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string query);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToSqlQuery(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSqlQuery(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSqlQuery (entityTypeBuilder As EntityTypeBuilder, query As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToSqlQuery : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSqlQuery (entityTypeBuilder, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="query" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="query">The SQL query that will provide the underlying data for the entity type.</param>
        <summary>
                Configures a SQL string used to provide data for the entity type.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSqlQuery">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToSqlQuery(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSqlQuery(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSqlQuery (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToSqlQuery : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSqlQuery (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ToSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The SQL query that will provide the underlying data for the entity type.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures a SQL string used to provide data for the entity type.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSqlQuery&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToSqlQuery&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string query) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToSqlQuery&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSqlQuery``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToSqlQuery(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), query As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToSqlQuery : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSqlQuery (entityTypeBuilder, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="query" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="query">The SQL query that will provide the underlying data for the entity type.</param>
        <summary>
                Configures a SQL string used to provide data for the entity type.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (entityTypeBuilder As EntityTypeBuilder, buildAction As Action(Of TableBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (entityTypeBuilder As EntityTypeBuilder, name As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string? name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (ownedNavigationBuilder As OwnedNavigationBuilder, buildAction As Action(Of OwnedNavigationTableBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (referenceOwnershipBuilder As OwnedNavigationBuilder, buildAction As Action(Of TableBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt;" Index="1" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string? name);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (ownedNavigationBuilder As OwnedNavigationBuilder, name As String) As OwnedNavigationBuilder" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, name)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (entityTypeBuilder As EntityTypeBuilder, name As String, buildAction As Action(Of TableBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, buildAction)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string? name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (entityTypeBuilder As EntityTypeBuilder, name As String, schema As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, schema)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string? schema);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, buildAction As Action(Of OwnedNavigationTableBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string? name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (referenceOwnershipBuilder As OwnedNavigationBuilder, name As String, buildAction As Action(Of TableBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt;" Index="2" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string name, bool excludedFromMigrations);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string name, bool excludedFromMigrations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (referenceOwnershipBuilder As OwnedNavigationBuilder, name As String, excludedFromMigrations As Boolean) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, excludedFromMigrations)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string? name, bool excludedFromMigrations);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload with an Action parameter")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload with an Action parameter")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="excludedFromMigrations" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="excludedFromMigrations">A value indicating whether the table should be managed by migrations.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string? schema);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, schema As String) As OwnedNavigationBuilder" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, name, schema)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (entityTypeBuilder As EntityTypeBuilder, name As String, schema As String, buildAction As Action(Of TableBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, schema, buildAction)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, schema As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, schema, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, string? schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, schema As String, buildAction As Action(Of OwnedNavigationTableBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (referenceOwnershipBuilder As OwnedNavigationBuilder, name As String, schema As String, buildAction As Action(Of TableBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt;" Index="3" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string name, string schema, bool excludedFromMigrations);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string name, string schema, bool excludedFromMigrations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable (referenceOwnershipBuilder As OwnedNavigationBuilder, name As String, schema As String, excludedFromMigrations As Boolean) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, schema, excludedFromMigrations)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToTable (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder referenceOwnershipBuilder, string? name, string? schema, bool excludedFromMigrations);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload with an Action parameter")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload with an Action parameter")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="excludedFromMigrations" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="excludedFromMigrations">A value indicating whether the table should be managed by migrations.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), buildAction As Action(Of TableBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name) where TEntity : class;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string? name) where TEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, buildAction As Action(Of TableBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, buildAction)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string? name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, buildAction As Action(Of TableBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt;" Index="2" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type being configured. </typeparam>
        <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
        <param name="name"> The name of the table. </param>
        <param name="buildAction"> An action that performs configuration of the table. </param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string schema) where TEntity : class;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, schema)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string? schema) where TEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String, buildAction As Action(Of TableBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, schema, buildAction)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToTable&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToTable&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String, buildAction As Action(Of TableBuilder)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&gt;" Index="3" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type being configured. </typeparam>
        <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
        <param name="name"> The name of the table. </param>
        <param name="schema"> The schema of the table. </param>
        <param name="buildAction"> An action that performs configuration of the table. </param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToTable&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToTable&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), buildAction As Action(Of OwnedNavigationTableBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToTable&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string? name) where TOwnerEntity : class where TDependentEntity : class;" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToTable&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, name)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity" Index="0" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity" Index="1" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToTable&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToTable&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, buildAction As Action(Of OwnedNavigationTableBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToTable&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string? schema) where TOwnerEntity : class where TDependentEntity : class;" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToTable&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string schema) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, schema As String) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, name, schema)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity" Index="0" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity" Index="1" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToTable&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToTable&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, schema As String, buildAction As Action(Of OwnedNavigationTableBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; ToTable&lt;TOwnerEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; referenceOwnershipBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TRelatedEntity&gt;&gt; buildAction) where TOwnerEntity : class where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; ToTable&lt;class TOwnerEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1&lt;!!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity), buildAction As Action(Of TableBuilder(Of TRelatedEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; (requires 'OwnerEntity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TRelatedEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">To be added.</typeparam>
        <typeparam name="TRelatedEntity">To be added.</typeparam>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; ToTable&lt;TOwnerEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string? name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TRelatedEntity&gt;&gt; buildAction) where TOwnerEntity : class where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; ToTable&lt;class TOwnerEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1&lt;!!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity), name As String, buildAction As Action(Of TableBuilder(Of TRelatedEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; (requires 'OwnerEntity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TRelatedEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">To be added.</typeparam>
        <typeparam name="TRelatedEntity">To be added.</typeparam>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; ToTable&lt;TOwnerEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TRelatedEntity&gt;&gt; buildAction) where TOwnerEntity : class where TRelatedEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; ToTable&lt;class TOwnerEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1&lt;!!TRelatedEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity), name As String, schema As String, buildAction As Action(Of TableBuilder(Of TRelatedEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity)" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;'RelatedEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; (requires 'OwnerEntity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder&lt;TRelatedEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">To be added.</typeparam>
        <typeparam name="TRelatedEntity">To be added.</typeparam>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="buildAction">An action that performs configuration of the table.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; ToTable&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string name, bool excludedFromMigrations) where TEntity : class where TRelatedEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; ToTable&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name, bool excludedFromMigrations) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TEntity, TRelatedEntity), name As String, excludedFromMigrations As Boolean) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, excludedFromMigrations)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; ToTable&lt;TOwnerEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string? name, bool excludedFromMigrations) where TOwnerEntity : class where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; ToTable&lt;class TOwnerEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name, bool excludedFromMigrations) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity), name As String, excludedFromMigrations As Boolean) As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; (requires 'OwnerEntity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, excludedFromMigrations)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload with an Action parameter")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload with an Action parameter")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" Index="0" FrameworkAlternate="efcore-5.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TOwnerEntity" Index="0" FrameworkAlternate="efcore-6.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity" Index="1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="excludedFromMigrations" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        <typeparam name="TOwnerEntity">To be added.</typeparam>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="excludedFromMigrations">A value indicating whether the table should be managed by migrations.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable&lt;TOwnerEntity,TRelatedEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; ToTable&lt;TEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string name, string schema, bool excludedFromMigrations) where TEntity : class where TRelatedEntity : class;" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; ToTable&lt;class TEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name, string schema, bool excludedFromMigrations) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TEntity, TRelatedEntity), name As String, schema As String, excludedFromMigrations As Boolean) As OwnedNavigationBuilder(Of TEntity, TRelatedEntity)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'Entity, 'RelatedEntity (requires 'Entity : null and 'RelatedEntity : null)&gt; (requires 'Entity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, schema, excludedFromMigrations)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; ToTable&lt;TOwnerEntity,TRelatedEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt; referenceOwnershipBuilder, string? name, string? schema, bool excludedFromMigrations) where TOwnerEntity : class where TRelatedEntity : class;" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; ToTable&lt;class TOwnerEntity, class TRelatedEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TRelatedEntity&gt; referenceOwnershipBuilder, string name, string schema, bool excludedFromMigrations) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTable(Of TOwnerEntity As Class, TRelatedEntity As Class) (referenceOwnershipBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity), name As String, schema As String, excludedFromMigrations As Boolean) As OwnedNavigationBuilder(Of TOwnerEntity, TRelatedEntity)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="static member ToTable : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'RelatedEntity (requires 'OwnerEntity : null and 'RelatedEntity : null)&gt; (requires 'OwnerEntity : null and 'RelatedEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable (referenceOwnershipBuilder, name, schema, excludedFromMigrations)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload with an Action parameter")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload with an Action parameter")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TEntity,TRelatedEntity&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-6.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" Index="0" FrameworkAlternate="efcore-5.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TOwnerEntity" Index="0" FrameworkAlternate="efcore-6.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TRelatedEntity" Index="1">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="referenceOwnershipBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TRelatedEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="excludedFromMigrations" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
        <typeparam name="TOwnerEntity">To be added.</typeparam>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="referenceOwnershipBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <param name="excludedFromMigrations">A value indicating whether the table should be managed by migrations.</param>
        <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (entityTypeBuilder As EntityTypeBuilder, name As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string? name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string? name);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (ownedNavigationBuilder As OwnedNavigationBuilder, name As String) As OwnedNavigationBuilder" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (ownedNavigationBuilder, name)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (entityTypeBuilder As EntityTypeBuilder, name As String, buildAction As Action(Of ViewBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (entityTypeBuilder As EntityTypeBuilder, name As String, schema As String) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name, schema)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string? name, string? schema);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, buildAction As Action(Of OwnedNavigationViewBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string? name, string? schema);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, schema As String) As OwnedNavigationBuilder" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (ownedNavigationBuilder, name, schema)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (entityTypeBuilder As EntityTypeBuilder, name As String, schema As String, buildAction As Action(Of ViewBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string name, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (entityTypeBuilder As IConventionEntityTypeBuilder, name As String, schema As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name, schema, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? name, string? schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToView (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ToView(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, schema As String, buildAction As Action(Of OwnedNavigationViewBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToView&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string? name) where TEntity : class;" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToView&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name) cil managed" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String) As EntityTypeBuilder(Of TEntity)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToView&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToView&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, buildAction As Action(Of ViewBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&lt;TEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToView&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string schema) where TEntity : class;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToView&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name, schema)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToView&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string? name, string? schema) where TEntity : class;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; ToView&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; ToView&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String, buildAction As Action(Of ViewBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.ViewBuilder&lt;TEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToView&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string? name) where TOwnerEntity : class where TDependentEntity : class;" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToView&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (ownedNavigationBuilder, name)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity" Index="0" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity" Index="1" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToView&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToView&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, buildAction As Action(Of OwnedNavigationViewBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToView&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string? name, string? schema) where TOwnerEntity : class where TDependentEntity : class;" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToView&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string schema) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, schema As String) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (ownedNavigationBuilder, name, schema)" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity" Index="0" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity" Index="1" FrameworkAlternate="efcore-8.0">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" Index="0" FrameworkAlternate="efcore-8.0" RefType="this" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToView&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ToView&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ToView&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToView(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, schema As String, buildAction As Action(Of OwnedNavigationViewBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member ToView : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationViewBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <param name="buildAction">An action that performs configuration of the view.</param>
        <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToViewSchema">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToViewSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ToViewSchema(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToViewSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToViewSchema (entityTypeBuilder As IConventionEntityTypeBuilder, schema As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member ToViewSchema : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToViewSchema (entityTypeBuilder, schema, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ToViewSchema (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? schema, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="schema">The schema of the view.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the schema of the view that the entity type maps to when targeting a relational database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UpdateUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UpdateUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure (entityTypeBuilder As EntityTypeBuilder, buildAction As Action(Of StoredProcedureBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (entityTypeBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder? UpdateUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder UpdateUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure (entityTypeBuilder As IConventionEntityTypeBuilder, Optional fromDataAnnotation As Boolean = false) As IConventionStoredProcedureBuilder" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (entityTypeBuilder, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionStoredProcedureBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>
                The builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder UpdateUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder UpdateUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure (ownedNavigationBuilder As OwnedNavigationBuilder, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (ownedNavigationBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UpdateUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UpdateUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure (entityTypeBuilder As EntityTypeBuilder, name As String, buildAction As Action(Of StoredProcedureBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder UpdateUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder UpdateUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UpdateUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UpdateUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure (entityTypeBuilder As EntityTypeBuilder, name As String, schema As String, buildAction As Action(Of StoredProcedureBuilder)) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder UpdateUsingStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder UpdateUsingStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure (ownedNavigationBuilder As OwnedNavigationBuilder, name As String, schema As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder)) As OwnedNavigationBuilder" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; UpdateUsingStoredProcedure&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; UpdateUsingStoredProcedure&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), buildAction As Action(Of StoredProcedureBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (entityTypeBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; UpdateUsingStoredProcedure&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; UpdateUsingStoredProcedure&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, buildAction As Action(Of StoredProcedureBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (entityTypeBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; UpdateUsingStoredProcedure&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt; buildAction) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; UpdateUsingStoredProcedure&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder`1&lt;!!TEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String, buildAction As Action(Of StoredProcedureBuilder(Of TEntity))) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;'Entity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (entityTypeBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.StoredProcedureBuilder&lt;TEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">The entity type being configured.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; UpdateUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; UpdateUsingStoredProcedure&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), buildAction As Action(Of OwnedNavigationStoredProcedureBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (ownedNavigationBuilder, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; UpdateUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; UpdateUsingStoredProcedure&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (ownedNavigationBuilder, name, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; UpdateUsingStoredProcedure&lt;TOwnerEntity,TDependentEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt; ownedNavigationBuilder, string name, string? schema, Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt; buildAction) where TOwnerEntity : class where TDependentEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; UpdateUsingStoredProcedure&lt;class TOwnerEntity, class TDependentEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt; ownedNavigationBuilder, string name, string schema, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder`2&lt;!!TOwnerEntity, !!TDependentEntity&gt;&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpdateUsingStoredProcedure(Of TOwnerEntity As Class, TDependentEntity As Class) (ownedNavigationBuilder As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity), name As String, schema As String, buildAction As Action(Of OwnedNavigationStoredProcedureBuilder(Of TOwnerEntity, TDependentEntity))) As OwnedNavigationBuilder(Of TOwnerEntity, TDependentEntity)" />
      <MemberSignature Language="F#" Value="static member UpdateUsingStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; * string * string * Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;'OwnerEntity, 'DependentEntity&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;'OwnerEntity, 'DependentEntity (requires 'OwnerEntity : null and 'DependentEntity : null)&gt; (requires 'OwnerEntity : null and 'DependentEntity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UpdateUsingStoredProcedure (ownedNavigationBuilder, name, schema, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOwnerEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TDependentEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ownedNavigationBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder&lt;TOwnerEntity,TDependentEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="buildAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationStoredProcedureBuilder&lt;TOwnerEntity,TDependentEntity&gt;&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
        <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        <param name="ownedNavigationBuilder">The builder for the entity type being configured.</param>
        <param name="name">The name of the stored procedure in the database.</param>
        <param name="schema">The schema of the stored procedure in the database.</param>
        <param name="buildAction">An action that performs configuration of the stored procedure.</param>
        <summary>
                Configures the stored procedure that the entity type uses for updates when targeting a relational database.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> and
                <see href="https://aka.ms/efcore-docs-saving-data">Saving data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseMappingStrategy">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? UseMappingStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string? strategy, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder UseMappingStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, string strategy, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseMappingStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseMappingStrategy (entityTypeBuilder As IConventionEntityTypeBuilder, strategy As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member UseMappingStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseMappingStrategy (entityTypeBuilder, strategy, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="strategy" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <param name="strategy">The mapping strategy for the derived types.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the hierarchy mapping strategy.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-inheritance">Entity type hierarchy mapping</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTpcMappingStrategy">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UseTpcMappingStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UseTpcMappingStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTpcMappingStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTpcMappingStrategy (entityTypeBuilder As EntityTypeBuilder) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member UseTpcMappingStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTpcMappingStrategy entityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <summary>
                Configures TPC as the mapping strategy for the derived types. Each type will be mapped to a different database object.
                All properties will be mapped to columns on the corresponding object.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-inheritance">Entity type hierarchy mapping</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTpcMappingStrategy&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; UseTpcMappingStrategy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; UseTpcMappingStrategy&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTpcMappingStrategy``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTpcMappingStrategy(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member UseTpcMappingStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTpcMappingStrategy entityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <summary>
                Configures TPC as the mapping strategy for the derived types. Each type will be mapped to a different database object.
                All properties will be mapped to columns on the corresponding object.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-inheritance">Entity type hierarchy mapping</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTphMappingStrategy">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UseTphMappingStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UseTphMappingStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTphMappingStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTphMappingStrategy (entityTypeBuilder As EntityTypeBuilder) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member UseTphMappingStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTphMappingStrategy entityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <summary>
                Configures TPH as the mapping strategy for the derived types. All types will be mapped to the same database object.
                This is the default mapping strategy.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-inheritance">Entity type hierarchy mapping</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTphMappingStrategy&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; UseTphMappingStrategy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; UseTphMappingStrategy&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTphMappingStrategy``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTphMappingStrategy(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member UseTphMappingStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTphMappingStrategy entityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <summary>
                Configures TPH as the mapping strategy for the derived types. All types will be mapped to the same database object.
                This is the default mapping strategy.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-inheritance">Entity type hierarchy mapping</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTptMappingStrategy">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UseTptMappingStrategy (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder UseTptMappingStrategy(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTptMappingStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTptMappingStrategy (entityTypeBuilder As EntityTypeBuilder) As EntityTypeBuilder" />
      <MemberSignature Language="F#" Value="static member UseTptMappingStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTptMappingStrategy entityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <summary>
                Configures TPT as the mapping strategy for the derived types. Each type will be mapped to a different database object.
                Only the declared properties will be mapped to columns on the corresponding object.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-inheritance">Entity type hierarchy mapping</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTptMappingStrategy&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; UseTptMappingStrategy&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt; entityTypeBuilder) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; UseTptMappingStrategy&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1&lt;!!TEntity&gt; entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTptMappingStrategy``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTptMappingStrategy(Of TEntity As Class) (entityTypeBuilder As EntityTypeBuilder(Of TEntity)) As EntityTypeBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member UseTptMappingStrategy : Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.UseTptMappingStrategy entityTypeBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
        <summary>
                Configures TPT as the mapping strategy for the derived types. Each type will be mapped to a different database object.
                Only the declared properties will be mapped to columns on the corresponding object.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-inheritance">Entity type hierarchy mapping</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
