<Type Name="DbSet&lt;TEntity&gt;" FullName="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;">
  <TypeSignature Language="C#" Value="public abstract class DbSet&lt;TEntity&gt; : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;, Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.Linq.IQueryable&lt;TEntity&gt; where TEntity : class" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbSet`1&lt;class TEntity&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;, class Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.DbSet`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbSet(Of TEntity)&#xA;Implements IAsyncEnumerableAccessor(Of TEntity), IEnumerable(Of TEntity), IInfrastructure(Of IServiceProvider), IQueryable(Of TEntity)" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="F#" Value="type DbSet&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&#xA;    interface IAsyncEnumerableAccessor&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IInfrastructure&lt;IServiceProvider&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="C#" Value="public abstract class DbSet&lt;TEntity&gt; : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;, Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Linq.IQueryable&lt;TEntity&gt; where TEntity : class" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbSet`1&lt;class TEntity&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;, class Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbSet(Of TEntity)&#xA;Implements IAsyncEnumerableAccessor(Of TEntity), IEnumerable(Of TEntity), IInfrastructure(Of IServiceProvider), IListSource, IQueryable(Of TEntity)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type DbSet&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&#xA;    interface IAsyncEnumerableAccessor&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IInfrastructure&lt;IServiceProvider&gt;&#xA;    interface IListSource" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public abstract class DbSet&lt;TEntity&gt; : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;, System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Linq.IQueryable&lt;TEntity&gt; where TEntity : class" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbSet`1&lt;class TEntity&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;, class System.Collections.Generic.IAsyncEnumerable`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbSet(Of TEntity)&#xA;Implements IAsyncEnumerable(Of TEntity), IEnumerable(Of TEntity), IInfrastructure(Of IServiceProvider), IListSource, IQueryable(Of TEntity)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type DbSet&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&#xA;    interface IAsyncEnumerable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IInfrastructure&lt;IServiceProvider&gt;&#xA;    interface IListSource" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="C#" Value="public abstract class DbSet&lt;TEntity&gt; : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Linq.IQueryable&lt;TEntity&gt; where TEntity : class" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbSet`1&lt;class TEntity&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbSet(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IInfrastructure(Of IServiceProvider), IListSource, IQueryable(Of TEntity)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type DbSet&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&#xA;    interface IInfrastructure&lt;IServiceProvider&gt;&#xA;    interface IListSource" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">
      <InterfaceName>System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">The type of entity being operated on by this set.</typeparam>
    <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> can be used to query and save instances of <typeparamref name="TEntity" />.
                LINQ queries against a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> will be translated into queries against the database.
            </summary>
    <remarks>
      <para>
                    The results of a LINQ query against a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> will contain the results
                    returned from the database and may not reflect changes made in the context that have not
                    been persisted to the database. For example, the results will not contain newly added entities
                    and may still contain entities that are marked for deletion.
                </para>
      <para>
                    Depending on the database being used, some parts of a LINQ query against a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />
                    may be evaluated in memory rather than being translated into a database query.
                </para>
      <para>
        <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> objects are usually obtained from a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />
                    property on a derived <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or from the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.Set``1" />
                    method.
                </para>
      <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see> for more information
                    and examples.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext">DbContext lifetime, configuration, and initialization</see>,
                    <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see>, and
                    <see href="https://aka.ms/efcore-docs-change-tracking">Changing tracking</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Add (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; Add(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.Add : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.Add entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">The entity to add.</param>
        <summary>
                Begins tracking the given entity, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>
          <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> to set the state of only a single entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt; AddAsync (TEntity entity, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt;&gt; AddAsync(!TEntity entity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.AddAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddAsync (entity As TEntity, Optional cancellationToken As CancellationToken = Nothing) As Task(Of EntityEntry(Of TEntity))" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member AddAsync : 'Entity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;&#xA;override this.AddAsync : 'Entity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;" Usage="dbSet.AddAsync (entity, cancellationToken)" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt; AddAsync (TEntity entity, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt;&gt; AddAsync(!TEntity entity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddAsync (entity As TEntity, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of EntityEntry(Of TEntity))" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member AddAsync : 'Entity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;&#xA;override this.AddAsync : 'Entity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity&gt;&gt;" Usage="dbSet.AddAsync (entity, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entity">The entity to add.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Begins tracking the given entity, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <returns>
                A task that represents the asynchronous Add operation. The task result contains the
                <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides access to change tracking
                information and operations for the entity.
            </returns>
        <remarks>
          <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
          <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> to set the state of only a single entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (entities As IEnumerable(Of TEntity))" />
      <MemberSignature Language="F#" Value="abstract member AddRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit&#xA;override this.AddRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit" Usage="dbSet.AddRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">The entities to add.</param>
        <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (params TEntity[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(!TEntity[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.AddRange(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (ParamArray entities As TEntity())" />
      <MemberSignature Language="F#" Value="abstract member AddRange : 'Entity[] -&gt; unit&#xA;override this.AddRange : 'Entity[] -&gt; unit" Usage="dbSet.AddRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="TEntity[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities">The entities to add.</param>
        <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRangeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddRangeAsync (params TEntity[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddRangeAsync(!TEntity[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.AddRangeAsync(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddRangeAsync (ParamArray entities As TEntity()) As Task" />
      <MemberSignature Language="F#" Value="abstract member AddRangeAsync : 'Entity[] -&gt; System.Threading.Tasks.Task&#xA;override this.AddRangeAsync : 'Entity[] -&gt; System.Threading.Tasks.Task" Usage="dbSet.AddRangeAsync entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="TEntity[]" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities">The entities to add.</param>
        <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <returns>A task that represents the asynchronous operation.</returns>
        <remarks>
          <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                    and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRangeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddRangeAsync (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddRangeAsync(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddRangeAsync (entities As IEnumerable(Of TEntity), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member AddRangeAsync : seq&lt;'Entity (requires 'Entity : null)&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AddRangeAsync : seq&lt;'Entity (requires 'Entity : null)&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="dbSet.AddRangeAsync (entities, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entities">The entities to add.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Begins tracking the given entities, and any other reachable entities that are
                not already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state such that they will
                be inserted into the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <returns>A task that represents the asynchronous operation.</returns>
        <remarks>
          <para>
                    This method is async only to allow special value generators, such as the one used by
                    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',
                    to access the database asynchronously. For all other cases the non async method should be used.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                    and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                    for more information and examples.
                </para>
        </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsAsyncEnumerable">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt; AsAsyncEnumerable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!TEntity&gt; AsAsyncEnumerable() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.AsAsyncEnumerable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsAsyncEnumerable () As IAsyncEnumerable(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member AsAsyncEnumerable : unit -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.AsAsyncEnumerable : unit -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.AsAsyncEnumerable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns this object typed as <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.
            </summary>
        <returns>This object.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsQueryable">
      <MemberSignature Language="C#" Value="public virtual System.Linq.IQueryable&lt;TEntity&gt; AsQueryable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!TEntity&gt; AsQueryable() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.AsQueryable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsQueryable () As IQueryable(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member AsQueryable : unit -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.AsQueryable : unit -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.AsQueryable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns this object typed as <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
        <returns>This object.</returns>
        <remarks>
          <para>
                    This is a convenience method to help with disambiguation of extension methods in the same
                    namespace that extend both interfaces.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Attach (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Attach : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.Attach : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">The entity to attach.</param>
        <summary>
                Begins tracking the given entity and entries reachable from the given entity using
                the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state by default, but see below for cases
                when a different state will be used.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>
          <para>
                    Generally, no database interaction will be performed until <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. All entities found will be tracked
                    by the context.
                </para>
          <para>
                    For entity types with generated keys if an entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    This helps ensure only new entities will be inserted.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
          <para>
                    For entity types without generated keys, the state set is always <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />.
                </para>
          <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> to set the state of only a single entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachRange">
      <MemberSignature Language="C#" Value="public virtual void AttachRange (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachRange(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.AttachRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AttachRange (entities As IEnumerable(Of TEntity))" />
      <MemberSignature Language="F#" Value="abstract member AttachRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit&#xA;override this.AttachRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit" Usage="dbSet.AttachRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">The entities to attach.</param>
        <summary>
                Begins tracking the given entities and entries reachable from the given entities using
                the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state by default, but see below for cases
                when a different state will be used.
            </summary>
        <remarks>
          <para>
                    Generally, no database interaction will be performed until <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. All entities found will be tracked
                    by the context.
                </para>
          <para>
                    For entity types with generated keys if an entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    This helps ensure only new entities will be inserted.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
          <para>
                    For entity types without generated keys, the state set is always <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />.
                </para>
          <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> to set the state of only a single entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                    and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachRange">
      <MemberSignature Language="C#" Value="public virtual void AttachRange (params TEntity[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachRange(!TEntity[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.AttachRange(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AttachRange (ParamArray entities As TEntity())" />
      <MemberSignature Language="F#" Value="abstract member AttachRange : 'Entity[] -&gt; unit&#xA;override this.AttachRange : 'Entity[] -&gt; unit" Usage="dbSet.AttachRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="TEntity[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities">The entities to attach.</param>
        <summary>
                Begins tracking the given entities and entries reachable from the given entities using
                the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state by default, but see below for cases
                when a different state will be used.
            </summary>
        <remarks>
          <para>
                    Generally, no database interaction will be performed until <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. All entities found will be tracked
                    by the context.
                </para>
          <para>
                    For entity types with generated keys if an entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    This helps ensure only new entities will be inserted.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
          <para>
                    For entity types without generated keys, the state set is always <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Unchanged" />.
                </para>
          <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> to set the state of only a single entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                    and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbSet`1.EntityType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntityType As IEntityType" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.EntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt;.EntityType" />
      <MemberSignature Language="C#" Value="public abstract Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property EntityType As IEntityType" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> metadata associated with this set.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entry">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Entry (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; Entry(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.Entry(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entry (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Entry : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.Entry : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.Entry entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entity">The entity to get the entry for.</param>
        <summary>
                Gets an <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the given entity. The entry provides
                access to change tracking information and operations for the entity.
            </summary>
        <returns>The entry for the given entity.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-entity-entries">Accessing tracked entities in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbSet.Equals obj" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public virtual TEntity Find (params object[] keyValues);" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TEntity Find(object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.Find(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Find (ParamArray keyValues As Object()) As TEntity" />
      <MemberSignature Language="F#" Value="abstract member Find : obj[] -&gt; 'Entity&#xA;override this.Find : obj[] -&gt; 'Entity" Usage="dbSet.Find keyValues" />
      <MemberSignature Language="C#" Value="public virtual TEntity? Find (params object?[]? keyValues);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
        <returns>The entity found, or <see langword="null" />.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-find">Using Find and FindAsync</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TEntity&gt; FindAsync (params object[] keyValues);" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TEntity&gt; FindAsync(object[] keyValues) cil managed" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.FindAsync(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindAsync (ParamArray keyValues As Object()) As Task(Of TEntity)" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : obj[] -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindAsync : obj[] -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.FindAsync keyValues" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;TEntity&gt; FindAsync (params object[] keyValues);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;!TEntity&gt; FindAsync(object[] keyValues) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindAsync (ParamArray keyValues As Object()) As ValueTask(Of TEntity)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : obj[] -&gt; System.Threading.Tasks.ValueTask&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindAsync : obj[] -&gt; System.Threading.Tasks.ValueTask&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.FindAsync keyValues" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;TEntity?&gt; FindAsync (params object?[]? keyValues);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">System.Threading.Tasks.Task&lt;TEntity&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
        <returns>The entity found, or <see langword="null" />.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-find">Using Find and FindAsync</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TEntity&gt; FindAsync (object[] keyValues, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TEntity&gt; FindAsync(object[] keyValues, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.FindAsync(System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindAsync (keyValues As Object(), cancellationToken As CancellationToken) As Task(Of TEntity)" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindAsync : obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.FindAsync (keyValues, cancellationToken)" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;TEntity&gt; FindAsync (object[] keyValues, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;!TEntity&gt; FindAsync(object[] keyValues, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindAsync (keyValues As Object(), cancellationToken As CancellationToken) As ValueTask(Of TEntity)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindAsync : obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.FindAsync (keyValues, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;TEntity?&gt; FindAsync (object?[]? keyValues, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">System.Threading.Tasks.Task&lt;TEntity&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.Threading.Tasks.ValueTask&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keyValues">The values of the primary key for the entity to be found.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Finds an entity with the given primary key values. If an entity with the given primary key values
                is being tracked by the context, then it is returned immediately without making a request to the
                database. Otherwise, a query is made to the database for an entity with the given primary key values
                and this entity, if found, is attached to the context and returned. If no entity is found, then
                null is returned.
            </summary>
        <returns>The entity found, or <see langword="null" />.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-find">Using Find and FindAsync</see> for more information and examples.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerator&lt;TEntity&gt; GetAsyncEnumerator (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerator`1&lt;!TEntity&gt; GetAsyncEnumerator(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.GetAsyncEnumerator(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsyncEnumerator (Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerator(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.GetAsyncEnumerator cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.
            </param>
        <summary>
                Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerator`1" /> which when enumerated will asynchronously execute a query against
                the database.
            </summary>
        <returns>The query results.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbSet.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.LocalView&lt;TEntity&gt; Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1&lt;!TEntity&gt; Local" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Local As LocalView(Of TEntity)" />
      <MemberSignature Language="F#" Value="member this.Local : Microsoft.EntityFrameworkCore.ChangeTracking.LocalView&lt;'Entity (requires 'Entity : null)&gt;" Usage="Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt;.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.LocalView&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1" /> that represents a local view of all Added, Unchanged,
                and Modified entities in this set.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    This local view will stay in sync as entities are added or removed from the context. Likewise, entities
                    added to or removed from the local view will automatically be added to or removed
                    from the context.
                </para>
          <para>
                    This property can be used for data binding by populating the set with data, for example by using the
                    <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})" /> extension method,
                    and then binding to the local data through this property by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" /> for WPF binding, or
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" /> for WinForms.
                </para>
          <para>
                    Note that this method calls <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> unless
                    <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /> has been set to <see langword="false" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance">
      <MemberSignature Language="C#" Value="IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbSet`1.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;System#IServiceProvider&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IServiceProvider Implements IInfrastructure(Of IServiceProvider).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance : IServiceProvider" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-services">Accessing DbContext services</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TEntity&gt;.AsyncEnumerable">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt; Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TEntity&gt;.AsyncEnumerable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!TEntity&gt; Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TEntity&gt;.AsyncEnumerable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbSet`1.Microsoft#EntityFrameworkCore#Query#Internal#IAsyncEnumerableAccessor&lt;TEntity&gt;#AsyncEnumerable" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncEnumerable As IAsyncEnumerable(Of TEntity) Implements IAsyncEnumerableAccessor(Of TEntity).AsyncEnumerable" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TEntity&gt;.AsyncEnumerable : System.Collections.Generic.IAsyncEnumerable&lt;'Entity (requires 'Entity : null)&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor&lt;TEntity&gt;.AsyncEnumerable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor`1.AsyncEnumerable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> which when enumerated will asynchronously execute the query against
                the database.
            </summary>
        <value> The query results. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Remove (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; Remove(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Remove (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.Remove : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.Remove entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">The entity to remove.</param>
        <summary>
                Begins tracking the given entity in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that it will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>
          <para>
                    If the entity is already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking the entity (rather than marking it as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since the
                    entity was previously added to the context and does not exist in the database.
                </para>
          <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.Attach(`0)" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> to set the state of only a single entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public virtual void RemoveRange (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRange (entities As IEnumerable(Of TEntity))" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit&#xA;override this.RemoveRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit" Usage="dbSet.RemoveRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">The entities to remove.</param>
        <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that they will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <remarks>
          <para>
                    If any of the entities are already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking those entities (rather than marking them as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since those
                    entities were previously added to the context and do not exist in the database.
                </para>
          <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.AttachRange(System.Collections.Generic.IEnumerable{`0})" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                    and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public virtual void RemoveRange (params TEntity[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRange(!TEntity[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.RemoveRange(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRange (ParamArray entities As TEntity())" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : 'Entity[] -&gt; unit&#xA;override this.RemoveRange : 'Entity[] -&gt; unit" Usage="dbSet.RemoveRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="TEntity[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities">The entities to remove.</param>
        <summary>
                Begins tracking the given entities in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" /> state such that they will
                be removed from the database when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
            </summary>
        <remarks>
          <para>
                    If any of the entities are already tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state then the context will
                    stop tracking those entities (rather than marking them as <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />) since those
                    entities were previously added to the context and do not exist in the database.
                </para>
          <para>
                    Any other reachable entities that are not already being tracked will be tracked in the same way that
                    they would be if <see cref="M:Microsoft.EntityFrameworkCore.DbSet`1.AttachRange(`0[])" /> was called before calling this method.
                    This allows any cascading actions to be applied when <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                    and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt;.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IAsyncEnumerator&lt;TEntity&gt; IAsyncEnumerable&lt;TEntity&gt;.GetAsyncEnumerator (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt;.GetAsyncEnumerator(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.System#Collections#Generic#IAsyncEnumerable&lt;TEntity&gt;#GetAsyncEnumerator(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator (cancellationToken As CancellationToken) As IAsyncEnumerator(Of TEntity) Implements IAsyncEnumerable(Of TEntity).GetAsyncEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.System.Collections.Generic.IAsyncEnumerable&lt;TEntity&gt;.GetAsyncEnumerator cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
                Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerator`1" /> which when enumerated will asynchronously execute a query against
                the database.
            </summary>
        <returns> The query results. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> which when enumerated will execute a query against the database
                to load all entities from the database.
            </summary>
        <returns>The query results.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="dbSet.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns an <see cref="T:System.Collections.IEnumerator" /> which when enumerated will execute a query against the database
                to load all entities from the database.
            </summary>
        <returns>The query results.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbSet`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="F#" Value="member this.System.ComponentModel.IListSource.ContainsListCollection : bool" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether the collection is a collection of System.Collections.IList objects.
                Always returns <see langword="false" />.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList&#xA;override this.System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList" Usage="dbSet.System.ComponentModel.IListSource.GetList " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This method is called by data binding frameworks when attempting to data bind
                directly to a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />.
            </summary>
        <returns>Never returns, always throws an exception.</returns>
        <remarks>
          <para>
                    This implementation always throws an exception as binding directly to a
                    <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> will result in a query being
                    sent to the database every time the data binding framework requests the contents
                    of the collection. Instead load the results into the context, for example, by using the
                    <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})" /> extension method,
                    and then bind to the local data through the <see cref="P:Microsoft.EntityFrameworkCore.DbSet`1.Local" /> by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToObservableCollection" /> for WPF binding, or
                    <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList" /> for WinForms.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-local-views">Local views of tracked entities in EF Core</see> for more information and
                    examples.
                </para>
        </remarks>
        <exception cref="T:System.NotSupportedException">Always thrown.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbSet`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="F#" Value="member this.System.Linq.IQueryable.ElementType : Type" Usage="System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.ElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the IQueryable element type.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbSet`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="F#" Value="member this.System.Linq.IQueryable.Expression : System.Linq.Expressions.Expression" Usage="System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Expression</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the IQueryable LINQ Expression.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbSet`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="F#" Value="member this.System.Linq.IQueryable.Provider : System.Linq.IQueryProvider" Usage="System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Provider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the IQueryable provider.
            </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dbSet.ToString " />
      <MemberSignature Language="C#" Value="public override string? ToString ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt; Update (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1&lt;!TEntity&gt; Update(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.Update(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (entity As TEntity) As EntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member Update : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.Update : 'Entity -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.Update entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">The entity to update.</param>
        <summary>
                Begins tracking the given entity and entries reachable from the given entity using
                the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state by default, but see below for cases
                when a different state will be used.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" /> for the entity. The entry provides
                access to change tracking information and operations for the entity.
            </returns>
        <remarks>
          <para>
                    Generally, no database interaction will be performed until <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. All entities found will be tracked
                    by the context.
                </para>
          <para>
                    For entity types with generated keys if an entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    This helps ensure new entities will be inserted, while existing entities will be updated.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
          <para>
                    For entity types without generated keys, the state set is always <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" />.
                </para>
          <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> to set the state of only a single entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRange">
      <MemberSignature Language="C#" Value="public virtual void UpdateRange (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateRange(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateRange (entities As IEnumerable(Of TEntity))" />
      <MemberSignature Language="F#" Value="abstract member UpdateRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit&#xA;override this.UpdateRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit" Usage="dbSet.UpdateRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">The entities to update.</param>
        <summary>
                Begins tracking the given entities and entries reachable from the given entities using
                the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state by default, but see below for cases
                when a different state will be used.
            </summary>
        <remarks>
          <para>
                    Generally, no database interaction will be performed until <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. All entities found will be tracked
                    by the context.
                </para>
          <para>
                    For entity types with generated keys if an entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    This helps ensure new entities will be inserted, while existing entities will be updated.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
          <para>
                    For entity types without generated keys, the state set is always <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" />.
                </para>
          <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> to set the state of only a single entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                    and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRange">
      <MemberSignature Language="C#" Value="public virtual void UpdateRange (params TEntity[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateRange(!TEntity[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbSet`1.UpdateRange(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateRange (ParamArray entities As TEntity())" />
      <MemberSignature Language="F#" Value="abstract member UpdateRange : 'Entity[] -&gt; unit&#xA;override this.UpdateRange : 'Entity[] -&gt; unit" Usage="dbSet.UpdateRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="TEntity[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities">The entities to update.</param>
        <summary>
                Begins tracking the given entities and entries reachable from the given entities using
                the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state by default, but see below for cases
                when a different state will be used.
            </summary>
        <remarks>
          <para>
                    Generally, no database interaction will be performed until <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> is called.
                </para>
          <para>
                    A recursive search of the navigation properties will be performed to find reachable entities
                    that are not already being tracked by the context. All entities found will be tracked
                    by the context.
                </para>
          <para>
                    For entity types with generated keys if an entity has its primary key value set
                    then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" /> state. If the primary key
                    value is not set then it will be tracked in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                    This helps ensure new entities will be inserted, while existing entities will be updated.
                    An entity is considered to have its primary key value set if the primary key property is set
                    to anything other than the CLR default for the property type.
                </para>
          <para>
                    For entity types without generated keys, the state set is always <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" />.
                </para>
          <para>
                    Use <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State" /> to set the state of only a single entity.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-change-tracking">EF Core change tracking</see>
                    and <see href="https://aka.ms/efcore-docs-attach-range">Using AddRange, UpdateRange, AttachRange, and RemoveRange</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
