<Type Name="ConventionEntityTypeExtensions" FullName="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions">
  <TypeSignature Language="C#" Value="public static class ConventionEntityTypeExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ConventionEntityTypeExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ConventionEntityTypeExtensions" />
  <TypeSignature Language="F#" Value="type ConventionEntityTypeExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <AttributeName Language="C#">[System.Obsolete("Use IConventionEntityType")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Use IConventionEntityType")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddForeignKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey AddForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey AddForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.IConventionKey,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddForeignKey (entityType As IConventionEntityType, property As IConventionProperty, principalKey As IConventionKey, principalEntityType As IConventionEntityType, Optional fromDataAnnotation As Boolean = false) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="static member AddForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddForeignKey (entityType, property, principalKey, principalEntityType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property that the foreign key is defined on. </param>
        <param name="principalKey"> The primary or alternate key that is referenced. </param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds a new relationship to this entity type.
            </summary>
        <returns> The newly created foreign key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndex">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionIndex AddIndex (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex AddIndex(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddIndex (entityType As IConventionEntityType, property As IConventionProperty, Optional fromDataAnnotation As Boolean = false) As IConventionIndex" />
      <MemberSignature Language="F#" Value="static member AddIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddIndex (entityType, property, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to be indexed. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds an index to this entity type.
            </summary>
        <returns> The newly created index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndexerProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddIndexerProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, Type propertyType, bool setTypeConfigurationSource = true, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddIndexerProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, class System.Type propertyType, bool setTypeConfigurationSource, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddIndexerProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Type,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddIndexerProperty (entityType As IConventionEntityType, name As String, propertyType As Type, Optional setTypeConfigurationSource As Boolean = true, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="static member AddIndexerProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * Type * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddIndexerProperty (entityType, name, propertyType, setTypeConfigurationSource, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="propertyType" Type="System.Type" Index="2" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="setTypeConfigurationSource" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the property to add. </param>
        <param name="propertyType"> The type of value the property will hold. </param>
        <param name="setTypeConfigurationSource"> Indicates whether the type configuration source should be set. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds a property backed by and indexer to this entity type.
            </summary>
        <returns> The newly created property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionKey AddKey (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionKey AddKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddKey(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddKey (entityType As IConventionEntityType, property As IConventionProperty, Optional fromDataAnnotation As Boolean = false) As IConventionKey" />
      <MemberSignature Language="F#" Value="static member AddKey : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddKey (entityType, property, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to use as an alternate key. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds a new alternate key to this entity type.
            </summary>
        <returns> The newly created key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddProperty (entityType As IConventionEntityType, memberInfo As MemberInfo, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="static member AddProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddProperty (entityType, memberInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="memberInfo"> The corresponding member on the entity class. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns> The newly created property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddProperty (entityType As IConventionEntityType, name As String, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="static member AddProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddProperty (entityType, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the property to add. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns> The newly created property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, Type propertyType, bool setTypeConfigurationSource = true, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name, class System.Type propertyType, bool setTypeConfigurationSource, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Type,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddProperty (entityType As IConventionEntityType, name As String, propertyType As Type, Optional setTypeConfigurationSource As Boolean = true, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="static member AddProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string * Type * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.AddProperty (entityType, name, propertyType, setTypeConfigurationSource, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="propertyType" Type="System.Type" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="setTypeConfigurationSource" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the property to add. </param>
        <param name="propertyType"> The type of value the property will hold. </param>
        <param name="setTypeConfigurationSource"> Indicates whether the type configuration source should be set. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns> The newly created property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindDeclaredForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindDeclaredForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDeclaredForeignKeys (entityType As IConventionEntityType, properties As IReadOnlyList(Of IProperty)) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindDeclaredForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindDeclaredForeignKeys (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties to find the foreign keys on. </param>
        <summary>
                Gets the foreign keys declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" /> using the given properties.
            </summary>
        <returns> Declared foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredNavigation">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindDeclaredNavigation (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindDeclaredNavigation(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindDeclaredNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDeclaredNavigation (entityType As IConventionEntityType, name As String) As IConventionNavigation" />
      <MemberSignature Language="F#" Value="static member FindDeclaredNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindDeclaredNavigation (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the navigation property on the entity class. </param>
        <summary>
                Gets a navigation property on the given entity type. Does not return navigation properties defined on a base type.
                Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns> The navigation property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionProperty FindDeclaredProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty FindDeclaredProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindDeclaredProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDeclaredProperty (entityType As IConventionEntityType, name As String) As IConventionProperty" />
      <MemberSignature Language="F#" Value="static member FindDeclaredProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindDeclaredProperty (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The property name. </param>
        <summary>
                Finds a property declared on the type with the given name.
                Does not return properties defined on a base type.
            </summary>
        <returns> The property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDefiningNavigation">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindDefiningNavigation(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindDefiningNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDefiningNavigation (entityType As IConventionEntityType) As IConventionNavigation" />
      <MemberSignature Language="F#" Value="static member FindDefiningNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindDefiningNavigation entityType" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation? FindDefiningNavigation (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Entity types with defining navigations have been replaced by shared-type entity types")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Entity types with defining navigations have been replaced by shared-type entity types")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns the defining navigation if one exists or <see langword="null" /> otherwise.
            </summary>
        <returns>The defining navigation if one exists or <see langword="null" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey FindForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property, Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey FindForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, class Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKey (entityType As IConventionEntityType, property As IProperty, principalKey As IKey, principalEntityType As IEntityType) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="static member FindForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindForeignKey (entityType, property, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property that the foreign key is defined on. </param>
        <param name="principalKey"> The primary or alternate key that is referenced. </param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns <see langword="null" />
                if no foreign key is found.
            </summary>
        <returns> The foreign key, or <see langword="null" /> if none is defined. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKeys (entityType As IConventionEntityType, property As IProperty) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindForeignKeys (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to find the foreign keys on. </param>
        <summary>
                Gets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified
                property are returned. Composite foreign keys that include the specified property are not returned.
            </summary>
        <returns> The foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindForeignKeys (entityType As IConventionEntityType, properties As IReadOnlyList(Of IProperty)) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="static member FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindForeignKeys (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties to find the foreign keys on. </param>
        <summary>
                Gets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified
                set of properties are returned.
            </summary>
        <returns> The foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionIndex FindIndex (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex FindIndex(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindIndex (entityType As IConventionEntityType, property As IProperty) As IConventionIndex" />
      <MemberSignature Language="F#" Value="static member FindIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindIndex (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to find the index on. </param>
        <summary>
          <para>
                    Gets the unnamed index defined on the given property. Returns <see langword="null" /> if no such index is defined.
                </para>
          <para>
                    Named indexes will not be returned even if the list of properties matches.
                </para>
        </summary>
        <returns> The index, or null if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionKey FindKey (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionKey FindKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindKey (entityType As IConventionEntityType, property As IProperty) As IConventionKey" />
      <MemberSignature Language="F#" Value="static member FindKey : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindKey (entityType, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property that the key is defined on. </param>
        <summary>
                Gets the primary or alternate key that is defined on the given property. Returns <see langword="null" /> if no key is defined
                for the given property.
            </summary>
        <returns> The key, or null if none is defined. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNavigation">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindNavigation (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindNavigation(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigation (entityType As IConventionEntityType, memberInfo As MemberInfo) As IConventionNavigation" />
      <MemberSignature Language="F#" Value="static member FindNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindNavigation (entityType, memberInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="memberInfo"> The navigation property on the entity class. </param>
        <summary>
                Gets a navigation property on the given entity type. Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns> The navigation property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNavigation">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindNavigation (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindNavigation(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindNavigation (entityType As IConventionEntityType, name As String) As IConventionNavigation" />
      <MemberSignature Language="F#" Value="static member FindNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindNavigation (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the navigation property on the entity class. </param>
        <summary>
                Gets a navigation property on the given entity type. Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns> The navigation property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindOwnership">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey FindOwnership (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey FindOwnership(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindOwnership(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindOwnership (entityType As IConventionEntityType) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="static member FindOwnership : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindOwnership entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns the relationship to the owner if this is an owned type or <see langword="null" /> otherwise.
            </summary>
        <returns> The relationship to the owner if this is an owned type or <see langword="null" /> otherwise. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindProperties">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; FindProperties (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; FindProperties(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindProperties(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindProperties (entityType As IConventionEntityType, propertyNames As IReadOnlyList(Of String)) As IReadOnlyList(Of IConventionProperty)" />
      <MemberSignature Language="F#" Value="static member FindProperties : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindProperties (entityType, propertyNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="propertyNames"> The property names. </param>
        <summary>
          <para>
                    Finds matching properties on the given entity type. Returns <see langword="null" /> if any property is not found.
                </para>
          <para>
                    This API only finds scalar properties and does not find navigation properties.
                </para>
        </summary>
        <returns> The properties, or <see langword="null" /> if any property is not found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionProperty FindProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty FindProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindProperty (entityType As IConventionEntityType, memberInfo As MemberInfo) As IConventionProperty" />
      <MemberSignature Language="F#" Value="static member FindProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindProperty (entityType, memberInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="memberInfo"> The property on the entity class. </param>
        <summary>
          <para>
                    Gets a property on the given entity type. Returns <see langword="null" /> if no property is found.
                </para>
          <para>
                    This API only finds scalar properties and does not find navigation properties. Use
                    <see cref="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.MemberInfo)" /> to find a navigation property.
                </para>
        </summary>
        <returns> The property, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypes (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypes(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetAllBaseTypes(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllBaseTypes (entityType As IConventionEntityType) As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="static member GetAllBaseTypes : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetAllBaseTypes entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all types in the model from which a given entity type derives, starting with the root.
            </summary>
        <returns>
                The base types.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypesAscending">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesAscending (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesAscending(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetAllBaseTypesAscending(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllBaseTypesAscending (entityType As IConventionEntityType) As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="static member GetAllBaseTypesAscending : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetAllBaseTypesAscending entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all types in the model from which a given entity type derives, starting with the closest one.
            </summary>
        <returns>
                The base types.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypesInclusive">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesInclusive (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesInclusive(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetAllBaseTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllBaseTypesInclusive (entityType As IConventionEntityType) As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="static member GetAllBaseTypesInclusive : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetAllBaseTypesInclusive entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns all base types of the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />, including the type itself, top to bottom.
            </summary>
        <returns> Base types. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypesInclusiveAscending">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesInclusiveAscending (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesInclusiveAscending(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetAllBaseTypesInclusiveAscending(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function GetAllBaseTypesInclusiveAscending (entityType As IConventionEntityType) As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="static member GetAllBaseTypesInclusiveAscending : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetAllBaseTypesInclusiveAscending entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions+&lt;GetAllBaseTypesInclusiveAscending&gt;d__6))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions+&lt;GetAllBaseTypesInclusiveAscending&gt;d__6))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions+&lt;GetAllBaseTypesInclusiveAscending&gt;d__7))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions+&lt;GetAllBaseTypesInclusiveAscending&gt;d__7))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns all base types of the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />, including the type itself, bottom to top.
            </summary>
        <returns> Base types. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangeTrackingStrategyConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetChangeTrackingStrategyConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetChangeTrackingStrategyConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetChangeTrackingStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChangeTrackingStrategyConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetChangeTrackingStrategyConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetChangeTrackingStrategyConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />.
            </summary>
        <returns> The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDeclaredForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDeclaredForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredForeignKeys (entityType As IConventionEntityType) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredForeignKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all foreign keys declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />.
                </para>
          <para>
                    This method does not return foreign keys declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same foreign key more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetForeignKeys" /> to also return foreign keys declared on base types.
                </para>
        </summary>
        <returns> Declared foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredIndexes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt; GetDeclaredIndexes (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt; GetDeclaredIndexes(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredIndexes (entityType As IConventionEntityType) As IEnumerable(Of IConventionIndex)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredIndexes : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredIndexes entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all indexes declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />.
                </para>
          <para>
                    This method does not return indexes declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same index more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetForeignKeys" /> to also return indexes declared on base types.
                </para>
        </summary>
        <returns> Declared indexes. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt; GetDeclaredKeys (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt; GetDeclaredKeys(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredKeys (entityType As IConventionEntityType) As IEnumerable(Of IConventionKey)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredKeys : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all keys declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.
                </para>
          <para>
                    This method does not return keys declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same key more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetKeys" /> to also return keys declared on base types.
                </para>
        </summary>
        <returns> Declared keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredNavigations">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetDeclaredNavigations (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetDeclaredNavigations(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredNavigations (entityType As IConventionEntityType) As IEnumerable(Of IConventionNavigation)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredNavigations : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredNavigations entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all navigation properties declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />.
                </para>
          <para>
                    This method does not return navigation properties declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same navigation property more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" /> to also return navigation properties declared on base types.
                </para>
        </summary>
        <returns> Declared navigation properties. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredProperties">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; GetDeclaredProperties (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; GetDeclaredProperties(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredProperties (entityType As IConventionEntityType) As IEnumerable(Of IConventionProperty)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredProperties : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredProperties entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all non-navigation properties declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />.
                </para>
          <para>
                    This method does not return properties declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same property more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetProperties" /> to also return properties declared on base types.
                </para>
        </summary>
        <returns> Declared non-navigation properties. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredReferencingForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDeclaredReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDeclaredReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredReferencingForeignKeys (entityType As IConventionEntityType) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredReferencingForeignKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                is the principal).
            </summary>
        <returns> The foreign keys that reference the given entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredServiceProperties">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt; GetDeclaredServiceProperties (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt; GetDeclaredServiceProperties(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredServiceProperties(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredServiceProperties (entityType As IConventionEntityType) As IEnumerable(Of IConventionServiceProperty)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredServiceProperties : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDeclaredServiceProperties entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all service properties declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />.
                </para>
          <para>
                    This method does not return properties declared on base types.
                    It is useful when iterating over all entity types to avoid processing the same property more than once.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetServiceProperties" /> to also return properties declared on base types.
                </para>
        </summary>
        <returns> Declared service properties. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefiningQueryConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetDefiningQueryConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetDefiningQueryConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDefiningQueryConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefiningQueryConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetDefiningQueryConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDefiningQueryConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Use InMemoryEntityTypeExtensions.GetInMemoryQueryConfigurationSource")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use InMemoryEntityTypeExtensions.GetInMemoryQueryConfigurationSource")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDefiningQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />.
            </summary>
        <returns>The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDefiningQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDerivedForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDerivedForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDerivedForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDerivedForeignKeys (entityType As IConventionEntityType) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="static member GetDerivedForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDerivedForeignKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
          <para>
                    Gets all foreign keys declared on the types derived from the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />.
                </para>
          <para>
                    This method does not return foreign keys declared on the given entity type itself.
                    Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetForeignKeys" /> to return foreign keys declared on this
                    and base entity typed types.
                </para>
        </summary>
        <returns> Derived foreign keys. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDerivedTypes (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDerivedTypes(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDerivedTypes (entityType As IConventionEntityType) As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="static member GetDerivedTypes : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDerivedTypes entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all types in the model that derive from a given entity type.
            </summary>
        <returns> The derived types. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedTypesInclusive">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDerivedTypesInclusive (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDerivedTypesInclusive(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDerivedTypesInclusive (entityType As IConventionEntityType) As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="static member GetDerivedTypesInclusive : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDerivedTypesInclusive entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns all derived types of the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />, including the type itself.
            </summary>
        <returns> Derived types. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectlyDerivedTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDirectlyDerivedTypes (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDirectlyDerivedTypes(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDirectlyDerivedTypes (entityType As IConventionEntityType) As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="static member GetDirectlyDerivedTypes : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDirectlyDerivedTypes entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all types in the model that directly derive from a given entity type.
            </summary>
        <returns> The derived types. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiscriminatorMappingCompleteConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetDiscriminatorMappingCompleteConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetDiscriminatorMappingCompleteConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDiscriminatorMappingCompleteConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDiscriminatorMappingCompleteConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetDiscriminatorMappingCompleteConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDiscriminatorMappingCompleteConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the discriminator value completeness.
            </summary>
        <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> or <see langword="null" /> if discriminator completeness has not been set. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiscriminatorProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionProperty GetDiscriminatorProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty GetDiscriminatorProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDiscriminatorProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDiscriminatorProperty (entityType As IConventionEntityType) As IConventionProperty" />
      <MemberSignature Language="F#" Value="static member GetDiscriminatorProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDiscriminatorProperty entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" /> that will be used for storing a discriminator value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiscriminatorPropertyConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetDiscriminatorPropertyConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetDiscriminatorPropertyConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDiscriminatorPropertyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDiscriminatorPropertyConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetDiscriminatorPropertyConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDiscriminatorPropertyConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the discriminator property.
            </summary>
        <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> or <see langword="null" /> if no discriminator property has been set. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiscriminatorValueConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetDiscriminatorValueConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetDiscriminatorValueConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDiscriminatorValueConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDiscriminatorValueConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetDiscriminatorValueConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetDiscriminatorValueConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the discriminator value.
            </summary>
        <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> or <see langword="null" /> if no discriminator value has been set. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNavigations">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetNavigations (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetNavigations(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetNavigations (entityType As IConventionEntityType) As IEnumerable(Of IConventionNavigation)" />
      <MemberSignature Language="F#" Value="static member GetNavigations : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetNavigations entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all navigation properties on the given entity type.
            </summary>
        <returns> All navigation properties on the given entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryFilterConfigurationSource">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetQueryFilterConfigurationSource (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetQueryFilterConfigurationSource(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetQueryFilterConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetQueryFilterConfigurationSource (entityType As IConventionEntityType) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="static member GetQueryFilterConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetQueryFilterConfigurationSource entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetQueryFilter(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />.
            </summary>
        <returns> The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetQueryFilter(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencingForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetReferencingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetReferencingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReferencingForeignKeys (entityType As IConventionEntityType) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="static member GetReferencingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetReferencingForeignKeys entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                or a type it's derived from is the principal).
            </summary>
        <returns> The foreign keys that reference the given entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRootType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType GetRootType (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType GetRootType(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetRootType(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRootType (entityType As IConventionEntityType) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="static member GetRootType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.GetRootType entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Gets the root base type for a given entity type.
            </summary>
        <returns>
                The root base type. If the given entity type is not a derived type, then the same entity type is returned.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDiscriminatorValue">
      <MemberSignature Language="C#" Value="public static void RemoveDiscriminatorValue (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveDiscriminatorValue(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveDiscriminatorValue(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RemoveDiscriminatorValue (entityType As IConventionEntityType)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member RemoveDiscriminatorValue : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveDiscriminatorValue entityType" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static object RemoveDiscriminatorValue (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object RemoveDiscriminatorValue(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveDiscriminatorValue (entityType As IConventionEntityType) As Object" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member RemoveDiscriminatorValue : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; obj" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveDiscriminatorValue entityType" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <summary>
                Removes the discriminator value for this entity type.
            </summary>
        <returns> The removed discriminator value. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveForeignKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey RemoveForeignKey (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey RemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},Microsoft.EntityFrameworkCore.Metadata.IConventionKey,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveForeignKey (entityType As IConventionEntityType, properties As IReadOnlyList(Of IConventionProperty), principalKey As IConventionKey, principalEntityType As IConventionEntityType) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="static member RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveForeignKey (entityType, properties, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties that the foreign key is defined on. </param>
        <param name="principalKey"> The primary or alternate key that is referenced. </param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Removes a foreign key from this entity type.
            </summary>
        <returns> The foreign key that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIndex">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionIndex RemoveIndex (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex RemoveIndex(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveIndex (entityType As IConventionEntityType, properties As IReadOnlyList(Of IConventionProperty)) As IConventionIndex" />
      <MemberSignature Language="F#" Value="static member RemoveIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveIndex (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties that make up the index. </param>
        <summary>
                Removes an index from this entity type.
            </summary>
        <returns> The index that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionKey RemoveKey (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionKey RemoveKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveKey(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveKey (entityType As IConventionEntityType, properties As IReadOnlyList(Of IConventionProperty)) As IConventionKey" />
      <MemberSignature Language="F#" Value="static member RemoveKey : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveKey (entityType, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="properties"> The properties that make up the key. </param>
        <summary>
                Removes a primary or alternate key from this entity type.
            </summary>
        <returns> The key that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionProperty RemoveProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty RemoveProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveProperty (entityType As IConventionEntityType, name As String) As IConventionProperty" />
      <MemberSignature Language="F#" Value="static member RemoveProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RemoveProperty (entityType, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="name"> The name of the property to remove. </param>
        <summary>
                Removes a property from this entity type.
            </summary>
        <returns> The property that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RootType (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType RootType(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RootType (entityType As IConventionEntityType) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="static member RootType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.RootType entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use GetRootType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GetRootType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entityType"> The type to find the root of. </param>
        <summary>
                Gets the root base type for a given entity type.
            </summary>
        <returns>
                The root base type. If the given entity type is not a derived type, then the same entity type is returned.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public static void SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetChangeTrackingStrategy (entityType As IConventionEntityType, changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy), Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetChangeTrackingStrategy (entityType, changeTrackingStrategy, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetChangeTrackingStrategy (entityType As IConventionEntityType, changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy), Optional fromDataAnnotation As Boolean = false) As Nullable(Of ChangeTrackingStrategy)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetChangeTrackingStrategy (entityType, changeTrackingStrategy, fromDataAnnotation)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="changeTrackingStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="changeTrackingStrategy"> The strategy to use. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the change tracking strategy to use for this entity type. This strategy indicates how the
                context detects changes to properties for an instance of the entity type.
            </summary>
        <returns> The configured value. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefiningQuery">
      <MemberSignature Language="C#" Value="public static void SetDefiningQuery (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Linq.Expressions.LambdaExpression definingQuery, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDefiningQuery(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Linq.Expressions.LambdaExpression definingQuery, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDefiningQuery(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetDefiningQuery (entityType As IConventionEntityType, definingQuery As LambdaExpression, Optional fromDataAnnotation As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member SetDefiningQuery : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Linq.Expressions.LambdaExpression * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDefiningQuery (entityType, definingQuery, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public static void SetDefiningQuery (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Linq.Expressions.LambdaExpression? definingQuery, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Use InMemoryEntityTypeExtensions.SetInMemoryQuery")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use InMemoryEntityTypeExtensions.SetInMemoryQuery")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" />
        <Parameter Name="definingQuery" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="definingQuery">The LINQ query used as the default source.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the LINQ query used as the default source for queries of this type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDiscriminatorMappingComplete">
      <MemberSignature Language="C#" Value="public static bool? SetDiscriminatorMappingComplete (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool? complete, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;bool&gt; SetDiscriminatorMappingComplete(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, valuetype System.Nullable`1&lt;bool&gt; complete, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDiscriminatorMappingComplete(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetDiscriminatorMappingComplete (entityType As IConventionEntityType, complete As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member SetDiscriminatorMappingComplete : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Nullable&lt;bool&gt; * bool -&gt; Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDiscriminatorMappingComplete (entityType, complete, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="complete" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="complete"> The value indicating whether the discriminator mapping is complete. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the value indicating whether the discriminator mapping is complete.
            </summary>
        <returns> The configured value. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDiscriminatorProperty">
      <MemberSignature Language="C#" Value="public static void SetDiscriminatorProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDiscriminatorProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDiscriminatorProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetDiscriminatorProperty (entityType As IConventionEntityType, property As IProperty, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetDiscriminatorProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDiscriminatorProperty (entityType, property, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionProperty SetDiscriminatorProperty (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty SetDiscriminatorProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetDiscriminatorProperty (entityType As IConventionEntityType, property As IProperty, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member SetDiscriminatorProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDiscriminatorProperty (entityType, property, fromDataAnnotation)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="property"> The property to set. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> that will be used for storing a discriminator value.
            </summary>
        <returns> The discriminator property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDiscriminatorValue">
      <MemberSignature Language="C#" Value="public static void SetDiscriminatorValue (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, object value, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDiscriminatorValue(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, object value, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDiscriminatorValue(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetDiscriminatorValue (entityType As IConventionEntityType, value As Object, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetDiscriminatorValue : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * obj * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDiscriminatorValue (entityType, value, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static object SetDiscriminatorValue (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, object value, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object SetDiscriminatorValue(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, object value, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetDiscriminatorValue (entityType As IConventionEntityType, value As Object, Optional fromDataAnnotation As Boolean = false) As Object" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member SetDiscriminatorValue : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * obj * bool -&gt; obj" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetDiscriminatorValue (entityType, value, fromDataAnnotation)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="value"> The value to set. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the discriminator value for this entity type.
            </summary>
        <returns> The configured value. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPrimaryKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IConventionKey SetPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IConventionKey SetPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetPrimaryKey (entityType As IConventionEntityType, property As IConventionProperty, Optional fromDataAnnotation As Boolean = false) As IConventionKey" />
      <MemberSignature Language="F#" Value="static member SetPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetPrimaryKey (entityType, property, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to set the key on. </param>
        <param name="property"> The primary key property. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the primary key for this entity type.
            </summary>
        <returns> The newly created key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetQueryFilter">
      <MemberSignature Language="C#" Value="public static void SetQueryFilter (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Linq.Expressions.LambdaExpression queryFilter, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetQueryFilter(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Linq.Expressions.LambdaExpression queryFilter, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetQueryFilter(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetQueryFilter (entityType As IConventionEntityType, queryFilter As LambdaExpression, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="static member SetQueryFilter : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Linq.Expressions.LambdaExpression * bool -&gt; unit" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetQueryFilter (entityType, queryFilter, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression SetQueryFilter (this Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Linq.Expressions.LambdaExpression queryFilter, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression SetQueryFilter(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Linq.Expressions.LambdaExpression queryFilter, bool fromDataAnnotation) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetQueryFilter (entityType As IConventionEntityType, queryFilter As LambdaExpression, Optional fromDataAnnotation As Boolean = false) As LambdaExpression" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="static member SetQueryFilter : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Linq.Expressions.LambdaExpression * bool -&gt; System.Linq.Expressions.LambdaExpression" Usage="Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions.SetQueryFilter (entityType, queryFilter, fromDataAnnotation)" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="queryFilter" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type. </param>
        <param name="queryFilter"> The LINQ expression filter. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the LINQ expression filter automatically applied to queries for this entity type.
            </summary>
        <returns> The configured filter. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
