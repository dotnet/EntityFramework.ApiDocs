<Type Name="RelationalTypeBaseExtensions" FullName="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions">
  <TypeSignature Language="C#" Value="public static class RelationalTypeBaseExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RelationalTypeBaseExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RelationalTypeBaseExtensions" />
  <TypeSignature Language="F#" Value="type RelationalTypeBaseExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Type extension methods for relational database metadata.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="FindMappingFragment">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment? FindMappingFragment (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment FindMappingFragment(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.FindMappingFragment(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindMappingFragment (typeBase As IReadOnlyTypeBase, ByRef storeObject As StoreObjectIdentifier) As IReadOnlyEntityTypeMappingFragment" />
      <MemberSignature Language="F#" Value="static member FindMappingFragment : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase * StoreObjectIdentifier -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.FindMappingFragment (typeBase, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <param name="storeObject">The identifier of a table-like store object.</param>
        <summary>
          <para>
                    Returns the type mapping for a particular table-like store object.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>An object that represents an type mapping fragment.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMappingFragment">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment? FindMappingFragment (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment FindMappingFragment(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier&amp; storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.FindMappingFragment(Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindMappingFragment (typeBase As ITypeBase, ByRef storeObject As StoreObjectIdentifier) As IEntityTypeMappingFragment" />
      <MemberSignature Language="F#" Value="static member FindMappingFragment : Microsoft.EntityFrameworkCore.Metadata.ITypeBase * StoreObjectIdentifier -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.FindMappingFragment (typeBase, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <param name="storeObject">The identifier of a table-like store object.</param>
        <summary>
          <para>
                    Returns the type mapping for a particular table-like store object.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>An object that represents an type mapping fragment.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerColumnName">
      <MemberSignature Language="C#" Value="public static string? GetContainerColumnName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetContainerColumnName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetContainerColumnName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainerColumnName (typeBase As IReadOnlyTypeBase) As String" />
      <MemberSignature Language="F#" Value="static member GetContainerColumnName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetContainerColumnName typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the container column name for.</param>
        <summary>
                Gets the container column name to which the type is mapped.
            </summary>
        <returns>The container column name to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase&gt; GetDefaultMappings (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase&gt; GetDefaultMappings(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetDefaultMappings(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDefaultMappings (typeBase As ITypeBase) As IEnumerable(Of ITableMappingBase)" />
      <MemberSignature Language="F#" Value="static member GetDefaultMappings : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetDefaultMappings typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the table mappings for.</param>
        <summary>
                Returns the default mappings that the type would use.
            </summary>
        <returns>The tables to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure? GetDeleteStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure GetDeleteStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetDeleteStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeleteStoredProcedure (typeBase As IReadOnlyTypeBase) As IReadOnlyStoredProcedure" />
      <MemberSignature Language="F#" Value="static member GetDeleteStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetDeleteStoredProcedure typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the stored procedure to which the type is mapped for deletes
                or <see langword="null" /> if not mapped to a stored procedure.
            </summary>
        <returns>The stored procedure to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure? GetDeleteStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure GetDeleteStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetDeleteStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeleteStoredProcedure (typeBase As ITypeBase) As IStoredProcedure" />
      <MemberSignature Language="F#" Value="static member GetDeleteStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetDeleteStoredProcedure typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the stored procedure to which the type is mapped for deletes
                or <see langword="null" /> if not mapped to a stored procedure.
            </summary>
        <returns>The stored procedure to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteStoredProcedureMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt; GetDeleteStoredProcedureMappings (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt; GetDeleteStoredProcedureMappings(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetDeleteStoredProcedureMappings(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeleteStoredProcedureMappings (typeBase As ITypeBase) As IEnumerable(Of IStoredProcedureMapping)" />
      <MemberSignature Language="F#" Value="static member GetDeleteStoredProcedureMappings : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetDeleteStoredProcedureMappings typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the delete stored procedures to which the type is mapped.
            </summary>
        <returns>The delete stored procedures to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping&gt; GetFunctionMappings (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping&gt; GetFunctionMappings(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetFunctionMappings(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFunctionMappings (typeBase As ITypeBase) As IEnumerable(Of IFunctionMapping)" />
      <MemberSignature Language="F#" Value="static member GetFunctionMappings : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetFunctionMappings typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the function mappings for.</param>
        <summary>
                Returns the functions to which the type is mapped.
            </summary>
        <returns>The functions to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionName">
      <MemberSignature Language="C#" Value="public static string? GetFunctionName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFunctionName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetFunctionName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFunctionName (typeBase As IReadOnlyTypeBase) As String" />
      <MemberSignature Language="F#" Value="static member GetFunctionName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetFunctionName typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the function name for.</param>
        <summary>
                Returns the name of the function to which the type is mapped or <see langword="null" /> if not mapped to a function.
            </summary>
        <returns>The name of the function to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure? GetInsertStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure GetInsertStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetInsertStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetInsertStoredProcedure (typeBase As IReadOnlyTypeBase) As IReadOnlyStoredProcedure" />
      <MemberSignature Language="F#" Value="static member GetInsertStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetInsertStoredProcedure typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the stored procedure to which the type is mapped for inserts
                or <see langword="null" /> if not mapped to a stored procedure.
            </summary>
        <returns>The stored procedure to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure? GetInsertStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure GetInsertStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetInsertStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetInsertStoredProcedure (typeBase As ITypeBase) As IStoredProcedure" />
      <MemberSignature Language="F#" Value="static member GetInsertStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetInsertStoredProcedure typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the stored procedure to which the type is mapped for inserts
                or <see langword="null" /> if not mapped to a stored procedure.
            </summary>
        <returns>The stored procedure to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertStoredProcedureMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt; GetInsertStoredProcedureMappings (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt; GetInsertStoredProcedureMappings(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetInsertStoredProcedureMappings(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetInsertStoredProcedureMappings (typeBase As ITypeBase) As IEnumerable(Of IStoredProcedureMapping)" />
      <MemberSignature Language="F#" Value="static member GetInsertStoredProcedureMappings : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetInsertStoredProcedureMappings typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the insert stored procedures to which the type is mapped.
            </summary>
        <returns>The insert stored procedures to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJsonPropertyName">
      <MemberSignature Language="C#" Value="public static string? GetJsonPropertyName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetJsonPropertyName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetJsonPropertyName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetJsonPropertyName (typeBase As IReadOnlyTypeBase) As String" />
      <MemberSignature Language="F#" Value="static member GetJsonPropertyName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetJsonPropertyName typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Gets the value of JSON property name used for the given entity mapped to a JSON column.
            </summary>
        <returns>
                The value for the JSON property used to store this type.
                <see langword="null" /> is returned for entities that are not mapped to a JSON column.
            </returns>
        <remarks>
                Unless configured explicitly, navigation name is used.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMappingFragments">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment&gt; GetMappingFragments (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment&gt; GetMappingFragments(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingFragments(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMappingFragments (typeBase As IReadOnlyTypeBase) As IEnumerable(Of IReadOnlyEntityTypeMappingFragment)" />
      <MemberSignature Language="F#" Value="static member GetMappingFragments : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingFragments typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
          <para>
                    Returns all configured type mapping fragments.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>The configured type mapping fragments.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMappingFragments">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment&gt; GetMappingFragments (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment&gt; GetMappingFragments(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingFragments(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMappingFragments (typeBase As ITypeBase) As IEnumerable(Of IEntityTypeMappingFragment)" />
      <MemberSignature Language="F#" Value="static member GetMappingFragments : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingFragments typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
          <para>
                    Returns all configured type mapping fragments.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>The configured type mapping fragments.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMappingFragments">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment&gt; GetMappingFragments (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase, Microsoft.EntityFrameworkCore.Metadata.StoreObjectType storeObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment&gt; GetMappingFragments(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase, valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectType storeObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingFragments(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase,Microsoft.EntityFrameworkCore.Metadata.StoreObjectType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMappingFragments (typeBase As IReadOnlyTypeBase, storeObjectType As StoreObjectType) As IEnumerable(Of IReadOnlyEntityTypeMappingFragment)" />
      <MemberSignature Language="F#" Value="static member GetMappingFragments : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase * Microsoft.EntityFrameworkCore.Metadata.StoreObjectType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingFragments (typeBase, storeObjectType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
        <Parameter Name="storeObjectType" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectType" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <param name="storeObjectType">The type of store object to get the mapping fragments for.</param>
        <summary>
          <para>
                    Returns all configured type mapping fragments of the given type.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>The configured type mapping fragments.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMappingFragments">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment&gt; GetMappingFragments (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase, Microsoft.EntityFrameworkCore.Metadata.StoreObjectType storeObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment&gt; GetMappingFragments(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase, valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectType storeObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingFragments(Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.Metadata.StoreObjectType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMappingFragments (typeBase As ITypeBase, storeObjectType As StoreObjectType) As IEnumerable(Of IEntityTypeMappingFragment)" />
      <MemberSignature Language="F#" Value="static member GetMappingFragments : Microsoft.EntityFrameworkCore.Metadata.ITypeBase * Microsoft.EntityFrameworkCore.Metadata.StoreObjectType -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingFragments (typeBase, storeObjectType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityTypeMappingFragment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
        <Parameter Name="storeObjectType" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectType" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <param name="storeObjectType">The type of store object to get the mapping fragments for.</param>
        <summary>
          <para>
                    Returns all configured type mapping fragments of the given type.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>The configured type mapping fragments.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMappingStrategy">
      <MemberSignature Language="C#" Value="public static string? GetMappingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetMappingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingStrategy(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMappingStrategy (typeBase As IReadOnlyTypeBase) As String" />
      <MemberSignature Language="F#" Value="static member GetMappingStrategy : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetMappingStrategy typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Gets the mapping strategy for the derived types.
            </summary>
        <returns>The mapping strategy for the derived types.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public static string? GetSchema (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSchema(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchema (typeBase As IReadOnlyTypeBase) As String" />
      <MemberSignature Language="F#" Value="static member GetSchema : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetSchema typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the schema for.</param>
        <summary>
                Returns the database schema that contains the mapped table.
            </summary>
        <returns>The database schema that contains the mapped table.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlQuery">
      <MemberSignature Language="C#" Value="public static string? GetSqlQuery (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSqlQuery(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSqlQuery (typeBase As IReadOnlyTypeBase) As String" />
      <MemberSignature Language="F#" Value="static member GetSqlQuery : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetSqlQuery typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the SQL string used to provide data for the type or <see langword="null" /> if not mapped to a SQL string.
            </summary>
        <returns>The SQL string used to provide data for the type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlQueryMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping&gt; GetSqlQueryMappings (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping&gt; GetSqlQueryMappings(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetSqlQueryMappings(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSqlQueryMappings (typeBase As ITypeBase) As IEnumerable(Of ISqlQueryMapping)" />
      <MemberSignature Language="F#" Value="static member GetSqlQueryMappings : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetSqlQueryMappings typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the SQL string mappings for.</param>
        <summary>
                Returns the SQL string mappings.
            </summary>
        <returns>The SQL string to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTableMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMapping&gt; GetTableMappings (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ITableMapping&gt; GetTableMappings(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetTableMappings(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTableMappings (typeBase As ITypeBase) As IEnumerable(Of ITableMapping)" />
      <MemberSignature Language="F#" Value="static member GetTableMappings : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetTableMappings typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITableMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the table mappings for.</param>
        <summary>
                Returns the tables to which the type is mapped.
            </summary>
        <returns>The tables to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTableName">
      <MemberSignature Language="C#" Value="public static string? GetTableName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTableName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetTableName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTableName (typeBase As IReadOnlyTypeBase) As String" />
      <MemberSignature Language="F#" Value="static member GetTableName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetTableName typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the table name for.</param>
        <summary>
                Returns the name of the table to which the type is mapped
                or <see langword="null" /> if not mapped to a table.
            </summary>
        <returns>The name of the table to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure? GetUpdateStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure GetUpdateStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetUpdateStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUpdateStoredProcedure (typeBase As IReadOnlyTypeBase) As IReadOnlyStoredProcedure" />
      <MemberSignature Language="F#" Value="static member GetUpdateStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetUpdateStoredProcedure typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyStoredProcedure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the stored procedure to which the type is mapped for updates
                or <see langword="null" /> if not mapped to a stored procedure.
            </summary>
        <returns>The stored procedure to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateStoredProcedure">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure? GetUpdateStoredProcedure (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure GetUpdateStoredProcedure(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetUpdateStoredProcedure(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUpdateStoredProcedure (typeBase As ITypeBase) As IStoredProcedure" />
      <MemberSignature Language="F#" Value="static member GetUpdateStoredProcedure : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetUpdateStoredProcedure typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IStoredProcedure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the stored procedure to which the type is mapped for updates
                or <see langword="null" /> if not mapped to a stored procedure.
            </summary>
        <returns>The stored procedure to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateStoredProcedureMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt; GetUpdateStoredProcedureMappings (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt; GetUpdateStoredProcedureMappings(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetUpdateStoredProcedureMappings(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUpdateStoredProcedureMappings (typeBase As ITypeBase) As IEnumerable(Of IStoredProcedureMapping)" />
      <MemberSignature Language="F#" Value="static member GetUpdateStoredProcedureMappings : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetUpdateStoredProcedureMappings typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoredProcedureMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Returns the update stored procedures to which the type is mapped.
            </summary>
        <returns>The update stored procedures to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewMappings">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IViewMapping&gt; GetViewMappings (this Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IViewMapping&gt; GetViewMappings(class Microsoft.EntityFrameworkCore.Metadata.ITypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetViewMappings(Microsoft.EntityFrameworkCore.Metadata.ITypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewMappings (typeBase As ITypeBase) As IEnumerable(Of IViewMapping)" />
      <MemberSignature Language="F#" Value="static member GetViewMappings : Microsoft.EntityFrameworkCore.Metadata.ITypeBase -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IViewMapping&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetViewMappings typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IViewMapping&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.ITypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the view mappings for.</param>
        <summary>
                Returns the views to which the type is mapped.
            </summary>
        <returns>The views to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewName">
      <MemberSignature Language="C#" Value="public static string? GetViewName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetViewName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetViewName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewName (typeBase As IReadOnlyTypeBase) As String" />
      <MemberSignature Language="F#" Value="static member GetViewName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetViewName typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the view name for.</param>
        <summary>
                Returns the name of the view to which the type is mapped or <see langword="null" /> if not mapped to a view.
            </summary>
        <returns>The name of the view to which the type is mapped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewSchema">
      <MemberSignature Language="C#" Value="public static string? GetViewSchema (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetViewSchema(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetViewSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetViewSchema (typeBase As IReadOnlyTypeBase) As String" />
      <MemberSignature Language="F#" Value="static member GetViewSchema : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; string" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.GetViewSchema typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type to get the view schema for.</param>
        <summary>
                Returns the database schema that contains the mapped view.
            </summary>
        <returns>The database schema that contains the mapped view.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMappedToJson">
      <MemberSignature Language="C#" Value="public static bool IsMappedToJson (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMappedToJson(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase typeBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.IsMappedToJson(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsMappedToJson (typeBase As IReadOnlyTypeBase) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsMappedToJson : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase -&gt; bool" Usage="Microsoft.EntityFrameworkCore.RelationalTypeBaseExtensions.IsMappedToJson typeBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBase" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" RefType="this" />
      </Parameters>
      <Docs>
        <param name="typeBase">The type.</param>
        <summary>
                Gets a value indicating whether the specified entity is mapped to a JSON column.
            </summary>
        <returns>A value indicating whether the associated type is mapped to a JSON column.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
