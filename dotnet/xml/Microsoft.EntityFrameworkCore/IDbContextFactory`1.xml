<Type Name="IDbContextFactory&lt;TContext&gt;" FullName="Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;">
  <TypeSignature Language="C#" Value="public interface IDbContextFactory&lt;out TContext&gt; where TContext : DbContext" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbContextFactory`1&lt;(class Microsoft.EntityFrameworkCore.DbContext) + TContext&gt;" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbContextFactory(Of Out TContext)" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="F#" Value="type IDbContextFactory&lt;'Context (requires 'Context :&gt; DbContext)&gt; = interface" />
  <TypeSignature Language="C#" Value="public interface IDbContextFactory&lt;TContext&gt; where TContext : DbContext" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbContextFactory`1&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbContextFactory(Of TContext)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDbContextFactory`1&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TContext">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
      </Constraints>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TContext">The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type to create.</typeparam>
    <summary>
                Defines a factory for creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-factory">Using DbContextFactory</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateDbContext">
      <MemberSignature Language="C#" Value="public TContext CreateDbContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TContext CreateDbContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.IDbContextFactory`1.CreateDbContext" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDbContext () As TContext" />
      <MemberSignature Language="F#" Value="abstract member CreateDbContext : unit -&gt; 'Context" Usage="iDbContextFactory.CreateDbContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance.
            </summary>
        <returns>A new context instance.</returns>
        <remarks>
                The caller is responsible for disposing the context; it will not be disposed by any dependency injection container.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbContextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TContext&gt; CreateDbContextAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TContext&gt; CreateDbContextAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.IDbContextFactory`1.CreateDbContextAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDbContextAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of TContext)" />
      <MemberSignature Language="F#" Value="abstract member CreateDbContextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;&#xA;override this.CreateDbContextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="iDbContextFactory.CreateDbContextAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance in an async context.
            </summary>
        <returns>A task containing the created context that represents the asynchronous operation.</returns>
        <remarks>
                The caller is responsible for disposing the context; it will not be disposed by any dependency injection container.
            </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
