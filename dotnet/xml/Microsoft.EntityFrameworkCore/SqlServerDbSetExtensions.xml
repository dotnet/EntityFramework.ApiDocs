<Type Name="SqlServerDbSetExtensions" FullName="Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions">
  <TypeSignature Language="C#" Value="public static class SqlServerDbSetExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqlServerDbSetExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SqlServerDbSetExtensions" />
  <TypeSignature Language="F#" Value="type SqlServerDbSetExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Sql Server database specific extension methods for LINQ queries rooted in DbSet.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TemporalAll&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; TemporalAll&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; source) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; TemporalAll&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TEntity&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalAll``1(Microsoft.EntityFrameworkCore.DbSet{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TemporalAll(Of TEntity As Class) (source As DbSet(Of TEntity)) As IQueryable(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member TemporalAll : Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalAll source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="source">Source DbSet on which the temporal operation is applied.</param>
        <summary>
                Applies temporal 'All' operation on the given DbSet, which returns all historical versions of the entities as well as their current
                state.
            </summary>
        <returns>An <see cref="T:System.Linq.IQueryable`1" /> representing the entities and their historical versions.</returns>
        <remarks>
          <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporalAsOf&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; TemporalAsOf&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; source, DateTime utcPointInTime) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; TemporalAsOf&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TEntity&gt; source, valuetype System.DateTime utcPointInTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalAsOf``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TemporalAsOf(Of TEntity As Class) (source As DbSet(Of TEntity), utcPointInTime As DateTime) As IQueryable(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member TemporalAsOf : Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; * DateTime -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalAsOf (source, utcPointInTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="utcPointInTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="source">Source DbSet on which the temporal operation is applied.</param>
        <param name="utcPointInTime">
          <see cref="T:System.DateTime" /> representing a point in time for which the results should be returned.</param>
        <summary>
                Applies temporal 'AsOf' operation on the given DbSet, which only returns elements that were present in the database at a given
                point in time.
            </summary>
        <returns>An <see cref="T:System.Linq.IQueryable" /> representing the entities at a given point in time.</returns>
        <remarks>
          <para>
                    Temporal information is stored in UTC format on the database, so any <see cref="T:System.DateTime" /> arguments in local time may lead to
                    unexpected results.
                </para>
          <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporalBetween&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; TemporalBetween&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; source, DateTime utcFrom, DateTime utcTo) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; TemporalBetween&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TEntity&gt; source, valuetype System.DateTime utcFrom, valuetype System.DateTime utcTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalBetween``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TemporalBetween(Of TEntity As Class) (source As DbSet(Of TEntity), utcFrom As DateTime, utcTo As DateTime) As IQueryable(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member TemporalBetween : Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; * DateTime * DateTime -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalBetween (source, utcFrom, utcTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="utcFrom" Type="System.DateTime" />
        <Parameter Name="utcTo" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="source">Source DbSet on which the temporal operation is applied.</param>
        <param name="utcFrom">Point in time representing the start of the period for which results should be returned.</param>
        <param name="utcTo">Point in time representing the end of the period for which results should be returned.</param>
        <summary>
                Applies temporal 'Between' operation on the given DbSet, which only returns elements that were present in the database between two
                points in time.
            </summary>
        <returns>An <see cref="T:System.Linq.IQueryable`1" /> representing the entities present in a given time range.</returns>
        <remarks>
          <para>
                    Elements that were created at the starting point are not included in the results, however elements that were removed at the end
                    point are included in the results.
                </para>
          <para>
                    All versions of entities in that were present within the time range are returned, so it is possible to return multiple entities
                    with the same key.
                </para>
          <para>
                    Temporal information is stored in UTC format on the database, so any <see cref="T:System.DateTime" /> arguments in local time may lead to
                    unexpected results.
                </para>
          <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporalContainedIn&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; TemporalContainedIn&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; source, DateTime utcFrom, DateTime utcTo) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; TemporalContainedIn&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TEntity&gt; source, valuetype System.DateTime utcFrom, valuetype System.DateTime utcTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalContainedIn``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TemporalContainedIn(Of TEntity As Class) (source As DbSet(Of TEntity), utcFrom As DateTime, utcTo As DateTime) As IQueryable(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member TemporalContainedIn : Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; * DateTime * DateTime -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalContainedIn (source, utcFrom, utcTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="utcFrom" Type="System.DateTime" />
        <Parameter Name="utcTo" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="source">Source DbSet on which the temporal operation is applied.</param>
        <param name="utcFrom">Point in time representing the start of the period for which results should be returned.</param>
        <param name="utcTo">Point in time representing the end of the period for which results should be returned.</param>
        <summary>
                Applies temporal 'ContainedIn' operation on the given DbSet, which only returns elements that were present in the database between
                two points in time.
            </summary>
        <returns>An <see cref="T:System.Linq.IQueryable`1" /> representing the entities present in a given time range.</returns>
        <remarks>
          <para>
                    Elements that were created at the starting point as well as elements that were removed at the end point are included in the
                    results.
                </para>
          <para>
                    All versions of entities in that were present within the time range are returned, so it is possible to return multiple entities
                    with the same key.
                </para>
          <para>
                    Temporal information is stored in UTC format on the database, so any <see cref="T:System.DateTime" /> arguments in local time may lead to
                    unexpected results.
                </para>
          <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporalFromTo&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TEntity&gt; TemporalFromTo&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt; source, DateTime utcFrom, DateTime utcTo) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TEntity&gt; TemporalFromTo&lt;class TEntity&gt;(class Microsoft.EntityFrameworkCore.DbSet`1&lt;!!TEntity&gt; source, valuetype System.DateTime utcFrom, valuetype System.DateTime utcTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalFromTo``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TemporalFromTo(Of TEntity As Class) (source As DbSet(Of TEntity), utcFrom As DateTime, utcTo As DateTime) As IQueryable(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member TemporalFromTo : Microsoft.EntityFrameworkCore.DbSet&lt;'Entity (requires 'Entity : null)&gt; * DateTime * DateTime -&gt; System.Linq.IQueryable&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalFromTo (source, utcFrom, utcTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.DbSet&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="utcFrom" Type="System.DateTime" />
        <Parameter Name="utcTo" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="source">Source DbSet on which the temporal operation is applied.</param>
        <param name="utcFrom">Point in time representing the start of the period for which results should be returned.</param>
        <param name="utcTo">Point in time representing the end of the period for which results should be returned.</param>
        <summary>
                Applies temporal 'FromTo' operation on the given DbSet, which only returns elements that were present in the database between two
                points in time.
            </summary>
        <returns>An <see cref="T:System.Linq.IQueryable`1" /> representing the entities present in a given time range.</returns>
        <remarks>
          <para>
                    Elements that were created at the starting point as well as elements that were removed at the end point are not included in the
                    results.
                </para>
          <para>
                    All versions of entities in that were present within the time range are returned, so it is possible to return multiple entities
                    with the same key.
                </para>
          <para>
                    Temporal information is stored in UTC format on the database, so any <see cref="T:System.DateTime" /> arguments in local time may lead to
                    unexpected results.
                </para>
          <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
