<Type Name="SqlServerComplexTypePropertyBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class SqlServerComplexTypePropertyBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqlServerComplexTypePropertyBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SqlServerComplexTypePropertyBuilderExtensions" />
  <TypeSignature Language="F#" Value="type SqlServerComplexTypePropertyBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" />.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsSparse">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder IsSparse (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, bool sparse = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder IsSparse(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, bool sparse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSparse (propertyBuilder As ComplexTypePropertyBuilder, Optional sparse As Boolean = true) As ComplexTypePropertyBuilder" />
      <MemberSignature Language="F#" Value="static member IsSparse : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.IsSparse (propertyBuilder, sparse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" RefType="this" />
        <Parameter Name="sparse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
        <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
        <returns>A builder to further configure the property.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSparse&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; IsSparse&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; propertyBuilder, bool sparse = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; IsSparse&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, bool sparse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.IsSparse``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsSparse(Of TProperty) (propertyBuilder As ComplexTypePropertyBuilder(Of TProperty), Optional sparse As Boolean = true) As ComplexTypePropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member IsSparse : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.IsSparse (propertyBuilder, sparse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;" RefType="this" />
        <Parameter Name="sparse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
        <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
        <returns>A builder to further configure the property.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHiLo">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder UseHiLo (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, string? name = default, string? schema = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder UseHiLo(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseHiLo(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHiLo (propertyBuilder As ComplexTypePropertyBuilder, Optional name As String = Nothing, Optional schema As String = Nothing) As ComplexTypePropertyBuilder" />
      <MemberSignature Language="F#" Value="static member UseHiLo : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseHiLo (propertyBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHiLo&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; UseHiLo&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; propertyBuilder, string? name = default, string? schema = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; UseHiLo&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseHiLo``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHiLo(Of TProperty) (propertyBuilder As ComplexTypePropertyBuilder(Of TProperty), Optional name As String = Nothing, Optional schema As String = Nothing) As ComplexTypePropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseHiLo : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseHiLo (propertyBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property being configured.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder UseIdentityColumn (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, int seed, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder UseIdentityColumn(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, int32 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn (propertyBuilder As ComplexTypePropertyBuilder, seed As Integer, Optional increment As Integer = 1) As ComplexTypePropertyBuilder" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder * int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" RefType="this" />
        <Parameter Name="seed" Type="System.Int32" />
        <Parameter Name="increment" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder UseIdentityColumn (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, long seed = 1, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder UseIdentityColumn(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, int64 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn (propertyBuilder As ComplexTypePropertyBuilder, Optional seed As Long = 1, Optional increment As Integer = 1) As ComplexTypePropertyBuilder" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder * int64 * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" RefType="this" />
        <Parameter Name="seed" Type="System.Int64" />
        <Parameter Name="increment" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; UseIdentityColumn&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; propertyBuilder, int seed, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; UseIdentityColumn&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, int32 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn(Of TProperty) (propertyBuilder As ComplexTypePropertyBuilder(Of TProperty), seed As Integer, Optional increment As Integer = 1) As ComplexTypePropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt; * int * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;" RefType="this" />
        <Parameter Name="seed" Type="System.Int32" />
        <Parameter Name="increment" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property being configured.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityColumn&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; UseIdentityColumn&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; propertyBuilder, long seed = 1, int increment = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; UseIdentityColumn&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, int64 seed, int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseIdentityColumn(Of TProperty) (propertyBuilder As ComplexTypePropertyBuilder(Of TProperty), Optional seed As Long = 1, Optional increment As Integer = 1) As ComplexTypePropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseIdentityColumn : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt; * int64 * int -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn (propertyBuilder, seed, increment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;" RefType="this" />
        <Parameter Name="seed" Type="System.Int64" />
        <Parameter Name="increment" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property being configured.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="seed">The value that is used for the very first row loaded into the table.</param>
        <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
        <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSequence">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder UseSequence (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, string? name = default, string? schema = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder UseSequence(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSequence (propertyBuilder As ComplexTypePropertyBuilder, Optional name As String = Nothing, Optional schema As String = Nothing) As ComplexTypePropertyBuilder" />
      <MemberSignature Language="F#" Value="static member UseSequence : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseSequence (propertyBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <summary>
                Configures the key property to use a sequence-based key value generation pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSequence&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; UseSequence&lt;TProperty&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt; propertyBuilder, string? name = default, string? schema = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; UseSequence&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder`1&lt;!!TProperty&gt; propertyBuilder, string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseSequence``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSequence(Of TProperty) (propertyBuilder As ComplexTypePropertyBuilder(Of TProperty), Optional name As String = Nothing, Optional schema As String = Nothing) As ComplexTypePropertyBuilder(Of TProperty)" />
      <MemberSignature Language="F#" Value="static member UseSequence : Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt; * string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;'Property&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseSequence (propertyBuilder, name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder&lt;TProperty&gt;" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">The type of the property being configured.</typeparam>
        <param name="propertyBuilder">The builder for the property being configured.</param>
        <param name="name">The name of the sequence.</param>
        <param name="schema">The schema of the sequence.</param>
        <summary>
                Configures the key property to use a sequence-based key value generation pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
