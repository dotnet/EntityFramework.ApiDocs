<Type Name="DbContextOptionsBuilder" FullName="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder">
  <TypeSignature Language="C#" Value="public class DbContextOptionsBuilder : Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbContextOptionsBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class DbContextOptionsBuilder&#xA;Implements IDbContextOptionsBuilderInfrastructure" />
  <TypeSignature Language="F#" Value="type DbContextOptionsBuilder = class&#xA;    interface IDbContextOptionsBuilderInfrastructure" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Provides a simple API surface for configuring <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />. Databases (and other extensions)
                typically define extension methods on this object that allow you to configure the database connection (and other
                options) to be used for a context.
            </summary>
    <remarks>
      <para>
                    You can use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> to configure a context by overriding
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> or creating a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />
                    externally and passing it to the context constructor.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbContextOptionsBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> class with no options set.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbContextOptionsBuilder (Microsoft.EntityFrameworkCore.DbContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContextOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As DbContextOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.DbContextOptionsBuilder : Microsoft.EntityFrameworkCore.DbContextOptions -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="new Microsoft.EntityFrameworkCore.DbContextOptionsBuilder options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.DbContextOptions" />
      </Parameters>
      <Docs>
        <param name="options">The options to be configured.</param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" /> class to further configure
                a given <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInterceptors">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder AddInterceptors (params Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[] interceptors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder AddInterceptors(class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[] interceptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.AddInterceptors(Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddInterceptors (ParamArray interceptors As IInterceptor()) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddInterceptors : Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[] -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.AddInterceptors : Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[] -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.AddInterceptors interceptors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interceptors" Type="Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[]" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="interceptors">The interceptors to add.</param>
        <summary>
                Adds <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> instances to those registered on the context.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Interceptors can be used to view, change, or suppress operations taken by Entity Framework.
                    See the specific implementations of <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> for details. For example, 'IDbCommandInterceptor'.
                </para>
          <para>
                    Extensions can also register multiple <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" />s in the internal service provider.
                    If both injected and application interceptors are found, then the injected interceptors are run in the
                    order that they are resolved from the service provider, and then the application interceptors are run
                    in the order that they were added to the context.
                </para>
          <para>
                    Calling this method multiple times will result in all interceptors in every call being added to the context.
                    Interceptors added in a previous call are not overridden by interceptors added in a later call.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-interceptors">EF Core interceptors</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInterceptors">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder AddInterceptors (System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; interceptors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder AddInterceptors(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; interceptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.AddInterceptors(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddInterceptors (interceptors As IEnumerable(Of IInterceptor)) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddInterceptors : seq&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.AddInterceptors : seq&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.AddInterceptors interceptors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interceptors" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="interceptors">The interceptors to add.</param>
        <summary>
                Adds <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> instances to those registered on the context.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Interceptors can be used to view, change, or suppress operations taken by Entity Framework.
                    See the specific implementations of <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" /> for details. For example, 'IDbCommandInterceptor'.
                </para>
          <para>
                    A single interceptor instance can implement multiple different interceptor interfaces. It will be registered as
                    an interceptor for all interfaces that it implements.
                </para>
          <para>
                    Extensions can also register multiple <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor" />s in the internal service provider.
                    If both injected and application interceptors are found, then the injected interceptors are run in the
                    order that they are resolved from the service provider, and then the application interceptors are run
                    in the order that they were added to the context.
                </para>
          <para>
                    Calling this method multiple times will result in all interceptors in every call being added to the context.
                    Interceptors added in a previous call are not overridden by interceptors added in a later call.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-interceptors">EF Core interceptors</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureLoggingCacheTime">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureLoggingCacheTime (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureLoggingCacheTime(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ConfigureLoggingCacheTime(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConfigureLoggingCacheTime (timeSpan As TimeSpan) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member ConfigureLoggingCacheTime : TimeSpan -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.ConfigureLoggingCacheTime : TimeSpan -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.ConfigureLoggingCacheTime timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="timeSpan">The maximum time period over which to skip logging checks before checking again.</param>
        <summary>
                Configures how long EF Core will cache logging configuration in certain high-performance paths. This makes
                EF Core skip potentially costly logging checks, but means that runtime logging changes (e.g. registering a
                new <see cref="T:System.Diagnostics.DiagnosticListener" /> may not be taken into account right away).
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Defaults to one second.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureWarnings">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureWarnings (Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder&gt; warningsConfigurationBuilderAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureWarnings(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder&gt; warningsConfigurationBuilderAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ConfigureWarnings(System.Action{Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConfigureWarnings (warningsConfigurationBuilderAction As Action(Of WarningsConfigurationBuilder)) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member ConfigureWarnings : Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.ConfigureWarnings : Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.ConfigureWarnings warningsConfigurationBuilderAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="warningsConfigurationBuilderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder&gt;" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="warningsConfigurationBuilderAction">
                An action to configure the warning behavior.
            </param>
        <summary>
                Configures the runtime behavior of warnings generated by Entity Framework. You can set a default
                behavior and behaviors for each warning type.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Note that changing this configuration can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    configurations will be used for a given application.
                </para>
          <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
        <example>
          <code>
             optionsBuilder.ConfigureWarnings(warnings =&gt;
                 warnings.Default(WarningBehavior.Ignore)
                     .Log(CoreEventId.IncludeIgnoredWarning, CoreEventId.ModelValidationWarning)
                     .Throw(RelationalEventId.BoolWithDefaultWarning));
                 </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ConfigureWarnings">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureWarnings (Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder&gt; warningsConfigurationBuilderAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ConfigureWarnings(class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder&gt; warningsConfigurationBuilderAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ConfigureWarnings(System.Action{Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConfigureWarnings (warningsConfigurationBuilderAction As Action(Of WarningsConfigurationBuilder)) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member ConfigureWarnings : Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.ConfigureWarnings : Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.ConfigureWarnings warningsConfigurationBuilderAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="warningsConfigurationBuilderAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Infrastructure.WarningsConfigurationBuilder&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="warningsConfigurationBuilderAction">
                An action to configure the warning behavior.
            </param>
        <summary>
                Configures the runtime behavior of warnings generated by Entity Framework. You can set a default behavior and behaviors for
                each warning type.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
        <example>
          <code>
                    optionsBuilder.ConfigureWarnings(warnings =&gt; 
                        warnings.Default(WarningBehavior.Ignore)
                                .Log(CoreEventId.IncludeIgnoredWarning, CoreEventId.ModelValidationWarning)
                                .Throw(RelationalEventId.QueryClientEvaluationWarning))
                </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="EnableDetailedErrors">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableDetailedErrors (bool detailedErrorsEnabled = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableDetailedErrors(bool detailedErrorsEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableDetailedErrors(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableDetailedErrors (Optional detailedErrorsEnabled As Boolean = true) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member EnableDetailedErrors : bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.EnableDetailedErrors : bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.EnableDetailedErrors detailedErrorsEnabled" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="detailedErrorsEnabled" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="detailedErrorsEnabled">To be added.</param>
        <summary>
                Enables detailed errors when handling of data value exceptions that occur during processing of store query results. Such errors
                most often occur due to misconfiguration of entity properties. E.g. If a property is configured to be of type
                'int', but the underlying data in the store is actually of type 'string', then an exception will be generated
                at runtime during processing of the data value. When this option is enabled and a data error is encountered, the
                generated exception will include details of the specific entity property that generated the error.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Enabling this option incurs a small performance overhead during query execution.
                </para>
          <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSensitiveDataLogging">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableSensitiveDataLogging ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableSensitiveDataLogging() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableSensitiveDataLogging" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableSensitiveDataLogging () As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member EnableSensitiveDataLogging : unit -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.EnableSensitiveDataLogging : unit -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.EnableSensitiveDataLogging " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Enables application data to be included in exception messages, logging, etc. This can include the values assigned to properties
                of your entity instances, parameter values for commands being sent to the database, and other such data. You should only enable
                this flag if you have the appropriate security measures in place based on the sensitivity of this data.
            </summary>
        <returns> The same builder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSensitiveDataLogging">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableSensitiveDataLogging (bool sensitiveDataLoggingEnabled = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableSensitiveDataLogging(bool sensitiveDataLoggingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableSensitiveDataLogging(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableSensitiveDataLogging (Optional sensitiveDataLoggingEnabled As Boolean = true) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member EnableSensitiveDataLogging : bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.EnableSensitiveDataLogging : bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.EnableSensitiveDataLogging sensitiveDataLoggingEnabled" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensitiveDataLoggingEnabled" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sensitiveDataLoggingEnabled">If <see langword="true" />, then sensitive data is logged.</param>
        <summary>
                Enables application data to be included in exception messages, logging, etc. This can include the
                values assigned to properties of your entity instances, parameter values for commands being sent
                to the database, and other such data. You should only enable this flag if you have the appropriate
                security measures in place based on the sensitivity of this data.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableServiceProviderCaching">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableServiceProviderCaching (bool cacheServiceProvider = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableServiceProviderCaching(bool cacheServiceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableServiceProviderCaching(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableServiceProviderCaching (Optional cacheServiceProvider As Boolean = true) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member EnableServiceProviderCaching : bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.EnableServiceProviderCaching : bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.EnableServiceProviderCaching cacheServiceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheServiceProvider" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cacheServiceProvider">If <see langword="true" />, then the internal service provider is cached.</param>
        <summary>
                Enables or disables caching of internal service providers. Disabling caching can
                massively impact performance and should only be used in testing scenarios that
                build many service providers for test isolation.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then setting this option will have no effect.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableThreadSafetyChecks">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableThreadSafetyChecks (bool enableChecks = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder EnableThreadSafetyChecks(bool enableChecks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.EnableThreadSafetyChecks(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableThreadSafetyChecks (Optional enableChecks As Boolean = true) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member EnableThreadSafetyChecks : bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.EnableThreadSafetyChecks : bool -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.EnableThreadSafetyChecks enableChecks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enableChecks" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="enableChecks">To be added.</param>
        <summary>
                Disables concurrency detection, which detects many cases of erroneous concurrent usage of a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                instance and causes an informative exception to be thrown. This provides a minor performance improvement, but if a
                <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance is used concurrently, the behavior will be undefined and the program may fail in
                unpredictable ways.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Only disable concurrency detection after confirming that the performance gains are considerable, and the application has
                    been thoroughly tested against concurrency bugs.
                </para>
          <para>
                    Note that if the application is setting the internal service provider through a call to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then this option must configured the same way
                    for all uses of that service provider. Consider instead not calling <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
                    so that EF will manage the service providers and can create new instances as required.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbContextOptionsBuilder.Equals obj" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbContextOptionsBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConfigured">
      <MemberSignature Language="C#" Value="public virtual bool IsConfigured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConfigured" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConfigured As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsConfigured : bool" Usage="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether any options have been configured.
            </summary>
        <value>To be added.</value>
        <remarks>
                This can be useful when you have overridden <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> to configure
                the context, but in some cases you also externally provide options via the context constructor. This property can be
                used to determine if the options have already been set, and skip some or all of the logic in
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogTo">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo (Func&lt;Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter, Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.EventData&gt; logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo(class System.Func`3&lt;valuetype Microsoft.Extensions.Logging.EventId, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Diagnostics.EventData&gt; logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Action{Microsoft.EntityFrameworkCore.Diagnostics.EventData})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LogTo (filter As Func(Of EventId, LogLevel, Boolean), logger As Action(Of EventData)) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member LogTo : Func&lt;Microsoft.Extensions.Logging.EventId, Microsoft.Extensions.Logging.LogLevel, bool&gt; * Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.EventData&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.LogTo : Func&lt;Microsoft.Extensions.Logging.EventId, Microsoft.Extensions.Logging.LogLevel, bool&gt; * Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.EventData&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.LogTo (filter, logger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Func&lt;Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="logger" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Diagnostics.EventData&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="filter">Delegate that returns true to log the message or false to ignore it.</param>
        <param name="logger">Delegate called when there is a message to log.</param>
        <summary>
                Logs events to a custom logger delegate filtered by a custom filter delegate. The filter should return true to
                log a message, or false to filter it out of the log.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" /> overload for default logging of
                    all events.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.EventId},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to log only events in specific categories.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to use a custom filter for events.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogTo">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo (Action&lt;string&gt; action, Microsoft.Extensions.Logging.LogLevel minimumLevel = Microsoft.Extensions.Logging.LogLevel.Debug, Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo(class System.Action`1&lt;string&gt; action, valuetype Microsoft.Extensions.Logging.LogLevel minimumLevel, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LogTo (action As Action(Of String), Optional minimumLevel As LogLevel = Microsoft.Extensions.Logging.LogLevel.Debug, Optional options As Nullable(Of DbContextLoggerOptions) = Nothing) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member LogTo : Action&lt;string&gt; * Microsoft.Extensions.Logging.LogLevel * Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.LogTo : Action&lt;string&gt; * Microsoft.Extensions.Logging.LogLevel * Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.LogTo (action, minimumLevel, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="minimumLevel" Type="Microsoft.Extensions.Logging.LogLevel" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="options" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="action">Delegate called when there is a message to log.</param>
        <param name="minimumLevel">The minimum level of logging event to log. Defaults to <see cref="F:Microsoft.Extensions.Logging.LogLevel.Debug" /></param>
        <param name="options">
                Formatting options for log messages. Passing null (the default) means use <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions.DefaultWithLocalTime" /></param>
        <summary>
                Logs using the supplied action. For example, use <c>optionsBuilder.LogTo(Console.WriteLine)</c> to
                log to the console.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    This overload allows the minimum level of logging and the log formatting to be controlled.
                    Use the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.EventId},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to log only specific events.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to log only events in specific categories.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to use a custom filter for events.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Action{Microsoft.EntityFrameworkCore.Diagnostics.EventData})" /> overload to log to a fully custom logger.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogTo">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo (Action&lt;string&gt; action, Func&lt;Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter, Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo(class System.Action`1&lt;string&gt; action, class System.Func`3&lt;valuetype Microsoft.Extensions.Logging.EventId, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LogTo (action As Action(Of String), filter As Func(Of EventId, LogLevel, Boolean), Optional options As Nullable(Of DbContextLoggerOptions) = Nothing) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member LogTo : Action&lt;string&gt; * Func&lt;Microsoft.Extensions.Logging.EventId, Microsoft.Extensions.Logging.LogLevel, bool&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.LogTo : Action&lt;string&gt; * Func&lt;Microsoft.Extensions.Logging.EventId, Microsoft.Extensions.Logging.LogLevel, bool&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.LogTo (action, filter, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="filter" Type="System.Func&lt;Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="options" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt;" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="action">Delegate called when there is a message to log.</param>
        <param name="filter">Delegate that returns true to log the message or false to ignore it.</param>
        <param name="options">
                Formatting options for log messages. Passing null (the default) means use <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions.DefaultWithLocalTime" /></param>
        <summary>
                Logs events filtered by a supplied custom filter delegate. The filter should return true to
                log a message, or false to filter it out of the log.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" /> overload for default logging of
                    all events.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.EventId},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to log only events in specific categories.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Action{Microsoft.EntityFrameworkCore.Diagnostics.EventData})" /> overload to log to a fully custom logger.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogTo">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo (Action&lt;string&gt; action, System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Logging.EventId&gt; events, Microsoft.Extensions.Logging.LogLevel minimumLevel = Microsoft.Extensions.Logging.LogLevel.Debug, Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo(class System.Action`1&lt;string&gt; action, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Extensions.Logging.EventId&gt; events, valuetype Microsoft.Extensions.Logging.LogLevel minimumLevel, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.EventId},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LogTo (action As Action(Of String), events As IEnumerable(Of EventId), Optional minimumLevel As LogLevel = Microsoft.Extensions.Logging.LogLevel.Debug, Optional options As Nullable(Of DbContextLoggerOptions) = Nothing) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member LogTo : Action&lt;string&gt; * seq&lt;Microsoft.Extensions.Logging.EventId&gt; * Microsoft.Extensions.Logging.LogLevel * Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.LogTo : Action&lt;string&gt; * seq&lt;Microsoft.Extensions.Logging.EventId&gt; * Microsoft.Extensions.Logging.LogLevel * Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.LogTo (action, events, minimumLevel, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="events" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Logging.EventId&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="minimumLevel" Type="Microsoft.Extensions.Logging.LogLevel" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="options" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="action">Delegate called when there is a message to log.</param>
        <param name="events">The <see cref="T:Microsoft.Extensions.Logging.EventId" /> of each event to log.</param>
        <param name="minimumLevel">The minimum level of logging event to log. Defaults to <see cref="F:Microsoft.Extensions.Logging.LogLevel.Debug" /></param>
        <param name="options">
                Formatting options for log messages. Passing null (the default) means use <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions.DefaultWithLocalTime" /></param>
        <summary>
                Logs the specified events using the supplied action. For example, use
                <c>optionsBuilder.LogTo(Console.WriteLine, new[] { CoreEventId.ContextInitialized })</c> to log the
                <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId.ContextInitialized" /> event to the console.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" /> overload for default logging of
                    all events.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to log only events in specific categories.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to use a custom filter for events.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Action{Microsoft.EntityFrameworkCore.Diagnostics.EventData})" /> overload to log to a fully custom logger.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogTo">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo (Action&lt;string&gt; action, System.Collections.Generic.IEnumerable&lt;string&gt; categories, Microsoft.Extensions.Logging.LogLevel minimumLevel = Microsoft.Extensions.Logging.LogLevel.Debug, Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder LogTo(class System.Action`1&lt;string&gt; action, class System.Collections.Generic.IEnumerable`1&lt;string&gt; categories, valuetype Microsoft.Extensions.Logging.LogLevel minimumLevel, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LogTo (action As Action(Of String), categories As IEnumerable(Of String), Optional minimumLevel As LogLevel = Microsoft.Extensions.Logging.LogLevel.Debug, Optional options As Nullable(Of DbContextLoggerOptions) = Nothing) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member LogTo : Action&lt;string&gt; * seq&lt;string&gt; * Microsoft.Extensions.Logging.LogLevel * Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.LogTo : Action&lt;string&gt; * seq&lt;string&gt; * Microsoft.Extensions.Logging.LogLevel * Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt; -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.LogTo (action, categories, minimumLevel, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="categories" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="minimumLevel" Type="Microsoft.Extensions.Logging.LogLevel" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="options" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions&gt;" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="action">Delegate called when there is a message to log.</param>
        <param name="categories">The <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory" /> of each event to log.</param>
        <param name="minimumLevel">The minimum level of logging event to log. Defaults to <see cref="F:Microsoft.Extensions.Logging.LogLevel.Debug" /></param>
        <param name="options">
                Formatting options for log messages. Passing null (the default) means use <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions.DefaultWithLocalTime" /></param>
        <summary>
                Logs all events in the specified categories using the supplied action. For example, use
                <c>optionsBuilder.LogTo(Console.WriteLine, new[] { DbLoggerCategory.Infrastructure.Name })</c> to log all
                events in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Infrastructure" /> category.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" /> overload for default logging of
                    all events.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.EventId},Microsoft.Extensions.Logging.LogLevel,System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to log only specific events.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Action{System.String},System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Nullable{Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions})" />
                    overload to use a custom filter for events.
                    Use the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.LogTo(System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Action{Microsoft.EntityFrameworkCore.Diagnostics.EventData})" /> overload to log to a fully custom logger.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension&lt;TExtension&gt;">
      <MemberSignature Language="C#" Value="void IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension&lt;TExtension&gt; (TExtension extension) where TExtension : class, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension;" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension&lt;class (class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension) TExtension&gt;(!!TExtension extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IDbContextOptionsBuilderInfrastructure#AddOrUpdateExtension``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Sub AddOrUpdateExtension(Of TExtension As {Class, IDbContextOptionsExtension}) (extension As TExtension) Implements IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension : 'Extension -&gt; unit (requires 'Extension : null and 'Extension :&gt; Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension)&#xA;override this.Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension : 'Extension -&gt; unit (requires 'Extension : null and 'Extension :&gt; Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension)" Usage="dbContextOptionsBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension extension" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtension">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extension" Type="TExtension" />
      </Parameters>
      <Docs>
        <typeparam name="TExtension">The type of extension to be added.</typeparam>
        <param name="extension">The extension to be added.</param>
        <summary>
                Adds the given extension to the options. If an existing extension of the same type already exists, it will be replaced.
            </summary>
        <remarks>
                This method is intended for use by extension methods to configure the context. It is not intended to be used in
                application code.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbContextOptions Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.Options" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Options As DbContextOptions" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.EntityFrameworkCore.DbContextOptions" Usage="Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the options being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceService&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ReplaceService&lt;TService,TImplementation&gt; () where TImplementation : TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ReplaceService&lt;TService, (!!TService) TImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ReplaceService``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceService(Of TService, TImplementation) () As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member ReplaceService : unit -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.ReplaceService : unit -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.ReplaceService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService" />
        <TypeParameter Name="TImplementation">
          <Constraints>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService">The type (usually an interface) that defines the contract of the service to replace.</typeparam>
        <typeparam name="TImplementation">The new implementation type for the service.</typeparam>
        <summary>
                Replaces all internal Entity Framework implementations of a service contract with a different
                implementation.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    This method can only be used when EF is building and managing its internal service provider.
                    If the service provider is being built externally and passed to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then replacement services should be configured on
                    that service provider before it is passed to EF.
                </para>
          <para>
                    The replacement service gets the same scope as the EF service that it is replacing.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceService&lt;TService,TCurrentImplementation,TNewImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ReplaceService&lt;TService,TCurrentImplementation,TNewImplementation&gt; () where TCurrentImplementation : TService where TNewImplementation : TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder ReplaceService&lt;TService, (!!TService) TCurrentImplementation, (!!TService) TNewImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ReplaceService``3" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceService(Of TService, TCurrentImplementation, TNewImplementation) () As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member ReplaceService : unit -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.ReplaceService : unit -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.ReplaceService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService" />
        <TypeParameter Name="TCurrentImplementation">
          <Constraints>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TNewImplementation">
          <Constraints>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService">The type (usually an interface) that defines the contract of the service to replace.</typeparam>
        <typeparam name="TCurrentImplementation">The current implementation type for the service.</typeparam>
        <typeparam name="TNewImplementation">The new implementation type for the service.</typeparam>
        <summary>
                Replaces the internal Entity Framework implementation of a specific implementation of a service contract
                with a different implementation.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    This method is useful for replacing a single instance of services that can be legitimately registered
                    multiple times in the EF internal service provider.
                </para>
          <para>
                    This method can only be used when EF is building and managing its internal service provider.
                    If the service provider is being built externally and passed to
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />, then replacement services should be configured on
                    that service provider before it is passed to EF.
                </para>
          <para>
                    The replacement service gets the same scope as the EF service that it is replacing.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dbContextOptionsBuilder.ToString " />
      <MemberSignature Language="C#" Value="public override string? ToString ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseApplicationServiceProvider">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseApplicationServiceProvider (IServiceProvider serviceProvider);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseApplicationServiceProvider(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseApplicationServiceProvider(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseApplicationServiceProvider (serviceProvider As IServiceProvider) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseApplicationServiceProvider : IServiceProvider -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.UseApplicationServiceProvider : IServiceProvider -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.UseApplicationServiceProvider serviceProvider" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseApplicationServiceProvider (IServiceProvider? serviceProvider);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">The service provider to be used.</param>
        <summary>
                Sets the <see cref="T:System.IServiceProvider" /> from which application services will be obtained. This
                is done automatically when using 'AddDbContext' or 'AddDbContextPool',
                so it is rare that this method needs to be called.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseInternalServiceProvider">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInternalServiceProvider (IServiceProvider serviceProvider);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInternalServiceProvider(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseInternalServiceProvider (serviceProvider As IServiceProvider) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseInternalServiceProvider : IServiceProvider -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.UseInternalServiceProvider : IServiceProvider -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.UseInternalServiceProvider serviceProvider" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseInternalServiceProvider (IServiceProvider? serviceProvider);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">The service provider to be used.</param>
        <summary>
                Sets the <see cref="T:System.IServiceProvider" /> that the context should resolve all of its services from. EF will
                create and manage a service provider if none is specified.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    The service provider must contain all the services required by Entity Framework (and the database being
                    used). The Entity Framework services can be registered using an extension method on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                    For example, the Microsoft SQL Server provider includes an AddEntityFrameworkSqlServer() method to add
                    the required services.
                </para>
          <para>
                    If the <see cref="T:System.IServiceProvider" /> has a <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> or
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> registered, then this will be used as the options for
                    this context instance.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLoggerFactory">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLoggerFactory (Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLoggerFactory(class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseLoggerFactory (loggerFactory As ILoggerFactory) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseLoggerFactory : Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.UseLoggerFactory : Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.UseLoggerFactory loggerFactory" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseLoggerFactory (Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="loggerFactory">The logger factory to be used.</param>
        <summary>
                Sets the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> that will be used to create <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instances
                for logging done by this context.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    There is no need to call this method when using one of the 'AddDbContext' methods, including 'AddDbContextPool'.
                    These methods ensure that the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> used by EF is obtained from the application service provider.
                </para>
          <para>
                    This method cannot be used if the application is setting the internal service provider
                    through a call to <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />. In this case, the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />
                    should be configured directly in that service provider.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-logging">Logging</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseMemoryCache">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseMemoryCache (Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseMemoryCache(class Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseMemoryCache(Microsoft.Extensions.Caching.Memory.IMemoryCache)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseMemoryCache (memoryCache As IMemoryCache) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseMemoryCache : Microsoft.Extensions.Caching.Memory.IMemoryCache -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.UseMemoryCache : Microsoft.Extensions.Caching.Memory.IMemoryCache -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.UseMemoryCache memoryCache" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseMemoryCache (Microsoft.Extensions.Caching.Memory.IMemoryCache? memoryCache);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memoryCache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Parameters>
      <Docs>
        <param name="memoryCache">The memory cache to be used.</param>
        <summary>
                Sets the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to be used for query caching by this context.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    Note that changing the memory cache can cause EF to build a new internal service provider, which
                    may cause issues with performance. Generally it is expected that no more than one or two different
                    instances will be used for a given application.
                </para>
          <para>
                    This method cannot be used if the application is setting the internal service provider
                    through a call to <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" />. In this case, the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
                    should be configured directly in that service provider.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>  and
                    <see href="https://learn.microsoft.com/dotnet/core/extensions/caching">Caching in .NET</see> for more information.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseModel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseModel (Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseModel(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseModel (model As IModel) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseModel : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.UseModel : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.UseModel model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
      </Parameters>
      <Docs>
        <param name="model">The model to be used.</param>
        <summary>
                Sets the model to be used for the context. If the model is set, then <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />
                will not be run.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    If setting an externally created model <see cref="M:Microsoft.EntityFrameworkCore.ModelBuilder.FinalizeModel" /> should be called first.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-modeling">Model Building</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseQueryTrackingBehavior">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseQueryTrackingBehavior (Microsoft.EntityFrameworkCore.QueryTrackingBehavior queryTrackingBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseQueryTrackingBehavior(valuetype Microsoft.EntityFrameworkCore.QueryTrackingBehavior queryTrackingBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseQueryTrackingBehavior(Microsoft.EntityFrameworkCore.QueryTrackingBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseQueryTrackingBehavior (queryTrackingBehavior As QueryTrackingBehavior) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseQueryTrackingBehavior : Microsoft.EntityFrameworkCore.QueryTrackingBehavior -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.UseQueryTrackingBehavior : Microsoft.EntityFrameworkCore.QueryTrackingBehavior -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.UseQueryTrackingBehavior queryTrackingBehavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryTrackingBehavior" Type="Microsoft.EntityFrameworkCore.QueryTrackingBehavior" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="queryTrackingBehavior">To be added.</param>
        <summary>
                Sets the tracking behavior for LINQ queries run against the context. Disabling change tracking
                is useful for read-only scenarios because it avoids the overhead of setting up change tracking for each
                entity instance. You should not disable change tracking if you want to manipulate entity instances and
                persist those changes to the database using <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    This method sets the default behavior for all contexts created with these options, but you can override this
                    behavior for a context instance using <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior" /> or on individual
                    queries using the <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
                    and <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})" /> methods.
                </para>
          <para>
                    The default value is <see cref="F:Microsoft.EntityFrameworkCore.QueryTrackingBehavior.TrackAll" />. This means
                    the change tracker will keep track of changes for all entities that are returned from a LINQ query.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> and
                    <see href="https://aka.ms/efcore-docs-query">Querying data with EF Core</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseRootApplicationServiceProvider">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseRootApplicationServiceProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseRootApplicationServiceProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseRootApplicationServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseRootApplicationServiceProvider () As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseRootApplicationServiceProvider : unit -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.UseRootApplicationServiceProvider : unit -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.UseRootApplicationServiceProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Resolves the root <see cref="T:System.IServiceProvider" /> from from the scoped application service provider. The root provider can
                be used to obtain singleton application services from singleton internal services.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    This is an advanced option that is rarely needed by normal applications. Calling this method will result in a new internal
                    service provider being created for every different root application service provider.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseRootApplicationServiceProvider">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseRootApplicationServiceProvider (IServiceProvider? rootServiceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder UseRootApplicationServiceProvider(class System.IServiceProvider rootServiceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseRootApplicationServiceProvider(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UseRootApplicationServiceProvider (rootServiceProvider As IServiceProvider) As DbContextOptionsBuilder" />
      <MemberSignature Language="F#" Value="abstract member UseRootApplicationServiceProvider : IServiceProvider -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&#xA;override this.UseRootApplicationServiceProvider : IServiceProvider -&gt; Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" Usage="dbContextOptionsBuilder.UseRootApplicationServiceProvider rootServiceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContextOptionsBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootServiceProvider" Type="System.IServiceProvider" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="rootServiceProvider">The service provider to be used.</param>
        <summary>
                Sets the root <see cref="T:System.IServiceProvider" /> from which singleton application services can be obtained from singleton
                internal services.
            </summary>
        <returns>The same builder instance so that multiple calls can be chained.</returns>
        <remarks>
          <para>
                    This is an advanced option that is rarely needed by normal applications. Calling this method will result in a new internal
                    service provider being created for every different root application service provider.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
