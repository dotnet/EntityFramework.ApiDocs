<Type Name="MutablePropertyExtensions" FullName="Microsoft.EntityFrameworkCore.MutablePropertyExtensions">
  <TypeSignature Language="C#" Value="public static class MutablePropertyExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MutablePropertyExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.MutablePropertyExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module MutablePropertyExtensions" />
  <TypeSignature Language="F#" Value="type MutablePropertyExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-6.0">
      <AttributeName Language="C#">[System.Obsolete("Use IMutableProperty")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Use IMutableProperty")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FindContainingPrimaryKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey FindContainingPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey FindContainingPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.FindContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindContainingPrimaryKey (property As IMutableProperty) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member FindContainingPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.FindContainingPrimaryKey property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to get primary key for. </param>
        <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
        <returns>
                The primary that use this property, or <see langword="null" /> if it is not part of the primary key.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFirstPrincipal">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableProperty FindFirstPrincipal (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty FindFirstPrincipal(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.FindFirstPrincipal(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindFirstPrincipal (property As IMutableProperty) As IMutableProperty" />
      <MemberSignature Language="F#" Value="static member FindFirstPrincipal : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.FindFirstPrincipal property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The foreign key property. </param>
        <summary>
                Finds the first principal property that the given property is constrained by
                if the given property is part of a foreign key.
            </summary>
        <returns> The first associated principal property, or <see langword="null" /> if none exists. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPrincipals">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; FindPrincipals (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt; FindPrincipals(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.FindPrincipals(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindPrincipals (property As IMutableProperty) As IReadOnlyList(Of IMutableProperty)" />
      <MemberSignature Language="F#" Value="static member FindPrincipals : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.FindPrincipals property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use IMutableProperty.GetPrincipals")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use IMutableProperty.GetPrincipals")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="property">The foreign key property.</param>
        <summary>
                Finds the list of principal properties including the given property that the given property is constrained by
                if the given property is part of a foreign key.
            </summary>
        <returns>The list of all associated principal properties including the given property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingForeignKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetContainingForeignKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt; GetContainingForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingForeignKeys (property As IMutableProperty) As IEnumerable(Of IMutableForeignKey)" />
      <MemberSignature Language="F#" Value="static member GetContainingForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to get foreign keys for. </param>
        <summary>
                Gets all foreign keys that use this property (including composite foreign keys in which this property
                is included).
            </summary>
        <returns>
                The foreign keys that use this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingIndexes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableIndex&gt; GetContainingIndexes (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableIndex&gt; GetContainingIndexes(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingIndexes(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingIndexes (property As IMutableProperty) As IEnumerable(Of IMutableIndex)" />
      <MemberSignature Language="F#" Value="static member GetContainingIndexes : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableIndex&gt;" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingIndexes property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to get indexes for. </param>
        <summary>
                Gets all indexes that use this property (including composite indexes in which this property
                is included).
            </summary>
        <returns>
                The indexes that use this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingKeys">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt; GetContainingKeys (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt; GetContainingKeys(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingKeys (property As IMutableProperty) As IEnumerable(Of IMutableKey)" />
      <MemberSignature Language="F#" Value="static member GetContainingKeys : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt;" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to get primary and alternate keys for. </param>
        <summary>
                Gets all primary or alternate keys that use this property (including composite keys in which this property
                is included).
            </summary>
        <returns>
                The primary and alternate keys that use this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingPrimaryKey">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetContainingPrimaryKey (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableKey GetContainingPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContainingPrimaryKey (property As IMutableProperty) As IMutableKey" />
      <MemberSignature Language="F#" Value="static member GetContainingPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableKey" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use FindContainingPrimaryKey()")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use FindContainingPrimaryKey()")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="property"> The property to get primary key for. </param>
        <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
        <returns>
                The primary that use this property, or <c>null</c> if it is not part of the primary key.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicode">
      <MemberSignature Language="C#" Value="public static void IsUnicode (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, bool? unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsUnicode(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, valuetype System.Nullable`1&lt;bool&gt; unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub IsUnicode (property As IMutableProperty, unicode As Nullable(Of Boolean))" />
      <MemberSignature Language="F#" Value="static member IsUnicode : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Nullable&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode (property, unicode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="property"> The property to set the value for. </param>
        <param name="unicode"> True if the property accepts Unicode characters, false if it does not, null to clear the setting. </param>
        <summary>
                Sets a value indicating whether or not this property can persist Unicode characters.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAfterSaveBehavior">
      <MemberSignature Language="C#" Value="public static void SetAfterSaveBehavior (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior? afterSaveBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAfterSaveBehavior(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; afterSaveBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetAfterSaveBehavior(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetAfterSaveBehavior (property As IMutableProperty, afterSaveBehavior As Nullable(Of PropertySaveBehavior))" />
      <MemberSignature Language="F#" Value="static member SetAfterSaveBehavior : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetAfterSaveBehavior (property, afterSaveBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="afterSaveBehavior" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property. </param>
        <param name="afterSaveBehavior">
                A value indicating whether this property can be modified after the entity is saved to the database.
            </param>
        <summary>
          <para>
                    Gets or sets a value indicating whether this property can be modified after the entity is
                    saved to the database.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a new value is assigned to this property after the entity exists in the database.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any modification to the
                    property value of an entity that already exists in the database will be ignored.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeforeSaveBehavior">
      <MemberSignature Language="C#" Value="public static void SetBeforeSaveBehavior (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior? beforeSaveBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBeforeSaveBehavior(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; beforeSaveBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetBeforeSaveBehavior(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetBeforeSaveBehavior (property As IMutableProperty, beforeSaveBehavior As Nullable(Of PropertySaveBehavior))" />
      <MemberSignature Language="F#" Value="static member SetBeforeSaveBehavior : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetBeforeSaveBehavior (property, beforeSaveBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="beforeSaveBehavior" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property. </param>
        <param name="beforeSaveBehavior">
                A value indicating whether this property can be modified before the entity is saved to the database.
            </param>
        <summary>
          <para>
                    Gets or sets a value indicating whether this property can be modified before the entity is
                    saved to the database.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a value is assigned to this property when it is in
                    the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any value
                    set will be ignored when it is in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsUnicode">
      <MemberSignature Language="C#" Value="public static void SetIsUnicode (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, bool? unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsUnicode(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, valuetype System.Nullable`1&lt;bool&gt; unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetIsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetIsUnicode (property As IMutableProperty, unicode As Nullable(Of Boolean))" />
      <MemberSignature Language="F#" Value="static member SetIsUnicode : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Nullable&lt;bool&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetIsUnicode (property, unicode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to set the value for. </param>
        <param name="unicode">
          <see langword="true" /> if the property accepts Unicode characters, <see langword="false" /> if it does not, <see langword="null" /> to
                clear the setting.
            </param>
        <summary>
                Sets a value indicating whether this property can persist Unicode characters.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetKeyValueComparer">
      <MemberSignature Language="C#" Value="public static void SetKeyValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetKeyValueComparer(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetKeyValueComparer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetKeyValueComparer (property As IMutableProperty, comparer As ValueComparer)" />
      <MemberSignature Language="F#" Value="static member SetKeyValueComparer : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetKeyValueComparer (property, comparer)" />
      <MemberSignature Language="C#" Value="public static void SetKeyValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? comparer);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use SetValueComparer. Only a single value comparer is allowed for a given property.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use SetValueComparer. Only a single value comparer is allowed for a given property.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="property">The property.</param>
        <param name="comparer">The comparer, or <see langword="null" /> to remove any previously set comparer.</param>
        <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property when performing key comparisons.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMaxLength">
      <MemberSignature Language="C#" Value="public static void SetMaxLength (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, int? maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetMaxLength(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, valuetype System.Nullable`1&lt;int32&gt; maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetMaxLength (property As IMutableProperty, maxLength As Nullable(Of Integer))" />
      <MemberSignature Language="F#" Value="static member SetMaxLength : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Nullable&lt;int&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength (property, maxLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to set the maximum length of. </param>
        <param name="maxLength"> The maximum length of data that is allowed in this property. </param>
        <summary>
                Sets the maximum length of data that is allowed in this property. For example, if the property is a <see cref="T:System.String" /> '
                then this is the maximum number of characters.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPrecision">
      <MemberSignature Language="C#" Value="public static void SetPrecision (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, int? precision);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPrecision(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, valuetype System.Nullable`1&lt;int32&gt; precision) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetPrecision(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPrecision (property As IMutableProperty, precision As Nullable(Of Integer))" />
      <MemberSignature Language="F#" Value="static member SetPrecision : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Nullable&lt;int&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetPrecision (property, precision)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to set the precision of. </param>
        <param name="precision"> The maximum number of digits that is allowed in this property. </param>
        <summary>
                Sets the precision of data that is allowed in this property.
                For example, if the property is a <see cref="T:System.Decimal" />
                then this is the maximum number of digits.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProviderClrType">
      <MemberSignature Language="C#" Value="public static void SetProviderClrType (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Type providerClrType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProviderClrType(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class System.Type providerClrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetProviderClrType(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetProviderClrType (property As IMutableProperty, providerClrType As Type)" />
      <MemberSignature Language="F#" Value="static member SetProviderClrType : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetProviderClrType (property, providerClrType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="providerClrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property. </param>
        <param name="providerClrType"> The type to use, or <see langword="null" /> to remove any previously set type. </param>
        <summary>
                Sets the type that the property value will be converted to before being sent to the database provider.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScale">
      <MemberSignature Language="C#" Value="public static void SetScale (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, int? scale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetScale(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, valuetype System.Nullable`1&lt;int32&gt; scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetScale(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetScale (property As IMutableProperty, scale As Nullable(Of Integer))" />
      <MemberSignature Language="F#" Value="static member SetScale : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Nullable&lt;int&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetScale (property, scale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to set the scale of. </param>
        <param name="scale"> The maximum number of decimal places that is allowed in this property. </param>
        <summary>
                Sets the scale of data that is allowed in this property.
                For example, if the property is a <see cref="T:System.Decimal" />
                then this is the maximum number of decimal places.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStructuralValueComparer">
      <MemberSignature Language="C#" Value="public static void SetStructuralValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer);" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetStructuralValueComparer(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetStructuralValueComparer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetStructuralValueComparer (property As IMutableProperty, comparer As ValueComparer)" />
      <MemberSignature Language="F#" Value="static member SetStructuralValueComparer : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetStructuralValueComparer (property, comparer)" />
      <MemberSignature Language="C#" Value="public static void SetStructuralValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? comparer);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use SetValueComparer. Only a single value comparer is allowed for a given property.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use SetValueComparer. Only a single value comparer is allowed for a given property.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="1" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="property">The property.</param>
        <param name="comparer">The comparer, or <see langword="null" /> to remove any previously set comparer.</param>
        <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for structural copies for this property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeMapping">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping SetTypeMapping (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping SetTypeMapping(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetTypeMapping(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetTypeMapping (property As IMutableProperty, typeMapping As CoreTypeMapping) As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="static member SetTypeMapping : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetTypeMapping (property, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="1" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property. </param>
        <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> for this property. </param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> for the given property
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueComparer">
      <MemberSignature Language="C#" Value="public static void SetValueComparer (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValueComparer(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueComparer(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetValueComparer (property As IMutableProperty, comparer As ValueComparer)" />
      <MemberSignature Language="F#" Value="static member SetValueComparer : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueComparer (property, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property. </param>
        <param name="comparer"> The comparer, or <see langword="null" /> to remove any previously set comparer. </param>
        <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueConverter">
      <MemberSignature Language="C#" Value="public static void SetValueConverter (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValueConverter(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueConverter(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetValueConverter (property As IMutableProperty, converter As ValueConverter)" />
      <MemberSignature Language="F#" Value="static member SetValueConverter : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueConverter (property, converter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property. </param>
        <param name="converter"> The converter, or <see langword="null" /> to remove any previously set converter. </param>
        <summary>
                Sets the custom <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> for this property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueGeneratorFactory">
      <MemberSignature Language="C#" Value="public static void SetValueGeneratorFactory (this Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; valueGeneratorFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetValueGeneratorFactory(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; valueGeneratorFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetValueGeneratorFactory (property As IMutableProperty, valueGeneratorFactory As Func(Of IProperty, IEntityType, ValueGenerator))" />
      <MemberSignature Language="F#" Value="static member SetValueGeneratorFactory : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory (property, valueGeneratorFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" RefType="this" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="valueGeneratorFactory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to set the value generator for. </param>
        <param name="valueGeneratorFactory">
                A factory that will be used to create the value generator, or <see langword="null" /> to
                clear any previously set factory.
            </param>
        <summary>
          <para>
                    Sets the factory to use for generating values for this property, or <see langword="null" /> to clear any previously set factory.
                </para>
          <para>
                    Setting <see langword="null" /> does not disable value generation for this property, it just clears any generator explicitly
                    configured for this property. The database provider may still have a value generator for the property type.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
