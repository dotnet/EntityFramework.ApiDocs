<Type Name="DatabaseFacade" FullName="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade">
  <TypeSignature Language="C#" Value="public class DatabaseFacade : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DatabaseFacade extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" />
  <TypeSignature Language="VB.NET" Value="Public Class DatabaseFacade&#xA;Implements IInfrastructure(Of IServiceProvider)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type DatabaseFacade = class&#xA;    interface IInfrastructure&lt;IServiceProvider&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public class DatabaseFacade : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;, Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependenciesAccessor" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DatabaseFacade extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;, class Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependenciesAccessor" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public Class DatabaseFacade&#xA;Implements IDatabaseFacadeDependenciesAccessor, IInfrastructure(Of IServiceProvider)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type DatabaseFacade = class&#xA;    interface IInfrastructure&lt;IServiceProvider&gt;&#xA;    interface IDatabaseFacadeDependenciesAccessor" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="C#" Value="public class DatabaseFacade : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;, Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DatabaseFacade extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;, class Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="C#" Value="public class DatabaseFacade : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;IServiceProvider&gt;, Microsoft.EntityFrameworkCore.Infrastructure.IResettableService, Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DatabaseFacade extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class System.IServiceProvider&gt;, class Microsoft.EntityFrameworkCore.Infrastructure.IResettableService, class Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class DatabaseFacade&#xA;Implements IDatabaseFacadeDependenciesAccessor, IInfrastructure(Of IServiceProvider), IResettableService" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type DatabaseFacade = class&#xA;    interface IInfrastructure&lt;IServiceProvider&gt;&#xA;    interface IDatabaseFacadeDependenciesAccessor&#xA;    interface IResettableService" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1">
      <InterfaceName>Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependenciesAccessor</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IResettableService</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Provides access to database related information and operations for a context.
                Instances of this class are typically obtained from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" /> and it is not designed
                to be directly constructed in your application code.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DatabaseFacade (Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.#ctor(Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As DbContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade : Microsoft.EntityFrameworkCore.DbContext -&gt; Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade context" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
      </Parameters>
      <Docs>
        <param name="context">The context this database API belongs to.</param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> class. Instances of this class are typically
                obtained from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" /> and it is not designed to be directly constructed
                in your application code.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSavepointsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool AutoSavepointsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSavepointsEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.AutoSavepointsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoSavepointsEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.AutoSavepointsEnabled : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.AutoSavepointsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Whether a transaction savepoint will be created automatically by <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> if it is called
                after a transaction has been manually started with <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransaction" />.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    The default value is <see langword="true" />, meaning that <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> will create a
                    transaction savepoint within a manually-started transaction. Regardless of this property, savepoints are only created
                    if the data provider supports them; see <see cref="P:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.SupportsSavepoints" />.
                </para>
          <para>
                    Setting this value to <see langword="false" /> should only be done with caution since the database could be left in a
                    corrupted state if <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> fails.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoTransactionBehavior">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.AutoTransactionBehavior AutoTransactionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.AutoTransactionBehavior AutoTransactionBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.AutoTransactionBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoTransactionBehavior As AutoTransactionBehavior" />
      <MemberSignature Language="F#" Value="member this.AutoTransactionBehavior : Microsoft.EntityFrameworkCore.AutoTransactionBehavior with get, set" Usage="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.AutoTransactionBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.AutoTransactionBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether or not a transaction will be created automatically by
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> if neither 'BeginTransaction' nor 'UseTransaction' has been called.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    The default setting is <see cref="F:Microsoft.EntityFrameworkCore.AutoTransactionBehavior.WhenNeeded" />.
                </para>
          <para>
                    Setting this to <see cref="F:Microsoft.EntityFrameworkCore.AutoTransactionBehavior.Never" /> with caution, since the database could be left in
                    an inconsistent state if failure occurs.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoTransactionsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool AutoTransactionsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoTransactionsEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.AutoTransactionsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoTransactionsEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.AutoTransactionsEnabled : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.AutoTransactionsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0">
          <AttributeName Language="C#">[System.Obsolete("Use EnableAutoTransactions instead")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use EnableAutoTransactions instead")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Use AutoTransactionBehavior instead")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use AutoTransactionBehavior instead")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether or not a transaction will be created automatically by
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> if none of the 'BeginTransaction' or 'UseTransaction' methods have been called.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    Setting this value to <see langword="false" /> will also disable the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> for
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /></para>
          <para>
                    The default value is <see langword="true" />, meaning that <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> will always use a
                    transaction when saving changes.
                </para>
          <para>
                    Setting this value to <see langword="false" /> should only be done with caution, since the database could be left in an
                    inconsistent state if failure occurs.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginTransaction () As IDbContextTransaction" />
      <MemberSignature Language="F#" Value="abstract member BeginTransaction : unit -&gt; Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&#xA;override this.BeginTransaction : unit -&gt; Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" Usage="databaseFacade.BeginTransaction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Starts a new transaction.
            </summary>
        <returns>
                A <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> that represents the started transaction.
            </returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransactionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt; BeginTransactionAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt; BeginTransactionAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransactionAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginTransactionAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of IDbContextTransaction)" />
      <MemberSignature Language="F#" Value="abstract member BeginTransactionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;&#xA;override this.BeginTransactionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;" Usage="databaseFacade.BeginTransactionAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Asynchronously starts a new transaction.
            </summary>
        <returns>
                A task that represents the asynchronous transaction initialization. The task result contains a <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />
                that represents the started transaction.
            </returns>
        <remarks>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This
                    includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see>
                    for more information and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
        </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanConnect">
      <MemberSignature Language="C#" Value="public virtual bool CanConnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConnect() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CanConnect" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConnect () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanConnect : unit -&gt; bool&#xA;override this.CanConnect : unit -&gt; bool" Usage="databaseFacade.CanConnect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Determines whether or not the database is available and can be connected to.
            </summary>
        <returns>
          <see langword="true" /> if the database is available; <see langword="false" /> otherwise.</returns>
        <remarks>
          <para>
                    Any exceptions thrown when attempting to connect are caught and not propagated to the application.
                </para>
          <para>
                    The configured connection string is used to create the connection in the normal way, so all
                    configured options such as timeouts are honored.
                </para>
          <para>
                    Note that being able to connect to the database does not mean that it is
                    up-to-date with regard to schema creation, etc.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-connections">Database connections in EF Core</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConnectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CanConnectAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CanConnectAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CanConnectAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConnectAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CanConnectAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CanConnectAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="databaseFacade.CanConnectAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Determines whether or not the database is available and can be connected to.
            </summary>
        <returns>
          <see langword="true" /> if the database is available; <see langword="false" /> otherwise.</returns>
        <remarks>
          <para>
                    Any exceptions thrown when attempting to connect are caught and not propagated to the application.
                </para>
          <para>
                    The configured connection string is used to create the connection in the normal way, so all
                    configured options such as timeouts are honored.
                </para>
          <para>
                    Note that being able to connect to the database does not mean that it is
                    up-to-date with regard to schema creation, etc.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This
                    includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see>
                    for more information and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-connections">Database connections in EF Core</see> for more information and examples.
                </para>
        </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CommitTransaction">
      <MemberSignature Language="C#" Value="public virtual void CommitTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CommitTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CommitTransaction ()" />
      <MemberSignature Language="F#" Value="abstract member CommitTransaction : unit -&gt; unit&#xA;override this.CommitTransaction : unit -&gt; unit" Usage="databaseFacade.CommitTransaction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Applies the outstanding operations in the current transaction to the database.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitTransactionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CommitTransactionAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CommitTransactionAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CommitTransactionAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CommitTransactionAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member CommitTransactionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CommitTransactionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="databaseFacade.CommitTransactionAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Applies the outstanding operations in the current transaction to the database.
            </summary>
        <returns>A Task representing the asynchronous operation.</returns>
        <remarks>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This
                    includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see>
                    for more information and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
        </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateExecutionStrategy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy CreateExecutionStrategy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy CreateExecutionStrategy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CreateExecutionStrategy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateExecutionStrategy () As IExecutionStrategy" />
      <MemberSignature Language="F#" Value="abstract member CreateExecutionStrategy : unit -&gt; Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy&#xA;override this.CreateExecutionStrategy : unit -&gt; Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" Usage="databaseFacade.CreateExecutionStrategy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Creates an instance of the configured <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
        <returns>An <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> instance.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTransaction">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction CurrentTransaction { get; }" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction CurrentTransaction" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CurrentTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CurrentTransaction As IDbContextTransaction" />
      <MemberSignature Language="F#" Value="member this.CurrentTransaction : Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" Usage="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CurrentTransaction" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction? CurrentTransaction { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the current <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> being used by the context, or null
                if no transaction is in use.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    This property is null unless one of <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransaction" />,
                    <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction" />, or
                    <see cref="O:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction" />
                    has been called.
                    No attempt is made to obtain a transaction from the current DbConnection or similar.
                </para>
          <para>
                    For relational databases, the underlying <see cref="T:System.Data.Common.DbTransaction" /> can be obtained using
                    <see cref="M:Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions.GetDbTransaction" />
                    on the returned <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureCreated">
      <MemberSignature Language="C#" Value="public virtual bool EnsureCreated ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EnsureCreated() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnsureCreated () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member EnsureCreated : unit -&gt; bool&#xA;override this.EnsureCreated : unit -&gt; bool" Usage="databaseFacade.EnsureCreated " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Migrations operations require building the design-time model which is not supported with NativeAOT Use a migration bundle or an alternate way of executing migration operations.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Migrations operations require building the design-time model which is not supported with NativeAOT Use a migration bundle or an alternate way of executing migration operations.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Ensures that the database for the context exists.
            </summary>
        <returns>
          <see langword="true" /> if the database is created, <see langword="false" /> if it already existed.</returns>
        <remarks>
          <list type="bullet">
            <item>
              <description>
                            If the database exists and has any tables, then no action is taken. Nothing is done to ensure
                            the database schema is compatible with the Entity Framework model.
                        </description>
            </item>
            <item>
              <description>
                            If the database exists but does not have any tables, then the Entity Framework model is used to
                            create the database schema.
                        </description>
            </item>
            <item>
              <description>
                            If the database does not exist, then the database is created and the Entity Framework model is used to
                            create the database schema.
                        </description>
            </item>
          </list>
          <para>
                    It is common to use <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> immediately following <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeleted" /> when
                    testing or prototyping using Entity Framework. This ensures that the database is in a clean state before each
                    execution of the test/prototype. Note, however, that data in the database is not preserved.
                </para>
          <para>
                    Note that this API does **not** use migrations to create the database. In addition, the database that is
                    created cannot be later updated using migrations. If you are targeting a relational database and using migrations,
                    then you can use <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate" />
                    to ensure the database is created using migrations and that all migrations have been applied.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-manage-schemas">Managing database schemas with EF Core</see>
                    and <see href="https://aka.ms/efcore-docs-ensure-created">Database creation APIs</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureCreatedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; EnsureCreatedAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; EnsureCreatedAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreatedAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnsureCreatedAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member EnsureCreatedAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.EnsureCreatedAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="databaseFacade.EnsureCreatedAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Migrations operations require building the design-time model which is not supported with NativeAOT Use a migration bundle or an alternate way of executing migration operations.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Migrations operations require building the design-time model which is not supported with NativeAOT Use a migration bundle or an alternate way of executing migration operations.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Ensures that the database for the context exists.
            </summary>
        <returns>
                A task that represents the asynchronous save operation. The task result contains <see langword="true" /> if the database is created,
                <see langword="false" /> if it already existed.
            </returns>
        <remarks>
          <list type="bullet">
            <item>
              <description>
                            If the database exists and has any tables, then no action is taken. Nothing is done to ensure
                            the database schema is compatible with the Entity Framework model.
                        </description>
            </item>
            <item>
              <description>
                            If the database exists but does not have any tables, then the Entity Framework model is used to
                            create the database schema.
                        </description>
            </item>
            <item>
              <description>
                            If the database does not exist, then the database is created and the Entity Framework model is used to
                            create the database schema.
                        </description>
            </item>
          </list>
          <para>
                    It is common to use <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreatedAsync(System.Threading.CancellationToken)" /> immediately following <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeletedAsync(System.Threading.CancellationToken)" /> when
                    testing or prototyping using Entity Framework. This ensures that the database is in a clean state before each
                    execution of the test/prototype. Note, however, that data in the database is not preserved.
                </para>
          <para>
                    Note that this API does **not** use migrations to create the database. In addition, the database that is
                    created cannot be later updated using migrations. If you are targeting a relational database and using migrations,
                    then you can use <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.MigrateAsync" />
                    to ensure the database is created using migrations and that all migrations have been applied.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This
                    includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see>
                    for more information and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-manage-schemas">Managing database schemas with EF Core</see>
                    and <see href="https://aka.ms/efcore-docs-ensure-created">Database creation APIs</see> for more information and examples.
                </para>
        </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureDeleted">
      <MemberSignature Language="C#" Value="public virtual bool EnsureDeleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EnsureDeleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeleted" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnsureDeleted () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member EnsureDeleted : unit -&gt; bool&#xA;override this.EnsureDeleted : unit -&gt; bool" Usage="databaseFacade.EnsureDeleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Migrations operations require building the design-time model which is not supported with NativeAOT Use a migration bundle or an alternate way of executing migration operations.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Migrations operations require building the design-time model which is not supported with NativeAOT Use a migration bundle or an alternate way of executing migration operations.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>
                    Ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
          <para>
                    Warning: The entire database is deleted, and no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
        </summary>
        <returns>
          <see langword="true" /> if the database is deleted, <see langword="false" /> if it did not exist.</returns>
        <remarks>
          <para>
                    It is common to use <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> immediately following <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeleted" /> when
                    testing or prototyping using Entity Framework. This ensures that the database is in a clean state before each
                    execution of the test/prototype. Note, however, that data in the database is not preserved.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-manage-schemas">Managing database schemas with EF Core</see>
                    and <see href="https://aka.ms/efcore-docs-ensure-created">Database creation APIs</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureDeletedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; EnsureDeletedAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; EnsureDeletedAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeletedAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnsureDeletedAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member EnsureDeletedAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.EnsureDeletedAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="databaseFacade.EnsureDeletedAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Migrations operations require building the design-time model which is not supported with NativeAOT Use a migration bundle or an alternate way of executing migration operations.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Migrations operations require building the design-time model which is not supported with NativeAOT Use a migration bundle or an alternate way of executing migration operations.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
          <para>
                    Asynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
          <para>
                    Warning: The entire database is deleted, and no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
        </summary>
        <returns>
                A task that represents the asynchronous save operation. The task result contains <see langword="true" /> if the database is deleted,
                <see langword="false" /> if it did not exist.
            </returns>
        <remarks>
          <para>
                    It is common to use <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreatedAsync(System.Threading.CancellationToken)" /> immediately following <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureDeletedAsync(System.Threading.CancellationToken)" /> when
                    testing or prototyping using Entity Framework. This ensures that the database is in a clean state before each
                    execution of the test/prototype. Note, however, that data in the database is not preserved.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This
                    includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see>
                    for more information and examples.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-manage-schemas">Managing database schemas with EF Core</see>
                    and <see href="https://aka.ms/efcore-docs-ensure-created">Database creation APIs</see> for more information and examples.
                </para>
        </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="databaseFacade.Equals obj" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="databaseFacade.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance">
      <MemberSignature Language="C#" Value="IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;System#IServiceProvider&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IServiceProvider Implements IInfrastructure(Of IServiceProvider).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance : IServiceProvider" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Gets the scoped <see cref="T:System.IServiceProvider" /> being used to resolve services.
                </para>
          <para>
                    This property is intended for use by extension methods that need to make use of services
                    not directly exposed in the public API surface.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState">
      <MemberSignature Language="C#" Value="void IResettableService.ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft#EntityFrameworkCore#Infrastructure#IResettableService#ResetState" />
      <MemberSignature Language="VB.NET" Value="Sub ResetState () Implements IResettableService.ResetState" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState : unit -&gt; unit&#xA;override this.Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState : unit -&gt; unit" Usage="databaseFacade.Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Task IResettableService.ResetStateAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Threading.Tasks.Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft#EntityFrameworkCore#Infrastructure#IResettableService#ResetStateAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function ResetStateAsync (cancellationToken As CancellationToken) As Task Implements IResettableService.ResetStateAsync" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="databaseFacade.Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Context">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.DbContext Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbContext Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft#EntityFrameworkCore#Storage#IDatabaseFacadeDependenciesAccessor#Context" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Context As DbContext Implements IDatabaseFacadeDependenciesAccessor.Context" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Context : Microsoft.EntityFrameworkCore.DbContext" Usage="Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Context" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Context</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Dependencies">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependencies Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependencies Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.Microsoft#EntityFrameworkCore#Storage#IDatabaseFacadeDependenciesAccessor#Dependencies" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Dependencies As IDatabaseFacadeDependencies Implements IDatabaseFacadeDependenciesAccessor.Dependencies" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Dependencies : Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependencies" Usage="Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Dependencies" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Dependencies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public virtual string ProviderName { get; }" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.ProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ProviderName As String" />
      <MemberSignature Language="F#" Value="member this.ProviderName : string" Usage="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.ProviderName" />
      <MemberSignature Language="C#" Value="public virtual string? ProviderName { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns the name of the database provider currently in use.
                The name is typically the name of the provider assembly.
                It is usually easier to use a sugar method such as
                <see cref="M:Microsoft.EntityFrameworkCore.SqlServerDatabaseFacadeExtensions.IsSqlServer" />
                instead of calling this method directly.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
                    This method can only be used after the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has been configured because
                    it is only then that the provider is known. This means that this method cannot be used
                    in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> because this is where application code sets the
                    provider to use as part of configuring the context.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext">DbContext lifetime, configuration, and initialization</see>
                    for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RollbackTransaction">
      <MemberSignature Language="C#" Value="public virtual void RollbackTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RollbackTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.RollbackTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RollbackTransaction ()" />
      <MemberSignature Language="F#" Value="abstract member RollbackTransaction : unit -&gt; unit&#xA;override this.RollbackTransaction : unit -&gt; unit" Usage="databaseFacade.RollbackTransaction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Discards the outstanding operations in the current transaction.
            </summary>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RollbackTransactionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RollbackTransactionAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RollbackTransactionAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.RollbackTransactionAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RollbackTransactionAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member RollbackTransactionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.RollbackTransactionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="databaseFacade.RollbackTransactionAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        <summary>
                Discards the outstanding operations in the current transaction.
            </summary>
        <returns>A Task representing the asynchronous operation.</returns>
        <remarks>
          <para>
                    See <see href="https://aka.ms/efcore-docs-transactions">Transactions in EF Core</see> for more information and examples.
                </para>
          <para>
                    Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This
                    includes both parallel execution of async queries and any explicit concurrent use from multiple threads.
                    Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute
                    in parallel. See <see href="https://aka.ms/efcore-docs-threading">Avoiding DbContext threading issues</see>
                    for more information and examples.
                </para>
        </remarks>
        <exception cref="T:System.OperationCanceledException">If the <see cref="T:System.Threading.CancellationToken" /> is canceled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="databaseFacade.ToString " />
      <MemberSignature Language="C#" Value="public override string? ToString ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
