<Type Name="ModelSource" FullName="Microsoft.EntityFrameworkCore.Infrastructure.ModelSource">
  <TypeSignature Language="C#" Value="public abstract class ModelSource : Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ModelSource extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ModelSource&#xA;Implements IModelSource" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="F#" Value="type ModelSource = class&#xA;    interface IModelSource" />
  <TypeSignature Language="C#" Value="public class ModelSource : Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ModelSource extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class ModelSource&#xA;Implements IModelSource" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IModelSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    An implementation of <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" /> that produces a model based on
                    the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties exposed on the context. The model is cached to avoid
                    recreating it every time it is requested.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModelSource (Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As ModelSourceDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.ModelSource : Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.ModelSource dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">The dependencies to use.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ModelSource (Microsoft.EntityFrameworkCore.Internal.IDbSetFinder setFinder, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder coreConventionSetBuilder, Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer modelCustomizer, Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory modelCacheKeyFactory);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Internal.IDbSetFinder setFinder, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder coreConventionSetBuilder, class Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer modelCustomizer, class Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory modelCacheKeyFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.#ctor(Microsoft.EntityFrameworkCore.Internal.IDbSetFinder,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer,Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (setFinder As IDbSetFinder, coreConventionSetBuilder As ICoreConventionSetBuilder, modelCustomizer As IModelCustomizer, modelCacheKeyFactory As IModelCacheKeyFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.ModelSource : Microsoft.EntityFrameworkCore.Internal.IDbSetFinder * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer * Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.ModelSource (setFinder, coreConventionSetBuilder, modelCustomizer, modelCacheKeyFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="setFinder" Type="Microsoft.EntityFrameworkCore.Internal.IDbSetFinder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="coreConventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="modelCustomizer" Type="Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="modelCacheKeyFactory" Type="Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="setFinder">To be added.</param>
        <param name="coreConventionSetBuilder">To be added.</param>
        <param name="modelCustomizer">To be added.</param>
        <param name="modelCacheKeyFactory">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreConventionSetBuilder">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder CoreConventionSetBuilder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder CoreConventionSetBuilder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CoreConventionSetBuilder" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CoreConventionSetBuilder As ICoreConventionSetBuilder" />
      <MemberSignature Language="F#" Value="member this.CoreConventionSetBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CoreConventionSetBuilder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ICoreConventionSetBuilder" /> that will build the conventions to be used
                to build the model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConventionSet">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet CreateConventionSet (Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet CreateConventionSet(class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateConventionSet(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateConventionSet (conventionSetBuilder As IConventionSetBuilder) As ConventionSet" />
      <MemberSignature Language="F#" Value="abstract member CreateConventionSet : Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet&#xA;override this.CreateConventionSet : Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" Usage="modelSource.CreateConventionSet conventionSetBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="conventionSetBuilder"> The provider convention set builder to be used. </param>
        <summary>
                Creates the convention set to be used for the model. Only uses the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder" />
                if <paramref name="conventionSetBuilder" /> is null.
            </summary>
        <returns> The convention set to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateModel">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder conventionSetBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder conventionSetBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder) As IModel" />
      <MemberSignature Language="F#" Value="abstract member CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.CreateModel (context, conventionSetBuilder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload with ModelDependencies")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload with ModelDependencies")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload with ModelCreationDependencies")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload with ModelCreationDependencies")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="context">The context the model is being produced for.</param>
        <param name="conventionSetBuilder">The convention set to use when creating the model.</param>
        <summary>
                Creates the model. This method is called when the model was not found in the cache.
            </summary>
        <returns>The model to be used.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateModel">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies modelDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies modelDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, modelDependencies As ModelDependencies) As IModel" />
      <MemberSignature Language="F#" Value="abstract member CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.CreateModel (context, conventionSetBuilder, modelDependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="modelDependencies" Type="Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="context">The context the model is being produced for.</param>
        <param name="conventionSetBuilder">The convention set to use when creating the model.</param>
        <param name="modelDependencies">The dependencies object for the model.</param>
        <summary>
                Creates the model. This method is called when the model was not found in the cache.
            </summary>
        <returns>The model to be used.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateModel">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, validator As IModelValidator) As IModel" />
      <MemberSignature Language="F#" Value="abstract member CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.CreateModel (context, conventionSetBuilder, validator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="validator" Type="Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="context"> The context the model is being produced for. </param>
        <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
        <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
        <summary>
                Creates the model. This method is called when the model was not found in the cache.
            </summary>
        <returns> The model to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateModel">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Internal.IModelValidator validator);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Internal.IModelValidator validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Internal.IModelValidator)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, validator As IModelValidator) As IModel" />
      <MemberSignature Language="F#" Value="abstract member CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Internal.IModelValidator -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Internal.IModelValidator -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.CreateModel (context, conventionSetBuilder, validator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="validator" Type="Microsoft.EntityFrameworkCore.Internal.IModelValidator" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="context"> The context the model is being produced for. </param>
        <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
        <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
        <summary>
                Creates the model. This method is called when the model was not found in the cache.
            </summary>
        <returns> The model to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As ModelSourceDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSets">
      <MemberSignature Language="C#" Value="protected virtual void FindSets (Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Microsoft.EntityFrameworkCore.DbContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FindSets(class Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, class Microsoft.EntityFrameworkCore.DbContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.FindSets(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.DbContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FindSets (modelBuilder As ModelBuilder, context As DbContext)" />
      <MemberSignature Language="F#" Value="abstract member FindSets : Microsoft.EntityFrameworkCore.ModelBuilder * Microsoft.EntityFrameworkCore.DbContext -&gt; unit&#xA;override this.FindSets : Microsoft.EntityFrameworkCore.ModelBuilder * Microsoft.EntityFrameworkCore.DbContext -&gt; unit" Usage="modelSource.FindSets (modelBuilder, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.ModelBuilder" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="modelBuilder"> The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> being used to build the model. </param>
        <param name="context"> The context to find <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on. </param>
        <summary>
                Adds the entity types found in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on the context to the model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IModel GetModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder conventionSetBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel GetModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder conventionSetBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder) As IModel" />
      <MemberSignature Language="F#" Value="abstract member GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.GetModel (context, conventionSetBuilder)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload with ModelDependencies")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload with ModelDependencies")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload with ModelCreationDependencies")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload with ModelCreationDependencies")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="context">The context the model is being produced for.</param>
        <param name="conventionSetBuilder">The convention set to use when creating the model.</param>
        <summary>
                Returns the model from the cache, or creates a model if it is not present in the cache.
            </summary>
        <returns>The model to be used.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IModel GetModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies modelDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel GetModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies modelDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, modelDependencies As ModelDependencies) As IModel" />
      <MemberSignature Language="F#" Value="abstract member GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.GetModel (context, conventionSetBuilder, modelDependencies)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use the overload with ModelCreationDependencies")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use the overload with ModelCreationDependencies")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="modelDependencies" Type="Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="context">The context the model is being produced for.</param>
        <param name="conventionSetBuilder">The convention set to use when creating the model.</param>
        <param name="modelDependencies">The dependencies object for the model.</param>
        <summary>
                Returns the model from the cache, or creates a model if it is not present in the cache.
            </summary>
        <returns>The model to be used.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IModel GetModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel GetModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, validator As IModelValidator) As IModel" />
      <MemberSignature Language="F#" Value="abstract member GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.GetModel (context, conventionSetBuilder, validator)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="validator" Type="Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="context"> The context the model is being produced for. </param>
        <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
        <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
        <summary>
                Returns the model from the cache, or creates a model if it is not present in the cache.
            </summary>
        <returns> The model to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IModel GetModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Internal.IModelValidator validator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel GetModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Internal.IModelValidator validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Internal.IModelValidator)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, validator As IModelValidator) As IModel" />
      <MemberSignature Language="F#" Value="abstract member GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Internal.IModelValidator -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Internal.IModelValidator -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.GetModel (context, conventionSetBuilder, validator)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Internal.IModelValidator)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="validator" Type="Microsoft.EntityFrameworkCore.Internal.IModelValidator" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="context"> The context the model is being produced for. </param>
        <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
        <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
        <summary>
                Returns the model from the cache, or creates a model if it is not present in the cache.
            </summary>
        <returns> The model to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IModel GetModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.ModelCreationDependencies modelCreationDependencies, bool designTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel GetModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.ModelCreationDependencies modelCreationDependencies, bool designTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.ModelCreationDependencies,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModel (context As DbContext, modelCreationDependencies As ModelCreationDependencies, designTime As Boolean) As IModel" />
      <MemberSignature Language="F#" Value="abstract member GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.ModelCreationDependencies * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.ModelCreationDependencies * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.GetModel (context, modelCreationDependencies, designTime)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.ModelCreationDependencies,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="modelCreationDependencies" Type="Microsoft.EntityFrameworkCore.ModelCreationDependencies" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="designTime" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="context">The context the model is being produced for.</param>
        <param name="modelCreationDependencies">The dependencies object used during the creation of the model.</param>
        <param name="designTime">Whether the model should contain design-time configuration.</param>
        <summary>
                Gets the model to be used.
            </summary>
        <returns>The model to be used.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelCacheKeyFactory">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory ModelCacheKeyFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory ModelCacheKeyFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.ModelCacheKeyFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ModelCacheKeyFactory As IModelCacheKeyFactory" />
      <MemberSignature Language="F#" Value="member this.ModelCacheKeyFactory : Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.ModelCacheKeyFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory" /> that will create keys used to store and lookup models
                the model cache.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelCustomizer">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer ModelCustomizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer ModelCustomizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.ModelCustomizer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ModelCustomizer As IModelCustomizer" />
      <MemberSignature Language="F#" Value="member this.ModelCustomizer : Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.ModelCustomizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer" /> that will perform additional configuration of the model
                in addition to what is discovered by convention.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFinder">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Internal.IDbSetFinder SetFinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.IDbSetFinder SetFinder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.SetFinder" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property SetFinder As IDbSetFinder" />
      <MemberSignature Language="F#" Value="member this.SetFinder : Microsoft.EntityFrameworkCore.Internal.IDbSetFinder" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.SetFinder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Internal.IDbSetFinder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Internal.IDbSetFinder" /> that will locate the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties
                on the derived context.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
