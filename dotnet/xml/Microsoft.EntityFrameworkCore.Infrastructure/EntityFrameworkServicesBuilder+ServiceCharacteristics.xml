<Type Name="EntityFrameworkServicesBuilder+ServiceCharacteristics" FullName="Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder+ServiceCharacteristics">
  <TypeSignature Language="C#" Value="public struct EntityFrameworkServicesBuilder.ServiceCharacteristics" FrameworkAlternate="efcore-2.0" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit EntityFrameworkServicesBuilder/ServiceCharacteristics extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics" />
  <TypeSignature Language="VB.NET" Value="Public Structure EntityFrameworkServicesBuilder.ServiceCharacteristics" />
  <TypeSignature Language="F#" Value="type EntityFrameworkServicesBuilder.ServiceCharacteristics = struct" />
  <TypeSignature Language="C#" Value="public readonly struct EntityFrameworkServicesBuilder.ServiceCharacteristics" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
      <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="efcore-3.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceCharacteristics (Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime, bool multipleRegistrations = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime, bool multipleRegistrations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (lifetime As ServiceLifetime, Optional multipleRegistrations As Boolean = false)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics : Microsoft.Extensions.DependencyInjection.ServiceLifetime * bool -&gt; Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics (lifetime, multipleRegistrations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
        <Parameter Name="multipleRegistrations" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="lifetime">To be added.</param>
        <param name="multipleRegistrations">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lifetime">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.DependencyInjection.ServiceLifetime Lifetime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime Lifetime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics.Lifetime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Lifetime As ServiceLifetime" />
      <MemberSignature Language="F#" Value="member this.Lifetime : Microsoft.Extensions.DependencyInjection.ServiceLifetime" Usage="Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics.Lifetime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.ServiceLifetime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultipleRegistrations">
      <MemberSignature Language="C#" Value="public bool MultipleRegistrations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultipleRegistrations" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics.MultipleRegistrations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MultipleRegistrations As Boolean" />
      <MemberSignature Language="F#" Value="member this.MultipleRegistrations : bool" Usage="Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.ServiceCharacteristics.MultipleRegistrations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
