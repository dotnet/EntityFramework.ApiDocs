<Type Name="ServiceCollectionMap" FullName="Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap">
  <TypeSignature Language="C#" Value="public class ServiceCollectionMap : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceCollectionMap extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceCollectionMap&#xA;Implements IInfrastructure(Of InternalServiceCollectionMap)" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="F#" Value="type ServiceCollectionMap = class&#xA;    interface IInfrastructure&lt;InternalServiceCollectionMap&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="C#" Value="public class ServiceCollectionMap : Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceCollectionMap extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1&lt;class Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceCollectionMap&#xA;Implements IInfrastructure(Of IInternalServiceCollectionMap)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type ServiceCollectionMap = class&#xA;    interface IInfrastructure&lt;IInternalServiceCollectionMap&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Provides a map over a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> that allows <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />
                entries to be conditionally added or re-written without requiring linear scans of the service
                collection each time this is done.
            </summary>
    <remarks>
      <para>
                    Note that the collection should not be modified without in other ways while it is being managed
                    by the map. The collection can be used in the normal way after modifications using the map have
                    been completed.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceCollectionMap (Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceCollection As IServiceCollection)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap serviceCollection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Parameters>
      <Docs>
        <param name="serviceCollection">The collection to work with.</param>
        <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" /> to operate on the given <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Infrastructure#IInternalServiceCollectionMap&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As IInternalServiceCollectionMap Implements IInfrastructure(Of IInternalServiceCollectionMap).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&gt;.Instance : Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap&gt;.Instance">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap&gt;.Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap&gt;.Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure&lt;Microsoft#EntityFrameworkCore#Internal#InternalServiceCollectionMap&gt;#Instance" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Instance As InternalServiceCollectionMap Implements IInfrastructure(Of InternalServiceCollectionMap).Instance" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap&gt;.Instance : Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap" Usage="Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure&lt;Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap&gt;.Instance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceCollection">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.ServiceCollection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ServiceCollection As IServiceCollection" />
      <MemberSignature Language="F#" Value="member this.ServiceCollection : Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.ServiceCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The underlying <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAdd (Type serviceType, Func&lt;IServiceProvider,object&gt; factory, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAdd(class System.Type serviceType, class System.Func`2&lt;class System.IServiceProvider, object&gt; factory, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAdd(System.Type,System.Func{System.IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAdd (serviceType As Type, factory As Func(Of IServiceProvider, Object), lifetime As ServiceLifetime) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAdd : Type * Func&lt;IServiceProvider, obj&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAdd : Type * Func&lt;IServiceProvider, obj&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAdd (serviceType, factory, lifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="factory">The factory that implements the service.</param>
        <param name="lifetime">The service lifetime.</param>
        <summary>
                Adds a service implemented by the given factory if no service for the given service type
                has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAdd (Type serviceType, Type implementationType, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAdd(class System.Type serviceType, class System.Type implementationType, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAdd(System.Type,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAdd (serviceType As Type, implementationType As Type, lifetime As ServiceLifetime) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAdd : Type * Type * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAdd : Type * Type * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAdd (serviceType, implementationType, lifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementationType">The concrete type that implements the service.</param>
        <param name="lifetime">The service lifetime.</param>
        <summary>
                Adds a service implemented by the given concrete type if no service for the given service
                type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddEnumerable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddEnumerable (Type serviceType, Type implementationType, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddEnumerable(class System.Type serviceType, class System.Type implementationType, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddEnumerable(System.Type,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddEnumerable (serviceType As Type, implementationType As Type, lifetime As ServiceLifetime) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddEnumerable : Type * Type * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddEnumerable : Type * Type * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddEnumerable (serviceType, implementationType, lifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementationType">The concrete type that implements the service.</param>
        <param name="lifetime">The service lifetime.</param>
        <summary>
                Adds a service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddEnumerable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddEnumerable (Type serviceType, Type implementationType, Func&lt;IServiceProvider,object&gt; factory, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddEnumerable(class System.Type serviceType, class System.Type implementationType, class System.Func`2&lt;class System.IServiceProvider, object&gt; factory, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddEnumerable(System.Type,System.Type,System.Func{System.IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddEnumerable (serviceType As Type, implementationType As Type, factory As Func(Of IServiceProvider, Object), lifetime As ServiceLifetime) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddEnumerable : Type * Type * Func&lt;IServiceProvider, obj&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddEnumerable : Type * Type * Func&lt;IServiceProvider, obj&gt; * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddEnumerable (serviceType, implementationType, factory, lifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementationType">The concrete type that implements the service.</param>
        <param name="factory">The factory that implements this service.</param>
        <param name="lifetime">The service lifetime.</param>
        <summary>
                Adds a service implemented by the given factory
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddScoped">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped (Type serviceType, Func&lt;IServiceProvider,object&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped(class System.Type serviceType, class System.Func`2&lt;class System.IServiceProvider, object&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped(System.Type,System.Func{System.IServiceProvider,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddScoped (serviceType As Type, factory As Func(Of IServiceProvider, Object)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddScoped : Type * Func&lt;IServiceProvider, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddScoped : Type * Func&lt;IServiceProvider, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddScoped (serviceType, factory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="factory">The factory that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddScoped">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped (Type serviceType, Type implementationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped(class System.Type serviceType, class System.Type implementationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddScoped (serviceType As Type, implementationType As Type) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddScoped : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddScoped : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddScoped (serviceType, implementationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementationType">The concrete type that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddScoped&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped&lt;TService&gt; (Func&lt;IServiceProvider,TService&gt; factory) where TService : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped&lt;class TService&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped``1(System.Func{System.IServiceProvider,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddScoped(Of TService As Class) (factory As Func(Of IServiceProvider, TService)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddScoped : Func&lt;IServiceProvider, 'Service (requires 'Service : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddScoped : Func&lt;IServiceProvider, 'Service (requires 'Service : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddScoped factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <param name="factory">The factory that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddScoped&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped&lt;TService,TImplementation&gt; () where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped&lt;class TService, class (!!TService) TImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddScoped(Of TService As Class, TImplementation As Class) () As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddScoped : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddScoped : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddScoped " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that implements the service.</typeparam>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddScoped&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped&lt;TService,TImplementation&gt; (Func&lt;IServiceProvider,TImplementation&gt; factory) where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScoped&lt;class TService, class (!!TService) TImplementation&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScoped``2(System.Func{System.IServiceProvider,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddScoped(Of TService As Class, TImplementation As Class) (factory As Func(Of IServiceProvider, TImplementation)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddScoped : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddScoped : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddScoped factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that the given factory creates.</typeparam>
        <param name="factory">The factory that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddScopedEnumerable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScopedEnumerable (Type serviceType, Type implementationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScopedEnumerable(class System.Type serviceType, class System.Type implementationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScopedEnumerable(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddScopedEnumerable (serviceType As Type, implementationType As Type) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddScopedEnumerable : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddScopedEnumerable : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddScopedEnumerable (serviceType, implementationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementationType">The concrete type that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddScopedEnumerable&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScopedEnumerable&lt;TService,TImplementation&gt; () where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScopedEnumerable&lt;class TService, class (!!TService) TImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScopedEnumerable``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddScopedEnumerable(Of TService As Class, TImplementation As Class) () As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddScopedEnumerable : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddScopedEnumerable : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddScopedEnumerable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that implements the service.</typeparam>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddScopedEnumerable&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScopedEnumerable&lt;TService,TImplementation&gt; (Func&lt;IServiceProvider,TImplementation&gt; factory) where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddScopedEnumerable&lt;class TService, class (!!TService) TImplementation&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddScopedEnumerable``2(System.Func{System.IServiceProvider,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddScopedEnumerable(Of TService As Class, TImplementation As Class) (factory As Func(Of IServiceProvider, TImplementation)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddScopedEnumerable : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddScopedEnumerable : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddScopedEnumerable factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that implements the service.</typeparam>
        <param name="factory">The factory that implements this service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> service implemented by the given factory
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingleton">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton (Type serviceType, Func&lt;IServiceProvider,object&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton(class System.Type serviceType, class System.Func`2&lt;class System.IServiceProvider, object&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton(System.Type,System.Func{System.IServiceProvider,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingleton (serviceType As Type, factory As Func(Of IServiceProvider, Object)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingleton : Type * Func&lt;IServiceProvider, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddSingleton : Type * Func&lt;IServiceProvider, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddSingleton (serviceType, factory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="factory">The factory that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingleton">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton (Type serviceType, object implementation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton(class System.Type serviceType, object implementation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingleton (serviceType As Type, implementation As Object) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingleton : Type * obj -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddSingleton : Type * obj -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddSingleton (serviceType, implementation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementation">The object that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given instance
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingleton">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton (Type serviceType, Type implementationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton(class System.Type serviceType, class System.Type implementationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingleton (serviceType As Type, implementationType As Type) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingleton : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddSingleton : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddSingleton (serviceType, implementationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementationType">The concrete type that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingleton&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton&lt;TService&gt; (Func&lt;IServiceProvider,TService&gt; factory) where TService : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton&lt;class TService&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton``1(System.Func{System.IServiceProvider,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingleton(Of TService As Class) (factory As Func(Of IServiceProvider, TService)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingleton : Func&lt;IServiceProvider, 'Service (requires 'Service : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddSingleton : Func&lt;IServiceProvider, 'Service (requires 'Service : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddSingleton factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <param name="factory">The factory that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingleton&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton&lt;TService&gt; (TService implementation) where TService : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton&lt;class TService&gt;(!!TService implementation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingleton(Of TService As Class) (implementation As TService) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingleton : 'Service -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddSingleton : 'Service -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddSingleton implementation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="implementation" Type="TService" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <param name="implementation">The object that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given instance
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingleton&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton&lt;TService,TImplementation&gt; () where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton&lt;class TService, class (!!TService) TImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingleton(Of TService As Class, TImplementation As Class) () As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingleton : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddSingleton : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddSingleton " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that implements the service.</typeparam>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingleton&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton&lt;TService,TImplementation&gt; (Func&lt;IServiceProvider,TImplementation&gt; factory) where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingleton&lt;class TService, class (!!TService) TImplementation&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingleton``2(System.Func{System.IServiceProvider,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingleton(Of TService As Class, TImplementation As Class) (factory As Func(Of IServiceProvider, TImplementation)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingleton : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddSingleton : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddSingleton factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that the given factory creates.</typeparam>
        <param name="factory">The factory that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingletonEnumerable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable (Type serviceType, object implementation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable(class System.Type serviceType, object implementation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingletonEnumerable (serviceType As Type, implementation As Object) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingletonEnumerable : Type * obj -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddSingletonEnumerable : Type * obj -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddSingletonEnumerable (serviceType, implementation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementation">The object that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given instance
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingletonEnumerable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable (Type serviceType, Type implementationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable(class System.Type serviceType, class System.Type implementationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingletonEnumerable (serviceType As Type, implementationType As Type) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingletonEnumerable : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddSingletonEnumerable : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddSingletonEnumerable (serviceType, implementationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementationType">The concrete type that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingletonEnumerable&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable&lt;TService&gt; (TService implementation) where TService : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable&lt;class TService&gt;(!!TService implementation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingletonEnumerable(Of TService As Class) (implementation As TService) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingletonEnumerable : 'Service -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddSingletonEnumerable : 'Service -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddSingletonEnumerable implementation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="implementation" Type="TService" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <param name="implementation">The object that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given instance
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingletonEnumerable&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable&lt;TService,TImplementation&gt; () where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable&lt;class TService, class (!!TService) TImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingletonEnumerable(Of TService As Class, TImplementation As Class) () As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingletonEnumerable : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddSingletonEnumerable : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddSingletonEnumerable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that implements the service.</typeparam>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddSingletonEnumerable&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable&lt;TService,TImplementation&gt; (Func&lt;IServiceProvider,TImplementation&gt; factory) where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddSingletonEnumerable&lt;class TService, class (!!TService) TImplementation&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddSingletonEnumerable``2(System.Func{System.IServiceProvider,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddSingletonEnumerable(Of TService As Class, TImplementation As Class) (factory As Func(Of IServiceProvider, TImplementation)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddSingletonEnumerable : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddSingletonEnumerable : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddSingletonEnumerable factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that implements the service.</typeparam>
        <param name="factory">The factory that implements this service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service implemented by the given factory
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddTransient">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient (Type serviceType, Func&lt;IServiceProvider,object&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient(class System.Type serviceType, class System.Func`2&lt;class System.IServiceProvider, object&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient(System.Type,System.Func{System.IServiceProvider,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddTransient (serviceType As Type, factory As Func(Of IServiceProvider, Object)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddTransient : Type * Func&lt;IServiceProvider, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddTransient : Type * Func&lt;IServiceProvider, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddTransient (serviceType, factory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="factory">The factory that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddTransient">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient (Type serviceType, Type implementationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient(class System.Type serviceType, class System.Type implementationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddTransient (serviceType As Type, implementationType As Type) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddTransient : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddTransient : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddTransient (serviceType, implementationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementationType">The concrete type that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddTransient&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient&lt;TService&gt; (Func&lt;IServiceProvider,TService&gt; factory) where TService : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient&lt;class TService&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient``1(System.Func{System.IServiceProvider,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddTransient(Of TService As Class) (factory As Func(Of IServiceProvider, TService)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddTransient : Func&lt;IServiceProvider, 'Service (requires 'Service : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddTransient : Func&lt;IServiceProvider, 'Service (requires 'Service : null)&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddTransient factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <param name="factory">The factory that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddTransient&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient&lt;TService,TImplementation&gt; () where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient&lt;class TService, class (!!TService) TImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddTransient(Of TService As Class, TImplementation As Class) () As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddTransient : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddTransient : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddTransient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that implements the service.</typeparam>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given concrete
                type if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddTransient&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient&lt;TService,TImplementation&gt; (Func&lt;IServiceProvider,TImplementation&gt; factory) where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransient&lt;class TService, class (!!TService) TImplementation&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransient``2(System.Func{System.IServiceProvider,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddTransient(Of TService As Class, TImplementation As Class) (factory As Func(Of IServiceProvider, TImplementation)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddTransient : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddTransient : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddTransient factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that the given factory creates.</typeparam>
        <param name="factory">The factory that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given factory
                if no service for the given service type has already been registered.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddTransientEnumerable">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransientEnumerable (Type serviceType, Type implementationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransientEnumerable(class System.Type serviceType, class System.Type implementationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransientEnumerable(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddTransientEnumerable (serviceType As Type, implementationType As Type) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddTransientEnumerable : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap&#xA;override this.TryAddTransientEnumerable : Type * Type -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap" Usage="serviceCollectionMap.TryAddTransientEnumerable (serviceType, implementationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementationType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">The contract for the service.</param>
        <param name="implementationType">The concrete type that implements the service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddTransientEnumerable&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransientEnumerable&lt;TService,TImplementation&gt; () where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransientEnumerable&lt;class TService, class (!!TService) TImplementation&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransientEnumerable``2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddTransientEnumerable(Of TService As Class, TImplementation As Class) () As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddTransientEnumerable : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddTransientEnumerable : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddTransientEnumerable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that implements the service.</typeparam>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given concrete
                type to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddTransientEnumerable&lt;TService,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransientEnumerable&lt;TService,TImplementation&gt; (Func&lt;IServiceProvider,TImplementation&gt; factory) where TService : class where TImplementation : class, TService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap TryAddTransientEnumerable&lt;class TService, class (!!TService) TImplementation&gt;(class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap.TryAddTransientEnumerable``2(System.Func{System.IServiceProvider,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryAddTransientEnumerable(Of TService As Class, TImplementation As Class) (factory As Func(Of IServiceProvider, TImplementation)) As ServiceCollectionMap" />
      <MemberSignature Language="F#" Value="abstract member TryAddTransientEnumerable : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)&#xA;override this.TryAddTransientEnumerable : Func&lt;IServiceProvider, #'Service&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap (requires 'Service : null)" Usage="serviceCollectionMap.TryAddTransientEnumerable factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TService</BaseTypeName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TService">The contract for the service.</typeparam>
        <typeparam name="TImplementation">The concrete type that implements the service.</typeparam>
        <param name="factory">The factory that implements this service.</param>
        <summary>
                Adds a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service implemented by the given factory
                to the list of services that implement the given contract. The service is only added
                if the collection contains no other registration for the same service and implementation type.
            </summary>
        <returns>The map, such that further calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
