<Type Name="ExpressionExtensions" FullName="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions">
  <TypeSignature Language="C#" Value="public static class ExpressionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExpressionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ExpressionExtensions" />
  <TypeSignature Language="F#" Value="type ExpressionExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    Extension methods for <see cref="T:System.Linq.Expressions.Expression" /> types.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression Assign (this System.Linq.Expressions.MemberExpression memberExpression, System.Linq.Expressions.Expression valueExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression Assign(class System.Linq.Expressions.MemberExpression memberExpression, class System.Linq.Expressions.Expression valueExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.Assign(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Assign (memberExpression As MemberExpression, valueExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="static member Assign : System.Linq.Expressions.MemberExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.Assign (memberExpression, valueExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicDependency]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicDependency&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("ReflectionAnalysis", "IL2077", Justification="AssignBinaryExpression is preserved via DynamicDependency below")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("ReflectionAnalysis", "IL2077", Justification="AssignBinaryExpression is preserved via DynamicDependency below")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" RefType="this" />
        <Parameter Name="valueExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="memberExpression">The member to which assignment will be made.</param>
        <param name="valueExpression">The value that will be assigned.</param>
        <summary>
                Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.
            </summary>
        <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> representing the assignment binding.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEFPropertyExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateEFPropertyExpression (this System.Linq.Expressions.Expression target, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property, bool makeNullable = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateEFPropertyExpression(class System.Linq.Expressions.Expression target, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property, bool makeNullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateEFPropertyExpression (target As Expression, property As IPropertyBase, Optional makeNullable As Boolean = true) As Expression" />
      <MemberSignature Language="F#" Value="static member CreateEFPropertyExpression : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * bool -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.CreateEFPropertyExpression (target, property, makeNullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="makeNullable" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="target">The expression that will be root for generated read operation.</param>
        <param name="property">The property to access.</param>
        <param name="makeNullable">A value indicating if the value can be nullable.</param>
        <summary>
          <para>
                    Creates an <see cref="T:System.Linq.Expressions.Expression" /> tree representing EF property access on given expression.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>An expression to access EF property on given expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEqualsExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateEqualsExpression (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool negated = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateEqualsExpression(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.CreateEqualsExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateEqualsExpression (left As Expression, right As Expression, Optional negated As Boolean = false) As Expression" />
      <MemberSignature Language="F#" Value="static member CreateEqualsExpression : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.CreateEqualsExpression (left, right, negated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="negated" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="left">The left expression in equality comparison.</param>
        <param name="right">The right expression in equality comparison.</param>
        <param name="negated">If the comparison is non-equality.</param>
        <summary>
          <para>
                    Creates an <see cref="T:System.Linq.Expressions.Expression" /> tree representing equality comparison between 2 expressions using
                    <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>An expression to compare left and right expressions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyValuesExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateKeyValuesExpression (this System.Linq.Expressions.Expression target, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, bool makeNullable = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateKeyValuesExpression(class System.Linq.Expressions.Expression target, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, bool makeNullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.CreateKeyValuesExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateKeyValuesExpression (target As Expression, properties As IReadOnlyList(Of IProperty), Optional makeNullable As Boolean = false) As Expression" />
      <MemberSignature Language="F#" Value="static member CreateKeyValuesExpression : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; * bool -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.CreateKeyValuesExpression (target, properties, makeNullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="makeNullable" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="target">The expression that will be root for generated read operation.</param>
        <param name="properties">The list of properties to use to generate key values.</param>
        <param name="makeNullable">A value indicating if the key values should be read nullable.</param>
        <summary>
          <para>
                    Creates an <see cref="T:System.Linq.Expressions.Expression" /> tree representing reading of a key values on given expression.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>An expression to read the key values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValueBufferReadValueExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateValueBufferReadValueExpression (this System.Linq.Expressions.Expression valueBuffer, Type type, int index, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateValueBufferReadValueExpression(class System.Linq.Expressions.Expression valueBuffer, class System.Type type, int32 index, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.CreateValueBufferReadValueExpression(System.Linq.Expressions.Expression,System.Type,System.Int32,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateValueBufferReadValueExpression (valueBuffer As Expression, type As Type, index As Integer, property As IPropertyBase) As Expression" />
      <MemberSignature Language="F#" Value="static member CreateValueBufferReadValueExpression : System.Linq.Expressions.Expression * Type * int * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.CreateValueBufferReadValueExpression (valueBuffer, type, index, property)" />
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateValueBufferReadValueExpression (this System.Linq.Expressions.Expression valueBuffer, Type type, int index, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase? property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueBuffer" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="index" Type="System.Int32" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="valueBuffer">The expression that exposes the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" />.</param>
        <param name="type">The type to read.</param>
        <param name="index">The index in the buffer to read from.</param>
        <param name="property">The IPropertyBase being read if any.</param>
        <summary>
          <para>
                    Creates an <see cref="T:System.Linq.Expressions.Expression" /> tree representing reading a value from a <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" /></para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns>An expression to read the value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Reflection.MemberInfo GetMemberAccess (this System.Linq.Expressions.LambdaExpression memberAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MemberInfo GetMemberAccess(class System.Linq.Expressions.LambdaExpression memberAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetMemberAccess(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMemberAccess (memberAccessExpression As LambdaExpression) As MemberInfo" />
      <MemberSignature Language="F#" Value="static member GetMemberAccess : System.Linq.Expressions.LambdaExpression -&gt; System.Reflection.MemberInfo" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetMemberAccess memberAccessExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberAccessExpression">The expression.</param>
        <summary>
                Gets the <see cref="T:System.Reflection.MemberInfo" /> represented by a simple member-access expression.
            </summary>
        <returns>The <see cref="T:System.Reflection.MemberInfo" />.</returns>
        <remarks>
                This method is typically used to parse member access lambdas from fluent APIs.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMemberAccessList">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt; GetMemberAccessList (this System.Linq.Expressions.LambdaExpression memberAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.MemberInfo&gt; GetMemberAccessList(class System.Linq.Expressions.LambdaExpression memberAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetMemberAccessList(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMemberAccessList (memberAccessExpression As LambdaExpression) As IReadOnlyList(Of MemberInfo)" />
      <MemberSignature Language="F#" Value="static member GetMemberAccessList : System.Linq.Expressions.LambdaExpression -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetMemberAccessList memberAccessExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Reflection.MemberInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberAccessExpression">The expression.</param>
        <summary>
                Returns a list of <see cref="T:System.Reflection.MemberInfo" /> extracted from the given simple
                <see cref="T:System.Linq.Expressions.LambdaExpression" />.
            </summary>
        <returns>The list of referenced members.</returns>
        <remarks>
          <para>
                    Only simple expressions are supported, such as those used to reference a member.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccess">
      <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo GetPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo GetPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccess (propertyAccessExpression As LambdaExpression) As PropertyInfo" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccess : System.Linq.Expressions.LambdaExpression -&gt; System.Reflection.PropertyInfo" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetPropertyAccess propertyAccessExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="propertyAccessExpression">The expression.</param>
        <summary>
                Gets the <see cref="T:System.Reflection.PropertyInfo" /> represented by a simple property-access expression.
            </summary>
        <returns>The <see cref="T:System.Reflection.PropertyInfo" />.</returns>
        <remarks>
                This method is typically used to parse property access lambdas from fluent APIs.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccessList">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; GetPropertyAccessList (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; GetPropertyAccessList(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessList (propertyAccessExpression As LambdaExpression) As IReadOnlyList(Of PropertyInfo)" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessList : System.Linq.Expressions.LambdaExpression -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetPropertyAccessList propertyAccessExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="propertyAccessExpression">The expression.</param>
        <summary>
                Returns a list of <see cref="T:System.Reflection.PropertyInfo" /> extracted from the given simple
                <see cref="T:System.Linq.Expressions.LambdaExpression" />.
            </summary>
        <returns>The list of referenced properties.</returns>
        <remarks>
          <para>
                    Only simple expressions are supported, such as those used to reference a property.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (this System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MakeMemberAccess (expression As Expression, member As MemberInfo) As MemberExpression" />
      <MemberSignature Language="F#" Value="static member MakeMemberAccess : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.MakeMemberAccess (expression, member)" />
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (this System.Linq.Expressions.Expression? expression, System.Reflection.MemberInfo member);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the object that the member belongs to.</param>
        <param name="member">The <see cref="T:System.Reflection.MemberInfo"></see> that describes the field or property to be accessed.</param>
        <summary>
                Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.
            </summary>
        <returns>The <see cref="T:System.Linq.Expressions.MemberExpression"></see> that results from calling the appropriate factory method.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static string Print (this System.Linq.Expressions.Expression expression, int? characterLimit = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Print(class System.Linq.Expressions.Expression expression, valuetype System.Nullable`1&lt;int32&gt; characterLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.Print(System.Linq.Expressions.Expression,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Print (expression As Expression, Optional characterLimit As Nullable(Of Integer) = Nothing) As String" />
      <MemberSignature Language="F#" Value="static member Print : System.Linq.Expressions.Expression * Nullable&lt;int&gt; -&gt; string" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.Print (expression, characterLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        <Parameter Name="characterLimit" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">The expression.</param>
        <param name="characterLimit">An optional limit to the number of characters included. Additional output will be truncated.</param>
        <summary>
                Creates a printable string representation of the given expression.
            </summary>
        <returns>The printable representation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveConvert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression RemoveConvert (this System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression RemoveConvert(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveConvert (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="static member RemoveConvert : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.RemoveConvert expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Unwrap each convert manually by evaluating how they are used.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Unwrap each convert manually by evaluating how they are used.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="expression"> The expression. </param>
        <summary>
          <para>
                    Returns a new expression with any see <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> or
                    <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> nodes removed from the head of the
                    given expression tree/
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns> A new expression with converts at the head removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetEFPropertyArguments">
      <MemberSignature Language="C#" Value="public static bool TryGetEFPropertyArguments (this System.Linq.Expressions.MethodCallExpression methodCallExpression, out System.Linq.Expressions.Expression entityExpression, out string propertyName);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetEFPropertyArguments(class System.Linq.Expressions.MethodCallExpression methodCallExpression, [out] class System.Linq.Expressions.Expression&amp; entityExpression, [out] string&amp; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.TryGetEFPropertyArguments(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetEFPropertyArguments (methodCallExpression As MethodCallExpression, ByRef entityExpression As Expression, ByRef propertyName As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetEFPropertyArguments : System.Linq.Expressions.MethodCallExpression * Expression * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.TryGetEFPropertyArguments (methodCallExpression, entityExpression, propertyName)" />
      <MemberSignature Language="C#" Value="public static bool TryGetEFPropertyArguments (this System.Linq.Expressions.MethodCallExpression methodCallExpression, out System.Linq.Expressions.Expression? entityExpression, out string? propertyName);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" RefType="this" />
        <Parameter Name="entityExpression" Type="System.Linq.Expressions.Expression" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="propertyName" Type="System.String" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodCallExpression">The method-call expression for <see cref="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)" /></param>
        <param name="entityExpression">The extracted entity access expression.</param>
        <param name="propertyName">The accessed property name.</param>
        <summary>
                If the given a method-call expression represents a call to <see cref="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)" />, then this
                method extracts the entity expression and property name.
            </summary>
        <returns>
          <see langword="true" /> if the method-call was for <see cref="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)" />; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndexerArguments">
      <MemberSignature Language="C#" Value="public static bool TryGetIndexerArguments (this System.Linq.Expressions.MethodCallExpression methodCallExpression, Microsoft.EntityFrameworkCore.Metadata.IModel model, out System.Linq.Expressions.Expression entityExpression, out string propertyName);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetIndexerArguments(class System.Linq.Expressions.MethodCallExpression methodCallExpression, class Microsoft.EntityFrameworkCore.Metadata.IModel model, [out] class System.Linq.Expressions.Expression&amp; entityExpression, [out] string&amp; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.TryGetIndexerArguments(System.Linq.Expressions.MethodCallExpression,Microsoft.EntityFrameworkCore.Metadata.IModel,System.Linq.Expressions.Expression@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetIndexerArguments (methodCallExpression As MethodCallExpression, model As IModel, ByRef entityExpression As Expression, ByRef propertyName As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetIndexerArguments : System.Linq.Expressions.MethodCallExpression * Microsoft.EntityFrameworkCore.Metadata.IModel * Expression * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.TryGetIndexerArguments (methodCallExpression, model, entityExpression, propertyName)" />
      <MemberSignature Language="C#" Value="public static bool TryGetIndexerArguments (this System.Linq.Expressions.MethodCallExpression methodCallExpression, Microsoft.EntityFrameworkCore.Metadata.IModel model, out System.Linq.Expressions.Expression? entityExpression, out string? propertyName);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" RefType="this" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entityExpression" Type="System.Linq.Expressions.Expression" RefType="out" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="propertyName" Type="System.String" RefType="out" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodCallExpression">The method-call expression for indexer.</param>
        <param name="model">The model to use.</param>
        <param name="entityExpression">The extracted entity access expression.</param>
        <param name="propertyName">The accessed property name.</param>
        <summary>
                If the given a method-call expression represents a call to indexer on the entity, then this
                method extracts the entity expression and property name.
            </summary>
        <returns>
          <see langword="true" /> if the method-call was for indexer; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueBufferTryReadValueMethod">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MethodInfo ValueBufferTryReadValueMethod;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MethodInfo ValueBufferTryReadValueMethod" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.ValueBufferTryReadValueMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly ValueBufferTryReadValueMethod As MethodInfo " />
      <MemberSignature Language="F#" Value=" staticval mutable ValueBufferTryReadValueMethod : System.Reflection.MethodInfo" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.ValueBufferTryReadValueMethod" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    MethodInfo which is used to generate an <see cref="T:System.Linq.Expressions.Expression" /> tree representing reading a value from a
                    <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" /></para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
