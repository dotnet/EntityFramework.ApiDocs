<Type Name="PooledDbContextFactory&lt;TContext&gt;" FullName="Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory&lt;TContext&gt;">
  <TypeSignature Language="C#" Value="public class PooledDbContextFactory&lt;TContext&gt; : Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt; where TContext : DbContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PooledDbContextFactory`1&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.IDbContextFactory`1&lt;!TContext&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class PooledDbContextFactory(Of TContext)&#xA;Implements IDbContextFactory(Of TContext)" />
  <TypeSignature Language="F#" Value="type PooledDbContextFactory&lt;'Context (requires 'Context :&gt; DbContext)&gt; = class&#xA;    interface IDbContextFactory&lt;'Context (requires 'Context :&gt; DbContext)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TContext">
      <Constraints>
        <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
      </Constraints>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TContext">To be added.</typeparam>
    <summary>
                A factory returning pooled <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. Disposing the instance returned by this factory returns
                them to the internal pooling mechanism.
            </summary>
    <remarks>
      <para>
                    A service of this type is registered in the dependency injection container by the
                    <see cref="O:EntityFrameworkServiceCollectionExtensions.AddDbContextPool" /> methods.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see>,
                    <see href="https://aka.ms/efcore-docs-dbcontext-factory">Using DbContext factories</see>, and
                    <see href="https://aka.ms/efcore-docs-dbcontext-pooling">Using DbContext pooling</see> for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PooledDbContextFactory (Microsoft.EntityFrameworkCore.Internal.IDbContextPool&lt;TContext&gt; pool);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Internal.IDbContextPool`1&lt;!TContext&gt; pool) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory`1.#ctor(Microsoft.EntityFrameworkCore.Internal.IDbContextPool{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pool As IDbContextPool(Of TContext))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; : Microsoft.EntityFrameworkCore.Internal.IDbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; -&gt; Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; pool" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pool" Type="Microsoft.EntityFrameworkCore.Internal.IDbContextPool&lt;TContext&gt;" />
      </Parameters>
      <Docs>
        <param name="pool">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PooledDbContextFactory (Microsoft.EntityFrameworkCore.DbContextOptions&lt;TContext&gt; options, int poolSize = 1024);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.DbContextOptions`1&lt;!TContext&gt; options, int32 poolSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As DbContextOptions(Of TContext), Optional poolSize As Integer = 1024)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; : Microsoft.EntityFrameworkCore.DbContextOptions&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; * int -&gt; Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; (options, poolSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.DbContextOptions&lt;TContext&gt;" />
        <Parameter Name="poolSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="options">The options to use for contexts produced by this factory.</param>
        <param name="poolSize">Sets the maximum number of instances retained by the pool. Defaults to 1024.</param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory`1" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbContext">
      <MemberSignature Language="C#" Value="public virtual TContext CreateDbContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TContext CreateDbContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory`1.CreateDbContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDbContext () As TContext" />
      <MemberSignature Language="F#" Value="abstract member CreateDbContext : unit -&gt; 'Context&#xA;override this.CreateDbContext : unit -&gt; 'Context" Usage="pooledDbContextFactory.CreateDbContext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.IDbContextFactory`1.CreateDbContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateDbContextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TContext&gt; CreateDbContextAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TContext&gt; CreateDbContextAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory`1.CreateDbContextAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDbContextAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of TContext)" />
      <MemberSignature Language="F#" Value="abstract member CreateDbContextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;&#xA;override this.CreateDbContextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="pooledDbContextFactory.CreateDbContextAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.IDbContextFactory`1.CreateDbContextAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
