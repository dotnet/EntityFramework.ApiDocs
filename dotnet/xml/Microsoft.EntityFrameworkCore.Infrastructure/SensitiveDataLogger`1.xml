<Type Name="SensitiveDataLogger&lt;T&gt;" FullName="Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class SensitiveDataLogger&lt;T&gt; : Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger&lt;T&gt;, Microsoft.Extensions.Logging.ILogger&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SensitiveDataLogger`1&lt;T&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger, class Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1&lt;!T&gt;, class Microsoft.Extensions.Logging.ILogger, class Microsoft.Extensions.Logging.ILogger`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger`1" />
  <TypeSignature Language="VB.NET" Value="Public Class SensitiveDataLogger(Of T)&#xA;Implements ILogger(Of T), ISensitiveDataLogger(Of T)" />
  <TypeSignature Language="F#" Value="type SensitiveDataLogger&lt;'T&gt; = class&#xA;    interface ISensitiveDataLogger&lt;'T&gt;&#xA;    interface ILogger&lt;'T&gt;&#xA;    interface ILogger&#xA;    interface ISensitiveDataLogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ILogger</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ILogger&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"> The type who's name is used for the logger category name. </typeparam>
    <summary>
      <para>
                    A wrapping logger for which logging of sensitive data can be enabled or disabled.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SensitiveDataLogger (Microsoft.Extensions.Logging.ILogger&lt;T&gt; logger, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions contextOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Logging.ILogger`1&lt;!T&gt; logger, class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions contextOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger`1.#ctor(Microsoft.Extensions.Logging.ILogger{`0},Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logger As ILogger(Of T), contextOptions As IDbContextOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger&lt;'T&gt; : Microsoft.Extensions.Logging.ILogger&lt;'T&gt; * Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions -&gt; Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger&lt;'T&gt;" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger&lt;'T&gt; (logger, contextOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger&lt;T&gt;" />
        <Parameter Name="contextOptions" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" />
      </Parameters>
      <Docs>
        <param name="logger">
                The underlying logger to which logging information should be written.
            </param>
        <param name="contextOptions">
                The options for the context that this logger is being used with.
            </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger`1" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogSensitiveData">
      <MemberSignature Language="C#" Value="public virtual bool LogSensitiveData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LogSensitiveData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger`1.LogSensitiveData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LogSensitiveData As Boolean" />
      <MemberSignature Language="F#" Value="member this.LogSensitiveData : bool" Usage="Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger&lt;'T&gt;.LogSensitiveData" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger.LogSensitiveData</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether sensitive information should be written to the underlying logger.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Logging.ILogger.BeginScope&lt;TState&gt;">
      <MemberSignature Language="C#" Value="IDisposable ILogger.BeginScope&lt;TState&gt; (TState state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.IDisposable Microsoft.Extensions.Logging.ILogger.BeginScope&lt;TState&gt;(!!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger`1.Microsoft#Extensions#Logging#ILogger#BeginScope``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Function BeginScope(Of TState) (state As TState) As IDisposable Implements ILogger.BeginScope" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Logging.ILogger.BeginScope : 'State -&gt; IDisposable&#xA;override this.Microsoft.Extensions.Logging.ILogger.BeginScope : 'State -&gt; IDisposable" Usage="sensitiveDataLogger.Microsoft.Extensions.Logging.ILogger.BeginScope state" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="state" Type="TState" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Logging.ILogger.IsEnabled">
      <MemberSignature Language="C#" Value="bool ILogger.IsEnabled (Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.Extensions.Logging.ILogger.IsEnabled(valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger`1.Microsoft#Extensions#Logging#ILogger#IsEnabled(Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Function IsEnabled (logLevel As LogLevel) As Boolean Implements ILogger.IsEnabled" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Logging.ILogger.IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool&#xA;override this.Microsoft.Extensions.Logging.ILogger.IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool" Usage="sensitiveDataLogger.Microsoft.Extensions.Logging.ILogger.IsEnabled logLevel" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="logLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Logging.ILogger.Log&lt;TState&gt;">
      <MemberSignature Language="C#" Value="void ILogger.Log&lt;TState&gt; (Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, Exception exception, Func&lt;TState,Exception,string&gt; formatter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Logging.ILogger.Log&lt;TState&gt;(valuetype Microsoft.Extensions.Logging.LogLevel logLevel, valuetype Microsoft.Extensions.Logging.EventId eventId, !!TState state, class System.Exception exception, class System.Func`3&lt;!!TState, class System.Exception, string&gt; formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.SensitiveDataLogger`1.Microsoft#Extensions#Logging#ILogger#Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" />
      <MemberSignature Language="VB.NET" Value="Sub Log(Of TState) (logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String)) Implements ILogger.Log" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Logging.ILogger.Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit&#xA;override this.Microsoft.Extensions.Logging.ILogger.Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit" Usage="sensitiveDataLogger.Microsoft.Extensions.Logging.ILogger.Log (logLevel, eventId, state, exception, formatter)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="formatter" Type="System.Func&lt;TState,System.Exception,System.String&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="logLevel">To be added.</param>
        <param name="eventId">To be added.</param>
        <param name="state">To be added.</param>
        <param name="exception">To be added.</param>
        <param name="formatter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
