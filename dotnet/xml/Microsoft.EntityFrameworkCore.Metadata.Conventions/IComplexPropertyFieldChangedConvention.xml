<Type Name="IComplexPropertyFieldChangedConvention" FullName="Microsoft.EntityFrameworkCore.Metadata.Conventions.IComplexPropertyFieldChangedConvention">
  <TypeSignature Language="C#" Value="public interface IComplexPropertyFieldChangedConvention : Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IComplexPropertyFieldChangedConvention implements class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.IComplexPropertyFieldChangedConvention" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComplexPropertyFieldChangedConvention&#xA;Implements IConvention" />
  <TypeSignature Language="F#" Value="type IComplexPropertyFieldChangedConvention = interface&#xA;    interface IConvention" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Represents an operation that should be performed when the backing field for a complex property is changed.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="ProcessComplexPropertyFieldChanged">
      <MemberSignature Language="C#" Value="public void ProcessComplexPropertyFieldChanged (Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder propertyBuilder, System.Reflection.FieldInfo? newFieldInfo, System.Reflection.FieldInfo? oldFieldInfo, Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;System.Reflection.FieldInfo&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessComplexPropertyFieldChanged(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder propertyBuilder, class System.Reflection.FieldInfo newFieldInfo, class System.Reflection.FieldInfo oldFieldInfo, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext`1&lt;class System.Reflection.FieldInfo&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.IComplexPropertyFieldChangedConvention.ProcessComplexPropertyFieldChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder,System.Reflection.FieldInfo,System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{System.Reflection.FieldInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessComplexPropertyFieldChanged (propertyBuilder As IConventionComplexPropertyBuilder, newFieldInfo As FieldInfo, oldFieldInfo As FieldInfo, context As IConventionContext(Of FieldInfo))" />
      <MemberSignature Language="F#" Value="abstract member ProcessComplexPropertyFieldChanged : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder * System.Reflection.FieldInfo * System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;System.Reflection.FieldInfo&gt; -&gt; unit" Usage="iComplexPropertyFieldChangedConvention.ProcessComplexPropertyFieldChanged (propertyBuilder, newFieldInfo, oldFieldInfo, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" />
        <Parameter Name="newFieldInfo" Type="System.Reflection.FieldInfo" />
        <Parameter Name="oldFieldInfo" Type="System.Reflection.FieldInfo" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;System.Reflection.FieldInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the property.</param>
        <param name="newFieldInfo">The new field.</param>
        <param name="oldFieldInfo">The old field.</param>
        <param name="context">Additional information associated with convention execution.</param>
        <summary>
                Called after the backing field for a complex property is changed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
