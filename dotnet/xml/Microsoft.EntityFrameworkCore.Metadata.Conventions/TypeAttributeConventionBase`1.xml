<Type Name="TypeAttributeConventionBase&lt;TAttribute&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase&lt;TAttribute&gt;">
  <TypeSignature Language="C#" Value="public abstract class TypeAttributeConventionBase&lt;TAttribute&gt; : Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeAddedConvention where TAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeAttributeConventionBase`1&lt;(class System.Attribute) TAttribute&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeAddedConvention" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeAttributeConventionBase(Of TAttribute)&#xA;Implements IEntityTypeAddedConvention" />
  <TypeSignature Language="F#" Value="type TypeAttributeConventionBase&lt;'Attribute (requires 'Attribute :&gt; Attribute)&gt; = class&#xA;    interface IEntityTypeAddedConvention&#xA;    interface IConvention" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TAttribute">
      <Constraints>
        <BaseTypeName>System.Attribute</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeAddedConvention</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TAttribute">The attribute type to look for.</typeparam>
    <summary>
                A base type for conventions that perform configuration based on an attribute specified on a structural type.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeAttributeConventionBase (Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As ProviderConventionSetBuilderDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase&lt;'Attribute (requires 'Attribute :&gt; Attribute)&gt; : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase&lt;'Attribute (requires 'Attribute :&gt; Attribute)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase&lt;'Attribute (requires 'Attribute :&gt; System.Attribute)&gt; dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">Parameter object containing dependencies for this convention.</param>
        <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase`1.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As ProviderConventionSetBuilderDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase&lt;'Attribute (requires 'Attribute :&gt; System.Attribute)&gt;.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessComplexPropertyAdded">
      <MemberSignature Language="C#" Value="public virtual void ProcessComplexPropertyAdded (Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder propertyBuilder, Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessComplexPropertyAdded(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder propertyBuilder, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase`1.ProcessComplexPropertyAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessComplexPropertyAdded (propertyBuilder As IConventionComplexPropertyBuilder, context As IConventionContext(Of IConventionComplexPropertyBuilder))" />
      <MemberSignature Language="F#" Value="abstract member ProcessComplexPropertyAdded : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt; -&gt; unit&#xA;override this.ProcessComplexPropertyAdded : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt; -&gt; unit" Usage="typeAttributeConventionBase.ProcessComplexPropertyAdded (propertyBuilder, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyBuilder">The builder for the complex property.</param>
        <param name="context">Additional information associated with convention execution.</param>
        <summary>
                Called after a complex property is added to a type-like object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessComplexTypeAdded">
      <MemberSignature Language="C#" Value="protected virtual void ProcessComplexTypeAdded (Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder complexTypeBuilder, TAttribute attribute, Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ProcessComplexTypeAdded(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder complexTypeBuilder, !TAttribute attribute, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase`1.ProcessComplexTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder,`0,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ProcessComplexTypeAdded (complexTypeBuilder As IConventionComplexTypeBuilder, attribute As TAttribute, context As IConventionContext)" />
      <MemberSignature Language="F#" Value="abstract member ProcessComplexTypeAdded : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder * 'Attribute * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext -&gt; unit&#xA;override this.ProcessComplexTypeAdded : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder * 'Attribute * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext -&gt; unit" Usage="typeAttributeConventionBase.ProcessComplexTypeAdded (complexTypeBuilder, attribute, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder" />
        <Parameter Name="attribute" Type="TAttribute" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext" />
      </Parameters>
      <Docs>
        <param name="complexTypeBuilder">The builder for the complex type.</param>
        <param name="attribute">The attribute.</param>
        <param name="context">Additional information associated with convention execution.</param>
        <summary>
                Called after an complex type is added to the model if it has an attribute.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEntityTypeAdded">
      <MemberSignature Language="C#" Value="public virtual void ProcessEntityTypeAdded (Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessEntityTypeAdded(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase`1.ProcessEntityTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessEntityTypeAdded (entityTypeBuilder As IConventionEntityTypeBuilder, context As IConventionContext(Of IConventionEntityTypeBuilder))" />
      <MemberSignature Language="F#" Value="abstract member ProcessEntityTypeAdded : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&gt; -&gt; unit&#xA;override this.ProcessEntityTypeAdded : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&gt; -&gt; unit" Usage="typeAttributeConventionBase.ProcessEntityTypeAdded (entityTypeBuilder, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeAddedConvention.ProcessEntityTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type.</param>
        <param name="context">Additional information associated with convention execution.</param>
        <summary>
                Called after an entity type is added to the model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEntityTypeAdded">
      <MemberSignature Language="C#" Value="protected abstract void ProcessEntityTypeAdded (Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, TAttribute attribute, Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ProcessEntityTypeAdded(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder entityTypeBuilder, !TAttribute attribute, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase`1.ProcessEntityTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,`0,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub ProcessEntityTypeAdded (entityTypeBuilder As IConventionEntityTypeBuilder, attribute As TAttribute, context As IConventionContext(Of IConventionEntityTypeBuilder))" />
      <MemberSignature Language="F#" Value="abstract member ProcessEntityTypeAdded : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder * 'Attribute * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&gt; -&gt; unit" Usage="typeAttributeConventionBase.ProcessEntityTypeAdded (entityTypeBuilder, attribute, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" />
        <Parameter Name="attribute" Type="TAttribute" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">The builder for the entity type.</param>
        <param name="attribute">The attribute.</param>
        <param name="context">Additional information associated with convention execution.</param>
        <summary>
                Called after an entity type is added to the model if it has an attribute.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceWithEntityType">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder? ReplaceWithEntityType (Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder complexTypeBuilder, bool? shouldBeOwned = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder ReplaceWithEntityType(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder complexTypeBuilder, valuetype System.Nullable`1&lt;bool&gt; shouldBeOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeAttributeConventionBase`1.ReplaceWithEntityType(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ReplaceWithEntityType (complexTypeBuilder As IConventionComplexTypeBuilder, Optional shouldBeOwned As Nullable(Of Boolean) = Nothing) As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="abstract member ReplaceWithEntityType : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder&#xA;override this.ReplaceWithEntityType : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder * Nullable&lt;bool&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="typeAttributeConventionBase.ReplaceWithEntityType (complexTypeBuilder, shouldBeOwned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexTypeBuilder" />
        <Parameter Name="shouldBeOwned" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="complexTypeBuilder">The complex type builder.</param>
        <param name="shouldBeOwned">A value indicating whether the new entity type should be owned.</param>
        <summary>
                Tries to replace the complex type with an entity type.
            </summary>
        <returns>The builder for the new entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
