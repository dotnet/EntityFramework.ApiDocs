<Type Name="SharedTableConvention" FullName="Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention">
  <TypeSignature Language="C#" Value="public class SharedTableConvention : Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizedConvention" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SharedTableConvention extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizedConvention" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention" />
  <TypeSignature Language="VB.NET" Value="Public Class SharedTableConvention&#xA;Implements IModelFinalizedConvention" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="F#" Value="type SharedTableConvention = class&#xA;    interface IModelFinalizedConvention&#xA;    interface IConvention" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="C#" Value="public class SharedTableConvention : Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizingConvention" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SharedTableConvention extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizingConvention" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class SharedTableConvention&#xA;Implements IModelFinalizingConvention" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type SharedTableConvention = class&#xA;    interface IModelFinalizingConvention&#xA;    interface IConvention" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizedConvention</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizingConvention</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                A convention that manipulates names of database objects for entity types that share a table to avoid clashes.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SharedTableConvention (Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies, Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies relationalDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies dependencies, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies relationalDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As ProviderConventionSetBuilderDependencies, relationalDependencies As RelationalConventionSetBuilderDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies * Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention" Usage="new Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention (dependencies, relationalDependencies)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">Parameter object containing dependencies for this convention.</param>
        <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreCompatible">
      <MemberSignature Language="C#" Value="protected virtual bool AreCompatible (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IForeignKey duplicateForeignKey, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IForeignKey duplicateForeignKey, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AreCompatible (foreignKey As IForeignKey, duplicateForeignKey As IForeignKey, storeObject As StoreObjectIdentifier) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IForeignKey * StoreObjectIdentifier -&gt; bool&#xA;override this.AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.Metadata.IForeignKey * StoreObjectIdentifier -&gt; bool" Usage="sharedTableConvention.AreCompatible (foreignKey, duplicateForeignKey, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="duplicateForeignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="2" FrameworkAlternate="efcore-5.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="foreignKey"> A foreign key. </param>
        <param name="duplicateForeignKey"> Another foreign key. </param>
        <param name="storeObject"> The identifier of the store object. </param>
        <summary>
                Gets a value indicating whether two foreign keys mapped to the same foreign key constraint are compatible.
            </summary>
        <returns>
          <see langword="true" /> if compatible </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreCompatible">
      <MemberSignature Language="C#" Value="protected virtual bool AreCompatible (Microsoft.EntityFrameworkCore.Metadata.IIndex index, Microsoft.EntityFrameworkCore.Metadata.IIndex duplicateIndex, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IIndex index, class Microsoft.EntityFrameworkCore.Metadata.IIndex duplicateIndex, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AreCompatible (index As IIndex, duplicateIndex As IIndex, storeObject As StoreObjectIdentifier) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Metadata.IIndex * StoreObjectIdentifier -&gt; bool&#xA;override this.AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IIndex * Microsoft.EntityFrameworkCore.Metadata.IIndex * StoreObjectIdentifier -&gt; bool" Usage="sharedTableConvention.AreCompatible (index, duplicateIndex, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="duplicateIndex" Type="Microsoft.EntityFrameworkCore.Metadata.IIndex" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="2" FrameworkAlternate="efcore-5.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index"> An index. </param>
        <param name="duplicateIndex"> Another index. </param>
        <param name="storeObject"> The identifier of the store object. </param>
        <summary>
                Gets a value indicating whether two indexes mapped to the same table index are compatible.
            </summary>
        <returns>
          <see langword="true" /> if compatible </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreCompatible">
      <MemberSignature Language="C#" Value="protected virtual bool AreCompatible (Microsoft.EntityFrameworkCore.Metadata.IKey key, Microsoft.EntityFrameworkCore.Metadata.IKey duplicateKey, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IKey key, class Microsoft.EntityFrameworkCore.Metadata.IKey duplicateKey, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AreCompatible (key As IKey, duplicateKey As IKey, storeObject As StoreObjectIdentifier) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Metadata.IKey * StoreObjectIdentifier -&gt; bool&#xA;override this.AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Metadata.IKey * StoreObjectIdentifier -&gt; bool" Usage="sharedTableConvention.AreCompatible (key, duplicateKey, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="0" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="duplicateKey" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="1" FrameworkAlternate="efcore-5.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="2" FrameworkAlternate="efcore-5.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="key"> A key. </param>
        <param name="duplicateKey"> Another key. </param>
        <param name="storeObject"> The identifier of the store object. </param>
        <summary>
                Gets a value indicating whether two key mapped to the same constraint are compatible.
            </summary>
        <returns>
          <see langword="true" /> if compatible </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreCompatible">
      <MemberSignature Language="C#" Value="protected virtual bool AreCompatible (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint checkConstraint, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint duplicateCheckConstraint, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint checkConstraint, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint duplicateCheckConstraint, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AreCompatible (checkConstraint As IReadOnlyCheckConstraint, duplicateCheckConstraint As IReadOnlyCheckConstraint, storeObject As StoreObjectIdentifier) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint * StoreObjectIdentifier -&gt; bool&#xA;override this.AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint * StoreObjectIdentifier -&gt; bool" Usage="sharedTableConvention.AreCompatible (checkConstraint, duplicateCheckConstraint, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkConstraint" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="duplicateCheckConstraint" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyCheckConstraint" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="checkConstraint">An check constraints.</param>
        <param name="duplicateCheckConstraint">Another check constraints.</param>
        <param name="storeObject">The identifier of the store object.</param>
        <summary>
                Gets a value indicating whether two check constraints with the same name are compatible.
            </summary>
        <returns>
          <see langword="true" /> if compatible</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreCompatible">
      <MemberSignature Language="C#" Value="protected virtual bool AreCompatible (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey duplicateForeignKey, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey foreignKey, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey duplicateForeignKey, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AreCompatible (foreignKey As IReadOnlyForeignKey, duplicateForeignKey As IReadOnlyForeignKey, storeObject As StoreObjectIdentifier) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey * StoreObjectIdentifier -&gt; bool&#xA;override this.AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey * StoreObjectIdentifier -&gt; bool" Usage="sharedTableConvention.AreCompatible (foreignKey, duplicateForeignKey, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="duplicateForeignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="foreignKey">A foreign key.</param>
        <param name="duplicateForeignKey">Another foreign key.</param>
        <param name="storeObject">The identifier of the store object.</param>
        <summary>
                Gets a value indicating whether two foreign keys mapped to the same foreign key constraint are compatible.
            </summary>
        <returns>
          <see langword="true" /> if compatible</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreCompatible">
      <MemberSignature Language="C#" Value="protected virtual bool AreCompatible (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex index, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex duplicateIndex, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex index, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex duplicateIndex, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AreCompatible (index As IReadOnlyIndex, duplicateIndex As IReadOnlyIndex, storeObject As StoreObjectIdentifier) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex * StoreObjectIdentifier -&gt; bool&#xA;override this.AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex * StoreObjectIdentifier -&gt; bool" Usage="sharedTableConvention.AreCompatible (index, duplicateIndex, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="duplicateIndex" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">An index.</param>
        <param name="duplicateIndex">Another index.</param>
        <param name="storeObject">The identifier of the store object.</param>
        <summary>
                Gets a value indicating whether two indexes mapped to the same table index are compatible.
            </summary>
        <returns>
          <see langword="true" /> if compatible</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreCompatible">
      <MemberSignature Language="C#" Value="protected virtual bool AreCompatible (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey key, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey duplicateKey, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey key, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey duplicateKey, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AreCompatible (key As IReadOnlyKey, duplicateKey As IReadOnlyKey, storeObject As StoreObjectIdentifier) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey * StoreObjectIdentifier -&gt; bool&#xA;override this.AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey * StoreObjectIdentifier -&gt; bool" Usage="sharedTableConvention.AreCompatible (key, duplicateKey, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="duplicateKey" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="key">A key.</param>
        <param name="duplicateKey">Another key.</param>
        <param name="storeObject">The identifier of the store object.</param>
        <summary>
                Gets a value indicating whether two key mapped to the same constraint are compatible.
            </summary>
        <returns>
          <see langword="true" /> if compatible</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreCompatible">
      <MemberSignature Language="C#" Value="protected virtual bool AreCompatible (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger trigger, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger duplicateTrigger, in Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreCompatible(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger trigger, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger duplicateTrigger, [in]valuetype Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier storeObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AreCompatible (trigger As IReadOnlyTrigger, duplicateTrigger As IReadOnlyTrigger, storeObject As StoreObjectIdentifier) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger * StoreObjectIdentifier -&gt; bool&#xA;override this.AreCompatible : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger * StoreObjectIdentifier -&gt; bool" Usage="sharedTableConvention.AreCompatible (trigger, duplicateTrigger, storeObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="duplicateTrigger" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="storeObject" Type="Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trigger">A trigger.</param>
        <param name="duplicateTrigger">Another trigger.</param>
        <param name="storeObject">The identifier of the store object.</param>
        <summary>
                Gets a value indicating whether two triggers with the same name are compatible.
            </summary>
        <returns>
          <see langword="true" /> if compatible</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckConstraintsUniqueAcrossTables">
      <MemberSignature Language="C#" Value="protected virtual bool CheckConstraintsUniqueAcrossTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckConstraintsUniqueAcrossTables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.CheckConstraintsUniqueAcrossTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CheckConstraintsUniqueAcrossTables As Boolean" />
      <MemberSignature Language="F#" Value="member this.CheckConstraintsUniqueAcrossTables : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.CheckConstraintsUniqueAcrossTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether check constraint names should be unique across tables.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As ProviderConventionSetBuilderDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeignKeysUniqueAcrossTables">
      <MemberSignature Language="C#" Value="protected virtual bool ForeignKeysUniqueAcrossTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForeignKeysUniqueAcrossTables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.ForeignKeysUniqueAcrossTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ForeignKeysUniqueAcrossTables As Boolean" />
      <MemberSignature Language="F#" Value="member this.ForeignKeysUniqueAcrossTables : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.ForeignKeysUniqueAcrossTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether foreign key names should be unique across tables.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexesUniqueAcrossTables">
      <MemberSignature Language="C#" Value="protected virtual bool IndexesUniqueAcrossTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IndexesUniqueAcrossTables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.IndexesUniqueAcrossTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IndexesUniqueAcrossTables As Boolean" />
      <MemberSignature Language="F#" Value="member this.IndexesUniqueAcrossTables : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.IndexesUniqueAcrossTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether index names should be unique across tables.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeysUniqueAcrossTables">
      <MemberSignature Language="C#" Value="protected virtual bool KeysUniqueAcrossTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysUniqueAcrossTables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.KeysUniqueAcrossTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property KeysUniqueAcrossTables As Boolean" />
      <MemberSignature Language="F#" Value="member this.KeysUniqueAcrossTables : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.KeysUniqueAcrossTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether key names should be unique across tables.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessModelFinalized">
      <MemberSignature Language="C#" Value="public virtual void ProcessModelFinalized (Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder modelBuilder, Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessModelFinalized(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder modelBuilder, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.ProcessModelFinalized(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessModelFinalized (modelBuilder As IConventionModelBuilder, context As IConventionContext(Of IConventionModelBuilder))" />
      <MemberSignature Language="F#" Value="abstract member ProcessModelFinalized : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt; -&gt; unit&#xA;override this.ProcessModelFinalized : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt; -&gt; unit" Usage="sharedTableConvention.ProcessModelFinalized (modelBuilder, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizedConvention.ProcessModelFinalized(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="modelBuilder"> The builder for the model. </param>
        <param name="context"> Additional information associated with convention execution. </param>
        <summary>
                Called after a model is finalized.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessModelFinalizing">
      <MemberSignature Language="C#" Value="public virtual void ProcessModelFinalizing (Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder modelBuilder, Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessModelFinalizing(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder modelBuilder, class Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessModelFinalizing (modelBuilder As IConventionModelBuilder, context As IConventionContext(Of IConventionModelBuilder))" />
      <MemberSignature Language="F#" Value="abstract member ProcessModelFinalizing : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt; -&gt; unit&#xA;override this.ProcessModelFinalizing : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder * Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt; -&gt; unit" Usage="sharedTableConvention.ProcessModelFinalizing (modelBuilder, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizingConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="modelBuilder">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RelationalDependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies RelationalDependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies RelationalDependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.RelationalDependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property RelationalDependencies As RelationalConventionSetBuilderDependencies" />
      <MemberSignature Language="F#" Value="member this.RelationalDependencies : Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.RelationalDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggersUniqueAcrossTables">
      <MemberSignature Language="C#" Value="protected virtual bool TriggersUniqueAcrossTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TriggersUniqueAcrossTables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.TriggersUniqueAcrossTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property TriggersUniqueAcrossTables As Boolean" />
      <MemberSignature Language="F#" Value="member this.TriggersUniqueAcrossTables : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.TriggersUniqueAcrossTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether trigger names should be unique across tables.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
