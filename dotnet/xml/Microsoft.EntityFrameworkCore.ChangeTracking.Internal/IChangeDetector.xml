<Type Name="IChangeDetector" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector">
  <TypeSignature Language="C#" Value="public interface IChangeDetector : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChangeDetector implements class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChangeDetector&#xA;Implements IPropertyListener" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type IChangeDetector = interface&#xA;    interface IPropertyListener" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public interface IChangeDetector" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChangeDetector" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChangeDetector" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type IChangeDetector = interface" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IChangeDetector" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>
                The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                The implementation may depend on other services registered with any lifetime.
                The implementation does not need to be thread-safe.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CaptureEvents">
      <MemberSignature Language="C#" Value="public (EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;? DetectingAllChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;? DetectedAllChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;? DetectingEntityChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;? DetectedEntityChanges) CaptureEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ValueTuple`4&lt;class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;&gt; CaptureEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.CaptureEvents" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureEvents () As ValueTuple(Of EventHandler(Of DetectChangesEventArgs), EventHandler(Of DetectedChangesEventArgs), EventHandler(Of DetectEntityChangesEventArgs), EventHandler(Of DetectedEntityChangesEventArgs))" />
      <MemberSignature Language="F#" Value="abstract member CaptureEvents : unit -&gt; ValueTuple&lt;EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;&gt;" Usage="iChangeDetector.CaptureEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;,System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;,System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;,System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="efcore-7.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DetectingAllChanges", "DetectedAllChanges", "DetectingEntityChanges", "DetectedEntityChanges" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DetectingAllChanges", "DetectedAllChanges", "DetectingEntityChanges", "DetectedEntityChanges" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public void DetectChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DetectChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetectChanges (entry As InternalEntityEntry)" />
      <MemberSignature Language="F#" Value="abstract member DetectChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit" Usage="iChangeDetector.DetectChanges entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public void DetectChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DetectChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetectChanges (stateManager As IStateManager)" />
      <MemberSignature Language="F#" Value="abstract member DetectChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager -&gt; unit" Usage="iChangeDetector.DetectChanges stateManager" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectedAllChanges">
      <MemberSignature Language="C#" Value="event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;? DetectedAllChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; DetectedAllChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectedAllChanges" />
      <MemberSignature Language="VB.NET" Value="Event DetectedAllChanges As EventHandler(Of DetectedChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectedAllChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; " Usage="member this.DetectedAllChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectedEntityChanges">
      <MemberSignature Language="C#" Value="event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;? DetectedEntityChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; DetectedEntityChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectedEntityChanges" />
      <MemberSignature Language="VB.NET" Value="Event DetectedEntityChanges As EventHandler(Of DetectedEntityChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectedEntityChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; " Usage="member this.DetectedEntityChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectingAllChanges">
      <MemberSignature Language="C#" Value="event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;? DetectingAllChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; DetectingAllChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectingAllChanges" />
      <MemberSignature Language="VB.NET" Value="Event DetectingAllChanges As EventHandler(Of DetectChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectingAllChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; " Usage="member this.DetectingAllChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectingEntityChanges">
      <MemberSignature Language="C#" Value="event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;? DetectingEntityChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; DetectingEntityChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectingEntityChanges" />
      <MemberSignature Language="VB.NET" Value="Event DetectingEntityChanges As EventHandler(Of DetectEntityChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectingEntityChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; " Usage="member this.DetectingEntityChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDetectedAllChanges">
      <MemberSignature Language="C#" Value="public void OnDetectedAllChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, bool changesFound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetectedAllChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, bool changesFound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.OnDetectedAllChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDetectedAllChanges (stateManager As IStateManager, changesFound As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnDetectedAllChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * bool -&gt; unit" Usage="iChangeDetector.OnDetectedAllChanges (stateManager, changesFound)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="changesFound" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <param name="changesFound">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDetectedEntityChanges">
      <MemberSignature Language="C#" Value="public void OnDetectedEntityChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, bool changesFound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetectedEntityChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, bool changesFound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.OnDetectedEntityChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDetectedEntityChanges (internalEntityEntry As InternalEntityEntry, changesFound As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnDetectedEntityChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * bool -&gt; unit" Usage="iChangeDetector.OnDetectedEntityChanges (internalEntityEntry, changesFound)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="changesFound" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="internalEntityEntry">To be added.</param>
        <param name="changesFound">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDetectingAllChanges">
      <MemberSignature Language="C#" Value="public void OnDetectingAllChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetectingAllChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.OnDetectingAllChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDetectingAllChanges (stateManager As IStateManager)" />
      <MemberSignature Language="F#" Value="abstract member OnDetectingAllChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager -&gt; unit" Usage="iChangeDetector.OnDetectingAllChanges stateManager" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDetectingEntityChanges">
      <MemberSignature Language="C#" Value="public void OnDetectingEntityChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetectingEntityChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.OnDetectingEntityChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDetectingEntityChanges (internalEntityEntry As InternalEntityEntry)" />
      <MemberSignature Language="F#" Value="abstract member OnDetectingEntityChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit" Usage="iChangeDetector.OnDetectingEntityChanges internalEntityEntry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="internalEntityEntry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public void PropertyChanged (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool setModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PropertyChanged(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool setModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.PropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PropertyChanged (entry As InternalEntityEntry, propertyBase As IPropertyBase, setModified As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member PropertyChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * bool -&gt; unit" Usage="iChangeDetector.PropertyChanged (entry, propertyBase, setModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setModified" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="propertyBase">To be added.</param>
        <param name="setModified">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanging">
      <MemberSignature Language="C#" Value="public void PropertyChanging (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PropertyChanging(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.PropertyChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PropertyChanging (entry As InternalEntityEntry, propertyBase As IPropertyBase)" />
      <MemberSignature Language="F#" Value="abstract member PropertyChanging : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; unit" Usage="iChangeDetector.PropertyChanging (entry, propertyBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.ResetState" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetState ()" />
      <MemberSignature Language="F#" Value="abstract member ResetState : unit -&gt; unit" Usage="iChangeDetector.ResetState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="F#" Value="abstract member Resume : unit -&gt; unit" Usage="iChangeDetector.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEvents">
      <MemberSignature Language="C#" Value="public void SetEvents (EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;? detectingAllChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;? detectedAllChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;? detectingEntityChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;? detectedEntityChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEvents(class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; detectingAllChanges, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; detectedAllChanges, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; detectingEntityChanges, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; detectedEntityChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.SetEvents(System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs},System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs},System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs},System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEvents (detectingAllChanges As EventHandler(Of DetectChangesEventArgs), detectedAllChanges As EventHandler(Of DetectedChangesEventArgs), detectingEntityChanges As EventHandler(Of DetectEntityChangesEventArgs), detectedEntityChanges As EventHandler(Of DetectedEntityChangesEventArgs))" />
      <MemberSignature Language="F#" Value="abstract member SetEvents : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; * EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; * EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; * EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; -&gt; unit" Usage="iChangeDetector.SetEvents (detectingAllChanges, detectedAllChanges, detectingEntityChanges, detectedEntityChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="detectingAllChanges" Type="System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="detectedAllChanges" Type="System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="detectingEntityChanges" Type="System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="detectedEntityChanges" Type="System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="detectingAllChanges">To be added.</param>
        <param name="detectedAllChanges">To be added.</param>
        <param name="detectingEntityChanges">To be added.</param>
        <param name="detectedEntityChanges">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Suspend() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.Suspend" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend ()" />
      <MemberSignature Language="F#" Value="abstract member Suspend : unit -&gt; unit" Usage="iChangeDetector.Suspend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
