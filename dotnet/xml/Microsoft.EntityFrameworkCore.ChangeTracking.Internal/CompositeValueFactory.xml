<Type Name="CompositeValueFactory" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory">
  <TypeSignature Language="C#" Value="public class CompositeValueFactory : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory&lt;object[]&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeValueFactory extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory`1&lt;object[]&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositeValueFactory&#xA;Implements IDependentKeyValueFactory(Of Object())" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="F#" Value="type CompositeValueFactory = class&#xA;    interface IDependentKeyValueFactory&lt;obj[]&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
  <TypeSignature Language="C#" Value="public class CompositeValueFactory : Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory&lt;object[]&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeValueFactory extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1&lt;object[]&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeValueFactory extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory, class Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1&lt;object[]&gt;" FrameworkAlternate="efcore-7.0" />
  <TypeSignature Language="F#" Value="type CompositeValueFactory = class&#xA;    interface IDependentKeyValueFactory&lt;obj[]&gt;&#xA;    interface IDependentKeyValueFactory" FrameworkAlternate="efcore-7.0" />
  <TypeSignature Language="C#" Value="public class CompositeValueFactory : Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;&gt;" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeValueFactory extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory, class Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&gt;" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositeValueFactory&#xA;Implements IDependentKeyValueFactory(Of IReadOnlyList(Of Object))" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="F#" Value="type CompositeValueFactory = class&#xA;    interface IDependentKeyValueFactory&lt;IReadOnlyList&lt;obj&gt;&gt;&#xA;    interface IDependentKeyValueFactory" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory&lt;System.Object[]&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory&lt;System.Object[]&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeValueFactory (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IReadOnlyList(Of IProperty))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory properties" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDependentEquatableKey">
      <MemberSignature Language="C#" Value="public virtual object? CreateDependentEquatableKey (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateDependentEquatableKey(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.CreateDependentEquatableKey(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDependentEquatableKey (entry As IUpdateEntry, fromOriginalValues As Boolean) As Object" />
      <MemberSignature Language="F#" Value="abstract member CreateDependentEquatableKey : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * bool -&gt; obj&#xA;override this.CreateDependentEquatableKey : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * bool -&gt; obj" Usage="compositeValueFactory.CreateDependentEquatableKey (entry, fromOriginalValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory.CreateDependentEquatableKey(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEqualityComparer">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IEqualityComparer&lt;object[]&gt; CreateEqualityComparer (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Collections.Generic.IEqualityComparer`1&lt;object[]&gt; CreateEqualityComparer(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.CreateEqualityComparer(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateEqualityComparer (properties As IReadOnlyList(Of IProperty)) As IEqualityComparer(Of Object())" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="static member CreateEqualityComparer : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; System.Collections.Generic.IEqualityComparer&lt;obj[]&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.CreateEqualityComparer properties" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IEqualityComparer&lt;System.Collections.Generic.IReadOnlyList&lt;object?&gt;&gt; CreateEqualityComparer (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Collections.Generic.IEqualityComparer`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&gt; CreateEqualityComparer(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateEqualityComparer (properties As IReadOnlyList(Of IProperty)) As IEqualityComparer(Of IReadOnlyList(Of Object))" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="static member CreateEqualityComparer : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; System.Collections.Generic.IEqualityComparer&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.CreateEqualityComparer properties" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">System.Collections.Generic.IEqualityComparer&lt;System.Object[]&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">System.Collections.Generic.IEqualityComparer&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePrincipalEquatableKey">
      <MemberSignature Language="C#" Value="public virtual object CreatePrincipalEquatableKey (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreatePrincipalEquatableKey(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.CreatePrincipalEquatableKey(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePrincipalEquatableKey (entry As IUpdateEntry, fromOriginalValues As Boolean) As Object" />
      <MemberSignature Language="F#" Value="abstract member CreatePrincipalEquatableKey : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * bool -&gt; obj&#xA;override this.CreatePrincipalEquatableKey : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * bool -&gt; obj" Usage="compositeValueFactory.CreatePrincipalEquatableKey (entry, fromOriginalValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory.CreatePrincipalEquatableKey(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEqualityComparer&lt;object[]&gt; EqualityComparer { get; }" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;object[]&gt; EqualityComparer" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EqualityComparer As IEqualityComparer(Of Object())" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="member this.EqualityComparer : System.Collections.Generic.IEqualityComparer&lt;obj[]&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.EqualityComparer" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEqualityComparer&lt;System.Collections.Generic.IReadOnlyList&lt;object?&gt;&gt; EqualityComparer { get; }" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&gt; EqualityComparer" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EqualityComparer As IEqualityComparer(Of IReadOnlyList(Of Object))" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.EqualityComparer : System.Collections.Generic.IEqualityComparer&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.EqualityComparer" FrameworkAlternate="efcore-8.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1.EqualityComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">System.Collections.Generic.IEqualityComparer&lt;System.Object[]&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">System.Collections.Generic.IEqualityComparer&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Properties As IReadOnlyList(Of IProperty)" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromBuffer">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromBuffer (in Microsoft.EntityFrameworkCore.Storage.ValueBuffer? valueBuffer, out System.Collections.Generic.IReadOnlyList&lt;object?&gt;? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromBuffer([in]valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer, [out] class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@|System.Runtime.InteropServices.InAttribute,System.Collections.Generic.IReadOnlyList{System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromBuffer (valueBuffer As ValueBuffer, ByRef key As IReadOnlyList(Of Object)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromBuffer : ValueBuffer * IReadOnlyList -&gt; bool&#xA;override this.TryCreateFromBuffer : ValueBuffer * IReadOnlyList -&gt; bool" Usage="compositeValueFactory.TryCreateFromBuffer (valueBuffer, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueBuffer" Type="Microsoft.EntityFrameworkCore.Storage.ValueBuffer" Index="0" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="key" Type="System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;" RefType="out" Index="1" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="valueBuffer">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromBuffer">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromBuffer (in Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer, out object[] key);" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromBuffer([in]valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer@|System.Runtime.InteropServices.InAttribute,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromBuffer (valueBuffer As ValueBuffer, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromBuffer : ValueBuffer * Object[] -&gt; bool&#xA;override this.TryCreateFromBuffer : ValueBuffer * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromBuffer (valueBuffer, key)" />
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromBuffer (in Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer, out object[]? key);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueBuffer" Type="Microsoft.EntityFrameworkCore.Storage.ValueBuffer" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-3.0;efcore-5.0;efcore-6.0;efcore-7.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="valueBuffer">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromCurrentValues">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromCurrentValues (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, out object[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromCurrentValues(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromCurrentValues (entry As InternalEntityEntry, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromCurrentValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Object[] -&gt; bool&#xA;override this.TryCreateFromCurrentValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromCurrentValues (entry, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromCurrentValues">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out System.Collections.Generic.IReadOnlyList&lt;object?&gt;? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromCurrentValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IReadOnlyList{System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromCurrentValues (entry As IUpdateEntry, ByRef key As IReadOnlyList(Of Object)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * IReadOnlyList -&gt; bool&#xA;override this.TryCreateFromCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * IReadOnlyList -&gt; bool" Usage="compositeValueFactory.TryCreateFromCurrentValues (entry, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="key" Type="System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;" RefType="out" Index="1" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromCurrentValues">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out object[] key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromCurrentValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromCurrentValues (entry As IUpdateEntry, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Object[] -&gt; bool&#xA;override this.TryCreateFromCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromCurrentValues (entry, key)" />
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out object[]? key);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromEntry">
      <MemberSignature Language="C#" Value="protected virtual bool TryCreateFromEntry (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,object&gt; getValue, out object[] key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryCreateFromEntry(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, class Microsoft.EntityFrameworkCore.Metadata.IProperty, object&gt; getValue, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromEntry(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object},System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryCreateFromEntry (entry As InternalEntityEntry, getValue As Func(Of InternalEntityEntry, IProperty, Object), ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromEntry : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty, obj&gt; * Object[] -&gt; bool&#xA;override this.TryCreateFromEntry : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty, obj&gt; * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromEntry (entry, getValue, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="getValue" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="getValue">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromEntry">
      <MemberSignature Language="C#" Value="protected virtual bool TryCreateFromEntry (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, Func&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,object?&gt; getValue, out System.Collections.Generic.IReadOnlyList&lt;object?&gt;? key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryCreateFromEntry(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry, class Microsoft.EntityFrameworkCore.Metadata.IProperty, object&gt; getValue, [out] class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromEntry(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Func{Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object},System.Collections.Generic.IReadOnlyList{System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryCreateFromEntry (entry As IUpdateEntry, getValue As Func(Of IUpdateEntry, IProperty, Object), ByRef key As IReadOnlyList(Of Object)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromEntry : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Func&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty, obj&gt; * IReadOnlyList -&gt; bool&#xA;override this.TryCreateFromEntry : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Func&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty, obj&gt; * IReadOnlyList -&gt; bool" Usage="compositeValueFactory.TryCreateFromEntry (entry, getValue, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="getValue" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="key" Type="System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;" RefType="out" Index="2" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="getValue">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromEntry">
      <MemberSignature Language="C#" Value="protected virtual bool TryCreateFromEntry (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, Func&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,object&gt; getValue, out object[] key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryCreateFromEntry(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Update.IUpdateEntry, class Microsoft.EntityFrameworkCore.Metadata.IProperty, object&gt; getValue, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromEntry(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Func{Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object},System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryCreateFromEntry (entry As IUpdateEntry, getValue As Func(Of IUpdateEntry, IProperty, Object), ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromEntry : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Func&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty, obj&gt; * Object[] -&gt; bool&#xA;override this.TryCreateFromEntry : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Func&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty, obj&gt; * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromEntry (entry, getValue, key)" />
      <MemberSignature Language="C#" Value="protected virtual bool TryCreateFromEntry (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, Func&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,object?&gt; getValue, out object[]? key);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="getValue" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="getValue">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromOriginalValues">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromOriginalValues (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, out object[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromOriginalValues(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromOriginalValues (entry As InternalEntityEntry, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromOriginalValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Object[] -&gt; bool&#xA;override this.TryCreateFromOriginalValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromOriginalValues (entry, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromOriginalValues">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromOriginalValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out System.Collections.Generic.IReadOnlyList&lt;object?&gt;? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromOriginalValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IReadOnlyList{System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromOriginalValues (entry As IUpdateEntry, ByRef key As IReadOnlyList(Of Object)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromOriginalValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * IReadOnlyList -&gt; bool&#xA;override this.TryCreateFromOriginalValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * IReadOnlyList -&gt; bool" Usage="compositeValueFactory.TryCreateFromOriginalValues (entry, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="key" Type="System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;" RefType="out" Index="1" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromOriginalValues">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromOriginalValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out object[] key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromOriginalValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromOriginalValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromOriginalValues (entry As IUpdateEntry, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromOriginalValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Object[] -&gt; bool&#xA;override this.TryCreateFromOriginalValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromOriginalValues (entry, key)" />
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromOriginalValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out object[]? key);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromPreStoreGeneratedCurrentValues">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromPreStoreGeneratedCurrentValues (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, out object[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromPreStoreGeneratedCurrentValues(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromPreStoreGeneratedCurrentValues (entry As InternalEntityEntry, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromPreStoreGeneratedCurrentValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Object[] -&gt; bool&#xA;override this.TryCreateFromPreStoreGeneratedCurrentValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromPreStoreGeneratedCurrentValues (entry, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromPreStoreGeneratedCurrentValues">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromPreStoreGeneratedCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out System.Collections.Generic.IReadOnlyList&lt;object?&gt;? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromPreStoreGeneratedCurrentValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IReadOnlyList{System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromPreStoreGeneratedCurrentValues (entry As IUpdateEntry, ByRef key As IReadOnlyList(Of Object)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromPreStoreGeneratedCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * IReadOnlyList -&gt; bool&#xA;override this.TryCreateFromPreStoreGeneratedCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * IReadOnlyList -&gt; bool" Usage="compositeValueFactory.TryCreateFromPreStoreGeneratedCurrentValues (entry, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="key" Type="System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;" RefType="out" Index="1" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromPreStoreGeneratedCurrentValues">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromPreStoreGeneratedCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out object[] key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromPreStoreGeneratedCurrentValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromPreStoreGeneratedCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromPreStoreGeneratedCurrentValues (entry As IUpdateEntry, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromPreStoreGeneratedCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Object[] -&gt; bool&#xA;override this.TryCreateFromPreStoreGeneratedCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromPreStoreGeneratedCurrentValues (entry, key)" />
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromPreStoreGeneratedCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out object[]? key);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromRelationshipSnapshot">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromRelationshipSnapshot (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, out object[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromRelationshipSnapshot(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromRelationshipSnapshot (entry As InternalEntityEntry, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Object[] -&gt; bool&#xA;override this.TryCreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromRelationshipSnapshot (entry, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromRelationshipSnapshot">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromRelationshipSnapshot (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out System.Collections.Generic.IReadOnlyList&lt;object?&gt;? key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromRelationshipSnapshot(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Collections.Generic.IReadOnlyList{System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromRelationshipSnapshot (entry As IUpdateEntry, ByRef key As IReadOnlyList(Of Object)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * IReadOnlyList -&gt; bool&#xA;override this.TryCreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * IReadOnlyList -&gt; bool" Usage="compositeValueFactory.TryCreateFromRelationshipSnapshot (entry, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="key" Type="System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;" RefType="out" Index="1" FrameworkAlternate="efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateFromRelationshipSnapshot">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromRelationshipSnapshot (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out object[] key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateFromRelationshipSnapshot(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, [out] object[]&amp; key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory.TryCreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateFromRelationshipSnapshot (entry As IUpdateEntry, ByRef key As Object()) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Object[] -&gt; bool&#xA;override this.TryCreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * Object[] -&gt; bool" Usage="compositeValueFactory.TryCreateFromRelationshipSnapshot (entry, key)" />
      <MemberSignature Language="C#" Value="public virtual bool TryCreateFromRelationshipSnapshot (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, out object[]? key);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="key" Type="System.Object[]" RefType="out" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
