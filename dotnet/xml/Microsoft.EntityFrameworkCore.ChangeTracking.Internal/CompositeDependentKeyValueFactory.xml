<Type Name="CompositeDependentKeyValueFactory" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory">
  <TypeSignature Language="C#" Value="public class CompositeDependentKeyValueFactory : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeDependentKeyValueFactory extends Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositeDependentKeyValueFactory&#xA;Inherits CompositeValueFactory" />
  <TypeSignature Language="F#" Value="type CompositeDependentKeyValueFactory = class&#xA;    inherit CompositeValueFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeDependentKeyValueFactory (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;System.Collections.Generic.IReadOnlyList&lt;object?&gt;&gt; principalKeyValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&gt; principalKeyValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory{System.Collections.Generic.IReadOnlyList{System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (foreignKey As IForeignKey, principalKeyValueFactory As IPrincipalKeyValueFactory(Of IReadOnlyList(Of Object)))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory (foreignKey, principalKeyValueFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="principalKeyValueFactory" Type="Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="principalKeyValueFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeDependentKeyValueFactory (Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;object[]&gt; principalKeyValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IForeignKey foreignKey, class Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1&lt;object[]&gt; principalKeyValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory{System.Object[]})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (foreignKey As IForeignKey, principalKeyValueFactory As IPrincipalKeyValueFactory(Of Object()))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory : Microsoft.EntityFrameworkCore.Metadata.IForeignKey * Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;obj[]&gt; -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory (foreignKey, principalKeyValueFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="principalKeyValueFactory" Type="Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;System.Object[]&gt;" Index="1" FrameworkAlternate="efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="principalKeyValueFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDependentEquatableKey">
      <MemberSignature Language="C#" Value="public override object? CreateDependentEquatableKey (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object CreateDependentEquatableKey(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory.CreateDependentEquatableKey(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateDependentEquatableKey (entry As IUpdateEntry, fromOriginalValues As Boolean) As Object" />
      <MemberSignature Language="F#" Value="override this.CreateDependentEquatableKey : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * bool -&gt; obj" Usage="compositeDependentKeyValueFactory.CreateDependentEquatableKey (entry, fromOriginalValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePrincipalEquatableKey">
      <MemberSignature Language="C#" Value="public override object CreatePrincipalEquatableKey (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object CreatePrincipalEquatableKey(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory.CreatePrincipalEquatableKey(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreatePrincipalEquatableKey (entry As IUpdateEntry, fromOriginalValues As Boolean) As Object" />
      <MemberSignature Language="F#" Value="override this.CreatePrincipalEquatableKey : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * bool -&gt; obj" Usage="compositeDependentKeyValueFactory.CreatePrincipalEquatableKey (entry, fromOriginalValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
