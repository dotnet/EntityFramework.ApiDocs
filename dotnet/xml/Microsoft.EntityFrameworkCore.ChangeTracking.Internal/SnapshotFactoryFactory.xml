<Type Name="SnapshotFactoryFactory" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory">
  <TypeSignature Language="C#" Value="public abstract class SnapshotFactoryFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SnapshotFactoryFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SnapshotFactoryFactory" />
  <TypeSignature Language="F#" Value="type SnapshotFactoryFactory = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SnapshotFactoryFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConstructorExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateConstructorExpression (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, System.Linq.Expressions.ParameterExpression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CreateConstructorExpression(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class System.Linq.Expressions.ParameterExpression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateConstructorExpression(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Linq.Expressions.ParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateConstructorExpression (entityType As IEntityType, parameter As ParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CreateConstructorExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Linq.Expressions.ParameterExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.CreateConstructorExpression : Microsoft.EntityFrameworkCore.Metadata.IEntityType * System.Linq.Expressions.ParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="snapshotFactoryFactory.CreateConstructorExpression (entityType, parameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="parameter" Type="System.Linq.Expressions.ParameterExpression" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="parameter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConstructorExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateConstructorExpression (Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType entityType, System.Linq.Expressions.ParameterExpression? parameter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CreateConstructorExpression(class Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType entityType, class System.Linq.Expressions.ParameterExpression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateConstructorExpression(Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType,System.Linq.Expressions.ParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateConstructorExpression (entityType As IRuntimeEntityType, parameter As ParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CreateConstructorExpression : Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType * System.Linq.Expressions.ParameterExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.CreateConstructorExpression : Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType * System.Linq.Expressions.ParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="snapshotFactoryFactory.CreateConstructorExpression (entityType, parameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="parameter" Type="System.Linq.Expressions.ParameterExpression" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="parameter">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEmpty">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; CreateEmpty (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; CreateEmpty(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateEmpty(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEmpty (entityType As IEntityType) As Func(Of ISnapshot)" />
      <MemberSignature Language="F#" Value="abstract member CreateEmpty : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;&#xA;override this.CreateEmpty : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;" Usage="snapshotFactoryFactory.CreateEmpty entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEmpty">
      <MemberSignature Language="C#" Value="public virtual Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; CreateEmpty (Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt; CreateEmpty(class Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateEmpty(Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEmpty (entityType As IRuntimeEntityType) As Func(Of ISnapshot)" />
      <MemberSignature Language="F#" Value="abstract member CreateEmpty : Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType -&gt; Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;&#xA;override this.CreateEmpty : Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType -&gt; Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;" Usage="snapshotFactoryFactory.CreateEmpty entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateReadShadowValueExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateReadShadowValueExpression (System.Linq.Expressions.ParameterExpression parameter, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CreateReadShadowValueExpression(class System.Linq.Expressions.ParameterExpression parameter, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateReadShadowValueExpression(System.Linq.Expressions.ParameterExpression,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateReadShadowValueExpression (parameter As ParameterExpression, property As IProperty) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CreateReadShadowValueExpression : System.Linq.Expressions.ParameterExpression * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; System.Linq.Expressions.Expression&#xA;override this.CreateReadShadowValueExpression : System.Linq.Expressions.ParameterExpression * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; System.Linq.Expressions.Expression" Usage="snapshotFactoryFactory.CreateReadShadowValueExpression (parameter, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.ParameterExpression" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="property">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateReadShadowValueExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateReadShadowValueExpression (System.Linq.Expressions.ParameterExpression parameter, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CreateReadShadowValueExpression(class System.Linq.Expressions.ParameterExpression parameter, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateReadShadowValueExpression(System.Linq.Expressions.ParameterExpression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateReadShadowValueExpression (parameter As ParameterExpression, property As IPropertyBase) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CreateReadShadowValueExpression : System.Linq.Expressions.ParameterExpression * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; System.Linq.Expressions.Expression&#xA;override this.CreateReadShadowValueExpression : System.Linq.Expressions.ParameterExpression * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; System.Linq.Expressions.Expression" Usage="snapshotFactoryFactory.CreateReadShadowValueExpression (parameter, property)" />
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateReadShadowValueExpression (System.Linq.Expressions.ParameterExpression? parameter, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.ParameterExpression" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateReadValueExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateReadValueExpression (System.Linq.Expressions.ParameterExpression parameter, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CreateReadValueExpression(class System.Linq.Expressions.ParameterExpression parameter, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateReadValueExpression(System.Linq.Expressions.ParameterExpression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateReadValueExpression (parameter As ParameterExpression, property As IPropertyBase) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CreateReadValueExpression : System.Linq.Expressions.ParameterExpression * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; System.Linq.Expressions.Expression&#xA;override this.CreateReadValueExpression : System.Linq.Expressions.ParameterExpression * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; System.Linq.Expressions.Expression" Usage="snapshotFactoryFactory.CreateReadValueExpression (parameter, property)" />
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateReadValueExpression (System.Linq.Expressions.ParameterExpression? parameter, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property);" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.ParameterExpression" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSnapshotExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateSnapshotExpression (Type entityType, System.Linq.Expressions.ParameterExpression parameter, Type[] types, System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; propertyBases);" FrameworkAlternate="efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression CreateSnapshotExpression(class System.Type entityType, class System.Linq.Expressions.ParameterExpression parameter, class System.Type[] types, class System.Collections.Generic.IList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; propertyBases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.CreateSnapshotExpression(System.Type,System.Linq.Expressions.ParameterExpression,System.Type[],System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateSnapshotExpression (entityType As Type, parameter As ParameterExpression, types As Type(), propertyBases As IList(Of IPropertyBase)) As Expression" />
      <MemberSignature Language="F#" Value="abstract member CreateSnapshotExpression : Type * System.Linq.Expressions.ParameterExpression * Type[] * System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; -&gt; System.Linq.Expressions.Expression&#xA;override this.CreateSnapshotExpression : Type * System.Linq.Expressions.ParameterExpression * Type[] * System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; -&gt; System.Linq.Expressions.Expression" Usage="snapshotFactoryFactory.CreateSnapshotExpression (entityType, parameter, types, propertyBases)" />
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateSnapshotExpression (Type? entityType, System.Linq.Expressions.ParameterExpression parameter, Type[] types, System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt; propertyBases);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression CreateSnapshotExpression (Type? entityType, System.Linq.Expressions.ParameterExpression? parameter, Type[] types, System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase?&gt; propertyBases);" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" Index="0" FrameworkAlternate="efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="parameter" Type="System.Linq.Expressions.ParameterExpression" Index="1" FrameworkAlternate="efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="types" Type="System.Type[]" Index="2" FrameworkAlternate="efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="propertyBases" Type="System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Metadata.IPropertyBase&gt;" Index="3" FrameworkAlternate="efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="parameter">To be added.</param>
        <param name="types">To be added.</param>
        <param name="propertyBases">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyCount">
      <MemberSignature Language="C#" Value="protected abstract int GetPropertyCount (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 GetPropertyCount(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.GetPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPropertyCount (entityType As IEntityType) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyCount : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; int" Usage="snapshotFactoryFactory.GetPropertyCount entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyCount">
      <MemberSignature Language="C#" Value="protected abstract int GetPropertyCount (Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 GetPropertyCount(class Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.GetPropertyCount(Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPropertyCount (entityType As IRuntimeEntityType) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyCount : Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType -&gt; int" Usage="snapshotFactoryFactory.GetPropertyCount entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyIndex">
      <MemberSignature Language="C#" Value="protected abstract int GetPropertyIndex (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 GetPropertyIndex(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.GetPropertyIndex(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPropertyIndex (propertyBase As IPropertyBase) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyIndex : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; int" Usage="snapshotFactoryFactory.GetPropertyIndex propertyBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueComparer">
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetValueComparer (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetValueComparer(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.GetValueComparer(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetValueComparer (property As IProperty) As ValueComparer" />
      <MemberSignature Language="F#" Value="abstract member GetValueComparer : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="snapshotFactoryFactory.GetValueComparer property" />
      <MemberSignature Language="C#" Value="protected abstract Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? GetValueComparer (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseEntityVariable">
      <MemberSignature Language="C#" Value="protected virtual bool UseEntityVariable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseEntityVariable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.UseEntityVariable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property UseEntityVariable As Boolean" />
      <MemberSignature Language="F#" Value="member this.UseEntityVariable : bool" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory.UseEntityVariable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
