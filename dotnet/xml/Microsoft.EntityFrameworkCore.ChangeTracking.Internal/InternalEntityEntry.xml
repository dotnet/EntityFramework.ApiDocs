<Type Name="InternalEntityEntry" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry">
  <TypeSignature Language="C#" Value="public abstract class InternalEntityEntry : Microsoft.EntityFrameworkCore.Update.IUpdateEntry" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InternalEntityEntry extends System.Object implements class Microsoft.EntityFrameworkCore.Update.IUpdateEntry" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class InternalEntityEntry&#xA;Implements IUpdateEntry" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type InternalEntityEntry = class&#xA;    interface IUpdateEntry" />
  <TypeSignature Language="C#" Value="public sealed class InternalEntityEntry : Microsoft.EntityFrameworkCore.Update.IUpdateEntry" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalEntityEntry extends System.Object implements class Microsoft.EntityFrameworkCore.Update.IUpdateEntry" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalEntityEntry&#xA;Implements IUpdateEntry" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Update.IUpdateEntry</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InternalEntityEntry (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (stateManager As IStateManager, entityType As IEntityType)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry (stateManager, entityType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalEntityEntry (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stateManager As IStateManager, entityType As IEntityType, entity As Object)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * Microsoft.EntityFrameworkCore.Metadata.IEntityType * obj -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry (stateManager, entityType, entity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entity" Type="System.Object" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <param name="entityType">To be added.</param>
        <param name="entity">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalEntityEntry (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, object entity, in Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, object entity, [in]valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer&amp; valueBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stateManager As IStateManager, entityType As IEntityType, entity As Object, ByRef valueBuffer As ValueBuffer)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * Microsoft.EntityFrameworkCore.Metadata.IEntityType * obj * ValueBuffer -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry (stateManager, entityType, entity, valueBuffer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="entity" Type="System.Object" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="valueBuffer" Type="Microsoft.EntityFrameworkCore.Storage.ValueBuffer" RefType="ref" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <param name="entityType">To be added.</param>
        <param name="entity">To be added.</param>
        <param name="valueBuffer">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public virtual void AcceptChanges ();" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AcceptChanges() cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AcceptChanges ()" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member AcceptChanges : unit -&gt; unit&#xA;override this.AcceptChanges : unit -&gt; unit" Usage="internalEntityEntry.AcceptChanges " FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.AcceptChanges : unit -&gt; unit" Usage="internalEntityEntry.AcceptChanges " FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRangeToCollectionSnapshot">
      <MemberSignature Language="C#" Value="public void AddRangeToCollectionSnapshot (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, System.Collections.Generic.IEnumerable&lt;object&gt; addedEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRangeToCollectionSnapshot(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, class System.Collections.Generic.IEnumerable`1&lt;object&gt; addedEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRangeToCollectionSnapshot (navigation As INavigationBase, addedEntities As IEnumerable(Of Object))" />
      <MemberSignature Language="F#" Value="member this.AddRangeToCollectionSnapshot : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * seq&lt;obj&gt; -&gt; unit" Usage="internalEntityEntry.AddRangeToCollectionSnapshot (navigation, addedEntities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="addedEntities" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="addedEntities">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRangeToCollectionSnapshot">
      <MemberSignature Language="C#" Value="public virtual void AddRangeToCollectionSnapshot (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, System.Collections.Generic.IEnumerable&lt;object&gt; addedEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRangeToCollectionSnapshot(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, class System.Collections.Generic.IEnumerable`1&lt;object&gt; addedEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Collections.Generic.IEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRangeToCollectionSnapshot (propertyBase As IPropertyBase, addedEntities As IEnumerable(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member AddRangeToCollectionSnapshot : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * seq&lt;obj&gt; -&gt; unit&#xA;override this.AddRangeToCollectionSnapshot : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * seq&lt;obj&gt; -&gt; unit" Usage="internalEntityEntry.AddRangeToCollectionSnapshot (propertyBase, addedEntities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="addedEntities" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="addedEntities">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual bool AddToCollection (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AddToCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddToCollection (navigation As INavigation, value As InternalEntityEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool&#xA;override this.AddToCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool" Usage="internalEntityEntry.AddToCollection (navigation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="value" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual bool AddToCollection (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value, bool forMaterialization);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AddToCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value, bool forMaterialization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddToCollection (navigation As INavigation, value As InternalEntityEntry, forMaterialization As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * bool -&gt; bool&#xA;override this.AddToCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * bool -&gt; bool" Usage="internalEntityEntry.AddToCollection (navigation, value, forMaterialization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="value" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="forMaterialization" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="value">To be added.</param>
        <param name="forMaterialization">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual bool AddToCollection (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value, bool forMaterialization);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AddToCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value, bool forMaterialization) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollection(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddToCollection (navigationBase As INavigationBase, value As InternalEntityEntry, forMaterialization As Boolean) As Boolean" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * bool -&gt; bool&#xA;override this.AddToCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * bool -&gt; bool" Usage="internalEntityEntry.AddToCollection (navigationBase, value, forMaterialization)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public bool AddToCollection (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value, bool forMaterialization);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AddToCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value, bool forMaterialization) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="Public Function AddToCollection (navigationBase As INavigationBase, value As InternalEntityEntry, forMaterialization As Boolean) As Boolean" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.AddToCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * bool -&gt; bool" Usage="internalEntityEntry.AddToCollection (navigationBase, value, forMaterialization)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationBase" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="value" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="forMaterialization" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="navigationBase">To be added.</param>
        <param name="value">To be added.</param>
        <param name="forMaterialization">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public bool AddToCollection (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, object value, bool forMaterialization);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AddToCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, object value, bool forMaterialization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollection(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddToCollection (navigationBase As INavigationBase, value As Object, forMaterialization As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="member this.AddToCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * obj * bool -&gt; bool" Usage="internalEntityEntry.AddToCollection (navigationBase, value, forMaterialization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationBase" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="forMaterialization" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationBase">To be added.</param>
        <param name="value">To be added.</param>
        <param name="forMaterialization">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToCollectionSnapshot">
      <MemberSignature Language="C#" Value="public void AddToCollectionSnapshot (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, object addedEntity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToCollectionSnapshot(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, object addedEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToCollectionSnapshot (navigation As INavigationBase, addedEntity As Object)" />
      <MemberSignature Language="F#" Value="member this.AddToCollectionSnapshot : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * obj -&gt; unit" Usage="internalEntityEntry.AddToCollectionSnapshot (navigation, addedEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="addedEntity" Type="System.Object" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="addedEntity">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToCollectionSnapshot">
      <MemberSignature Language="C#" Value="public virtual void AddToCollectionSnapshot (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object addedEntity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollectionSnapshot(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object addedEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollectionSnapshot (propertyBase As IPropertyBase, addedEntity As Object)" />
      <MemberSignature Language="F#" Value="abstract member AddToCollectionSnapshot : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit&#xA;override this.AddToCollectionSnapshot : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit" Usage="internalEntityEntry.AddToCollectionSnapshot (propertyBase, addedEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="addedEntity" Type="System.Object" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="addedEntity">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CascadeDelete">
      <MemberSignature Language="C#" Value="public virtual void CascadeDelete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CascadeDelete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CascadeDelete" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CascadeDelete ()" />
      <MemberSignature Language="F#" Value="abstract member CascadeDelete : unit -&gt; unit&#xA;override this.CascadeDelete : unit -&gt; unit" Usage="internalEntityEntry.CascadeDelete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionContains">
      <MemberSignature Language="C#" Value="public virtual bool CollectionContains (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CollectionContains(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CollectionContains(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CollectionContains (navigation As INavigation, value As InternalEntityEntry) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CollectionContains : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool&#xA;override this.CollectionContains : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool" Usage="internalEntityEntry.CollectionContains (navigation, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="value" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionContains">
      <MemberSignature Language="C#" Value="public virtual bool CollectionContains (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CollectionContains(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CollectionContains(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CollectionContains (navigationBase As INavigationBase, value As InternalEntityEntry) As Boolean" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member CollectionContains : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool&#xA;override this.CollectionContains : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool" Usage="internalEntityEntry.CollectionContains (navigationBase, value)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public bool CollectionContains (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CollectionContains(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="Public Function CollectionContains (navigationBase As INavigationBase, value As InternalEntityEntry) As Boolean" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.CollectionContains : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool" Usage="internalEntityEntry.CollectionContains (navigationBase, value)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationBase" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="value" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="navigationBase">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionContains">
      <MemberSignature Language="C#" Value="public bool CollectionContains (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CollectionContains(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CollectionContains(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CollectionContains (navigationBase As INavigationBase, value As Object) As Boolean" />
      <MemberSignature Language="F#" Value="member this.CollectionContains : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * obj -&gt; bool" Usage="internalEntityEntry.CollectionContains (navigationBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationBase" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationBase">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.DbContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbContext Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DbContext" />
      <MemberSignature Language="F#" Value="member this.Context : Microsoft.EntityFrameworkCore.DbContext" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Context" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.Context</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugView">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DebugView" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DebugView As DebugView" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.DebugView : Microsoft.EntityFrameworkCore.Infrastructure.DebugView" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DebugView" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DebugView As DebugView" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.DebugView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardStoreGeneratedValues">
      <MemberSignature Language="C#" Value="public virtual void DiscardStoreGeneratedValues ();" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DiscardStoreGeneratedValues() cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DiscardStoreGeneratedValues ()" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member DiscardStoreGeneratedValues : unit -&gt; unit&#xA;override this.DiscardStoreGeneratedValues : unit -&gt; unit" Usage="internalEntityEntry.DiscardStoreGeneratedValues " FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void DiscardStoreGeneratedValues ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DiscardStoreGeneratedValues() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub DiscardStoreGeneratedValues ()" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.DiscardStoreGeneratedValues : unit -&gt; unit" Usage="internalEntityEntry.DiscardStoreGeneratedValues " FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureOriginalValues">
      <MemberSignature Language="C#" Value="public virtual void EnsureOriginalValues ();" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureOriginalValues() cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnsureOriginalValues ()" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member EnsureOriginalValues : unit -&gt; unit&#xA;override this.EnsureOriginalValues : unit -&gt; unit" Usage="internalEntityEntry.EnsureOriginalValues " FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void EnsureOriginalValues ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureOriginalValues() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureOriginalValues ()" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.EnsureOriginalValues : unit -&gt; unit" Usage="internalEntityEntry.EnsureOriginalValues " FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureRelationshipSnapshot">
      <MemberSignature Language="C#" Value="public virtual void EnsureRelationshipSnapshot ();" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureRelationshipSnapshot() cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnsureRelationshipSnapshot ()" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member EnsureRelationshipSnapshot : unit -&gt; unit&#xA;override this.EnsureRelationshipSnapshot : unit -&gt; unit" Usage="internalEntityEntry.EnsureRelationshipSnapshot " FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void EnsureRelationshipSnapshot ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureRelationshipSnapshot() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureRelationshipSnapshot ()" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.EnsureRelationshipSnapshot : unit -&gt; unit" Usage="internalEntityEntry.EnsureRelationshipSnapshot " FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureStoreGeneratedValues">
      <MemberSignature Language="C#" Value="public virtual void EnsureStoreGeneratedValues ();" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureStoreGeneratedValues() cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureStoreGeneratedValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnsureStoreGeneratedValues ()" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member EnsureStoreGeneratedValues : unit -&gt; unit&#xA;override this.EnsureStoreGeneratedValues : unit -&gt; unit" Usage="internalEntityEntry.EnsureStoreGeneratedValues " FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void EnsureStoreGeneratedValues ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureStoreGeneratedValues() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureStoreGeneratedValues ()" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.EnsureStoreGeneratedValues : unit -&gt; unit" Usage="internalEntityEntry.EnsureStoreGeneratedValues " FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureTemporaryValues">
      <MemberSignature Language="C#" Value="public virtual void EnsureTemporaryValues ();" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureTemporaryValues() cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureTemporaryValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EnsureTemporaryValues ()" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member EnsureTemporaryValues : unit -&gt; unit&#xA;override this.EnsureTemporaryValues : unit -&gt; unit" Usage="internalEntityEntry.EnsureTemporaryValues " FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void EnsureTemporaryValues ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureTemporaryValues() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureTemporaryValues ()" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.EnsureTemporaryValues : unit -&gt; unit" Usage="internalEntityEntry.EnsureTemporaryValues " FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity">
      <MemberSignature Language="C#" Value="public abstract object Entity { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object Entity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Entity As Object" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.Entity : obj" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity" />
      <MemberSignature Language="C#" Value="public object Entity { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Entity As Object" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityState">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.EntityState EntityState { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.EntityState EntityState" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntityState As EntityState" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.EntityState : Microsoft.EntityFrameworkCore.EntityState" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.EntityState EntityState { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntityState As EntityState" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.EntityState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntityType As IEntityType" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.EntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntityType As IEntityType" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType EntityType { get; }" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType EntityType" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntityType As IRuntimeEntityType" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.EntityType : Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType" FrameworkAlternate="efcore-8.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlaggedAsStoreGenerated">
      <MemberSignature Language="C#" Value="public bool FlaggedAsStoreGenerated (int propertyIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FlaggedAsStoreGenerated(int32 propertyIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.FlaggedAsStoreGenerated(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FlaggedAsStoreGenerated (propertyIndex As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.FlaggedAsStoreGenerated : int -&gt; bool" Usage="internalEntityEntry.FlaggedAsStoreGenerated propertyIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyIndex" Type="System.Int32" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyIndex">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlaggedAsStoreGeneratedMethod">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MethodInfo FlaggedAsStoreGeneratedMethod;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MethodInfo FlaggedAsStoreGeneratedMethod" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.FlaggedAsStoreGeneratedMethod" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlaggedAsStoreGeneratedMethod As MethodInfo " />
      <MemberSignature Language="F#" Value=" staticval mutable FlaggedAsStoreGeneratedMethod : System.Reflection.MethodInfo" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.FlaggedAsStoreGeneratedMethod" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlaggedAsTemporary">
      <MemberSignature Language="C#" Value="public bool FlaggedAsTemporary (int propertyIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FlaggedAsTemporary(int32 propertyIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.FlaggedAsTemporary(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FlaggedAsTemporary (propertyIndex As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.FlaggedAsTemporary : int -&gt; bool" Usage="internalEntityEntry.FlaggedAsTemporary propertyIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyIndex" Type="System.Int32" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyIndex">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlaggedAsTemporaryMethod">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MethodInfo FlaggedAsTemporaryMethod;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MethodInfo FlaggedAsTemporaryMethod" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.FlaggedAsTemporaryMethod" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlaggedAsTemporaryMethod As MethodInfo " />
      <MemberSignature Language="F#" Value=" staticval mutable FlaggedAsTemporaryMethod : System.Reflection.MethodInfo" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.FlaggedAsTemporaryMethod" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValue">
      <MemberSignature Language="C#" Value="public virtual object GetCurrentValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCurrentValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj&#xA;override this.GetCurrentValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj" Usage="internalEntityEntry.GetCurrentValue propertyBase" />
      <MemberSignature Language="C#" Value="public object? GetCurrentValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValue&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual TProperty GetCurrentValue&lt;TProperty&gt; (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TProperty GetCurrentValue&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentValue(Of TProperty) (propertyBase As IPropertyBase) As TProperty" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; 'Property&#xA;override this.GetCurrentValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; 'Property" Usage="internalEntityEntry.GetCurrentValue propertyBase" />
      <MemberSignature Language="C#" Value="public TProperty GetCurrentValue&lt;TProperty&gt; (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentValue(Of TProperty) (propertyBase As IPropertyBase) As TProperty" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TProperty</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateCollection">
      <MemberSignature Language="C#" Value="public virtual object GetOrCreateCollection (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetOrCreateCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOrCreateCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateCollection (navigation As INavigation) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; obj&#xA;override this.GetOrCreateCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; obj" Usage="internalEntityEntry.GetOrCreateCollection navigation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateCollection">
      <MemberSignature Language="C#" Value="public virtual object GetOrCreateCollection (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, bool forMaterialization);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetOrCreateCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, bool forMaterialization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOrCreateCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateCollection (navigation As INavigation, forMaterialization As Boolean) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * bool -&gt; obj&#xA;override this.GetOrCreateCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * bool -&gt; obj" Usage="internalEntityEntry.GetOrCreateCollection (navigation, forMaterialization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="forMaterialization" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="forMaterialization">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateCollection">
      <MemberSignature Language="C#" Value="public virtual object GetOrCreateCollection (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, bool forMaterialization);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetOrCreateCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, bool forMaterialization) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOrCreateCollection(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrCreateCollection (navigationBase As INavigationBase, forMaterialization As Boolean) As Object" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member GetOrCreateCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * bool -&gt; obj&#xA;override this.GetOrCreateCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * bool -&gt; obj" Usage="internalEntityEntry.GetOrCreateCollection (navigationBase, forMaterialization)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public object GetOrCreateCollection (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, bool forMaterialization);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrCreateCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, bool forMaterialization) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateCollection (navigationBase As INavigationBase, forMaterialization As Boolean) As Object" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * bool -&gt; obj" Usage="internalEntityEntry.GetOrCreateCollection (navigationBase, forMaterialization)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationBase" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="forMaterialization" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationBase">To be added.</param>
        <param name="forMaterialization">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalValue">
      <MemberSignature Language="C#" Value="public virtual object GetOriginalValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetOriginalValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOriginalValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member GetOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj&#xA;override this.GetOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj" Usage="internalEntityEntry.GetOriginalValue propertyBase" />
      <MemberSignature Language="C#" Value="public object? GetOriginalValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalValue&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual TProperty GetOriginalValue&lt;TProperty&gt; (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TProperty GetOriginalValue&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOriginalValue(Of TProperty) (property As IProperty) As TProperty" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member GetOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; 'Property&#xA;override this.GetOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; 'Property" Usage="internalEntityEntry.GetOriginalValue property" />
      <MemberSignature Language="C#" Value="public TProperty GetOriginalValue&lt;TProperty&gt; (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalValue(Of TProperty) (property As IProperty) As TProperty" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TProperty</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreStoreGeneratedCurrentValue">
      <MemberSignature Language="C#" Value="public virtual object GetPreStoreGeneratedCurrentValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetPreStoreGeneratedCurrentValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreStoreGeneratedCurrentValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member GetPreStoreGeneratedCurrentValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj&#xA;override this.GetPreStoreGeneratedCurrentValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj" Usage="internalEntityEntry.GetPreStoreGeneratedCurrentValue propertyBase" />
      <MemberSignature Language="C#" Value="public object? GetPreStoreGeneratedCurrentValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreStoreGeneratedCurrentValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetPreStoreGeneratedCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipSnapshotValue">
      <MemberSignature Language="C#" Value="public virtual object GetRelationshipSnapshotValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRelationshipSnapshotValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipSnapshotValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipSnapshotValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj&#xA;override this.GetRelationshipSnapshotValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj" Usage="internalEntityEntry.GetRelationshipSnapshotValue propertyBase" />
      <MemberSignature Language="C#" Value="public object? GetRelationshipSnapshotValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipSnapshotValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipSnapshotValue&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual TProperty GetRelationshipSnapshotValue&lt;TProperty&gt; (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TProperty GetRelationshipSnapshotValue&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipSnapshotValue(Of TProperty) (propertyBase As IPropertyBase) As TProperty" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipSnapshotValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; 'Property&#xA;override this.GetRelationshipSnapshotValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; 'Property" Usage="internalEntityEntry.GetRelationshipSnapshotValue propertyBase" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public TProperty GetRelationshipSnapshotValue&lt;TProperty&gt; (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TProperty GetRelationshipSnapshotValue&lt;TProperty&gt;(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipSnapshotValue(Of TProperty) (propertyBase As IPropertyBase) As TProperty" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.GetRelationshipSnapshotValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; 'Property" Usage="internalEntityEntry.GetRelationshipSnapshotValue propertyBase" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TProperty</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty">To be added.</typeparam>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleConceptualNulls">
      <MemberSignature Language="C#" Value="public virtual void HandleConceptualNulls ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleConceptualNulls() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HandleConceptualNulls ()" />
      <MemberSignature Language="F#" Value="abstract member HandleConceptualNulls : unit -&gt; unit&#xA;override this.HandleConceptualNulls : unit -&gt; unit" Usage="internalEntityEntry.HandleConceptualNulls " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleConceptualNulls">
      <MemberSignature Language="C#" Value="public virtual void HandleConceptualNulls (bool sensitiveLoggingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleConceptualNulls(bool sensitiveLoggingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HandleConceptualNulls (sensitiveLoggingEnabled As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member HandleConceptualNulls : bool -&gt; unit&#xA;override this.HandleConceptualNulls : bool -&gt; unit" Usage="internalEntityEntry.HandleConceptualNulls sensitiveLoggingEnabled" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensitiveLoggingEnabled" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="sensitiveLoggingEnabled">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleConceptualNulls">
      <MemberSignature Language="C#" Value="public virtual void HandleConceptualNulls (bool sensitiveLoggingEnabled, bool force, bool isCascadeDelete);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleConceptualNulls(bool sensitiveLoggingEnabled, bool force, bool isCascadeDelete) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HandleConceptualNulls (sensitiveLoggingEnabled As Boolean, force As Boolean, isCascadeDelete As Boolean)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member HandleConceptualNulls : bool * bool * bool -&gt; unit&#xA;override this.HandleConceptualNulls : bool * bool * bool -&gt; unit" Usage="internalEntityEntry.HandleConceptualNulls (sensitiveLoggingEnabled, force, isCascadeDelete)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void HandleConceptualNulls (bool sensitiveLoggingEnabled, bool force, bool isCascadeDelete);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleConceptualNulls(bool sensitiveLoggingEnabled, bool force, bool isCascadeDelete) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub HandleConceptualNulls (sensitiveLoggingEnabled As Boolean, force As Boolean, isCascadeDelete As Boolean)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.HandleConceptualNulls : bool * bool * bool -&gt; unit" Usage="internalEntityEntry.HandleConceptualNulls (sensitiveLoggingEnabled, force, isCascadeDelete)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensitiveLoggingEnabled" Type="System.Boolean" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="force" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isCascadeDelete" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sensitiveLoggingEnabled">To be added.</param>
        <param name="force">To be added.</param>
        <param name="isCascadeDelete">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleINotifyCollectionChanged">
      <MemberSignature Language="C#" Value="public virtual void HandleINotifyCollectionChanged (object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs eventArgs);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleINotifyCollectionChanged(object sender, class System.Collections.Specialized.NotifyCollectionChangedEventArgs eventArgs) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HandleINotifyCollectionChanged (sender As Object, eventArgs As NotifyCollectionChangedEventArgs)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member HandleINotifyCollectionChanged : obj * System.Collections.Specialized.NotifyCollectionChangedEventArgs -&gt; unit&#xA;override this.HandleINotifyCollectionChanged : obj * System.Collections.Specialized.NotifyCollectionChangedEventArgs -&gt; unit" Usage="internalEntityEntry.HandleINotifyCollectionChanged (sender, eventArgs)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void HandleINotifyCollectionChanged (object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs eventArgs);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleINotifyCollectionChanged(object sender, class System.Collections.Specialized.NotifyCollectionChangedEventArgs eventArgs) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub HandleINotifyCollectionChanged (sender As Object, eventArgs As NotifyCollectionChangedEventArgs)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.HandleINotifyCollectionChanged : obj * System.Collections.Specialized.NotifyCollectionChangedEventArgs -&gt; unit" Usage="internalEntityEntry.HandleINotifyCollectionChanged (sender, eventArgs)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <param name="eventArgs">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleINotifyPropertyChanged">
      <MemberSignature Language="C#" Value="public virtual void HandleINotifyPropertyChanged (object sender, System.ComponentModel.PropertyChangedEventArgs eventArgs);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleINotifyPropertyChanged(object sender, class System.ComponentModel.PropertyChangedEventArgs eventArgs) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HandleINotifyPropertyChanged (sender As Object, eventArgs As PropertyChangedEventArgs)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member HandleINotifyPropertyChanged : obj * System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.HandleINotifyPropertyChanged : obj * System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="internalEntityEntry.HandleINotifyPropertyChanged (sender, eventArgs)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void HandleINotifyPropertyChanged (object? sender, System.ComponentModel.PropertyChangedEventArgs eventArgs);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleINotifyPropertyChanged(object sender, class System.ComponentModel.PropertyChangedEventArgs eventArgs) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub HandleINotifyPropertyChanged (sender As Object, eventArgs As PropertyChangedEventArgs)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.HandleINotifyPropertyChanged : obj * System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="internalEntityEntry.HandleINotifyPropertyChanged (sender, eventArgs)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <param name="eventArgs">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleINotifyPropertyChanging">
      <MemberSignature Language="C#" Value="public virtual void HandleINotifyPropertyChanging (object sender, System.ComponentModel.PropertyChangingEventArgs eventArgs);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleINotifyPropertyChanging(object sender, class System.ComponentModel.PropertyChangingEventArgs eventArgs) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging(System.Object,System.ComponentModel.PropertyChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HandleINotifyPropertyChanging (sender As Object, eventArgs As PropertyChangingEventArgs)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member HandleINotifyPropertyChanging : obj * System.ComponentModel.PropertyChangingEventArgs -&gt; unit&#xA;override this.HandleINotifyPropertyChanging : obj * System.ComponentModel.PropertyChangingEventArgs -&gt; unit" Usage="internalEntityEntry.HandleINotifyPropertyChanging (sender, eventArgs)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void HandleINotifyPropertyChanging (object? sender, System.ComponentModel.PropertyChangingEventArgs eventArgs);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleINotifyPropertyChanging(object sender, class System.ComponentModel.PropertyChangingEventArgs eventArgs) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub HandleINotifyPropertyChanging (sender As Object, eventArgs As PropertyChangingEventArgs)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.HandleINotifyPropertyChanging : obj * System.ComponentModel.PropertyChangingEventArgs -&gt; unit" Usage="internalEntityEntry.HandleINotifyPropertyChanging (sender, eventArgs)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.ComponentModel.PropertyChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <param name="eventArgs">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleNullForeignKey">
      <MemberSignature Language="C#" Value="public void HandleNullForeignKey (Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool setModified = false, bool isCascadeDelete = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleNullForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool setModified, bool isCascadeDelete) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleNullForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HandleNullForeignKey (property As IProperty, Optional setModified As Boolean = false, Optional isCascadeDelete As Boolean = false)" />
      <MemberSignature Language="F#" Value="member this.HandleNullForeignKey : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * bool -&gt; unit" Usage="internalEntityEntry.HandleNullForeignKey (property, setModified, isCascadeDelete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setModified" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isCascadeDelete" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="setModified">To be added.</param>
        <param name="isCascadeDelete">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConceptualNull">
      <MemberSignature Language="C#" Value="public virtual bool HasConceptualNull { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasConceptualNull" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasConceptualNull As Boolean" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.HasConceptualNull : bool" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull" />
      <MemberSignature Language="C#" Value="public bool HasConceptualNull { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasConceptualNull As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDefaultValue">
      <MemberSignature Language="C#" Value="public bool HasDefaultValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasDefaultValue(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasDefaultValue (property As IProperty) As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="internalEntityEntry.HasDefaultValue property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasExplicitValue">
      <MemberSignature Language="C#" Value="public bool HasExplicitValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasExplicitValue(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasExplicitValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasExplicitValue (property As IProperty) As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasExplicitValue : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="internalEntityEntry.HasExplicitValue property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOriginalValuesSnapshot">
      <MemberSignature Language="C#" Value="public virtual bool HasOriginalValuesSnapshot { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasOriginalValuesSnapshot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasOriginalValuesSnapshot As Boolean" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.HasOriginalValuesSnapshot : bool" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot" />
      <MemberSignature Language="C#" Value="public bool HasOriginalValuesSnapshot { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasOriginalValuesSnapshot As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRelationshipSnapshot">
      <MemberSignature Language="C#" Value="public virtual bool HasRelationshipSnapshot { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasRelationshipSnapshot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasRelationshipSnapshot As Boolean" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.HasRelationshipSnapshot : bool" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot" />
      <MemberSignature Language="C#" Value="public bool HasRelationshipSnapshot { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasRelationshipSnapshot As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTemporaryValue">
      <MemberSignature Language="C#" Value="public virtual bool HasTemporaryValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasTemporaryValue(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasTemporaryValue (property As IProperty) As Boolean" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member HasTemporaryValue : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool&#xA;override this.HasTemporaryValue : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="internalEntityEntry.HasTemporaryValue property" />
      <MemberSignature Language="C#" Value="public bool HasTemporaryValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function HasTemporaryValue (property As IProperty) As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConceptualNull">
      <MemberSignature Language="C#" Value="public virtual bool IsConceptualNull (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsConceptualNull(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsConceptualNull (property As IProperty) As Boolean" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member IsConceptualNull : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool&#xA;override this.IsConceptualNull : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="internalEntityEntry.IsConceptualNull property" />
      <MemberSignature Language="C#" Value="public bool IsConceptualNull (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function IsConceptualNull (property As IProperty) As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsConceptualNull(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeySet">
      <MemberSignature Language="C#" Value="public virtual bool IsKeySet { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeySet" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsKeySet As Boolean" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="member this.IsKeySet : bool" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual (bool IsGenerated, bool IsSet) IsKeySet { get; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ValueTuple`2&lt;bool, bool&gt; IsKeySet" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsKeySet As ValueTuple(Of Boolean, Boolean)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.IsKeySet : ValueTuple&lt;bool, bool&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public (bool IsGenerated, bool IsSet) IsKeySet { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeySet As ValueTuple(Of Boolean, Boolean)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "IsGenerated", "IsSet" })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "IsGenerated", "IsSet" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">System.Boolean</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">System.ValueTuple&lt;System.Boolean,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyUnknown">
      <MemberSignature Language="C#" Value="public virtual bool IsKeyUnknown { get; }" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyUnknown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeyUnknown" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsKeyUnknown As Boolean" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.IsKeyUnknown : bool" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeyUnknown" />
      <MemberSignature Language="C#" Value="public bool IsKeyUnknown { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyUnknown As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public virtual bool IsLoaded (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLoaded(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsLoaded (navigation As INavigation) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; bool&#xA;override this.IsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigation -&gt; bool" Usage="internalEntityEntry.IsLoaded navigation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public virtual bool IsLoaded (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLoaded(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigationBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsLoaded (navigation As INavigationBase) As Boolean" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member IsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigationBase -&gt; bool&#xA;override this.IsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigationBase -&gt; bool" Usage="internalEntityEntry.IsLoaded navigation" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public bool IsLoaded (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsLoaded(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLoaded (navigation As INavigationBase) As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigationBase -&gt; bool" Usage="internalEntityEntry.IsLoaded navigation" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModified">
      <MemberSignature Language="C#" Value="public virtual bool IsModified (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsModified(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsModified (property As IProperty) As Boolean" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member IsModified : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool&#xA;override this.IsModified : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="internalEntityEntry.IsModified property" />
      <MemberSignature Language="C#" Value="public bool IsModified (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function IsModified (property As IProperty) As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStoreGenerated">
      <MemberSignature Language="C#" Value="public virtual bool IsStoreGenerated (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStoreGenerated(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsStoreGenerated (property As IProperty) As Boolean" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member IsStoreGenerated : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool&#xA;override this.IsStoreGenerated : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="internalEntityEntry.IsStoreGenerated property" />
      <MemberSignature Language="C#" Value="public bool IsStoreGenerated (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStoreGenerated (property As IProperty) As Boolean" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsUnknown(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsUnknown(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnknown (property As IProperty) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsUnknown : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="internalEntityEntry.IsUnknown property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase] { get; set; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
      <MemberSignature Language="F#" Value="member this.Item(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase) : obj with get, set" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item" />
      <MemberSignature Language="C#" Value="public object this[Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase] { get; set; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public object? this[Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase] { get; set; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkAsTemporary">
      <MemberSignature Language="C#" Value="public virtual void MarkAsTemporary (Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool isTemporary = true);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarkAsTemporary(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool isTemporary) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MarkAsTemporary (property As IProperty, Optional isTemporary As Boolean = true)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member MarkAsTemporary : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool -&gt; unit&#xA;override this.MarkAsTemporary : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool -&gt; unit" Usage="internalEntityEntry.MarkAsTemporary (property, isTemporary)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public void MarkAsTemporary (Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool temporary);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MarkAsTemporary(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool temporary) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub MarkAsTemporary (property As IProperty, temporary As Boolean)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.MarkAsTemporary : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool -&gt; unit" Usage="internalEntityEntry.MarkAsTemporary (property, temporary)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isTemporary" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="temporary" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="isTemporary">To be added.</param>
        <param name="temporary">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkShadowPropertiesNotSet">
      <MemberSignature Language="C#" Value="protected virtual void MarkShadowPropertiesNotSet (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MarkShadowPropertiesNotSet(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub MarkShadowPropertiesNotSet (entityType As IEntityType)" />
      <MemberSignature Language="F#" Value="abstract member MarkShadowPropertiesNotSet : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; unit&#xA;override this.MarkShadowPropertiesNotSet : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; unit" Usage="internalEntityEntry.MarkShadowPropertiesNotSet entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkUnchangedFromQuery">
      <MemberSignature Language="C#" Value="public virtual void MarkUnchangedFromQuery ();" FrameworkAlternate="efcore-1.0;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarkUnchangedFromQuery() cil managed" FrameworkAlternate="efcore-1.0;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MarkUnchangedFromQuery ()" FrameworkAlternate="efcore-1.0;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member MarkUnchangedFromQuery : unit -&gt; unit&#xA;override this.MarkUnchangedFromQuery : unit -&gt; unit" Usage="internalEntityEntry.MarkUnchangedFromQuery " FrameworkAlternate="efcore-1.0;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void MarkUnchangedFromQuery ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MarkUnchangedFromQuery() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub MarkUnchangedFromQuery ()" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.MarkUnchangedFromQuery : unit -&gt; unit" Usage="internalEntityEntry.MarkUnchangedFromQuery " FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkUnchangedFromQuery">
      <MemberSignature Language="C#" Value="public virtual void MarkUnchangedFromQuery (System.Collections.Generic.ISet&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; handledForeignKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarkUnchangedFromQuery(class System.Collections.Generic.ISet`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; handledForeignKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery(System.Collections.Generic.ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MarkUnchangedFromQuery (handledForeignKeys As ISet(Of IForeignKey))" />
      <MemberSignature Language="F#" Value="abstract member MarkUnchangedFromQuery : System.Collections.Generic.ISet&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; -&gt; unit&#xA;override this.MarkUnchangedFromQuery : System.Collections.Generic.ISet&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; -&gt; unit" Usage="internalEntityEntry.MarkUnchangedFromQuery handledForeignKeys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handledForeignKeys" Type="System.Collections.Generic.ISet&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="handledForeignKeys">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkUnknown">
      <MemberSignature Language="C#" Value="public virtual void MarkUnknown (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarkUnknown(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnknown(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MarkUnknown (property As IProperty)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member MarkUnknown : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit&#xA;override this.MarkUnknown : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="internalEntityEntry.MarkUnknown property" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public void MarkUnknown (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MarkUnknown(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub MarkUnknown (property As IProperty)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.MarkUnknown : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="internalEntityEntry.MarkUnknown property" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.EntityState Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.EntityState Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Microsoft#EntityFrameworkCore#Update#IUpdateEntry#EntityState" />
      <MemberSignature Language="VB.NET" Value=" Property EntityState As EntityState Implements IUpdateEntry.EntityState" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState : Microsoft.EntityFrameworkCore.EntityState with get, set" Usage="Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.EntityState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Microsoft#EntityFrameworkCore#Update#IUpdateEntry#EntityType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property EntityType As IEntityType Implements IUpdateEntry.EntityType" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetOriginalValue">
      <MemberSignature Language="C#" Value="void IUpdateEntry.SetOriginalValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetOriginalValue(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Microsoft#EntityFrameworkCore#Update#IUpdateEntry#SetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub SetOriginalValue (property As IProperty, value As Object) Implements IUpdateEntry.SetOriginalValue" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * obj -&gt; unit&#xA;override this.Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * obj -&gt; unit" Usage="internalEntityEntry.Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetOriginalValue (property, value)" />
      <MemberSignature Language="C#" Value="void IUpdateEntry.SetOriginalValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property, object? value);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetPropertyModified">
      <MemberSignature Language="C#" Value="void IUpdateEntry.SetPropertyModified (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetPropertyModified(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Microsoft#EntityFrameworkCore#Update#IUpdateEntry#SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Sub SetPropertyModified (property As IProperty) Implements IUpdateEntry.SetPropertyModified" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit&#xA;override this.Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="internalEntityEntry.Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetPropertyModified property" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Update.IUpdateEntry Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry { get; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Update.IUpdateEntry Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Microsoft#EntityFrameworkCore#Update#IUpdateEntry#SharedIdentityEntry" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SharedIdentityEntry As IUpdateEntry Implements IUpdateEntry.SharedIdentityEntry" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry : Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Usage="Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Update.IUpdateEntry? Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Update.IUpdateEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnComplexPropertyModified">
      <MemberSignature Language="C#" Value="public void OnComplexPropertyModified (Microsoft.EntityFrameworkCore.Metadata.IComplexProperty property, bool isModified = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnComplexPropertyModified(class Microsoft.EntityFrameworkCore.Metadata.IComplexProperty property, bool isModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.OnComplexPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IComplexProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnComplexPropertyModified (property As IComplexProperty, Optional isModified As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.OnComplexPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IComplexProperty * bool -&gt; unit" Usage="internalEntityEntry.OnComplexPropertyModified (property, isModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IComplexProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="isModified" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="isModified">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareToSave">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry PrepareToSave ();" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry PrepareToSave() cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrepareToSave () As InternalEntityEntry" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member PrepareToSave : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry&#xA;override this.PrepareToSave : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Usage="internalEntityEntry.PrepareToSave " FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry PrepareToSave ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry PrepareToSave() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function PrepareToSave () As InternalEntityEntry" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.PrepareToSave : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Usage="internalEntityEntry.PrepareToSave " FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropagateValue">
      <MemberSignature Language="C#" Value="public void PropagateValue (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry principalEntry, Microsoft.EntityFrameworkCore.Metadata.IProperty principalProperty, Microsoft.EntityFrameworkCore.Metadata.IProperty dependentProperty, bool isMaterialization = false, bool setModified = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PropagateValue(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry principalEntry, class Microsoft.EntityFrameworkCore.Metadata.IProperty principalProperty, class Microsoft.EntityFrameworkCore.Metadata.IProperty dependentProperty, bool isMaterialization, bool setModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PropagateValue(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PropagateValue (principalEntry As InternalEntityEntry, principalProperty As IProperty, dependentProperty As IProperty, Optional isMaterialization As Boolean = false, Optional setModified As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.PropagateValue : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty * Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * bool -&gt; unit" Usage="internalEntityEntry.PropagateValue (principalEntry, principalProperty, dependentProperty, isMaterialization, setModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="dependentProperty" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isMaterialization" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setModified" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principalEntry">To be added.</param>
        <param name="principalProperty">To be added.</param>
        <param name="dependentProperty">To be added.</param>
        <param name="isMaterialization">To be added.</param>
        <param name="setModified">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyHasDefaultValue">
      <MemberSignature Language="C#" Value="protected virtual bool PropertyHasDefaultValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool PropertyHasDefaultValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PropertyHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function PropertyHasDefaultValue (propertyBase As IPropertyBase) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member PropertyHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; bool&#xA;override this.PropertyHasDefaultValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; bool" Usage="internalEntityEntry.PropertyHasDefaultValue propertyBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOriginalValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T ReadOriginalValue&lt;T&gt; (Microsoft.EntityFrameworkCore.Metadata.IProperty property, int originalValueIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T ReadOriginalValue&lt;T&gt;(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, int32 originalValueIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadOriginalValue(Of T) (property As IProperty, originalValueIndex As Integer) As T" />
      <MemberSignature Language="F#" Value="member this.ReadOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * int -&gt; 'T" Usage="internalEntityEntry.ReadOriginalValue (property, originalValueIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="originalValueIndex" Type="System.Int32" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="property">To be added.</param>
        <param name="originalValueIndex">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadPropertyValue">
      <MemberSignature Language="C#" Value="protected virtual object ReadPropertyValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object ReadPropertyValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ReadPropertyValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member ReadPropertyValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj&#xA;override this.ReadPropertyValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj" Usage="internalEntityEntry.ReadPropertyValue propertyBase" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public object? ReadPropertyValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadPropertyValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadPropertyValue (propertyBase As IPropertyBase) As Object" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.ReadPropertyValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; obj" Usage="internalEntityEntry.ReadPropertyValue propertyBase" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadRelationshipSnapshotValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T ReadRelationshipSnapshotValue&lt;T&gt; (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, int relationshipSnapshotIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T ReadRelationshipSnapshotValue&lt;T&gt;(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, int32 relationshipSnapshotIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadRelationshipSnapshotValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadRelationshipSnapshotValue(Of T) (propertyBase As IPropertyBase, relationshipSnapshotIndex As Integer) As T" />
      <MemberSignature Language="F#" Value="member this.ReadRelationshipSnapshotValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * int -&gt; 'T" Usage="internalEntityEntry.ReadRelationshipSnapshotValue (propertyBase, relationshipSnapshotIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="relationshipSnapshotIndex" Type="System.Int32" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="propertyBase">To be added.</param>
        <param name="relationshipSnapshotIndex">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadShadowValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected virtual T ReadShadowValue&lt;T&gt; (int shadowIndex);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !!T ReadShadowValue&lt;T&gt;(int32 shadowIndex) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue``1(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ReadShadowValue(Of T) (shadowIndex As Integer) As T" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member ReadShadowValue : int -&gt; 'T&#xA;override this.ReadShadowValue : int -&gt; 'T" Usage="internalEntityEntry.ReadShadowValue shadowIndex" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public T ReadShadowValue&lt;T&gt; (int shadowIndex);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T ReadShadowValue&lt;T&gt;(int32 shadowIndex) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadShadowValue(Of T) (shadowIndex As Integer) As T" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.ReadShadowValue : int -&gt; 'T" Usage="internalEntityEntry.ReadShadowValue shadowIndex" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="shadowIndex" Type="System.Int32" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="shadowIndex">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadStoreGeneratedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T ReadStoreGeneratedValue&lt;T&gt; (int storeGeneratedIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T ReadStoreGeneratedValue&lt;T&gt;(int32 storeGeneratedIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadStoreGeneratedValue``1(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadStoreGeneratedValue(Of T) (storeGeneratedIndex As Integer) As T" />
      <MemberSignature Language="F#" Value="member this.ReadStoreGeneratedValue : int -&gt; 'T" Usage="internalEntityEntry.ReadStoreGeneratedValue storeGeneratedIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="storeGeneratedIndex" Type="System.Int32" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="storeGeneratedIndex">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTemporaryValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T ReadTemporaryValue&lt;T&gt; (int storeGeneratedIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T ReadTemporaryValue&lt;T&gt;(int32 storeGeneratedIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadTemporaryValue``1(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTemporaryValue(Of T) (storeGeneratedIndex As Integer) As T" />
      <MemberSignature Language="F#" Value="member this.ReadTemporaryValue : int -&gt; 'T" Usage="internalEntityEntry.ReadTemporaryValue storeGeneratedIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="storeGeneratedIndex" Type="System.Int32" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="storeGeneratedIndex">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromCollection">
      <MemberSignature Language="C#" Value="public virtual void RemoveFromCollection (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value);" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value) cil managed" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveFromCollection (navigation As INavigation, value As InternalEntityEntry)" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit&#xA;override this.RemoveFromCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit" Usage="internalEntityEntry.RemoveFromCollection (navigation, value)" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual bool RemoveFromCollection (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveFromCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveFromCollection (navigation As INavigation, value As InternalEntityEntry) As Boolean" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool&#xA;override this.RemoveFromCollection : Microsoft.EntityFrameworkCore.Metadata.INavigation * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool" Usage="internalEntityEntry.RemoveFromCollection (navigation, value)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-2.1;efcore-2.2">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="value" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromCollection">
      <MemberSignature Language="C#" Value="public virtual bool RemoveFromCollection (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveFromCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollection(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveFromCollection (navigationBase As INavigationBase, value As InternalEntityEntry) As Boolean" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool&#xA;override this.RemoveFromCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool" Usage="internalEntityEntry.RemoveFromCollection (navigationBase, value)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public bool RemoveFromCollection (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveFromCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry value) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveFromCollection (navigationBase As INavigationBase, value As InternalEntityEntry) As Boolean" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.RemoveFromCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; bool" Usage="internalEntityEntry.RemoveFromCollection (navigationBase, value)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationBase" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0" />
        <Parameter Name="value" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="navigationBase">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromCollection">
      <MemberSignature Language="C#" Value="public bool RemoveFromCollection (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveFromCollection(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollection(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveFromCollection (navigationBase As INavigationBase, value As Object) As Boolean" />
      <MemberSignature Language="F#" Value="member this.RemoveFromCollection : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * obj -&gt; bool" Usage="internalEntityEntry.RemoveFromCollection (navigationBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationBase" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationBase">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromCollectionSnapshot">
      <MemberSignature Language="C#" Value="public void RemoveFromCollectionSnapshot (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, object removedEntity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFromCollectionSnapshot(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, object removedEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromCollectionSnapshot (navigation As INavigationBase, removedEntity As Object)" />
      <MemberSignature Language="F#" Value="member this.RemoveFromCollectionSnapshot : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * obj -&gt; unit" Usage="internalEntityEntry.RemoveFromCollectionSnapshot (navigation, removedEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="removedEntity" Type="System.Object" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="removedEntity">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromCollectionSnapshot">
      <MemberSignature Language="C#" Value="public virtual void RemoveFromCollectionSnapshot (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object removedEntity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromCollectionSnapshot(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object removedEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveFromCollectionSnapshot (propertyBase As IPropertyBase, removedEntity As Object)" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromCollectionSnapshot : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit&#xA;override this.RemoveFromCollectionSnapshot : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit" Usage="internalEntityEntry.RemoveFromCollectionSnapshot (propertyBase, removedEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="removedEntity" Type="System.Object" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="removedEntity">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public virtual void SetCurrentValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCurrentValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetCurrentValue (propertyBase As IPropertyBase, value As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetCurrentValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit&#xA;override this.SetCurrentValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit" Usage="internalEntityEntry.SetCurrentValue (propertyBase, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityState">
      <MemberSignature Language="C#" Value="public virtual void SetEntityState (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEntityState(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetEntityState (entityState As EntityState, Optional acceptChanges As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool -&gt; unit&#xA;override this.SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool -&gt; unit" Usage="internalEntityEntry.SetEntityState (entityState, acceptChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityState">
      <MemberSignature Language="C#" Value="public virtual void SetEntityState (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges = false, bool forceStateWhenUnknownKey = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEntityState(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, bool forceStateWhenUnknownKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetEntityState (entityState As EntityState, Optional acceptChanges As Boolean = false, Optional forceStateWhenUnknownKey As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool * bool -&gt; unit&#xA;override this.SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool * bool -&gt; unit" Usage="internalEntityEntry.SetEntityState (entityState, acceptChanges, forceStateWhenUnknownKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1" />
        <Parameter Name="forceStateWhenUnknownKey" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <param name="forceStateWhenUnknownKey">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityState">
      <MemberSignature Language="C#" Value="public virtual void SetEntityState (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges = false, Microsoft.EntityFrameworkCore.EntityState? forceStateWhenUnknownKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEntityState(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; forceStateWhenUnknownKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.EntityState})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetEntityState (entityState As EntityState, Optional acceptChanges As Boolean = false, Optional forceStateWhenUnknownKey As Nullable(Of EntityState) = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; -&gt; unit&#xA;override this.SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; -&gt; unit" Usage="internalEntityEntry.SetEntityState (entityState, acceptChanges, forceStateWhenUnknownKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="forceStateWhenUnknownKey" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt;" Index="2" FrameworkAlternate="efcore-2.2;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <param name="forceStateWhenUnknownKey">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityState">
      <MemberSignature Language="C#" Value="public virtual void SetEntityState (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges = false, bool modifyProperties = true, Microsoft.EntityFrameworkCore.EntityState? forceStateWhenUnknownKey = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEntityState(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, bool modifyProperties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; forceStateWhenUnknownKey) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.EntityState})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetEntityState (entityState As EntityState, Optional acceptChanges As Boolean = false, Optional modifyProperties As Boolean = true, Optional forceStateWhenUnknownKey As Nullable(Of EntityState) = Nothing)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; -&gt; unit&#xA;override this.SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; -&gt; unit" Usage="internalEntityEntry.SetEntityState (entityState, acceptChanges, modifyProperties, forceStateWhenUnknownKey)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void SetEntityState (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges = false, bool modifyProperties = true, Microsoft.EntityFrameworkCore.EntityState? forceStateWhenUnknownKey = default);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEntityState(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, bool modifyProperties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; forceStateWhenUnknownKey) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEntityState (entityState As EntityState, Optional acceptChanges As Boolean = false, Optional modifyProperties As Boolean = true, Optional forceStateWhenUnknownKey As Nullable(Of EntityState) = Nothing)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; -&gt; unit" Usage="internalEntityEntry.SetEntityState (entityState, acceptChanges, modifyProperties, forceStateWhenUnknownKey)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="modifyProperties" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="forceStateWhenUnknownKey" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt;" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <param name="modifyProperties">To be added.</param>
        <param name="forceStateWhenUnknownKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityState">
      <MemberSignature Language="C#" Value="public void SetEntityState (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges = false, bool modifyProperties = true, Microsoft.EntityFrameworkCore.EntityState? forceStateWhenUnknownKey = default, Microsoft.EntityFrameworkCore.EntityState? fallbackState = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEntityState(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, bool modifyProperties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; forceStateWhenUnknownKey, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; fallbackState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.EntityState},System.Nullable{Microsoft.EntityFrameworkCore.EntityState})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEntityState (entityState As EntityState, Optional acceptChanges As Boolean = false, Optional modifyProperties As Boolean = true, Optional forceStateWhenUnknownKey As Nullable(Of EntityState) = Nothing, Optional fallbackState As Nullable(Of EntityState) = Nothing)" />
      <MemberSignature Language="F#" Value="member this.SetEntityState : Microsoft.EntityFrameworkCore.EntityState * bool * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; -&gt; unit" Usage="internalEntityEntry.SetEntityState (entityState, acceptChanges, modifyProperties, forceStateWhenUnknownKey, fallbackState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="modifyProperties" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="forceStateWhenUnknownKey" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fallbackState" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt;" Index="4" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <param name="modifyProperties">To be added.</param>
        <param name="forceStateWhenUnknownKey">To be added.</param>
        <param name="fallbackState">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityStateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetEntityStateAsync (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetEntityStateAsync(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetEntityStateAsync (entityState As EntityState, acceptChanges As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="internalEntityEntry.SetEntityStateAsync (entityState, acceptChanges, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityStateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetEntityStateAsync (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, bool forceStateWhenUnknownKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetEntityStateAsync(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, bool forceStateWhenUnknownKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetEntityStateAsync (entityState As EntityState, acceptChanges As Boolean, forceStateWhenUnknownKey As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="internalEntityEntry.SetEntityStateAsync (entityState, acceptChanges, forceStateWhenUnknownKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1" />
        <Parameter Name="forceStateWhenUnknownKey" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <param name="forceStateWhenUnknownKey">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityStateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetEntityStateAsync (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, Microsoft.EntityFrameworkCore.EntityState? forceStateWhenUnknownKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetEntityStateAsync(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; forceStateWhenUnknownKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.EntityState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetEntityStateAsync (entityState As EntityState, acceptChanges As Boolean, forceStateWhenUnknownKey As Nullable(Of EntityState), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="internalEntityEntry.SetEntityStateAsync (entityState, acceptChanges, forceStateWhenUnknownKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="forceStateWhenUnknownKey" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt;" Index="2" FrameworkAlternate="efcore-2.2;efcore-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-2.2;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <param name="forceStateWhenUnknownKey">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityStateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetEntityStateAsync (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges = false, bool modifyProperties = true, Microsoft.EntityFrameworkCore.EntityState? forceStateWhenUnknownKey = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetEntityStateAsync(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, bool modifyProperties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; forceStateWhenUnknownKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.EntityState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetEntityStateAsync (entityState As EntityState, Optional acceptChanges As Boolean = false, Optional modifyProperties As Boolean = true, Optional forceStateWhenUnknownKey As Nullable(Of EntityState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="internalEntityEntry.SetEntityStateAsync (entityState, acceptChanges, modifyProperties, forceStateWhenUnknownKey, cancellationToken)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetEntityStateAsync (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges = false, bool modifyProperties = true, Microsoft.EntityFrameworkCore.EntityState? forceStateWhenUnknownKey = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetEntityStateAsync(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, bool modifyProperties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; forceStateWhenUnknownKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="Public Function SetEntityStateAsync (entityState As EntityState, Optional acceptChanges As Boolean = false, Optional modifyProperties As Boolean = true, Optional forceStateWhenUnknownKey As Nullable(Of EntityState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="internalEntityEntry.SetEntityStateAsync (entityState, acceptChanges, modifyProperties, forceStateWhenUnknownKey, cancellationToken)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="modifyProperties" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="forceStateWhenUnknownKey" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt;" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <param name="modifyProperties">To be added.</param>
        <param name="forceStateWhenUnknownKey">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetEntityStateAsync (Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges = false, bool modifyProperties = true, Microsoft.EntityFrameworkCore.EntityState? forceStateWhenUnknownKey = default, Microsoft.EntityFrameworkCore.EntityState? fallbackState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetEntityStateAsync(valuetype Microsoft.EntityFrameworkCore.EntityState entityState, bool acceptChanges, bool modifyProperties, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; forceStateWhenUnknownKey, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.EntityState&gt; fallbackState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.EntityState},System.Nullable{Microsoft.EntityFrameworkCore.EntityState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetEntityStateAsync (entityState As EntityState, Optional acceptChanges As Boolean = false, Optional modifyProperties As Boolean = true, Optional forceStateWhenUnknownKey As Nullable(Of EntityState) = Nothing, Optional fallbackState As Nullable(Of EntityState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.SetEntityStateAsync : Microsoft.EntityFrameworkCore.EntityState * bool * bool * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="internalEntityEntry.SetEntityStateAsync (entityState, acceptChanges, modifyProperties, forceStateWhenUnknownKey, fallbackState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityState" Type="Microsoft.EntityFrameworkCore.EntityState" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="modifyProperties" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="forceStateWhenUnknownKey" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fallbackState" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.EntityState&gt;" Index="4" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityState">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <param name="modifyProperties">To be added.</param>
        <param name="forceStateWhenUnknownKey">To be added.</param>
        <param name="fallbackState">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsLoaded">
      <MemberSignature Language="C#" Value="public virtual void SetIsLoaded (Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, bool loaded = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIsLoaded(class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, bool loaded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetIsLoaded (navigation As INavigation, Optional loaded As Boolean = true)" />
      <MemberSignature Language="F#" Value="abstract member SetIsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigation * bool -&gt; unit&#xA;override this.SetIsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigation * bool -&gt; unit" Usage="internalEntityEntry.SetIsLoaded (navigation, loaded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
        <Parameter Name="loaded" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="loaded">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsLoaded">
      <MemberSignature Language="C#" Value="public virtual void SetIsLoaded (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, bool loaded = true);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIsLoaded(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, bool loaded) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetIsLoaded (navigation As INavigationBase, Optional loaded As Boolean = true)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetIsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * bool -&gt; unit&#xA;override this.SetIsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * bool -&gt; unit" Usage="internalEntityEntry.SetIsLoaded (navigation, loaded)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public void SetIsLoaded (Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, bool loaded = true);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetIsLoaded(class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigation, bool loaded) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetIsLoaded (navigation As INavigationBase, Optional loaded As Boolean = true)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.SetIsLoaded : Microsoft.EntityFrameworkCore.Metadata.INavigationBase * bool -&gt; unit" Usage="internalEntityEntry.SetIsLoaded (navigation, loaded)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="loaded" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">To be added.</param>
        <param name="loaded">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOriginalValue">
      <MemberSignature Language="C#" Value="public virtual void SetOriginalValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, int index = -1);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOriginalValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, int32 index) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOriginalValue (propertyBase As IPropertyBase, value As Object, Optional index As Integer = -1)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * int -&gt; unit&#xA;override this.SetOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * int -&gt; unit" Usage="internalEntityEntry.SetOriginalValue (propertyBase, value, index)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void SetOriginalValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object? value, int index = -1);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOriginalValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, int32 index) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOriginalValue (propertyBase As IPropertyBase, value As Object, Optional index As Integer = -1)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.SetOriginalValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * int -&gt; unit" Usage="internalEntityEntry.SetOriginalValue (propertyBase, value, index)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="value">To be added.</param>
        <param name="index">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public virtual void SetProperty (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, bool setModified = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProperty(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, bool setModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetProperty (propertyBase As IPropertyBase, value As Object, Optional setModified As Boolean = true)" />
      <MemberSignature Language="F#" Value="abstract member SetProperty : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * bool -&gt; unit&#xA;override this.SetProperty : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * bool -&gt; unit" Usage="internalEntityEntry.SetProperty (propertyBase, value, setModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="setModified" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="value">To be added.</param>
        <param name="setModified">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public virtual void SetProperty (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, bool isMaterialization, bool setModified = true, bool isCascadeDelete = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProperty(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, bool isMaterialization, bool setModified, bool isCascadeDelete) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetProperty (propertyBase As IPropertyBase, value As Object, isMaterialization As Boolean, Optional setModified As Boolean = true, Optional isCascadeDelete As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetProperty : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * bool * bool * bool -&gt; unit&#xA;override this.SetProperty : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * bool * bool * bool -&gt; unit" Usage="internalEntityEntry.SetProperty (propertyBase, value, isMaterialization, setModified, isCascadeDelete)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void SetProperty (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object? value, bool isMaterialization, bool setModified = true, bool isCascadeDelete = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProperty(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, bool isMaterialization, bool setModified, bool isCascadeDelete) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetProperty (propertyBase As IPropertyBase, value As Object, isMaterialization As Boolean, Optional setModified As Boolean = true, Optional isCascadeDelete As Boolean = false)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.SetProperty : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * bool * bool * bool -&gt; unit" Usage="internalEntityEntry.SetProperty (propertyBase, value, isMaterialization, setModified, isCascadeDelete)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isMaterialization" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setModified" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isCascadeDelete" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="value">To be added.</param>
        <param name="isMaterialization">To be added.</param>
        <param name="setModified">To be added.</param>
        <param name="isCascadeDelete">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyModified">
      <MemberSignature Language="C#" Value="public virtual void SetPropertyModified (Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool changeState = true, bool isModified = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPropertyModified(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool changeState, bool isModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetPropertyModified (property As IProperty, Optional changeState As Boolean = true, Optional isModified As Boolean = true)" />
      <MemberSignature Language="F#" Value="abstract member SetPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * bool -&gt; unit&#xA;override this.SetPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * bool -&gt; unit" Usage="internalEntityEntry.SetPropertyModified (property, changeState, isModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="changeState" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="isModified" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="changeState">To be added.</param>
        <param name="isModified">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyModified">
      <MemberSignature Language="C#" Value="public virtual void SetPropertyModified (Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool changeState = true, bool isModified = true, bool isConceptualNull = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPropertyModified(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool changeState, bool isModified, bool isConceptualNull) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetPropertyModified (property As IProperty, Optional changeState As Boolean = true, Optional isModified As Boolean = true, Optional isConceptualNull As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member SetPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * bool * bool -&gt; unit&#xA;override this.SetPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * bool * bool -&gt; unit" Usage="internalEntityEntry.SetPropertyModified (property, changeState, isModified, isConceptualNull)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="changeState" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="isModified" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="isConceptualNull" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="changeState">To be added.</param>
        <param name="isModified">To be added.</param>
        <param name="isConceptualNull">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyModified">
      <MemberSignature Language="C#" Value="public virtual void SetPropertyModified (Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool changeState = true, bool isModified = true, bool isConceptualNull = false, bool acceptChanges = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPropertyModified(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool changeState, bool isModified, bool isConceptualNull, bool acceptChanges) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetPropertyModified (property As IProperty, Optional changeState As Boolean = true, Optional isModified As Boolean = true, Optional isConceptualNull As Boolean = false, Optional acceptChanges As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * bool * bool * bool -&gt; unit&#xA;override this.SetPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * bool * bool * bool -&gt; unit" Usage="internalEntityEntry.SetPropertyModified (property, changeState, isModified, isConceptualNull, acceptChanges)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void SetPropertyModified (Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool changeState = true, bool isModified = true, bool isConceptualNull = false, bool acceptChanges = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPropertyModified(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, bool changeState, bool isModified, bool isConceptualNull, bool acceptChanges) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPropertyModified (property As IProperty, Optional changeState As Boolean = true, Optional isModified As Boolean = true, Optional isConceptualNull As Boolean = false, Optional acceptChanges As Boolean = false)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.SetPropertyModified : Microsoft.EntityFrameworkCore.Metadata.IProperty * bool * bool * bool * bool -&gt; unit" Usage="internalEntityEntry.SetPropertyModified (property, changeState, isModified, isConceptualNull, acceptChanges)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="changeState" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isModified" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="isConceptualNull" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="acceptChanges" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="changeState">To be added.</param>
        <param name="isModified">To be added.</param>
        <param name="isConceptualNull">To be added.</param>
        <param name="acceptChanges">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRelationshipSnapshotValue">
      <MemberSignature Language="C#" Value="public virtual void SetRelationshipSnapshotValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRelationshipSnapshotValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetRelationshipSnapshotValue (propertyBase As IPropertyBase, value As Object)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetRelationshipSnapshotValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit&#xA;override this.SetRelationshipSnapshotValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit" Usage="internalEntityEntry.SetRelationshipSnapshotValue (propertyBase, value)" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void SetRelationshipSnapshotValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object? value);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRelationshipSnapshotValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetRelationshipSnapshotValue (propertyBase As IPropertyBase, value As Object)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.SetRelationshipSnapshotValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit" Usage="internalEntityEntry.SetRelationshipSnapshotValue (propertyBase, value)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStoreGeneratedValue">
      <MemberSignature Language="C#" Value="public virtual void SetStoreGeneratedValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStoreGeneratedValue(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetStoreGeneratedValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetStoreGeneratedValue (property As IProperty, value As Object)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetStoreGeneratedValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * obj -&gt; unit&#xA;override this.SetStoreGeneratedValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * obj -&gt; unit" Usage="internalEntityEntry.SetStoreGeneratedValue (property, value)" />
      <MemberSignature Language="C#" Value="public void SetStoreGeneratedValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property, object? value);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetStoreGeneratedValue (property As IProperty, value As Object)" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetStoreGeneratedValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStoreGeneratedValue">
      <MemberSignature Language="C#" Value="public void SetStoreGeneratedValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property, object? value, bool setModified = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStoreGeneratedValue(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value, bool setModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetStoreGeneratedValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetStoreGeneratedValue (property As IProperty, value As Object, Optional setModified As Boolean = true)" />
      <MemberSignature Language="F#" Value="abstract member SetStoreGeneratedValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * bool -&gt; unit&#xA;override this.SetStoreGeneratedValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * bool -&gt; unit" Usage="internalEntityEntry.SetStoreGeneratedValue (property, value, setModified)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetStoreGeneratedValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="setModified" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="value">To be added.</param>
        <param name="setModified">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTemporaryValue">
      <MemberSignature Language="C#" Value="public virtual void SetTemporaryValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value, bool setModified = true);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTemporaryValue(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value, bool setModified) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetTemporaryValue (property As IProperty, value As Object, Optional setModified As Boolean = true)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetTemporaryValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * bool -&gt; unit&#xA;override this.SetTemporaryValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * bool -&gt; unit" Usage="internalEntityEntry.SetTemporaryValue (property, value, setModified)" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public void SetTemporaryValue (Microsoft.EntityFrameworkCore.Metadata.IProperty property, object? value, bool setModified = true);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTemporaryValue(class Microsoft.EntityFrameworkCore.Metadata.IProperty property, object value, bool setModified) cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetTemporaryValue (property As IProperty, value As Object, Optional setModified As Boolean = true)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.SetTemporaryValue : Microsoft.EntityFrameworkCore.Metadata.IProperty * obj * bool -&gt; unit" Usage="internalEntityEntry.SetTemporaryValue (property, value, setModified)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="setModified" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="value">To be added.</param>
        <param name="setModified">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedIdentityEntry">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry SharedIdentityEntry { get; set; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry SharedIdentityEntry" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SharedIdentityEntry" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SharedIdentityEntry As InternalEntityEntry" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.SharedIdentityEntry : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry with get, set" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SharedIdentityEntry" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry? SharedIdentityEntry { get; set; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Property SharedIdentityEntry As InternalEntityEntry" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateManager">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager StateManager { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager StateManager" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StateManager As IStateManager" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.StateManager : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager StateManager { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StateManager As IStateManager" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToEntityEntry">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry ToEntityEntry ();" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry ToEntityEntry() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToEntityEntry () As EntityEntry" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member ToEntityEntry : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry&#xA;override this.ToEntityEntry : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry" Usage="internalEntityEntry.ToEntityEntry " />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry ToEntityEntry ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function ToEntityEntry () As EntityEntry" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="internalEntityEntry.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyValue">
      <MemberSignature Language="C#" Value="protected virtual void WritePropertyValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WritePropertyValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WritePropertyValue (propertyBase As IPropertyBase, value As Object)" />
      <MemberSignature Language="F#" Value="abstract member WritePropertyValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit&#xA;override this.WritePropertyValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj -&gt; unit" Usage="internalEntityEntry.WritePropertyValue (propertyBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyValue">
      <MemberSignature Language="C#" Value="protected virtual void WritePropertyValue (Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, bool forMaterialization);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WritePropertyValue(class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, object value, bool forMaterialization) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WritePropertyValue (propertyBase As IPropertyBase, value As Object, forMaterialization As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member WritePropertyValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * bool -&gt; unit&#xA;override this.WritePropertyValue : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * obj * bool -&gt; unit" Usage="internalEntityEntry.WritePropertyValue (propertyBase, value, forMaterialization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="forMaterialization" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="propertyBase">To be added.</param>
        <param name="value">To be added.</param>
        <param name="forMaterialization">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
