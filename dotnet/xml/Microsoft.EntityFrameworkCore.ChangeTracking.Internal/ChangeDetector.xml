<Type Name="ChangeDetector" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector">
  <TypeSignature Language="C#" Value="public class ChangeDetector : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChangeDetector extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector, class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector" />
  <TypeSignature Language="VB.NET" Value="Public Class ChangeDetector&#xA;Implements IChangeDetector" />
  <TypeSignature Language="F#" Value="type ChangeDetector = class&#xA;    interface IChangeDetector&#xA;    interface IPropertyListener" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChangeDetector extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type ChangeDetector = class&#xA;    interface IChangeDetector" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangeDetector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangeDetector (Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; logger, Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/ChangeTracking&gt; logger, class Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions loggingOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking},Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logger As IDiagnosticsLogger(Of DbLoggerCategory.ChangeTracking), loggingOptions As ILoggingOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.ChangeTracking&gt; * Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector (logger, loggingOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+ChangeTracking&gt;" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="loggingOptions" Type="Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="logger">To be added.</param>
        <param name="loggingOptions">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureEvents">
      <MemberSignature Language="C#" Value="public virtual (EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;? DetectingAllChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;? DetectedAllChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;? DetectingEntityChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;? DetectedEntityChanges) CaptureEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ValueTuple`4&lt;class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;&gt; CaptureEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.CaptureEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CaptureEvents () As ValueTuple(Of EventHandler(Of DetectChangesEventArgs), EventHandler(Of DetectedChangesEventArgs), EventHandler(Of DetectEntityChangesEventArgs), EventHandler(Of DetectedEntityChangesEventArgs))" />
      <MemberSignature Language="F#" Value="abstract member CaptureEvents : unit -&gt; ValueTuple&lt;EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;&gt;&#xA;override this.CaptureEvents : unit -&gt; ValueTuple&lt;EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;&gt;" Usage="changeDetector.CaptureEvents " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.CaptureEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;,System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;,System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;,System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="efcore-7.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DetectingAllChanges", "DetectedAllChanges", "DetectingEntityChanges", "DetectedEntityChanges" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DetectingAllChanges", "DetectedAllChanges", "DetectingEntityChanges", "DetectedEntityChanges" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public virtual void DetectChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DetectChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DetectChanges (entry As InternalEntityEntry)" />
      <MemberSignature Language="F#" Value="abstract member DetectChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit&#xA;override this.DetectChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit" Usage="changeDetector.DetectChanges entry" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public virtual void DetectChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DetectChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DetectChanges (stateManager As IStateManager)" />
      <MemberSignature Language="F#" Value="abstract member DetectChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager -&gt; unit&#xA;override this.DetectChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager -&gt; unit" Usage="changeDetector.DetectChanges stateManager" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectedAllChanges">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;? DetectedAllChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; DetectedAllChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectedAllChanges" />
      <MemberSignature Language="VB.NET" Value="Public Event DetectedAllChanges As EventHandler(Of DetectedChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectedAllChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; " Usage="member this.DetectedAllChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectedAllChanges</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectedEntityChanges">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;? DetectedEntityChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; DetectedEntityChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectedEntityChanges" />
      <MemberSignature Language="VB.NET" Value="Public Event DetectedEntityChanges As EventHandler(Of DetectedEntityChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectedEntityChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; " Usage="member this.DetectedEntityChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectedEntityChanges</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectingAllChanges">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;? DetectingAllChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; DetectingAllChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectingAllChanges" />
      <MemberSignature Language="VB.NET" Value="Public Event DetectingAllChanges As EventHandler(Of DetectChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectingAllChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; " Usage="member this.DetectingAllChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectingAllChanges</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectingEntityChanges">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;? DetectingEntityChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; DetectingEntityChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectingEntityChanges" />
      <MemberSignature Language="VB.NET" Value="Public Event DetectingEntityChanges As EventHandler(Of DetectEntityChangesEventArgs) " />
      <MemberSignature Language="F#" Value="member this.DetectingEntityChanges : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; " Usage="member this.DetectingEntityChanges : System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.DetectingEntityChanges</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectNavigationChange">
      <MemberSignature Language="C#" Value="public void DetectNavigationChange (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetectNavigationChange(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectNavigationChange(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.INavigationBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetectNavigationChange (entry As InternalEntityEntry, navigationBase As INavigationBase)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.DetectNavigationChange : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigationBase -&gt; unit" Usage="changeDetector.DetectNavigationChange (entry, navigationBase)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="C#" Value="public bool DetectNavigationChange (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DetectNavigationChange(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase navigationBase) cil managed" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function DetectNavigationChange (entry As InternalEntityEntry, navigationBase As INavigationBase) As Boolean" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.DetectNavigationChange : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.INavigationBase -&gt; bool" Usage="changeDetector.DetectNavigationChange (entry, navigationBase)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-6.0">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-7.0;efcore-8.0">System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationBase" Type="Microsoft.EntityFrameworkCore.Metadata.INavigationBase" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="navigationBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectValueChange">
      <MemberSignature Language="C#" Value="public void DetectValueChange (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetectValueChange(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.DetectValueChange(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetectValueChange (entry As InternalEntityEntry, property As IProperty)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.DetectValueChange : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; unit" Usage="changeDetector.DetectValueChange (entry, property)" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="C#" Value="public bool DetectValueChange (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.IProperty property);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DetectValueChange(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function DetectValueChange (entry As InternalEntityEntry, property As IProperty) As Boolean" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.DetectValueChange : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; bool" Usage="changeDetector.DetectValueChange (entry, property)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-6.0">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-7.0;efcore-8.0">System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDetectedAllChanges">
      <MemberSignature Language="C#" Value="public virtual void OnDetectedAllChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, bool changesFound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetectedAllChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager, bool changesFound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.OnDetectedAllChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDetectedAllChanges (stateManager As IStateManager, changesFound As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnDetectedAllChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * bool -&gt; unit&#xA;override this.OnDetectedAllChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager * bool -&gt; unit" Usage="changeDetector.OnDetectedAllChanges (stateManager, changesFound)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.OnDetectedAllChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="changesFound" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <param name="changesFound">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDetectedEntityChanges">
      <MemberSignature Language="C#" Value="public virtual void OnDetectedEntityChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, bool changesFound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetectedEntityChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry, bool changesFound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.OnDetectedEntityChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDetectedEntityChanges (internalEntityEntry As InternalEntityEntry, changesFound As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnDetectedEntityChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * bool -&gt; unit&#xA;override this.OnDetectedEntityChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * bool -&gt; unit" Usage="changeDetector.OnDetectedEntityChanges (internalEntityEntry, changesFound)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.OnDetectedEntityChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="changesFound" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="internalEntityEntry">To be added.</param>
        <param name="changesFound">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDetectingAllChanges">
      <MemberSignature Language="C#" Value="public virtual void OnDetectingAllChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetectingAllChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager stateManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.OnDetectingAllChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDetectingAllChanges (stateManager As IStateManager)" />
      <MemberSignature Language="F#" Value="abstract member OnDetectingAllChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager -&gt; unit&#xA;override this.OnDetectingAllChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager -&gt; unit" Usage="changeDetector.OnDetectingAllChanges stateManager" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.OnDetectingAllChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateManager" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="stateManager">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDetectingEntityChanges">
      <MemberSignature Language="C#" Value="public virtual void OnDetectingEntityChanges (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetectingEntityChanges(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry internalEntityEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.OnDetectingEntityChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDetectingEntityChanges (internalEntityEntry As InternalEntityEntry)" />
      <MemberSignature Language="F#" Value="abstract member OnDetectingEntityChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit&#xA;override this.OnDetectingEntityChanges : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; unit" Usage="changeDetector.OnDetectingEntityChanges internalEntityEntry" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.OnDetectingEntityChanges(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="internalEntityEntry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="internalEntityEntry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public virtual void PropertyChanged (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool setModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PropertyChanged(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase, bool setModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.PropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PropertyChanged (entry As InternalEntityEntry, propertyBase As IPropertyBase, setModified As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member PropertyChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * bool -&gt; unit&#xA;override this.PropertyChanged : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * bool -&gt; unit" Usage="changeDetector.PropertyChanged (entry, propertyBase, setModified)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener.PropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.PropertyChanged(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
        <Parameter Name="setModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="propertyBase">To be added.</param>
        <param name="setModified">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanging">
      <MemberSignature Language="C#" Value="public virtual void PropertyChanging (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PropertyChanging(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase propertyBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.PropertyChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PropertyChanging (entry As InternalEntityEntry, propertyBase As IPropertyBase)" />
      <MemberSignature Language="F#" Value="abstract member PropertyChanging : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; unit&#xA;override this.PropertyChanging : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase -&gt; unit" Usage="changeDetector.PropertyChanging (entry, propertyBase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPropertyListener.PropertyChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.PropertyChanging(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" />
        <Parameter Name="propertyBase" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="propertyBase">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public virtual void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.ResetState" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetState ()" />
      <MemberSignature Language="F#" Value="abstract member ResetState : unit -&gt; unit&#xA;override this.ResetState : unit -&gt; unit" Usage="changeDetector.ResetState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.ResetState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Resume ()" />
      <MemberSignature Language="F#" Value="abstract member Resume : unit -&gt; unit&#xA;override this.Resume : unit -&gt; unit" Usage="changeDetector.Resume " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.Resume</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEvents">
      <MemberSignature Language="C#" Value="public virtual void SetEvents (EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;? detectingAllChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;? detectedAllChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;? detectingEntityChanges, EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;? detectedEntityChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEvents(class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; detectingAllChanges, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; detectedAllChanges, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; detectingEntityChanges, class System.EventHandler`1&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; detectedEntityChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.SetEvents(System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs},System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs},System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs},System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetEvents (detectingAllChanges As EventHandler(Of DetectChangesEventArgs), detectedAllChanges As EventHandler(Of DetectedChangesEventArgs), detectingEntityChanges As EventHandler(Of DetectEntityChangesEventArgs), detectedEntityChanges As EventHandler(Of DetectedEntityChangesEventArgs))" />
      <MemberSignature Language="F#" Value="abstract member SetEvents : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; * EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; * EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; * EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; -&gt; unit&#xA;override this.SetEvents : EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt; * EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt; * EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt; * EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt; -&gt; unit" Usage="changeDetector.SetEvents (detectingAllChanges, detectedAllChanges, detectingEntityChanges, detectedEntityChanges)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.SetEvents(System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs},System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs},System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs},System.EventHandler{Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="detectingAllChanges" Type="System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs&gt;" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="detectedAllChanges" Type="System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs&gt;" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="detectingEntityChanges" Type="System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs&gt;" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="detectedEntityChanges" Type="System.EventHandler&lt;Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs&gt;" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="detectingAllChanges">To be added.</param>
        <param name="detectedAllChanges">To be added.</param>
        <param name="detectingEntityChanges">To be added.</param>
        <param name="detectedEntityChanges">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipDetectChangesAnnotation">
      <MemberSignature Language="C#" Value="public const string SkipDetectChangesAnnotation;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SkipDetectChangesAnnotation" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.SkipDetectChangesAnnotation" />
      <MemberSignature Language="VB.NET" Value="Public Const SkipDetectChangesAnnotation As String " />
      <MemberSignature Language="F#" Value="val mutable SkipDetectChangesAnnotation : string" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.SkipDetectChangesAnnotation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public virtual void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Suspend() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector.Suspend" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Suspend ()" />
      <MemberSignature Language="F#" Value="abstract member Suspend : unit -&gt; unit&#xA;override this.Suspend : unit -&gt; unit" Usage="changeDetector.Suspend " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector.Suspend</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
