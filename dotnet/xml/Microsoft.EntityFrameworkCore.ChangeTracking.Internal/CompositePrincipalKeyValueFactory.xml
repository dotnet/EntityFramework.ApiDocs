<Type Name="CompositePrincipalKeyValueFactory" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory">
  <TypeSignature Language="C#" Value="public class CompositePrincipalKeyValueFactory : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory&lt;object[]&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositePrincipalKeyValueFactory extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1&lt;object[]&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositePrincipalKeyValueFactory&#xA;Implements IPrincipalKeyValueFactory(Of Object())" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="F#" Value="type CompositePrincipalKeyValueFactory = class&#xA;    interface IPrincipalKeyValueFactory&lt;obj[]&gt;" FrameworkAlternate="efcore-1.0;efcore-1.1" />
  <TypeSignature Language="C#" Value="public class CompositePrincipalKeyValueFactory : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory&lt;object[]&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositePrincipalKeyValueFactory extends Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory implements class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1&lt;object[]&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositePrincipalKeyValueFactory&#xA;Inherits CompositeValueFactory&#xA;Implements IPrincipalKeyValueFactory(Of Object())" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="F#" Value="type CompositePrincipalKeyValueFactory = class&#xA;    inherit CompositeValueFactory&#xA;    interface IPrincipalKeyValueFactory&lt;obj[]&gt;" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
  <TypeSignature Language="C#" Value="public class CompositePrincipalKeyValueFactory : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory, Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;object[]&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositePrincipalKeyValueFactory extends Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory implements class Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1&lt;object[]&gt;" FrameworkAlternate="efcore-5.0;efcore-6.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositePrincipalKeyValueFactory extends Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory implements class Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory, class Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1&lt;object[]&gt;" FrameworkAlternate="efcore-7.0" />
  <TypeSignature Language="F#" Value="type CompositePrincipalKeyValueFactory = class&#xA;    inherit CompositeValueFactory&#xA;    interface IPrincipalKeyValueFactory&lt;obj[]&gt;&#xA;    interface IPrincipalKeyValueFactory" FrameworkAlternate="efcore-7.0" />
  <TypeSignature Language="C#" Value="public class CompositePrincipalKeyValueFactory : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory, Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;&gt;" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositePrincipalKeyValueFactory extends Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory implements class Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory, class Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;&gt;" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositePrincipalKeyValueFactory&#xA;Inherits CompositeValueFactory&#xA;Implements IPrincipalKeyValueFactory(Of IReadOnlyList(Of Object))" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="F#" Value="type CompositePrincipalKeyValueFactory = class&#xA;    inherit CompositeValueFactory&#xA;    interface IPrincipalKeyValueFactory&lt;IReadOnlyList&lt;obj&gt;&gt;&#xA;    interface IPrincipalKeyValueFactory" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory&lt;System.Object[]&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;System.Object[]&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositePrincipalKeyValueFactory (Microsoft.EntityFrameworkCore.Metadata.IKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.IKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As IKey)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory : Microsoft.EntityFrameworkCore.Metadata.IKey -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory" Usage="new Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEquatableKey">
      <MemberSignature Language="C#" Value="public virtual object CreateEquatableKey (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateEquatableKey(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry, bool fromOriginalValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateEquatableKey(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEquatableKey (entry As IUpdateEntry, fromOriginalValues As Boolean) As Object" />
      <MemberSignature Language="F#" Value="abstract member CreateEquatableKey : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * bool -&gt; obj&#xA;override this.CreateEquatableKey : Microsoft.EntityFrameworkCore.Update.IUpdateEntry * bool -&gt; obj" Usage="compositePrincipalKeyValueFactory.CreateEquatableKey (entry, fromOriginalValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory.CreateEquatableKey(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromOriginalValues" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <param name="fromOriginalValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromBuffer">
      <MemberSignature Language="C#" Value="public virtual object CreateFromBuffer (Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateFromBuffer(valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromBuffer (valueBuffer As ValueBuffer) As Object" />
      <MemberSignature Language="F#" Value="abstract member CreateFromBuffer : Microsoft.EntityFrameworkCore.Storage.ValueBuffer -&gt; obj&#xA;override this.CreateFromBuffer : Microsoft.EntityFrameworkCore.Storage.ValueBuffer -&gt; obj" Usage="compositePrincipalKeyValueFactory.CreateFromBuffer valueBuffer" />
      <MemberSignature Language="C#" Value="public virtual object? CreateFromBuffer (Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1.CreateFromBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueBuffer" Type="Microsoft.EntityFrameworkCore.Storage.ValueBuffer" />
      </Parameters>
      <Docs>
        <param name="valueBuffer">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromCurrentValues">
      <MemberSignature Language="C#" Value="public virtual object[] CreateFromCurrentValues (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] CreateFromCurrentValues(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromCurrentValues (entry As InternalEntityEntry) As Object()" />
      <MemberSignature Language="F#" Value="abstract member CreateFromCurrentValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; obj[]&#xA;override this.CreateFromCurrentValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; obj[]" Usage="compositePrincipalKeyValueFactory.CreateFromCurrentValues entry" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromCurrentValues">
      <MemberSignature Language="C#" Value="public virtual object[] CreateFromCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] CreateFromCurrentValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromCurrentValues (entry As IUpdateEntry) As Object()" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member CreateFromCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; obj[]&#xA;override this.CreateFromCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; obj[]" Usage="compositePrincipalKeyValueFactory.CreateFromCurrentValues entry" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;object?&gt; CreateFromCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;object&gt; CreateFromCurrentValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromCurrentValues (entry As IUpdateEntry) As IReadOnlyList(Of Object)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CreateFromCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; System.Collections.Generic.IReadOnlyList&lt;obj&gt;&#xA;override this.CreateFromCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; System.Collections.Generic.IReadOnlyList&lt;obj&gt;" Usage="compositePrincipalKeyValueFactory.CreateFromCurrentValues entry" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1.CreateFromCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">System.Object[]</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromKeyValues">
      <MemberSignature Language="C#" Value="public virtual object? CreateFromKeyValues (System.Collections.Generic.IReadOnlyList&lt;object?&gt; keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateFromKeyValues(class System.Collections.Generic.IReadOnlyList`1&lt;object&gt; keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromKeyValues(System.Collections.Generic.IReadOnlyList{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromKeyValues (keyValues As IReadOnlyList(Of Object)) As Object" />
      <MemberSignature Language="F#" Value="abstract member CreateFromKeyValues : System.Collections.Generic.IReadOnlyList&lt;obj&gt; -&gt; obj&#xA;override this.CreateFromKeyValues : System.Collections.Generic.IReadOnlyList&lt;obj&gt; -&gt; obj" Usage="compositePrincipalKeyValueFactory.CreateFromKeyValues keyValues" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1.CreateFromKeyValues(System.Collections.Generic.IReadOnlyList{System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromKeyValues">
      <MemberSignature Language="C#" Value="public virtual object CreateFromKeyValues (object[] keyValues);" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateFromKeyValues(object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromKeyValues(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromKeyValues (keyValues As Object()) As Object" />
      <MemberSignature Language="F#" Value="abstract member CreateFromKeyValues : obj[] -&gt; obj&#xA;override this.CreateFromKeyValues : obj[] -&gt; obj" Usage="compositePrincipalKeyValueFactory.CreateFromKeyValues keyValues" />
      <MemberSignature Language="C#" Value="public virtual object? CreateFromKeyValues (object?[] keyValues);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromKeyValues(System.Object[])</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1.CreateFromKeyValues(System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromOriginalValues">
      <MemberSignature Language="C#" Value="public virtual object[] CreateFromOriginalValues (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] CreateFromOriginalValues(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromOriginalValues (entry As InternalEntityEntry) As Object()" />
      <MemberSignature Language="F#" Value="abstract member CreateFromOriginalValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; obj[]&#xA;override this.CreateFromOriginalValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; obj[]" Usage="compositePrincipalKeyValueFactory.CreateFromOriginalValues entry" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromOriginalValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromOriginalValues">
      <MemberSignature Language="C#" Value="public virtual object[] CreateFromOriginalValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] CreateFromOriginalValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromOriginalValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromOriginalValues (entry As IUpdateEntry) As Object()" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member CreateFromOriginalValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; obj[]&#xA;override this.CreateFromOriginalValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; obj[]" Usage="compositePrincipalKeyValueFactory.CreateFromOriginalValues entry" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;object?&gt; CreateFromOriginalValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;object&gt; CreateFromOriginalValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromOriginalValues (entry As IUpdateEntry) As IReadOnlyList(Of Object)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CreateFromOriginalValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; System.Collections.Generic.IReadOnlyList&lt;obj&gt;&#xA;override this.CreateFromOriginalValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; System.Collections.Generic.IReadOnlyList&lt;obj&gt;" Usage="compositePrincipalKeyValueFactory.CreateFromOriginalValues entry" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1.CreateFromOriginalValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">System.Object[]</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromRelationshipSnapshot">
      <MemberSignature Language="C#" Value="public virtual object[] CreateFromRelationshipSnapshot (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] CreateFromRelationshipSnapshot(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromRelationshipSnapshot (entry As InternalEntityEntry) As Object()" />
      <MemberSignature Language="F#" Value="abstract member CreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; obj[]&#xA;override this.CreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; obj[]" Usage="compositePrincipalKeyValueFactory.CreateFromRelationshipSnapshot entry" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.CreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromRelationshipSnapshot">
      <MemberSignature Language="C#" Value="public virtual object[] CreateFromRelationshipSnapshot (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] CreateFromRelationshipSnapshot(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.CreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromRelationshipSnapshot (entry As IUpdateEntry) As Object()" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member CreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; obj[]&#xA;override this.CreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; obj[]" Usage="compositePrincipalKeyValueFactory.CreateFromRelationshipSnapshot entry" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;object?&gt; CreateFromRelationshipSnapshot (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;object&gt; CreateFromRelationshipSnapshot(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFromRelationshipSnapshot (entry As IUpdateEntry) As IReadOnlyList(Of Object)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member CreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; System.Collections.Generic.IReadOnlyList&lt;obj&gt;&#xA;override this.CreateFromRelationshipSnapshot : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; System.Collections.Generic.IReadOnlyList&lt;obj&gt;" Usage="compositePrincipalKeyValueFactory.CreateFromRelationshipSnapshot entry" FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1.CreateFromRelationshipSnapshot(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">System.Object[]</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEqualityComparer&lt;object[]&gt; EqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;object[]&gt; EqualityComparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EqualityComparer As IEqualityComparer(Of Object())" />
      <MemberSignature Language="F#" Value="member this.EqualityComparer : System.Collections.Generic.IEqualityComparer&lt;obj[]&gt;" Usage="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.EqualityComparer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.EqualityComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;System.Object[]&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNullPropertyInCurrentValues">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInCurrentValues (Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInCurrentValues(class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.FindNullPropertyInCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindNullPropertyInCurrentValues (entry As InternalEntityEntry) As IProperty" />
      <MemberSignature Language="F#" Value="abstract member FindNullPropertyInCurrentValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty&#xA;override this.FindNullPropertyInCurrentValues : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="compositePrincipalKeyValueFactory.FindNullPropertyInCurrentValues entry" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.FindNullPropertyInCurrentValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNullPropertyInCurrentValues">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInCurrentValues(class Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.FindNullPropertyInCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindNullPropertyInCurrentValues (entry As IUpdateEntry) As IProperty" />
      <MemberSignature Language="F#" Value="abstract member FindNullPropertyInCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty&#xA;override this.FindNullPropertyInCurrentValues : Microsoft.EntityFrameworkCore.Update.IUpdateEntry -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="compositePrincipalKeyValueFactory.FindNullPropertyInCurrentValues entry" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IProperty? FindNullPropertyInCurrentValues (Microsoft.EntityFrameworkCore.Update.IUpdateEntry entry);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1.FindNullPropertyInCurrentValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="Microsoft.EntityFrameworkCore.Update.IUpdateEntry" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entry">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNullPropertyInKeyValues">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInKeyValues (System.Collections.Generic.IReadOnlyList&lt;object?&gt; keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInKeyValues(class System.Collections.Generic.IReadOnlyList`1&lt;object&gt; keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.FindNullPropertyInKeyValues(System.Collections.Generic.IReadOnlyList{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindNullPropertyInKeyValues (keyValues As IReadOnlyList(Of Object)) As IProperty" />
      <MemberSignature Language="F#" Value="abstract member FindNullPropertyInKeyValues : System.Collections.Generic.IReadOnlyList&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty&#xA;override this.FindNullPropertyInKeyValues : System.Collections.Generic.IReadOnlyList&lt;obj&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="compositePrincipalKeyValueFactory.FindNullPropertyInKeyValues keyValues" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1.FindNullPropertyInKeyValues(System.Collections.Generic.IReadOnlyList{System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNullPropertyInKeyValues">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInKeyValues (object[] keyValues);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInKeyValues(object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.FindNullPropertyInKeyValues(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindNullPropertyInKeyValues (keyValues As Object()) As IProperty" />
      <MemberSignature Language="F#" Value="abstract member FindNullPropertyInKeyValues : obj[] -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty&#xA;override this.FindNullPropertyInKeyValues : obj[] -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="compositePrincipalKeyValueFactory.FindNullPropertyInKeyValues keyValues" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInKeyValues (object?[] keyValues);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-3.0;efcore-3.1">M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.FindNullPropertyInKeyValues(System.Object[])</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">M:Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1.FindNullPropertyInKeyValues(System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="keyValues">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNullPropertyInValueBuffer">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInValueBuffer (Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IProperty FindNullPropertyInValueBuffer(valuetype Microsoft.EntityFrameworkCore.Storage.ValueBuffer valueBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory.FindNullPropertyInValueBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindNullPropertyInValueBuffer (valueBuffer As ValueBuffer) As IProperty" />
      <MemberSignature Language="F#" Value="abstract member FindNullPropertyInValueBuffer : Microsoft.EntityFrameworkCore.Storage.ValueBuffer -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty&#xA;override this.FindNullPropertyInValueBuffer : Microsoft.EntityFrameworkCore.Storage.ValueBuffer -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="compositePrincipalKeyValueFactory.FindNullPropertyInValueBuffer valueBuffer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1.FindNullPropertyInValueBuffer(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueBuffer" Type="Microsoft.EntityFrameworkCore.Storage.ValueBuffer" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="valueBuffer">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
