<Type Name="EntityEntryGraphIterator" FullName="Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator">
  <TypeSignature Language="C#" Value="public class EntityEntryGraphIterator : Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityEntryGraphIterator extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityEntryGraphIterator&#xA;Implements IEntityEntryGraphIterator" />
  <TypeSignature Language="F#" Value="type EntityEntryGraphIterator = class&#xA;    interface IEntityEntryGraphIterator" />
  <TypeSignature Language="C#" Value="public class EntityEntryGraphIterator : Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityEntryGraphIterator extends System.Object implements class Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityEntryGraphIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraph">
      <MemberSignature Language="C#" Value="public virtual void TraverseGraph (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,bool&gt; handleNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraverseGraph(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, bool&gt; handleNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TraverseGraph (node As EntityEntryGraphNode, handleNode As Func(Of EntityEntryGraphNode, Boolean))" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraph : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, bool&gt; -&gt; unit&#xA;override this.TraverseGraph : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, bool&gt; -&gt; unit" Usage="entityEntryGraphIterator.TraverseGraph (node, handleNode)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator.TraverseGraph(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Boolean})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="handleNode">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraph&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public virtual void TraverseGraph&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt; node, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,bool&gt; handleNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraverseGraph&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1&lt;!!TState&gt; node, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1&lt;!!TState&gt;, bool&gt; handleNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TraverseGraph(Of TState) (node As EntityEntryGraphNode(Of TState), handleNode As Func(Of EntityEntryGraphNode(Of TState), Boolean))" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraph : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt; * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt;, bool&gt; -&gt; unit&#xA;override this.TraverseGraph : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt; * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt;, bool&gt; -&gt; unit" Usage="entityEntryGraphIterator.TraverseGraph (node, handleNode)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraph``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Boolean})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="handleNode">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraph&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public virtual void TraverseGraph&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, TState state, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,bool&gt; handleNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraverseGraph&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, !!TState state, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, !!TState, bool&gt; handleNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TraverseGraph(Of TState) (node As EntityEntryGraphNode, state As TState, handleNode As Func(Of EntityEntryGraphNode, TState, Boolean))" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraph : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, bool&gt; -&gt; unit&#xA;override this.TraverseGraph : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, bool&gt; -&gt; unit" Usage="entityEntryGraphIterator.TraverseGraph (node, state, handleNode)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraph``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Boolean})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="state">To be added.</param>
        <param name="handleNode">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraphAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task TraverseGraphAsync (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; handleNode, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task TraverseGraphAsync(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; handleNode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraphAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TraverseGraphAsync (node As EntityEntryGraphNode, handleNode As Func(Of EntityEntryGraphNode, CancellationToken, Task(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraphAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.TraverseGraphAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="entityEntryGraphIterator.TraverseGraphAsync (node, handleNode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityEntryGraphIterator.TraverseGraphAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode" Index="0" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="1" FrameworkAlternate="efcore-2.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="handleNode">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraphAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt; node, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; handleNode, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1&lt;!!TState&gt; node, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1&lt;!!TState&gt;, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; handleNode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraphAsync``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TraverseGraphAsync(Of TState) (node As EntityEntryGraphNode(Of TState), handleNode As Func(Of EntityEntryGraphNode(Of TState), CancellationToken, Task(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraphAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt; * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt;, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.TraverseGraphAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt; * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;'State&gt;, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="entityEntryGraphIterator.TraverseGraphAsync (node, handleNode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraphAsync``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode&lt;TState&gt;,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="handleNode">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseGraphAsync&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt; (Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, TState state, Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt; handleNode, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task TraverseGraphAsync&lt;TState&gt;(class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode node, !!TState state, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, !!TState, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; handleNode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraphAsync``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TraverseGraphAsync(Of TState) (node As EntityEntryGraphNode, state As TState, handleNode As Func(Of EntityEntryGraphNode, TState, CancellationToken, Task(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member TraverseGraphAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.TraverseGraphAsync : Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode * 'State * Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode, 'State, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="entityEntryGraphIterator.TraverseGraphAsync (node, state, handleNode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator.TraverseGraphAsync``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="handleNode" Type="System.Func&lt;Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode,TState,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="state">To be added.</param>
        <param name="handleNode">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
