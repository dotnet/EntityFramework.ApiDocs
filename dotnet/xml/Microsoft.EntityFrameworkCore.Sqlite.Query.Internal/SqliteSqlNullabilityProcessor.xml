<Type Name="SqliteSqlNullabilityProcessor" FullName="Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor">
  <TypeSignature Language="C#" Value="public class SqliteSqlNullabilityProcessor : Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqliteSqlNullabilityProcessor extends Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Class SqliteSqlNullabilityProcessor&#xA;Inherits SqlNullabilityProcessor" />
  <TypeSignature Language="F#" Value="type SqliteSqlNullabilityProcessor = class&#xA;    inherit SqlNullabilityProcessor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteSqlNullabilityProcessor (Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As RelationalParameterBasedSqlProcessorDependencies, useRelationalNulls As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor : Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies * bool -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor (dependencies, useRelationalNulls)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies" />
        <Parameter Name="useRelationalNulls" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="useRelationalNulls">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCustomSqlExpression">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression VisitCustomSqlExpression (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, bool allowOptimizedExpansion, out bool nullable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression VisitCustomSqlExpression(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, bool allowOptimizedExpansion, [out] bool&amp; nullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.VisitCustomSqlExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitCustomSqlExpression (sqlExpression As SqlExpression, allowOptimizedExpansion As Boolean, ByRef nullable As Boolean) As SqlExpression" />
      <MemberSignature Language="F#" Value="override this.VisitCustomSqlExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="sqliteSqlNullabilityProcessor.VisitCustomSqlExpression (sqlExpression, allowOptimizedExpansion, nullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="allowOptimizedExpansion" Type="System.Boolean" />
        <Parameter Name="nullable" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <param name="allowOptimizedExpansion">To be added.</param>
        <param name="nullable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGlob">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression VisitGlob (Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression globExpression, bool allowOptimizedExpansion, out bool nullable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression VisitGlob(class Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression globExpression, bool allowOptimizedExpansion, [out] bool&amp; nullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.VisitGlob(Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression,System.Boolean,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitGlob (globExpression As GlobExpression, allowOptimizedExpansion As Boolean, ByRef nullable As Boolean) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member VisitGlob : Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.VisitGlob : Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="sqliteSqlNullabilityProcessor.VisitGlob (globExpression, allowOptimizedExpansion, nullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globExpression" Type="Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression" />
        <Parameter Name="allowOptimizedExpansion" Type="System.Boolean" />
        <Parameter Name="nullable" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="globExpression">To be added.</param>
        <param name="allowOptimizedExpansion">To be added.</param>
        <param name="nullable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRegexp">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression VisitRegexp (Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression regexpExpression, bool allowOptimizedExpansion, out bool nullable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression VisitRegexp(class Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression regexpExpression, bool allowOptimizedExpansion, [out] bool&amp; nullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlNullabilityProcessor.VisitRegexp(Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression,System.Boolean,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitRegexp (regexpExpression As RegexpExpression, allowOptimizedExpansion As Boolean, ByRef nullable As Boolean) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member VisitRegexp : Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.VisitRegexp : Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="sqliteSqlNullabilityProcessor.VisitRegexp (regexpExpression, allowOptimizedExpansion, nullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexpExpression" Type="Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression" />
        <Parameter Name="allowOptimizedExpansion" Type="System.Boolean" />
        <Parameter Name="nullable" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="regexpExpression">To be added.</param>
        <param name="allowOptimizedExpansion">To be added.</param>
        <param name="nullable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
