<Type Name="SqliteParameterBasedSqlProcessorFactory" FullName="Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory">
  <TypeSignature Language="C#" Value="public class SqliteParameterBasedSqlProcessorFactory : Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqliteParameterBasedSqlProcessorFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class SqliteParameterBasedSqlProcessorFactory&#xA;Implements IRelationalParameterBasedSqlProcessorFactory" />
  <TypeSignature Language="F#" Value="type SqliteParameterBasedSqlProcessorFactory = class&#xA;    interface IRelationalParameterBasedSqlProcessorFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteParameterBasedSqlProcessorFactory (Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As RelationalParameterBasedSqlProcessorDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory : Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor Create (bool useRelationalNulls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor Create(bool useRelationalNulls) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteParameterBasedSqlProcessorFactory.Create(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (useRelationalNulls As Boolean) As RelationalParameterBasedSqlProcessor" />
      <MemberSignature Language="F#" Value="abstract member Create : bool -&gt; Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor&#xA;override this.Create : bool -&gt; Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor" Usage="sqliteParameterBasedSqlProcessorFactory.Create useRelationalNulls" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory.Create(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useRelationalNulls" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useRelationalNulls">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
