<Type Name="SqliteSqlExpressionFactory" FullName="Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory">
  <TypeSignature Language="C#" Value="public class SqliteSqlExpressionFactory : Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqliteSqlExpressionFactory extends Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class SqliteSqlExpressionFactory&#xA;Inherits SqlExpressionFactory" />
  <TypeSignature Language="F#" Value="type SqliteSqlExpressionFactory = class&#xA;    inherit SqlExpressionFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteSqlExpressionFactory (Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As SqlExpressionFactoryDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory : Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTypeMapping">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? ApplyTypeMapping (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? sqlExpression, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression ApplyTypeMapping(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ApplyTypeMapping (sqlExpression As SqlExpression, typeMapping As RelationalTypeMapping) As SqlExpression" />
      <MemberSignature Language="F#" Value="override this.ApplyTypeMapping : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="sqliteSqlExpressionFactory.ApplyTypeMapping (sqlExpression, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullIfNotNull("sqlExpression")]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullIfNotNull("sqlExpression")&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Date (Type returnType, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression timestring, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;? modifiers = default, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Date(class System.Type returnType, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression timestring, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; modifiers, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.Date(System.Type,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Date (returnType As Type, timestring As SqlExpression, Optional modifiers As IEnumerable(Of SqlExpression) = Nothing, Optional typeMapping As RelationalTypeMapping = Nothing) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Date : Type * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression&#xA;override this.Date : Type * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" Usage="sqliteSqlExpressionFactory.Date (returnType, timestring, modifiers, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="timestring" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="modifiers" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="returnType">To be added.</param>
        <param name="timestring">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Glob">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression Glob (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression match, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression Glob(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression match, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.Glob(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Glob (match As SqlExpression, pattern As SqlExpression) As GlobExpression" />
      <MemberSignature Language="F#" Value="abstract member Glob : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression&#xA;override this.Glob : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression" Usage="sqliteSqlExpressionFactory.Glob (match, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.GlobExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="pattern" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="pattern">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Regexp">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression Regexp (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression match, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression Regexp(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression match, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.Regexp(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Regexp (match As SqlExpression, pattern As SqlExpression) As RegexpExpression" />
      <MemberSignature Language="F#" Value="abstract member Regexp : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression&#xA;override this.Regexp : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression" Usage="sqliteSqlExpressionFactory.Regexp (match, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Sqlite.Query.SqlExpressions.Internal.RegexpExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="pattern" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="pattern">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Strftime">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Strftime (Type returnType, string format, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression timestring, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;? modifiers = default, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping? typeMapping = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Strftime(class System.Type returnType, string format, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression timestring, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; modifiers, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory.Strftime(System.Type,System.String,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Strftime (returnType As Type, format As String, timestring As SqlExpression, Optional modifiers As IEnumerable(Of SqlExpression) = Nothing, Optional typeMapping As RelationalTypeMapping = Nothing) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Strftime : Type * string * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression&#xA;override this.Strftime : Type * string * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" Usage="sqliteSqlExpressionFactory.Strftime (returnType, format, timestring, modifiers, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="timestring" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="modifiers" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="returnType">To be added.</param>
        <param name="format">To be added.</param>
        <param name="timestring">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
