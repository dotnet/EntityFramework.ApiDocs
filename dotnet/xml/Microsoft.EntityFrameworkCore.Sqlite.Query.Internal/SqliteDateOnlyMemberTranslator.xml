<Type Name="SqliteDateOnlyMemberTranslator" FullName="Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator">
  <TypeSignature Language="C#" Value="public class SqliteDateOnlyMemberTranslator : Microsoft.EntityFrameworkCore.Query.IMemberTranslator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqliteDateOnlyMemberTranslator extends System.Object implements class Microsoft.EntityFrameworkCore.Query.IMemberTranslator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator" />
  <TypeSignature Language="VB.NET" Value="Public Class SqliteDateOnlyMemberTranslator&#xA;Implements IMemberTranslator" />
  <TypeSignature Language="F#" Value="type SqliteDateOnlyMemberTranslator = class&#xA;    interface IMemberTranslator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IMemberTranslator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteDateOnlyMemberTranslator (Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sqlExpressionFactory As ISqlExpressionFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator sqlExpressionFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" Index="0" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteDateOnlyMemberTranslator (Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory sqlExpressionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory sqlExpressionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sqlExpressionFactory As SqliteSqlExpressionFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator : Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator sqlExpressionFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? Translate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression? instance, System.Reflection.MemberInfo member, Type returnType, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Translate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression instance, class System.Reflection.MemberInfo member, class System.Type returnType, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteDateOnlyMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (instance As SqlExpression, member As MemberInfo, returnType As Type, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query)) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member Translate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Reflection.MemberInfo * Type * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.Translate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Reflection.MemberInfo * Type * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="sqliteDateOnlyMemberTranslator.Translate (instance, member, returnType, logger)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">To be added.</param>
        <param name="member">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="logger">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
