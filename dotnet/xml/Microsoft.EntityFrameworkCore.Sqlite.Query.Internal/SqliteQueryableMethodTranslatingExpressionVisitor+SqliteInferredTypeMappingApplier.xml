<Type Name="SqliteQueryableMethodTranslatingExpressionVisitor+SqliteInferredTypeMappingApplier" FullName="Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor+SqliteInferredTypeMappingApplier">
  <TypeSignature Language="C#" Value="protected class SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier : Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit SqliteQueryableMethodTranslatingExpressionVisitor/SqliteInferredTypeMappingApplier extends Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor/RelationalInferredTypeMappingApplier" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier" />
  <TypeSignature Language="VB.NET" Value="Protected Class SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier&#xA;Inherits RelationalQueryableMethodTranslatingExpressionVisitor.RelationalInferredTypeMappingApplier" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor+RelationalInferredTypeMappingApplier</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteInferredTypeMappingApplier (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory sqlExpressionFactory, System.Collections.Generic.IReadOnlyDictionary&lt;(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string),Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping?&gt; inferredTypeMappings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource typeMappingSource, class Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory sqlExpressionFactory, class System.Collections.Generic.IReadOnlyDictionary`2&lt;valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; inferredTypeMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory,System.Collections.Generic.IReadOnlyDictionary{System.ValueTuple{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (model As IModel, typeMappingSource As IRelationalTypeMappingSource, sqlExpressionFactory As SqliteSqlExpressionFactory, inferredTypeMappings As IReadOnlyDictionary(Of ValueTuple(Of TableExpressionBase, String), RelationalTypeMapping))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource * Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory * System.Collections.Generic.IReadOnlyDictionary&lt;ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier (model, typeMappingSource, sqlExpressionFactory, inferredTypeMappings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="typeMappingSource" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" />
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteSqlExpressionFactory" />
        <Parameter Name="inferredTypeMappings" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String&gt;,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="typeMappingSource">To be added.</param>
        <param name="sqlExpressionFactory">To be added.</param>
        <param name="inferredTypeMappings">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTypeMappingsOnJsonEachExpression">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression ApplyTypeMappingsOnJsonEachExpression (Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression jsonEachExpression, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping inferredTypeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression ApplyTypeMappingsOnJsonEachExpression(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression jsonEachExpression, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping inferredTypeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier.ApplyTypeMappingsOnJsonEachExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ApplyTypeMappingsOnJsonEachExpression (jsonEachExpression As TableValuedFunctionExpression, inferredTypeMapping As RelationalTypeMapping) As TableValuedFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member ApplyTypeMappingsOnJsonEachExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression&#xA;override this.ApplyTypeMappingsOnJsonEachExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression" Usage="sqliteInferredTypeMappingApplier.ApplyTypeMappingsOnJsonEachExpression (jsonEachExpression, inferredTypeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jsonEachExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression" />
        <Parameter Name="inferredTypeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="jsonEachExpression">To be added.</param>
        <param name="inferredTypeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.SqliteInferredTypeMappingApplier.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="sqliteInferredTypeMappingApplier.VisitExtension expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
