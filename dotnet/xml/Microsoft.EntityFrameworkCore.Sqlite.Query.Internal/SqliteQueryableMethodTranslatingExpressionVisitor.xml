<Type Name="SqliteQueryableMethodTranslatingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class SqliteQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqliteQueryableMethodTranslatingExpressionVisitor extends Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class SqliteQueryableMethodTranslatingExpressionVisitor&#xA;Inherits RelationalQueryableMethodTranslatingExpressionVisitor" />
  <TypeSignature Language="F#" Value="type SqliteQueryableMethodTranslatingExpressionVisitor = class&#xA;    inherit RelationalQueryableMethodTranslatingExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SqliteQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor parentVisitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor parentVisitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parentVisitor As SqliteQueryableMethodTranslatingExpressionVisitor)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor parentVisitor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentVisitor" Type="Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="parentVisitor">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, relationalDependencies As RelationalQueryableMethodTranslatingExpressionVisitorDependencies, model As IModel)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor (dependencies, relationalDependencies, model)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="relationalDependencies">To be added.</param>
        <param name="model">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteQueryableMethodTranslatingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryableMethodTranslatingExpressionVisitorDependencies, relationalDependencies As RelationalQueryableMethodTranslatingExpressionVisitorDependencies, queryCompilationContext As QueryCompilationContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies * Microsoft.EntityFrameworkCore.Query.QueryCompilationContext -&gt; Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor (dependencies, relationalDependencies, queryCompilationContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="relationalDependencies">To be added.</param>
        <param name="queryCompilationContext">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyInferredTypeMappings">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression ApplyInferredTypeMappings (System.Linq.Expressions.Expression expression, System.Collections.Generic.IReadOnlyDictionary&lt;(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string),Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping?&gt; inferredTypeMappings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression ApplyInferredTypeMappings(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IReadOnlyDictionary`2&lt;valuetype System.ValueTuple`2&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; inferredTypeMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.ApplyInferredTypeMappings(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.ValueTuple{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ApplyInferredTypeMappings (expression As Expression, inferredTypeMappings As IReadOnlyDictionary(Of ValueTuple(Of TableExpressionBase, String), RelationalTypeMapping)) As Expression" />
      <MemberSignature Language="F#" Value="override this.ApplyInferredTypeMappings : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase, string&gt;, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; System.Linq.Expressions.Expression" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.ApplyInferredTypeMappings (expression, inferredTypeMappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="inferredTypeMappings" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.ValueTuple&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.String&gt;,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="inferredTypeMappings">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubqueryVisitor">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateSubqueryVisitor () As QueryableMethodTranslatingExpressionVisitor" />
      <MemberSignature Language="F#" Value="override this.CreateSubqueryVisitor : unit -&gt; Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNaturallyOrdered">
      <MemberSignature Language="C#" Value="protected override bool IsNaturallyOrdered (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsNaturallyOrdered(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.IsNaturallyOrdered(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsNaturallyOrdered (selectExpression As SelectExpression) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsNaturallyOrdered : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; bool" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.IsNaturallyOrdered selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="selectExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformJsonQueryToTable">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TransformJsonQueryToTable (Microsoft.EntityFrameworkCore.Query.JsonQueryExpression jsonQueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TransformJsonQueryToTable(class Microsoft.EntityFrameworkCore.Query.JsonQueryExpression jsonQueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TransformJsonQueryToTable(Microsoft.EntityFrameworkCore.Query.JsonQueryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TransformJsonQueryToTable (jsonQueryExpression As JsonQueryExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TransformJsonQueryToTable : Microsoft.EntityFrameworkCore.Query.JsonQueryExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.TransformJsonQueryToTable jsonQueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jsonQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.JsonQueryExpression" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="jsonQueryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAny">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateAny (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateAny(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateAny(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateAny (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateAny : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.TranslateAny (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateCount">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateCount (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression? predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateCount(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateCount (source As ShapedQueryExpression, predicate As LambdaExpression) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateCount : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.TranslateCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="predicate" Type="System.Linq.Expressions.LambdaExpression" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateElementAtOrDefault">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateElementAtOrDefault (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.Expression index, bool returnDefault);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateElementAtOrDefault(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.Expression index, bool returnDefault) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateElementAtOrDefault (source As ShapedQueryExpression, index As Expression, returnDefault As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateElementAtOrDefault : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.Expression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault (source, index, returnDefault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="returnDefault" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="index">To be added.</param>
        <param name="returnDefault">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateOrderBy">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOrderBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateOrderBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, bool ascending) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateOrderBy (source As ShapedQueryExpression, keySelector As LambdaExpression, ascending As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateOrderBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy (source, keySelector, ascending)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateOrderBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="ascending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="ascending">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePrimitiveCollection">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslatePrimitiveCollection (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, Microsoft.EntityFrameworkCore.Metadata.IProperty? property, string tableAlias);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslatePrimitiveCollection(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, class Microsoft.EntityFrameworkCore.Metadata.IProperty property, string tableAlias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslatePrimitiveCollection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslatePrimitiveCollection (sqlExpression As SqlExpression, property As IProperty, tableAlias As String) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslatePrimitiveCollection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Metadata.IProperty * string -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.TranslatePrimitiveCollection (sqlExpression, property, tableAlias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="tableAlias" Type="System.String" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <param name="property">To be added.</param>
        <param name="tableAlias">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateThenBy">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateThenBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression TranslateThenBy(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, class System.Linq.Expressions.LambdaExpression keySelector, bool ascending) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Sqlite.Query.Internal.SqliteQueryableMethodTranslatingExpressionVisitor.TranslateThenBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateThenBy (source As ShapedQueryExpression, keySelector As LambdaExpression, ascending As Boolean) As ShapedQueryExpression" />
      <MemberSignature Language="F#" Value="override this.TranslateThenBy : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * System.Linq.Expressions.LambdaExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" Usage="sqliteQueryableMethodTranslatingExpressionVisitor.TranslateThenBy (source, keySelector, ascending)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression? TranslateThenBy (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression source, System.Linq.Expressions.LambdaExpression keySelector, bool ascending);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Sqlite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="keySelector" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="ascending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="keySelector">To be added.</param>
        <param name="ascending">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
