<Type Name="ITableMappingBase" FullName="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase">
  <TypeSignature Language="C#" Value="public interface ITableMappingBase : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITableMappingBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITableMappingBase&#xA;Implements IAnnotatable" />
  <TypeSignature Language="F#" Value="type ITableMappingBase = interface&#xA;    interface IAnnotatable" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITableMappingBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="F#" Value="type ITableMappingBase = interface&#xA;    interface IAnnotatable&#xA;    interface IReadOnlyAnnotatable" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ITableMappingBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Represents type base mapping to a table-like object.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase&gt; ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase&gt; ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As IEnumerable(Of IColumnMappingBase)" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the properties mapped to columns on the target table.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.EntityType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntityType As IEntityType" />
      <MemberSignature Language="F#" Value="member this.EntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.EntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the mapped entity type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludesDerivedTypes">
      <MemberSignature Language="C#" Value="public bool IncludesDerivedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludesDerivedTypes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IncludesDerivedTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IncludesDerivedTypes As Boolean" />
      <MemberSignature Language="F#" Value="member this.IncludesDerivedTypes : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IncludesDerivedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the value indicating whether the mapped table-like object includes rows for the derived entity types.
                Set to <see langword="false" /> for inherited mappings.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSharedTablePrincipal">
      <MemberSignature Language="C#" Value="public bool IsSharedTablePrincipal { get; }" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSharedTablePrincipal" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IsSharedTablePrincipal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSharedTablePrincipal As Boolean" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.IsSharedTablePrincipal : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IsSharedTablePrincipal" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public bool? IsSharedTablePrincipal { get; }" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsSharedTablePrincipal" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSharedTablePrincipal As Nullable(Of Boolean)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.IsSharedTablePrincipal : Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IsSharedTablePrincipal" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0">System.Boolean</ReturnType>
        <ReturnType FrameworkAlternate="efcore-7.0;efcore-8.0">System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the value indicating whether this is the mapping for the principal entity type
                if the table-like object is shared. <see langword="null" /> is the table-like object is not shared.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSplitEntityTypePrincipal">
      <MemberSignature Language="C#" Value="public bool IsSplitEntityTypePrincipal { get; }" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSplitEntityTypePrincipal" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IsSplitEntityTypePrincipal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSplitEntityTypePrincipal As Boolean" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="member this.IsSplitEntityTypePrincipal : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IsSplitEntityTypePrincipal" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public bool? IsSplitEntityTypePrincipal { get; }" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsSplitEntityTypePrincipal" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSplitEntityTypePrincipal As Nullable(Of Boolean)" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.IsSplitEntityTypePrincipal : Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IsSplitEntityTypePrincipal" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0">System.Boolean</ReturnType>
        <ReturnType FrameworkAlternate="efcore-7.0;efcore-8.0">System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the value indicating whether this is the mapping for the principal table-like object
                if the entity type is split. <see langword="null" /> is the entity type is not split.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ITableBase Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.ITableBase Table" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.Table" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Table As ITableBase" />
      <MemberSignature Language="F#" Value="member this.Table : Microsoft.EntityFrameworkCore.Metadata.ITableBase" Usage="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.Table" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITableBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the target table-like object.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDebugString">
      <MemberSignature Language="C#" Value="public virtual string ToDebugString (Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions options = Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions.ShortDefault, int indent = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToDebugString(valuetype Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions options, int32 indent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.ToDebugString(Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToDebugString (Optional options As MetadataDebugStringOptions = Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions.ShortDefault, Optional indent As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="abstract member ToDebugString : Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions * int -&gt; string&#xA;override this.ToDebugString : Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions * int -&gt; string" Usage="iTableMappingBase.ToDebugString (options, indent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="indent" Type="System.Int32" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="options">Options for generating the string.</param>
        <param name="indent">The number of indent spaces to use before each new line.</param>
        <summary>
          <para>
                    Creates a human-readable representation of the given metadata.
                </para>
          <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
        </summary>
        <returns>A human-readable representation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeBase">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ITypeBase TypeBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.ITypeBase TypeBase" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.TypeBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeBase As ITypeBase" />
      <MemberSignature Language="F#" Value="member this.TypeBase : Microsoft.EntityFrameworkCore.Metadata.ITypeBase" Usage="Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.TypeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITypeBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the mapped type base.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
