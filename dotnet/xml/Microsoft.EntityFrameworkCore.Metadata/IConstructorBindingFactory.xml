<Type Name="IConstructorBindingFactory" FullName="Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory">
  <TypeSignature Language="C#" Value="public interface IConstructorBindingFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConstructorBindingFactory" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConstructorBindingFactory" />
  <TypeSignature Language="F#" Value="type IConstructorBindingFactory = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IConstructorBindingFactory" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                A factory for finding and creating <see cref="T:Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" /> instances for
                a given CLR constructor.
            </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-constructor-binding">Entity types with constructors</see> for more information and
                    examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetBindings">
      <MemberSignature Language="C#" Value="public void GetBindings (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? serviceOnlyBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBindings(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; constructorBinding, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; serviceOnlyBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetBindings (entityType As IConventionEntityType, ByRef constructorBinding As InstantiationBinding, ByRef serviceOnlyBinding As InstantiationBinding)" />
      <MemberSignature Language="F#" Value="abstract member GetBindings : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * InstantiationBinding * InstantiationBinding -&gt; unit" Usage="iConstructorBindingFactory.GetBindings (entityType, constructorBinding, serviceOnlyBinding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="serviceOnlyBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="constructorBinding">The binding for the constructor with most parameters.</param>
        <param name="serviceOnlyBinding">The binding for the constructor with only service property parameters.</param>
        <summary>
                Create a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" /> for the constructor with most parameters and
                the constructor with only service property parameters.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindings">
      <MemberSignature Language="C#" Value="public void GetBindings (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? serviceOnlyBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBindings(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; constructorBinding, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; serviceOnlyBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetBindings (entityType As IMutableEntityType, ByRef constructorBinding As InstantiationBinding, ByRef serviceOnlyBinding As InstantiationBinding)" />
      <MemberSignature Language="F#" Value="abstract member GetBindings : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * InstantiationBinding * InstantiationBinding -&gt; unit" Usage="iConstructorBindingFactory.GetBindings (entityType, constructorBinding, serviceOnlyBinding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="serviceOnlyBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="constructorBinding">The binding for the constructor with most parameters.</param>
        <param name="serviceOnlyBinding">The binding for the constructor with only service property parameters.</param>
        <summary>
                Create a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" /> for the constructor with most parameters and
                the constructor with only service property parameters.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindings">
      <MemberSignature Language="C#" Value="public void GetBindings (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType complexType, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? serviceOnlyBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBindings(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType complexType, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; constructorBinding, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; serviceOnlyBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetBindings (complexType As IReadOnlyComplexType, ByRef constructorBinding As InstantiationBinding, ByRef serviceOnlyBinding As InstantiationBinding)" />
      <MemberSignature Language="F#" Value="abstract member GetBindings : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType * InstantiationBinding * InstantiationBinding -&gt; unit" Usage="iConstructorBindingFactory.GetBindings (complexType, constructorBinding, serviceOnlyBinding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="serviceOnlyBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexType">The complex type.</param>
        <param name="constructorBinding">The binding for the constructor with most parameters.</param>
        <param name="serviceOnlyBinding">The binding for the constructor with only service property parameters.</param>
        <summary>
                Create a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" /> for the constructor with most parameters and
                the constructor with only service property parameters.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindings">
      <MemberSignature Language="C#" Value="public void GetBindings (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? serviceOnlyBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBindings(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; constructorBinding, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; serviceOnlyBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetBindings (entityType As IReadOnlyEntityType, ByRef constructorBinding As InstantiationBinding, ByRef serviceOnlyBinding As InstantiationBinding)" />
      <MemberSignature Language="F#" Value="abstract member GetBindings : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType * InstantiationBinding * InstantiationBinding -&gt; unit" Usage="iConstructorBindingFactory.GetBindings (entityType, constructorBinding, serviceOnlyBinding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="serviceOnlyBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="constructorBinding">The binding for the constructor with most parameters.</param>
        <param name="serviceOnlyBinding">The binding for the constructor with only service property parameters.</param>
        <summary>
                Create a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" /> for the constructor with most parameters and
                the constructor with only service property parameters.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBindConstructor">
      <MemberSignature Language="C#" Value="public bool TryBindConstructor (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Reflection.ConstructorInfo constructor, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding binding, out System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt; unboundParameters);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBindConstructor(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Reflection.ConstructorInfo constructor, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; binding, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.ParameterInfo&gt;&amp; unboundParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryBindConstructor (entityType As IConventionEntityType, constructor As ConstructorInfo, ByRef binding As InstantiationBinding, ByRef unboundParameters As IEnumerable(Of ParameterInfo)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryBindConstructor : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.ConstructorInfo * InstantiationBinding * seq -&gt; bool" Usage="iConstructorBindingFactory.TryBindConstructor (entityType, constructor, binding, unboundParameters)" />
      <MemberSignature Language="C#" Value="public bool TryBindConstructor (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Reflection.ConstructorInfo constructor, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? binding, out System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt;? unboundParameters);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="unboundParameters" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt;" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(false)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(false)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="constructor">The constructor to use.</param>
        <param name="binding">The binding, or <see langword="null" /> if <see langword="null" /> could be created.</param>
        <param name="unboundParameters">The parameters that could not be bound.</param>
        <summary>
                Attempts to create a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" /> for the given entity type and
                <see cref="T:System.Reflection.ConstructorInfo" /></summary>
        <returns>
          <see langword="true" /> if a binding was created; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBindConstructor">
      <MemberSignature Language="C#" Value="public bool TryBindConstructor (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.ConstructorInfo constructor, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding binding, out System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt; unboundParameters);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBindConstructor(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.ConstructorInfo constructor, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; binding, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.ParameterInfo&gt;&amp; unboundParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryBindConstructor (entityType As IMutableEntityType, constructor As ConstructorInfo, ByRef binding As InstantiationBinding, ByRef unboundParameters As IEnumerable(Of ParameterInfo)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryBindConstructor : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.ConstructorInfo * InstantiationBinding * seq -&gt; bool" Usage="iConstructorBindingFactory.TryBindConstructor (entityType, constructor, binding, unboundParameters)" />
      <MemberSignature Language="C#" Value="public bool TryBindConstructor (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.ConstructorInfo constructor, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? binding, out System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt;? unboundParameters);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="unboundParameters" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt;" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(false)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(false)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <param name="constructor">The constructor to use.</param>
        <param name="binding">The binding, or <see langword="null" /> if <see langword="null" /> could be created.</param>
        <param name="unboundParameters">The parameters that could not be bound.</param>
        <summary>
                Attempts to create a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" /> for the given entity type and
                <see cref="T:System.Reflection.ConstructorInfo" /></summary>
        <returns>
          <see langword="true" /> if a binding was created; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
