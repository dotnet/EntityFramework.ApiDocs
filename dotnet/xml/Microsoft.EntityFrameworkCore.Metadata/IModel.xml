<Type Name="IModel" FullName="Microsoft.EntityFrameworkCore.Metadata.IModel">
  <TypeSignature Language="C#" Value="public interface IModel : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IModel implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IModel&#xA;Implements IAnnotatable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type IModel = interface&#xA;    interface IAnnotatable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="C#" Value="public interface IModel : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IModel implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Interface IModel&#xA;Implements IAnnotatable, IReadOnlyModel" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type IModel = interface&#xA;    interface IReadOnlyModel&#xA;    interface IReadOnlyAnnotatable&#xA;    interface IAnnotatable" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IModel implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Metadata about the shape of entities, the relationships between them, and how they map to
                the database. A model is typically created by overriding the
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" /> method on a derived
                <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and
                    examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType (string name);" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindEntityType (name As String) As IEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="iModel.FindEntityType name" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IEntityType? FindEntityType (string name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the entity type to find.</param>
        <summary>
                Gets the entity with the given name. Returns <see langword="null" /> if no entity type with the given name is found
                or the given CLR type is being used by shared type entity type
                or the entity type has a defining navigation.
            </summary>
        <returns>The entity type, or <see langword="null" /> if none is found.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IEntityType? FindEntityType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindEntityType (type As Type) As IEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="iModel.FindEntityType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">The type to find the corresponding entity type for.</param>
        <summary>
                Gets the entity that maps the given entity class. Returns <see langword="null" /> if no entity type with
                the given CLR type is found or the given CLR type is being used by shared type entity type
                or the entity type has a defining navigation.
            </summary>
        <returns>The entity type, or <see langword="null" /> if none is found.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindEntityType (name As String, definingNavigationName As String, definingEntityType As IEntityType) As IEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="iModel.FindEntityType (name, definingNavigationName, definingEntityType)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IEntityType? FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="definingNavigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the entity type to find.</param>
        <param name="definingNavigationName">The defining navigation of the entity type to find.</param>
        <param name="definingEntityType">The defining entity type of the entity type to find.</param>
        <summary>
                Gets the entity type for the given name, defining navigation name
                and the defining entity type. Returns <see langword="null" /> if no matching entity type is found.
            </summary>
        <returns>The entity type, or <see langword="null" /> if none is found.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IEntityType? FindEntityType (Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindEntityType(class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntityType (type As Type, definingNavigationName As String, definingEntityType As IEntityType) As IEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType&#xA;override this.FindEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="iModel.FindEntityType (type, definingNavigationName, definingEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="definingNavigationName" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">The type of the entity type to find.</param>
        <param name="definingNavigationName">The defining navigation of the entity type to find.</param>
        <param name="definingEntityType">The defining entity type of the entity type to find.</param>
        <summary>
                Gets the entity type for the given name, defining navigation name
                and the defining entity type. Returns <see langword="null" /> if no matching entity type is found.
            </summary>
        <returns>The entity type, or <see langword="null" /> if none is found.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; FindEntityTypes (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; FindEntityTypes(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityTypes(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindEntityTypes (type As Type) As IEnumerable(Of IEntityType)" />
      <MemberSignature Language="F#" Value="abstract member FindEntityTypes : Type -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="iModel.FindEntityTypes type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">The type of the entity type to find.</param>
        <summary>
                Gets the entity types matching the given type.
            </summary>
        <returns>The entity types found.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLeastDerivedEntityTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; FindLeastDerivedEntityTypes (Type type, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,bool&gt;? condition = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; FindLeastDerivedEntityTypes(class System.Type type, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType, bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindLeastDerivedEntityTypes(System.Type,System.Func{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindLeastDerivedEntityTypes (type As Type, Optional condition As Func(Of IReadOnlyEntityType, Boolean) = Nothing) As IEnumerable(Of IEntityType)" />
      <MemberSignature Language="F#" Value="abstract member FindLeastDerivedEntityTypes : Type * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType, bool&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;&#xA;override this.FindLeastDerivedEntityTypes : Type * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType, bool&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="iModel.FindLeastDerivedEntityTypes (type, condition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="condition" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">The base type.</param>
        <param name="condition">An optional condition for filtering entity types.</param>
        <summary>
                Returns the entity types corresponding to the least derived types from the given.
            </summary>
        <returns>List of entity types corresponding to the least derived types from the given.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindRuntimeEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IEntityType? FindRuntimeEntityType (Type type);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType FindRuntimeEntityType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindRuntimeEntityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindRuntimeEntityType (type As Type) As IEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindRuntimeEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType&#xA;override this.FindRuntimeEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="iModel.FindRuntimeEntityType type" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IEntityType? FindRuntimeEntityType (Type? type);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">The type to find the corresponding entity type for.</param>
        <summary>
                Gets the entity that maps the given entity class, where the class may be a proxy derived from the
                actual entity type. Returns <see langword="null" /> if no entity type with the given CLR type is found
                or the given CLR type is being used by shared type entity type
                or the entity type has a defining navigation.
            </summary>
        <returns>The entity type, or <see langword="null" /> if none is found.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTypeMappingConfiguration">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration? FindTypeMappingConfiguration (Type scalarType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration FindTypeMappingConfiguration(class System.Type scalarType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindTypeMappingConfiguration(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindTypeMappingConfiguration (scalarType As Type) As ITypeMappingConfiguration" />
      <MemberSignature Language="F#" Value="abstract member FindTypeMappingConfiguration : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration" Usage="iModel.FindTypeMappingConfiguration scalarType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalarType" Type="System.Type" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="scalarType">The CLR type.</param>
        <summary>
                Finds the pre-convention configuration for a given scalar <see cref="T:System.Type" />.
            </summary>
        <returns>The pre-convention configuration or <see langword="null" /> if none is found.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetEntityTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; GetEntityTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntityTypes () As IEnumerable(Of IEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="iModel.GetEntityTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all entity types defined in the model.
            </summary>
        <returns>All entity types defined in the model.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModelDependencies">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies GetModelDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies GetModelDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.GetModelDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModelDependencies () As RuntimeModelDependencies" />
      <MemberSignature Language="F#" Value="abstract member GetModelDependencies : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies&#xA;override this.GetModelDependencies : unit -&gt; Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies" Usage="iModel.GetModelDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the runtime service dependencies.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeMappingConfigurations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt; GetTypeMappingConfigurations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt; GetTypeMappingConfigurations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.GetTypeMappingConfigurations" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeMappingConfigurations () As IEnumerable(Of ITypeMappingConfiguration)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeMappingConfigurations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt;" Usage="iModel.GetTypeMappingConfigurations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all the pre-convention configurations.
            </summary>
        <returns>The pre-convention configurations.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIndexerMethod">
      <MemberSignature Language="C#" Value="public bool IsIndexerMethod (System.Reflection.MethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIndexerMethod(class System.Reflection.MethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IModel.IsIndexerMethod(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIndexerMethod (methodInfo As MethodInfo) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsIndexerMethod : System.Reflection.MethodInfo -&gt; bool" Usage="iModel.IsIndexerMethod methodInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo" /> to check.</param>
        <summary>
                Gets a value indicating whether the given <see cref="T:System.Reflection.MethodInfo" /> represents an indexer access.
            </summary>
        <returns>To be added.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelDependencies">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies? ModelDependencies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies ModelDependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IModel.ModelDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ModelDependencies As RuntimeModelDependencies" />
      <MemberSignature Language="F#" Value="member this.ModelDependencies : Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.IModel.ModelDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The runtime service dependencies.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
