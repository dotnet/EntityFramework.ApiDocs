<Type Name="IRelationalModel" FullName="Microsoft.EntityFrameworkCore.Metadata.IRelationalModel">
  <TypeSignature Language="C#" Value="public interface IRelationalModel : Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRelationalModel implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRelationalModel&#xA;Implements IAnnotatable" />
  <TypeSignature Language="F#" Value="type IRelationalModel = interface&#xA;    interface IAnnotatable" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRelationalModel implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="F#" Value="type IRelationalModel = interface&#xA;    interface IAnnotatable&#xA;    interface IReadOnlyAnnotatable" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IRelationalModel implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Represents a relational database.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Collation">
      <MemberSignature Language="C#" Value="public virtual string Collation { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string Collation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Collation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Collation As String" />
      <MemberSignature Language="F#" Value="member this.Collation : string" Usage="Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Collation" />
      <MemberSignature Language="C#" Value="public virtual string? Collation { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns the database collation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFunction">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IStoreFunction FindFunction (string name, string schema, System.Collections.Generic.IReadOnlyList&lt;string&gt; parameters);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IStoreFunction FindFunction(string name, string schema, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindFunction(System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindFunction (name As String, schema As String, parameters As IReadOnlyList(Of String)) As IStoreFunction" />
      <MemberSignature Language="F#" Value="abstract member FindFunction : string * string * System.Collections.Generic.IReadOnlyList&lt;string&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" Usage="iRelationalModel.FindFunction (name, schema, parameters)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IStoreFunction? FindFunction (string name, string? schema, System.Collections.Generic.IReadOnlyList&lt;string&gt; parameters);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IStoreFunction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the function.</param>
        <param name="schema">The schema of the function.</param>
        <param name="parameters">A list of parameter types.</param>
        <summary>
                Finds a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" /> with the given signature.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" /> or <see langword="null" /> if no function with the given name was found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindQuery">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ISqlQuery FindQuery (string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.ISqlQuery FindQuery(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindQuery(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindQuery (name As String) As ISqlQuery" />
      <MemberSignature Language="F#" Value="abstract member FindQuery : string -&gt; Microsoft.EntityFrameworkCore.Metadata.ISqlQuery" Usage="iRelationalModel.FindQuery name" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ISqlQuery? FindQuery (string name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ISqlQuery</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the SQL query.</param>
        <summary>
                Gets the SQL query with the given name. Returns <see langword="null" /> if no SQL query with the given name is defined.
            </summary>
        <returns>The SQL query with a given name or <see langword="null" /> if no SQL query with the given name is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSequence">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ISequence FindSequence (string name, string schema);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.ISequence FindSequence(string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindSequence(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSequence (name As String, schema As String) As ISequence" />
      <MemberSignature Language="F#" Value="abstract member FindSequence : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.ISequence&#xA;override this.FindSequence : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.ISequence" Usage="iRelationalModel.FindSequence (name, schema)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ISequence? FindSequence (string name, string? schema);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ISequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The sequence name.</param>
        <param name="schema">The schema that contains the sequence.</param>
        <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> with the given name.
            </summary>
        <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> or <see langword="null" /> if no sequence with the given name in
                the given schema was found.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindStoredProcedure">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure? FindStoredProcedure (string name, string? schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure FindStoredProcedure(string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindStoredProcedure(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStoredProcedure (name As String, schema As String) As IStoreStoredProcedure" />
      <MemberSignature Language="F#" Value="abstract member FindStoredProcedure : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure" Usage="iRelationalModel.FindStoredProcedure (name, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="schema" Type="System.String" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the stored procedure.</param>
        <param name="schema">The schema of the stored procedure.</param>
        <summary>
                Finds a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure" /> with the name.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure" /> or <see langword="null" /> if no stored procedure with the given name was found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTable">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ITable FindTable (string name, string schema);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.ITable FindTable(string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindTable(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindTable (name As String, schema As String) As ITable" />
      <MemberSignature Language="F#" Value="abstract member FindTable : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.ITable" Usage="iRelationalModel.FindTable (name, schema)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ITable? FindTable (string name, string? schema);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the table.</param>
        <param name="schema">The schema of the table.</param>
        <summary>
                Gets the table with the given name. Returns <see langword="null" /> if no table with the given name is defined.
            </summary>
        <returns>The table with a given name or <see langword="null" /> if no table with the given name is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindView">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IView FindView (string name, string schema);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IView FindView(string name, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindView(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindView (name As String, schema As String) As IView" />
      <MemberSignature Language="F#" Value="abstract member FindView : string * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IView" Usage="iRelationalModel.FindView (name, schema)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IView? FindView (string name, string? schema);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the view.</param>
        <param name="schema">The schema of the view.</param>
        <summary>
                Gets the view with the given name. Returns <see langword="null" /> if no view with the given name is defined.
            </summary>
        <returns>The view with a given name or <see langword="null" /> if no view with the given name is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Functions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoreFunction&gt; Functions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IStoreFunction&gt; Functions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Functions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Functions As IEnumerable(Of IStoreFunction)" />
      <MemberSignature Language="F#" Value="member this.Functions : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IStoreFunction&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Functions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoreFunction&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns all user-defined functions contained in the model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IModel Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IModel Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Model" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Model As IModel" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Model" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the full model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Queries">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ISqlQuery&gt; Queries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ISqlQuery&gt; Queries" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Queries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Queries As IEnumerable(Of ISqlQuery)" />
      <MemberSignature Language="F#" Value="member this.Queries : seq&lt;Microsoft.EntityFrameworkCore.Metadata.ISqlQuery&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Queries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ISqlQuery&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns all the SQL queries mapped in the model.
            </summary>
        <value>All the SQL queries mapped in the model.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sequences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ISequence&gt; Sequences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ISequence&gt; Sequences" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Sequences" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Sequences As IEnumerable(Of ISequence)" />
      <MemberSignature Language="F#" Value="member this.Sequences : seq&lt;Microsoft.EntityFrameworkCore.Metadata.ISequence&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Sequences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ISequence&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns all sequences contained in the model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoredProcedures">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure&gt; StoredProcedures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure&gt; StoredProcedures" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.StoredProcedures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StoredProcedures As IEnumerable(Of IStoreStoredProcedure)" />
      <MemberSignature Language="F#" Value="member this.StoredProcedures : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.StoredProcedures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IStoreStoredProcedure&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns all stored procedures contained in the model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITable&gt; Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ITable&gt; Tables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As IEnumerable(Of ITable)" />
      <MemberSignature Language="F#" Value="member this.Tables : seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITable&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITable&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns all the tables mapped in the model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDebugString">
      <MemberSignature Language="C#" Value="public virtual string ToDebugString (Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions options = Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions.ShortDefault, int indent = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToDebugString(valuetype Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions options, int32 indent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.ToDebugString(Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToDebugString (Optional options As MetadataDebugStringOptions = Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions.ShortDefault, Optional indent As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="abstract member ToDebugString : Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions * int -&gt; string&#xA;override this.ToDebugString : Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions * int -&gt; string" Usage="iRelationalModel.ToDebugString (options, indent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="indent" Type="System.Int32" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="options">Options for generating the string.</param>
        <param name="indent">The number of indent spaces to use before each new line.</param>
        <summary>
          <para>
                    Creates a human-readable representation of the given metadata.
                </para>
          <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
        </summary>
        <returns>A human-readable representation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Views">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IView&gt; Views { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IView&gt; Views" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Views" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Views As IEnumerable(Of IView)" />
      <MemberSignature Language="F#" Value="member this.Views : seq&lt;Microsoft.EntityFrameworkCore.Metadata.IView&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Views" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IView&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns all the views mapped in the model.
            </summary>
        <value>All the views mapped in the model.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
