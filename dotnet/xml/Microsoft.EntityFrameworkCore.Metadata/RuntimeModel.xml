<Type Name="RuntimeModel" FullName="Microsoft.EntityFrameworkCore.Metadata.RuntimeModel">
  <TypeSignature Language="C#" Value="public class RuntimeModel : Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBase, Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RuntimeModel extends Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IModel, class Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel" />
  <TypeSignature Language="VB.NET" Value="Public Class RuntimeModel&#xA;Inherits AnnotatableBase&#xA;Implements IRuntimeModel" />
  <TypeSignature Language="F#" Value="type RuntimeModel = class&#xA;    inherit AnnotatableBase&#xA;    interface IRuntimeModel&#xA;    interface IModel&#xA;    interface IReadOnlyModel&#xA;    interface IReadOnlyAnnotatable&#xA;    interface IAnnotatable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IModel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Metadata about the shape of entities, the relationships between them, and how they map to
                the database. A model is typically created by overriding the
                <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" /> method on a derived
                <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
    <remarks>
      <para>
                    This is a light-weight implementation that is constructed from a built model and is not meant to be used at design-time.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and
                    examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuntimeModel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType AddEntityType (string name, Type type, Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType? baseType = default, bool sharedClrType = false, string? discriminatorProperty = default, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy = Microsoft.EntityFrameworkCore.ChangeTrackingStrategy.Snapshot, System.Reflection.PropertyInfo? indexerPropertyInfo = default, bool propertyBag = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType AddEntityType(string name, class System.Type type, class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType baseType, bool sharedClrType, string discriminatorProperty, valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy, class System.Reflection.PropertyInfo indexerPropertyInfo, bool propertyBag) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.AddEntityType(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType,System.Boolean,System.String,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy,System.Reflection.PropertyInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddEntityType (name As String, type As Type, Optional baseType As RuntimeEntityType = Nothing, Optional sharedClrType As Boolean = false, Optional discriminatorProperty As String = Nothing, Optional changeTrackingStrategy As ChangeTrackingStrategy = Microsoft.EntityFrameworkCore.ChangeTrackingStrategy.Snapshot, Optional indexerPropertyInfo As PropertyInfo = Nothing, Optional propertyBag As Boolean = false) As RuntimeEntityType" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : string * Type * Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType * bool * string * Microsoft.EntityFrameworkCore.ChangeTrackingStrategy * System.Reflection.PropertyInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType&#xA;override this.AddEntityType : string * Type * Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType * bool * string * Microsoft.EntityFrameworkCore.ChangeTrackingStrategy * System.Reflection.PropertyInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Usage="runtimeModel.AddEntityType (name, type, baseType, sharedClrType, discriminatorProperty, changeTrackingStrategy, indexerPropertyInfo, propertyBag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="baseType" Type="Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Index="2" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="sharedClrType" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="discriminatorProperty" Type="System.String" Index="4" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" Index="5" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="indexerPropertyInfo" Type="System.Reflection.PropertyInfo" Index="6" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="propertyBag" Type="System.Boolean" Index="7" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the entity type to be added.</param>
        <param name="type">The CLR class that is used to represent instances of this type.</param>
        <param name="sharedClrType">Whether this entity type can share its ClrType with other entities.</param>
        <param name="baseType">The base type of this entity type.</param>
        <param name="discriminatorProperty">The name of the property that will be used for storing a discriminator value.</param>
        <param name="changeTrackingStrategy">The change tracking strategy for this entity type</param>
        <param name="indexerPropertyInfo">The <see cref="T:System.Reflection.PropertyInfo" /> for the indexer on the associated CLR type if one exists.</param>
        <param name="propertyBag">
                A value indicating whether this entity type has an indexer which is able to contain arbitrary properties
                and a method that can be used to determine whether a given indexer property contains a value.
            </param>
        <summary>
                Adds an entity type with a defining navigation to the model.
            </summary>
        <returns>The new entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType AddEntityType (string name, Type type, Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType? baseType = default, bool sharedClrType = false, string? discriminatorProperty = default, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy = Microsoft.EntityFrameworkCore.ChangeTrackingStrategy.Snapshot, System.Reflection.PropertyInfo? indexerPropertyInfo = default, bool propertyBag = false, object? discriminatorValue = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType AddEntityType(string name, class System.Type type, class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType baseType, bool sharedClrType, string discriminatorProperty, valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy, class System.Reflection.PropertyInfo indexerPropertyInfo, bool propertyBag, object discriminatorValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.AddEntityType(System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType,System.Boolean,System.String,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy,System.Reflection.PropertyInfo,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddEntityType (name As String, type As Type, Optional baseType As RuntimeEntityType = Nothing, Optional sharedClrType As Boolean = false, Optional discriminatorProperty As String = Nothing, Optional changeTrackingStrategy As ChangeTrackingStrategy = Microsoft.EntityFrameworkCore.ChangeTrackingStrategy.Snapshot, Optional indexerPropertyInfo As PropertyInfo = Nothing, Optional propertyBag As Boolean = false, Optional discriminatorValue As Object = Nothing) As RuntimeEntityType" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : string * Type * Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType * bool * string * Microsoft.EntityFrameworkCore.ChangeTrackingStrategy * System.Reflection.PropertyInfo * bool * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType&#xA;override this.AddEntityType : string * Type * Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType * bool * string * Microsoft.EntityFrameworkCore.ChangeTrackingStrategy * System.Reflection.PropertyInfo * bool * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Usage="runtimeModel.AddEntityType (name, type, baseType, sharedClrType, discriminatorProperty, changeTrackingStrategy, indexerPropertyInfo, propertyBag, discriminatorValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="baseType" Type="Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Index="2" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="sharedClrType" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="discriminatorProperty" Type="System.String" Index="4" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" Index="5" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="indexerPropertyInfo" Type="System.Reflection.PropertyInfo" Index="6" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="propertyBag" Type="System.Boolean" Index="7" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="discriminatorValue" Type="System.Object" Index="8" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the entity type to be added.</param>
        <param name="type">The CLR class that is used to represent instances of this type.</param>
        <param name="sharedClrType">Whether this entity type can share its ClrType with other entities.</param>
        <param name="baseType">The base type of this entity type.</param>
        <param name="discriminatorProperty">The name of the property that will be used for storing a discriminator value.</param>
        <param name="changeTrackingStrategy">The change tracking strategy for this entity type.</param>
        <param name="indexerPropertyInfo">The <see cref="T:System.Reflection.PropertyInfo" /> for the indexer on the associated CLR type if one exists.</param>
        <param name="propertyBag">
                A value indicating whether this entity type has an indexer which is able to contain arbitrary properties
                and a method that can be used to determine whether a given indexer property contains a value.
            </param>
        <param name="discriminatorValue">The discriminator value for this entity type.</param>
        <summary>
                Adds an entity type with a defining navigation to the model.
            </summary>
        <returns>The new entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTypeMappingConfiguration">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeMappingConfiguration AddTypeMappingConfiguration (Type clrType, int? maxLength = default, bool? unicode = default, int? precision = default, int? scale = default, Type? providerPropertyType = default, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? valueConverter = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeMappingConfiguration AddTypeMappingConfiguration(class System.Type clrType, valuetype System.Nullable`1&lt;int32&gt; maxLength, valuetype System.Nullable`1&lt;bool&gt; unicode, valuetype System.Nullable`1&lt;int32&gt; precision, valuetype System.Nullable`1&lt;int32&gt; scale, class System.Type providerPropertyType, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter valueConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.AddTypeMappingConfiguration(System.Type,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Type,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTypeMappingConfiguration (clrType As Type, Optional maxLength As Nullable(Of Integer) = Nothing, Optional unicode As Nullable(Of Boolean) = Nothing, Optional precision As Nullable(Of Integer) = Nothing, Optional scale As Nullable(Of Integer) = Nothing, Optional providerPropertyType As Type = Nothing, Optional valueConverter As ValueConverter = Nothing) As RuntimeTypeMappingConfiguration" />
      <MemberSignature Language="F#" Value="abstract member AddTypeMappingConfiguration : Type * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Type * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeMappingConfiguration&#xA;override this.AddTypeMappingConfiguration : Type * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Type * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeMappingConfiguration" Usage="runtimeModel.AddTypeMappingConfiguration (clrType, maxLength, unicode, precision, scale, providerPropertyType, valueConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeMappingConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="providerPropertyType" Type="System.Type" />
        <Parameter Name="valueConverter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
      </Parameters>
      <Docs>
        <param name="clrType">The type of value the property will hold.</param>
        <param name="maxLength">The maximum length of data that is allowed in this property type.</param>
        <param name="unicode">A value indicating whether or not the property can persist Unicode characters.</param>
        <param name="precision">The precision of data that is allowed in this property type.</param>
        <param name="scale">The scale of data that is allowed in this property type.</param>
        <param name="providerPropertyType">
                The type that the property value will be converted to before being sent to the database provider.
            </param>
        <param name="valueConverter">The custom <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> for this type.</param>
        <summary>
                Adds configuration for a scalar type.
            </summary>
        <returns>The newly created property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugView">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.DebugView" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DebugView As DebugView" />
      <MemberSignature Language="F#" Value="member this.DebugView : Microsoft.EntityFrameworkCore.Infrastructure.DebugView" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.DebugView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.DebugView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAdHocEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType? FindAdHocEntityType (Type clrType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType FindAdHocEntityType(class System.Type clrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.FindAdHocEntityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindAdHocEntityType (clrType As Type) As RuntimeEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindAdHocEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType&#xA;override this.FindAdHocEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Usage="runtimeModel.FindAdHocEntityType clrType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="clrType">The CLR type of the entity type to find.</param>
        <summary>
                Gets the entity type with the given name. Returns <see langword="null" /> if no entity type with the given name has been
                mapped as an ad-hoc type.
            </summary>
        <returns>The entity type, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType? FindEntityType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType FindEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.FindEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindEntityType (name As String) As RuntimeEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType&#xA;override this.FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Usage="runtimeModel.FindEntityType name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the entity type to find.</param>
        <summary>
                Gets the entity type with the given name. Returns <see langword="null" /> if no entity type with the given name is found
                or the given CLR type is being used by shared type entity type
                or the entity type has a defining navigation.
            </summary>
        <returns>The entity type, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAdHocEntityTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; GetAdHocEntityTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; GetAdHocEntityTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.GetAdHocEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAdHocEntityTypes () As IEnumerable(Of IReadOnlyEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetAdHocEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;&#xA;override this.GetAdHocEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;" Usage="runtimeModel.GetAdHocEntityTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all ad-hoc entity types defined in the model.
            </summary>
        <returns>All entity types defined in the model.</returns>
        <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAdHocEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType GetOrAddAdHocEntityType (Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType GetOrAddAdHocEntityType(class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.GetOrAddAdHocEntityType(Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrAddAdHocEntityType (entityType As RuntimeEntityType) As RuntimeEntityType" />
      <MemberSignature Language="F#" Value="abstract member GetOrAddAdHocEntityType : Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType&#xA;override this.GetOrAddAdHocEntityType : Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Usage="runtimeModel.GetOrAddAdHocEntityType entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The entity type.</param>
        <summary>
                Adds an ad-hoc entity type to the model.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType? IModel.FindEntityType (string name);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IModel#FindEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (name As String) As IEntityType Implements IModel.FindEntityType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType name" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType IModel.FindEntityType (string name);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType? IModel.FindEntityType (Type type);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IModel#FindEntityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (type As Type) As IEntityType Implements IModel.FindEntityType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType type" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType IModel.FindEntityType (Type type);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType? IModel.FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IModel#FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (name As String, definingNavigationName As String, definingEntityType As IEntityType) As IEntityType Implements IModel.FindEntityType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType (name, definingNavigationName, definingEntityType)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType IModel.FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IEntityType definingEntityType);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityTypes">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; IModel.FindEntityTypes (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityTypes(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IModel#FindEntityTypes(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityTypes (type As Type) As IEnumerable(Of IEntityType) Implements IModel.FindEntityTypes" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityTypes : Type -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityTypes : Type -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityTypes type" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityTypes(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.FindTypeMappingConfiguration">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration? IModel.FindTypeMappingConfiguration (Type propertyType);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration Microsoft.EntityFrameworkCore.Metadata.IModel.FindTypeMappingConfiguration(class System.Type propertyType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IModel#FindTypeMappingConfiguration(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function FindTypeMappingConfiguration (propertyType As Type) As ITypeMappingConfiguration Implements IModel.FindTypeMappingConfiguration" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IModel.FindTypeMappingConfiguration : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IModel.FindTypeMappingConfiguration : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IModel.FindTypeMappingConfiguration propertyType" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration IModel.FindTypeMappingConfiguration (Type propertyType);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.FindTypeMappingConfiguration(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="propertyType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; IModel.GetEntityTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt; Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IModel#GetEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Function GetEntityTypes () As IEnumerable(Of IEntityType) Implements IModel.GetEntityTypes" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.GetTypeMappingConfigurations">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt; IModel.GetTypeMappingConfigurations ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt; Microsoft.EntityFrameworkCore.Metadata.IModel.GetTypeMappingConfigurations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IModel#GetTypeMappingConfigurations" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeMappingConfigurations () As IEnumerable(Of ITypeMappingConfiguration) Implements IModel.GetTypeMappingConfigurations" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IModel.GetTypeMappingConfigurations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IModel.GetTypeMappingConfigurations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt;" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IModel.GetTypeMappingConfigurations " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.GetTypeMappingConfigurations</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IModel.IsIndexerMethod">
      <MemberSignature Language="C#" Value="bool IModel.IsIndexerMethod (System.Reflection.MethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.IModel.IsIndexerMethod(class System.Reflection.MethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IModel#IsIndexerMethod(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Function IsIndexerMethod (methodInfo As MethodInfo) As Boolean Implements IModel.IsIndexerMethod" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IModel.IsIndexerMethod : System.Reflection.MethodInfo -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IModel.IsIndexerMethod : System.Reflection.MethodInfo -&gt; bool" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IModel.IsIndexerMethod methodInfo" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IModel.IsIndexerMethod(System.Reflection.MethodInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.RelationalModel">
      <MemberSignature Language="C#" Value="object? Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.RelationalModel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.RelationalModel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#Internal#IRuntimeModel#RelationalModel" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property RelationalModel As Object Implements IRuntimeModel.RelationalModel" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.RelationalModel : obj" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.RelationalModel" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.RelationalModel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.SkipDetectChanges">
      <MemberSignature Language="C#" Value="bool Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.SkipDetectChanges { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.SkipDetectChanges" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#Internal#IRuntimeModel#SkipDetectChanges" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SkipDetectChanges As Boolean Implements IRuntimeModel.SkipDetectChanges" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.SkipDetectChanges : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.SkipDetectChanges" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.SkipDetectChanges</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType? IReadOnlyModel.FindEntityType (string name);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#FindEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (name As String) As IReadOnlyEntityType Implements IReadOnlyModel.FindEntityType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType name" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType IReadOnlyModel.FindEntityType (string name);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType? IReadOnlyModel.FindEntityType (Type type);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#FindEntityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (type As Type) As IReadOnlyEntityType Implements IReadOnlyModel.FindEntityType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType type" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType IReadOnlyModel.FindEntityType (Type type);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType? IReadOnlyModel.FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType definingEntityType);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (name As String, definingNavigationName As String, definingEntityType As IReadOnlyEntityType) As IReadOnlyEntityType Implements IReadOnlyModel.FindEntityType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType (name, definingNavigationName, definingEntityType)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType IReadOnlyModel.FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType definingEntityType);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType? IReadOnlyModel.FindEntityType (Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType definingEntityType);" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#FindEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityType (type As Type, definingNavigationName As String, definingEntityType As IReadOnlyEntityType) As IReadOnlyEntityType Implements IReadOnlyModel.FindEntityType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType (type, definingNavigationName, definingEntityType)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType IReadOnlyModel.FindEntityType (Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType definingEntityType);" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="definingNavigationName">To be added.</param>
        <param name="definingEntityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityTypes">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; IReadOnlyModel.FindEntityTypes (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityTypes(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#FindEntityTypes(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function FindEntityTypes (type As Type) As IEnumerable(Of IReadOnlyEntityType) Implements IReadOnlyModel.FindEntityTypes" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityTypes : Type -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityTypes : Type -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityTypes type" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityTypes(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy IReadOnlyModel.GetChangeTrackingStrategy ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetChangeTrackingStrategy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#GetChangeTrackingStrategy" />
      <MemberSignature Language="VB.NET" Value="Function GetChangeTrackingStrategy () As ChangeTrackingStrategy Implements IReadOnlyModel.GetChangeTrackingStrategy" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetChangeTrackingStrategy : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetChangeTrackingStrategy : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetChangeTrackingStrategy " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetChangeTrackingStrategy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTrackingStrategy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetEntityTypes">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; IReadOnlyModel.GetEntityTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetEntityTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#GetEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Function GetEntityTypes () As IEnumerable(Of IReadOnlyEntityType) Implements IReadOnlyModel.GetEntityTypes" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetEntityTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetEntityTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetPropertyAccessMode">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.PropertyAccessMode IReadOnlyModel.GetPropertyAccessMode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetPropertyAccessMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#GetPropertyAccessMode" />
      <MemberSignature Language="VB.NET" Value="Function GetPropertyAccessMode () As PropertyAccessMode Implements IReadOnlyModel.GetPropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetPropertyAccessMode : unit -&gt; Microsoft.EntityFrameworkCore.PropertyAccessMode&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetPropertyAccessMode : unit -&gt; Microsoft.EntityFrameworkCore.PropertyAccessMode" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetPropertyAccessMode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetPropertyAccessMode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.PropertyAccessMode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.IsShared">
      <MemberSignature Language="C#" Value="bool IReadOnlyModel.IsShared (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.IsShared(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#IsShared(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function IsShared (type As Type) As Boolean Implements IReadOnlyModel.IsShared" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.IsShared : Type -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.IsShared : Type -&gt; bool" Usage="runtimeModel.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.IsShared type" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.IsShared(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.ModelId">
      <MemberSignature Language="C#" Value="Guid Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.ModelId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.ModelId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyModel#ModelId" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ModelId As Guid Implements IReadOnlyModel.ModelId" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.ModelId : Guid" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.ModelId" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.ModelId</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ModelId">
      <MemberSignature Language="C#" Value="public virtual Guid ModelId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ModelId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.ModelId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ModelId As Guid" />
      <MemberSignature Language="F#" Value="member this.ModelId : Guid with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.ModelId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSkipDetectChanges">
      <MemberSignature Language="C#" Value="public virtual void SetSkipDetectChanges (bool skipDetectChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSkipDetectChanges(bool skipDetectChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeModel.SetSkipDetectChanges(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetSkipDetectChanges (skipDetectChanges As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetSkipDetectChanges : bool -&gt; unit&#xA;override this.SetSkipDetectChanges : bool -&gt; unit" Usage="runtimeModel.SetSkipDetectChanges skipDetectChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipDetectChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="skipDetectChanges">To be added.</param>
        <summary>
                Sets a value indicating whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> should be called.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
