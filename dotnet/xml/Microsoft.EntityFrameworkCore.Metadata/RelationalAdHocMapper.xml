<Type Name="RelationalAdHocMapper" FullName="Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapper">
  <TypeSignature Language="C#" Value="public class RelationalAdHocMapper : Microsoft.EntityFrameworkCore.Metadata.AdHocMapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RelationalAdHocMapper extends Microsoft.EntityFrameworkCore.Metadata.AdHocMapper" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapper" />
  <TypeSignature Language="VB.NET" Value="Public Class RelationalAdHocMapper&#xA;Inherits AdHocMapper" />
  <TypeSignature Language="F#" Value="type RelationalAdHocMapper = class&#xA;    inherit AdHocMapper" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.AdHocMapper</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Creates ad-hoc mappings of CLR types to entity types after the model has been built.
            </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelationalAdHocMapper (Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies dependencies, Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapperDependencies relationalDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies dependencies, class Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapperDependencies relationalDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapper.#ctor(Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies,Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapperDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As AdHocMapperDependencies, relationalDependencies As RelationalAdHocMapperDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapper : Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies * Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapperDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapper" Usage="new Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapper (dependencies, relationalDependencies)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapperDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="relationalDependencies">To be added.</param>
        <summary>
                Do not call this constructor directly from either provider or application code as it may change
                as new dependencies are added. Instead, use this type in your constructor so that an instance
                will be created and injected automatically by the dependency injection container. To create
                an instance with some dependent services replaced, first resolve the object from the dependency
                injection container, then replace selected services using the C# 'with' operator. Do not call
                the constructor at any point in this process.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildConventionSet">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet BuildConventionSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet BuildConventionSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapper.BuildConventionSet" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BuildConventionSet () As ConventionSet" />
      <MemberSignature Language="F#" Value="override this.BuildConventionSet : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" Usage="relationalAdHocMapper.BuildConventionSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RelationalDependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapperDependencies RelationalDependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapperDependencies RelationalDependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapper.RelationalDependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property RelationalDependencies As RelationalAdHocMapperDependencies" />
      <MemberSignature Language="F#" Value="member this.RelationalDependencies : Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapperDependencies" Usage="Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapper.RelationalDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RelationalAdHocMapperDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Relational-specific dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
