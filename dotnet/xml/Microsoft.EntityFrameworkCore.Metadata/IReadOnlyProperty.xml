<Type Name="IReadOnlyProperty" FullName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty">
  <TypeSignature Language="C#" Value="public interface IReadOnlyProperty : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReadOnlyProperty implements class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReadOnlyProperty&#xA;Implements IReadOnlyPropertyBase" />
  <TypeSignature Language="F#" Value="type IReadOnlyProperty = interface&#xA;    interface IReadOnlyPropertyBase&#xA;    interface IReadOnlyAnnotatable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IReadOnlyProperty implements class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Represents a scalar property of a structural type.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="DeclaringEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType DeclaringEntityType { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringEntityType As IReadOnlyEntityType" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="member this.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType DeclaringEntityType { get; }" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringEntityType As IReadOnlyEntityType" FrameworkAlternate="efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Use DeclaringType and cast to IReadOnlyEntityType or IReadOnlyComplexType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use DeclaringType and cast to IReadOnlyEntityType or IReadOnlyComplexType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the entity type that this property belongs to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContainingPrimaryKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey? FindContainingPrimaryKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey FindContainingPrimaryKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindContainingPrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Public Function FindContainingPrimaryKey () As IReadOnlyKey" />
      <MemberSignature Language="F#" Value="abstract member FindContainingPrimaryKey : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey" Usage="iReadOnlyProperty.FindContainingPrimaryKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
        <returns>The primary that use this property, or <see langword="null" /> if it is not part of the primary key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFirstPrincipal">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty? FindFirstPrincipal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty FindFirstPrincipal() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindFirstPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindFirstPrincipal () As IReadOnlyProperty" />
      <MemberSignature Language="F#" Value="abstract member FindFirstPrincipal : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&#xA;override this.FindFirstPrincipal : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" Usage="iReadOnlyProperty.FindFirstPrincipal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Finds the first principal property that the given property is constrained by
                if the given property is part of a foreign key.
            </summary>
        <returns>The first associated principal property, or <see langword="null" /> if none exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTypeMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? FindTypeMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping FindTypeMapping() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindTypeMapping" />
      <MemberSignature Language="VB.NET" Value="Public Function FindTypeMapping () As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindTypeMapping : unit -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="iReadOnlyProperty.FindTypeMapping " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the type mapping for this property.
            </summary>
        <returns>The type mapping, or <see langword="null" /> if none was found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAfterSaveBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior GetAfterSaveBehavior ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior GetAfterSaveBehavior() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetAfterSaveBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAfterSaveBehavior () As PropertySaveBehavior" />
      <MemberSignature Language="F#" Value="abstract member GetAfterSaveBehavior : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Usage="iReadOnlyProperty.GetAfterSaveBehavior " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether or not this property can be modified after the entity is
                saved to the database.
            </summary>
        <returns>The after save behavior for this property.</returns>
        <remarks>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a new value is assigned to this property after the entity exists in the database.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any modification to the
                    property value of an entity that already exists in the database will be ignored.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBeforeSaveBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior GetBeforeSaveBehavior ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior GetBeforeSaveBehavior() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetBeforeSaveBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBeforeSaveBehavior () As PropertySaveBehavior" />
      <MemberSignature Language="F#" Value="abstract member GetBeforeSaveBehavior : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Usage="iReadOnlyProperty.GetBeforeSaveBehavior " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether or not this property can be modified before the entity is
                saved to the database.
            </summary>
        <returns>The before save behavior for this property.</returns>
        <remarks>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a value is assigned to this property when it is in
                    the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any value
                    set will be ignored when it is in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingForeignKeys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt; GetContainingForeignKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt; GetContainingForeignKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainingForeignKeys () As IEnumerable(Of IReadOnlyForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member GetContainingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt;" Usage="iReadOnlyProperty.GetContainingForeignKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all foreign keys that use this property (including composite foreign keys in which this property
                is included).
            </summary>
        <returns>The foreign keys that use this property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingIndexes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex&gt; GetContainingIndexes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex&gt; GetContainingIndexes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingIndexes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainingIndexes () As IEnumerable(Of IReadOnlyIndex)" />
      <MemberSignature Language="F#" Value="abstract member GetContainingIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex&gt;" Usage="iReadOnlyProperty.GetContainingIndexes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all indexes that use this property (including composite indexes in which this property
                is included).
            </summary>
        <returns>The indexes that use this property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingKeys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&gt; GetContainingKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&gt; GetContainingKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingKeys" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainingKeys () As IEnumerable(Of IReadOnlyKey)" />
      <MemberSignature Language="F#" Value="abstract member GetContainingKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&gt;" Usage="iReadOnlyProperty.GetContainingKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all primary or alternate keys that use this property (including composite keys in which this property
                is included).
            </summary>
        <returns>The primary and alternate keys that use this property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IReadOnlyElementType? GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyElementType GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementType () As IReadOnlyElementType" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyElementType" Usage="iReadOnlyProperty.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyElementType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the configuration for elements of the primitive collection represented by this property.
            </summary>
        <returns>The configuration for the elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJsonValueReaderWriter">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter? GetJsonValueReaderWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter GetJsonValueReaderWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetJsonValueReaderWriter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetJsonValueReaderWriter () As JsonValueReaderWriter" />
      <MemberSignature Language="F#" Value="abstract member GetJsonValueReaderWriter : unit -&gt; Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" Usage="iReadOnlyProperty.GetJsonValueReaderWriter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" /> for this property, or <see langword="null" /> if none is set.
            </summary>
        <returns>The reader/writer, or <see langword="null" /> if none has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? GetKeyValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetKeyValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetKeyValueComparer" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKeyValueComparer () As ValueComparer" />
      <MemberSignature Language="F#" Value="abstract member GetKeyValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="iReadOnlyProperty.GetKeyValueComparer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> to use with keys for this property, or <see langword="null" /> if none is set.
            </summary>
        <returns>The comparer, or <see langword="null" /> if none has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaxLength">
      <MemberSignature Language="C#" Value="public int? GetMaxLength ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;int32&gt; GetMaxLength() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetMaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMaxLength () As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member GetMaxLength : unit -&gt; Nullable&lt;int&gt;" Usage="iReadOnlyProperty.GetMaxLength " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the maximum length of data that is allowed in this property. For example, if the property is a <see cref="T:System.String" />
                then this is the maximum number of characters.
            </summary>
        <returns>
                The maximum length, <c>-1</c> if the property has no maximum length, or <see langword="null" /> if the maximum length hasn't been
                set.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrecision">
      <MemberSignature Language="C#" Value="public int? GetPrecision ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;int32&gt; GetPrecision() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrecision" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrecision () As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member GetPrecision : unit -&gt; Nullable&lt;int&gt;" Usage="iReadOnlyProperty.GetPrecision " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the precision of data that is allowed in this property.
                For example, if the property is a <see cref="T:System.Decimal" /> then this is the maximum number of digits.
            </summary>
        <returns>The precision, or <see langword="null" /> if none is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrincipals">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; GetPrincipals ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; GetPrincipals() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrincipals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPrincipals () As IReadOnlyList(Of IReadOnlyProperty)" />
      <MemberSignature Language="F#" Value="abstract member GetPrincipals : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;&#xA;override this.GetPrincipals : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Usage="iReadOnlyProperty.GetPrincipals " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Finds the list of principal properties including the given property that the given property is constrained by
                if the given property is part of a foreign key.
            </summary>
        <returns>The list of all associated principal properties including the given property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrincipals&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;T&gt; GetPrincipals&lt;T&gt; () where T : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; GetPrincipals&lt;(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrincipals``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPrincipals(Of T As IReadOnlyProperty) () As IReadOnlyList(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetPrincipals : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;'T (requires 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)&gt; (requires 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)&#xA;override this.GetPrincipals : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;'T (requires 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)&gt; (requires 'T :&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)" Usage="iReadOnlyProperty.GetPrincipals " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>
                Finds the list of principal properties including the given property that the given property is constrained by
                if the given property is part of a foreign key.
            </summary>
        <returns>The list of all associated principal properties including the given property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviderClrType">
      <MemberSignature Language="C#" Value="public Type? GetProviderClrType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetProviderClrType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderClrType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProviderClrType () As Type" />
      <MemberSignature Language="F#" Value="abstract member GetProviderClrType : unit -&gt; Type" Usage="iReadOnlyProperty.GetProviderClrType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the type that the property value will be converted to before being sent to the database provider.
            </summary>
        <returns>The provider type, or <see langword="null" /> if none has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviderValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? GetProviderValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetProviderValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderValueComparer" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProviderValueComparer () As ValueComparer" />
      <MemberSignature Language="F#" Value="abstract member GetProviderValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="iReadOnlyProperty.GetProviderValueComparer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> to use for the provider values for this property.
            </summary>
        <returns>The comparer, or <see langword="null" /> if none has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScale">
      <MemberSignature Language="C#" Value="public int? GetScale ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;int32&gt; GetScale() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetScale" />
      <MemberSignature Language="VB.NET" Value="Public Function GetScale () As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member GetScale : unit -&gt; Nullable&lt;int&gt;" Usage="iReadOnlyProperty.GetScale " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the scale of data that is allowed in this property.
                For example, if the property is a <see cref="T:System.Decimal" /> then this is the maximum number of decimal places.
            </summary>
        <returns>The scale, or <see langword="null" /> if none is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping GetTypeMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping GetTypeMapping() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetTypeMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeMapping () As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member GetTypeMapping : unit -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping&#xA;override this.GetTypeMapping : unit -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="iReadOnlyProperty.GetTypeMapping " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> for the given property from a finalized model.
            </summary>
        <returns>The type mapping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? GetValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueComparer" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueComparer () As ValueComparer" />
      <MemberSignature Language="F#" Value="abstract member GetValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="iReadOnlyProperty.GetValueComparer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property, or <see langword="null" /> if none is set.
            </summary>
        <returns>The comparer, or <see langword="null" /> if none has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueConverter">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? GetValueConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter GetValueConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueConverter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueConverter () As ValueConverter" />
      <MemberSignature Language="F#" Value="abstract member GetValueConverter : unit -&gt; Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Usage="iReadOnlyProperty.GetValueConverter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the custom <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> set for this property.
            </summary>
        <returns>The converter, or <see langword="null" /> if none has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueGeneratorFactory">
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;? GetValueGeneratorFactory ();" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; GetValueGeneratorFactory() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueGeneratorFactory () As Func(Of IProperty, IEntityType, ValueGenerator)" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member GetValueGeneratorFactory : unit -&gt; Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Usage="iReadOnlyProperty.GetValueGeneratorFactory " FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;? GetValueGeneratorFactory ();" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.ITypeBase, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; GetValueGeneratorFactory() cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueGeneratorFactory () As Func(Of IProperty, ITypeBase, ValueGenerator)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member GetValueGeneratorFactory : unit -&gt; Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.ITypeBase, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Usage="iReadOnlyProperty.GetValueGeneratorFactory " FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-6.0;efcore-7.0">System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the factory that has been set to generate values for this property, if any.
            </summary>
        <returns>The factory, or <see langword="null" /> if no factory has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConcurrencyToken">
      <MemberSignature Language="C#" Value="public bool IsConcurrencyToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConcurrencyToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsConcurrencyToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConcurrencyToken As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsConcurrencyToken : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsConcurrencyToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether this property is used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsForeignKey">
      <MemberSignature Language="C#" Value="public bool IsForeignKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsForeignKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsForeignKey" />
      <MemberSignature Language="VB.NET" Value="Public Function IsForeignKey () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsForeignKey : unit -&gt; bool" Usage="iReadOnlyProperty.IsForeignKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether this property is used as a foreign key (or part of a composite foreign key).
            </summary>
        <returns>
          <see langword="true" /> if the property is used as a foreign key, otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIndex">
      <MemberSignature Language="C#" Value="public bool IsIndex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIndex() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsIndex" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIndex () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsIndex : unit -&gt; bool" Usage="iReadOnlyProperty.IsIndex " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether this property is used as an index (or part of a composite index).
            </summary>
        <returns>
          <see langword="true" /> if the property is used as an index, otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKey">
      <MemberSignature Language="C#" Value="public bool IsKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsKey" />
      <MemberSignature Language="VB.NET" Value="Public Function IsKey () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsKey : unit -&gt; bool" Usage="iReadOnlyProperty.IsKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether this property is used as the primary key or alternate key
                (or part of a composite primary or alternate key).
            </summary>
        <returns>
          <see langword="true" /> if the property is used as a key, otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether this property can contain <see langword="null" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimaryKey">
      <MemberSignature Language="C#" Value="public virtual bool IsPrimaryKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrimaryKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsPrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrimaryKey () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsPrimaryKey : unit -&gt; bool&#xA;override this.IsPrimaryKey : unit -&gt; bool" Usage="iReadOnlyProperty.IsPrimaryKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether this property is used as the primary key (or part of a composite primary key).
            </summary>
        <returns>
          <see langword="true" /> if the property is used as the primary key, otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveCollection">
      <MemberSignature Language="C#" Value="public bool IsPrimitiveCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitiveCollection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsPrimitiveCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitiveCollection As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsPrimitiveCollection : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsPrimitiveCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                A property is a primitive collection if it has an element type that matches the element type of the CLR type.
            </summary>
        <value>
          <see langword="true" /> if the property represents a primitive collection.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicode">
      <MemberSignature Language="C#" Value="public bool? IsUnicode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;bool&gt; IsUnicode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsUnicode" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnicode () As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member IsUnicode : unit -&gt; Nullable&lt;bool&gt;" Usage="iReadOnlyProperty.IsUnicode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether or not the property can persist Unicode characters.
            </summary>
        <returns>The Unicode setting, or <see langword="null" /> if none is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUniqueIndex">
      <MemberSignature Language="C#" Value="public virtual bool IsUniqueIndex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUniqueIndex() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsUniqueIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsUniqueIndex () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsUniqueIndex : unit -&gt; bool&#xA;override this.IsUniqueIndex : unit -&gt; bool" Usage="iReadOnlyProperty.IsUniqueIndex " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a value indicating whether this property is used as a unique index (or part of a unique composite index).
            </summary>
        <returns>
          <see langword="true" /> if the property is used as an unique index, otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDebugString">
      <MemberSignature Language="C#" Value="public virtual string ToDebugString (Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions options = Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions.ShortDefault, int indent = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToDebugString(valuetype Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions options, int32 indent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ToDebugString(Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToDebugString (Optional options As MetadataDebugStringOptions = Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions.ShortDefault, Optional indent As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="abstract member ToDebugString : Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions * int -&gt; string&#xA;override this.ToDebugString : Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions * int -&gt; string" Usage="iReadOnlyProperty.ToDebugString (options, indent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions" />
        <Parameter Name="indent" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="options">Options for generating the string.</param>
        <param name="indent">The number of indent spaces to use before each new line.</param>
        <summary>
          <para>
                    Creates a human-readable representation of the given metadata.
                </para>
          <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
        </summary>
        <returns>A human-readable representation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueGenerated">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ValueGenerated ValueGenerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated ValueGenerated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ValueGenerated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueGenerated As ValueGenerated" />
      <MemberSignature Language="F#" Value="member this.ValueGenerated : Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ValueGenerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ValueGenerated</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating when a value for this property will be generated by the database. Even when the
                property is set to be generated by the database, EF may still attempt to save a specific value (rather than
                having one generated by the database) when the entity is added and a value is assigned, or the property is
                marked as modified for an existing entity. See <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetBeforeSaveBehavior" />
                and <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetAfterSaveBehavior" /> for more information and examples.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
