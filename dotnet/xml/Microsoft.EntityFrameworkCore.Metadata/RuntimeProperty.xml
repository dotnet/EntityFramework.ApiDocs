<Type Name="RuntimeProperty" FullName="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty">
  <TypeSignature Language="C#" Value="public class RuntimeProperty : Microsoft.EntityFrameworkCore.Metadata.RuntimePropertyBase, Microsoft.EntityFrameworkCore.Metadata.IProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RuntimeProperty extends Microsoft.EntityFrameworkCore.Metadata.RuntimePropertyBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty" />
  <TypeSignature Language="VB.NET" Value="Public Class RuntimeProperty&#xA;Inherits RuntimePropertyBase&#xA;Implements IProperty" />
  <TypeSignature Language="F#" Value="type RuntimeProperty = class&#xA;    inherit RuntimePropertyBase&#xA;    interface IProperty&#xA;    interface IReadOnlyProperty&#xA;    interface IReadOnlyPropertyBase&#xA;    interface IReadOnlyAnnotatable&#xA;    interface IPropertyBase&#xA;    interface IAnnotatable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.RuntimePropertyBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IProperty</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IPropertyBase</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Represents a scalar property of an structural type.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuntimeProperty (string name, Type clrType, System.Reflection.PropertyInfo? propertyInfo, System.Reflection.FieldInfo? fieldInfo, Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType declaringEntityType, Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, bool nullable, bool concurrencyToken, Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated, Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior beforeSaveBehavior, Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior afterSaveBehavior, int? maxLength, bool? unicode, int? precision, int? scale, Type? providerClrType, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;? valueGeneratorFactory, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? valueConverter, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? valueComparer, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? keyValueComparer, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type clrType, class System.Reflection.PropertyInfo propertyInfo, class System.Reflection.FieldInfo fieldInfo, class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType declaringEntityType, valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, bool nullable, bool concurrencyToken, valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated, valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior beforeSaveBehavior, valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior afterSaveBehavior, valuetype System.Nullable`1&lt;int32&gt; maxLength, valuetype System.Nullable`1&lt;bool&gt; unicode, valuetype System.Nullable`1&lt;int32&gt; precision, valuetype System.Nullable`1&lt;int32&gt; scale, class System.Type providerClrType, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; valueGeneratorFactory, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter valueConverter, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer valueComparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer keyValueComparer, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.#ctor(System.String,System.Type,System.Reflection.PropertyInfo,System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType,Microsoft.EntityFrameworkCore.PropertyAccessMode,System.Boolean,System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ValueGenerated,Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior,Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Type,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator},Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, clrType As Type, propertyInfo As PropertyInfo, fieldInfo As FieldInfo, declaringEntityType As RuntimeEntityType, propertyAccessMode As PropertyAccessMode, nullable As Boolean, concurrencyToken As Boolean, valueGenerated As ValueGenerated, beforeSaveBehavior As PropertySaveBehavior, afterSaveBehavior As PropertySaveBehavior, maxLength As Nullable(Of Integer), unicode As Nullable(Of Boolean), precision As Nullable(Of Integer), scale As Nullable(Of Integer), providerClrType As Type, valueGeneratorFactory As Func(Of IProperty, IEntityType, ValueGenerator), valueConverter As ValueConverter, valueComparer As ValueComparer, keyValueComparer As ValueComparer, typeMapping As CoreTypeMapping)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty : string * Type * System.Reflection.PropertyInfo * System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType * Microsoft.EntityFrameworkCore.PropertyAccessMode * bool * bool * Microsoft.EntityFrameworkCore.Metadata.ValueGenerated * Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior * Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Type * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty" Usage="new Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty (name, clrType, propertyInfo, fieldInfo, declaringEntityType, propertyAccessMode, nullable, concurrencyToken, valueGenerated, beforeSaveBehavior, afterSaveBehavior, maxLength, unicode, precision, scale, providerClrType, valueGeneratorFactory, valueConverter, valueComparer, keyValueComparer, typeMapping)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="2" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="3" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="declaringEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Index="4" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" Index="5" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="nullable" Type="System.Boolean" Index="6" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="concurrencyToken" Type="System.Boolean" Index="7" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="valueGenerated" Type="Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" Index="8" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="beforeSaveBehavior" Type="Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Index="9" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="afterSaveBehavior" Type="Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Index="10" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" Index="11" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" Index="12" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" Index="13" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" Index="14" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="providerClrType" Type="System.Type" Index="15" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="valueGeneratorFactory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Index="16" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="valueConverter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Index="17" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="valueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="18" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="keyValueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="19" FrameworkAlternate="efcore-6.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="20" FrameworkAlternate="efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="clrType">To be added.</param>
        <param name="propertyInfo">To be added.</param>
        <param name="fieldInfo">To be added.</param>
        <param name="declaringEntityType">To be added.</param>
        <param name="propertyAccessMode">To be added.</param>
        <param name="nullable">To be added.</param>
        <param name="concurrencyToken">To be added.</param>
        <param name="valueGenerated">To be added.</param>
        <param name="beforeSaveBehavior">To be added.</param>
        <param name="afterSaveBehavior">To be added.</param>
        <param name="maxLength">To be added.</param>
        <param name="unicode">To be added.</param>
        <param name="precision">To be added.</param>
        <param name="scale">To be added.</param>
        <param name="providerClrType">To be added.</param>
        <param name="valueGeneratorFactory">To be added.</param>
        <param name="valueConverter">To be added.</param>
        <param name="valueComparer">To be added.</param>
        <param name="keyValueComparer">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuntimeProperty (string name, Type clrType, System.Reflection.PropertyInfo? propertyInfo, System.Reflection.FieldInfo? fieldInfo, Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType declaringEntityType, Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, bool nullable, bool concurrencyToken, Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated, Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior beforeSaveBehavior, Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior afterSaveBehavior, int? maxLength, bool? unicode, int? precision, int? scale, Type? providerClrType, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;? valueGeneratorFactory, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? valueConverter, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? valueComparer, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? keyValueComparer, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? providerValueComparer, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type clrType, class System.Reflection.PropertyInfo propertyInfo, class System.Reflection.FieldInfo fieldInfo, class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType declaringEntityType, valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, bool nullable, bool concurrencyToken, valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated, valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior beforeSaveBehavior, valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior afterSaveBehavior, valuetype System.Nullable`1&lt;int32&gt; maxLength, valuetype System.Nullable`1&lt;bool&gt; unicode, valuetype System.Nullable`1&lt;int32&gt; precision, valuetype System.Nullable`1&lt;int32&gt; scale, class System.Type providerClrType, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; valueGeneratorFactory, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter valueConverter, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer valueComparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer keyValueComparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer providerValueComparer, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.#ctor(System.String,System.Type,System.Reflection.PropertyInfo,System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType,Microsoft.EntityFrameworkCore.PropertyAccessMode,System.Boolean,System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ValueGenerated,Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior,Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Type,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator},Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, clrType As Type, propertyInfo As PropertyInfo, fieldInfo As FieldInfo, declaringEntityType As RuntimeEntityType, propertyAccessMode As PropertyAccessMode, nullable As Boolean, concurrencyToken As Boolean, valueGenerated As ValueGenerated, beforeSaveBehavior As PropertySaveBehavior, afterSaveBehavior As PropertySaveBehavior, maxLength As Nullable(Of Integer), unicode As Nullable(Of Boolean), precision As Nullable(Of Integer), scale As Nullable(Of Integer), providerClrType As Type, valueGeneratorFactory As Func(Of IProperty, IEntityType, ValueGenerator), valueConverter As ValueConverter, valueComparer As ValueComparer, keyValueComparer As ValueComparer, providerValueComparer As ValueComparer, typeMapping As CoreTypeMapping)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty : string * Type * System.Reflection.PropertyInfo * System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType * Microsoft.EntityFrameworkCore.PropertyAccessMode * bool * bool * Microsoft.EntityFrameworkCore.Metadata.ValueGenerated * Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior * Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Type * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty" Usage="new Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty (name, clrType, propertyInfo, fieldInfo, declaringEntityType, propertyAccessMode, nullable, concurrencyToken, valueGenerated, beforeSaveBehavior, afterSaveBehavior, maxLength, unicode, precision, scale, providerClrType, valueGeneratorFactory, valueConverter, valueComparer, keyValueComparer, providerValueComparer, typeMapping)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="2" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="3" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="declaringEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Index="4" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" Index="5" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="nullable" Type="System.Boolean" Index="6" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="concurrencyToken" Type="System.Boolean" Index="7" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="valueGenerated" Type="Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" Index="8" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="beforeSaveBehavior" Type="Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Index="9" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="afterSaveBehavior" Type="Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Index="10" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" Index="11" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" Index="12" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" Index="13" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" Index="14" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="providerClrType" Type="System.Type" Index="15" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="valueGeneratorFactory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Index="16" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="valueConverter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Index="17" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="valueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="18" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="keyValueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="19" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="providerValueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="20" FrameworkAlternate="efcore-7.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="21" FrameworkAlternate="efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="clrType">To be added.</param>
        <param name="propertyInfo">To be added.</param>
        <param name="fieldInfo">To be added.</param>
        <param name="declaringEntityType">To be added.</param>
        <param name="propertyAccessMode">To be added.</param>
        <param name="nullable">To be added.</param>
        <param name="concurrencyToken">To be added.</param>
        <param name="valueGenerated">To be added.</param>
        <param name="beforeSaveBehavior">To be added.</param>
        <param name="afterSaveBehavior">To be added.</param>
        <param name="maxLength">To be added.</param>
        <param name="unicode">To be added.</param>
        <param name="precision">To be added.</param>
        <param name="scale">To be added.</param>
        <param name="providerClrType">To be added.</param>
        <param name="valueGeneratorFactory">To be added.</param>
        <param name="valueConverter">To be added.</param>
        <param name="valueComparer">To be added.</param>
        <param name="keyValueComparer">To be added.</param>
        <param name="providerValueComparer">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuntimeProperty (string name, Type clrType, System.Reflection.PropertyInfo? propertyInfo, System.Reflection.FieldInfo? fieldInfo, Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeBase declaringType, Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, bool nullable, bool concurrencyToken, Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated, Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior beforeSaveBehavior, Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior afterSaveBehavior, int? maxLength, bool? unicode, int? precision, int? scale, Type? providerClrType, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;? valueGeneratorFactory, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? valueConverter, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? valueComparer, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? keyValueComparer, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? providerValueComparer, Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter? jsonValueReaderWriter, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping, object? sentinel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type clrType, class System.Reflection.PropertyInfo propertyInfo, class System.Reflection.FieldInfo fieldInfo, class Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeBase declaringType, valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, bool nullable, bool concurrencyToken, valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated valueGenerated, valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior beforeSaveBehavior, valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior afterSaveBehavior, valuetype System.Nullable`1&lt;int32&gt; maxLength, valuetype System.Nullable`1&lt;bool&gt; unicode, valuetype System.Nullable`1&lt;int32&gt; precision, valuetype System.Nullable`1&lt;int32&gt; scale, class System.Type providerClrType, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.ITypeBase, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; valueGeneratorFactory, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter valueConverter, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer valueComparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer keyValueComparer, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer providerValueComparer, class Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter jsonValueReaderWriter, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping, object sentinel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.#ctor(System.String,System.Type,System.Reflection.PropertyInfo,System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeBase,Microsoft.EntityFrameworkCore.PropertyAccessMode,System.Boolean,System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ValueGenerated,Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior,Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Type,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator},Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, clrType As Type, propertyInfo As PropertyInfo, fieldInfo As FieldInfo, declaringType As RuntimeTypeBase, propertyAccessMode As PropertyAccessMode, nullable As Boolean, concurrencyToken As Boolean, valueGenerated As ValueGenerated, beforeSaveBehavior As PropertySaveBehavior, afterSaveBehavior As PropertySaveBehavior, maxLength As Nullable(Of Integer), unicode As Nullable(Of Boolean), precision As Nullable(Of Integer), scale As Nullable(Of Integer), providerClrType As Type, valueGeneratorFactory As Func(Of IProperty, ITypeBase, ValueGenerator), valueConverter As ValueConverter, valueComparer As ValueComparer, keyValueComparer As ValueComparer, providerValueComparer As ValueComparer, jsonValueReaderWriter As JsonValueReaderWriter, typeMapping As CoreTypeMapping, sentinel As Object)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty : string * Type * System.Reflection.PropertyInfo * System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeBase * Microsoft.EntityFrameworkCore.PropertyAccessMode * bool * bool * Microsoft.EntityFrameworkCore.Metadata.ValueGenerated * Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior * Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Type * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.ITypeBase, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * obj -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty" Usage="new Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty (name, clrType, propertyInfo, fieldInfo, declaringType, propertyAccessMode, nullable, concurrencyToken, valueGenerated, beforeSaveBehavior, afterSaveBehavior, maxLength, unicode, precision, scale, providerClrType, valueGeneratorFactory, valueConverter, valueComparer, keyValueComparer, providerValueComparer, jsonValueReaderWriter, typeMapping, sentinel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="declaringType" Type="Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeBase" Index="4" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" Index="5" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="nullable" Type="System.Boolean" Index="6" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="concurrencyToken" Type="System.Boolean" Index="7" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="valueGenerated" Type="Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" Index="8" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="beforeSaveBehavior" Type="Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Index="9" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="afterSaveBehavior" Type="Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Index="10" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" Index="11" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" Index="12" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" Index="13" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" Index="14" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="providerClrType" Type="System.Type" Index="15" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="valueGeneratorFactory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Index="16" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="valueConverter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Index="17" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="valueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="18" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="keyValueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="19" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="providerValueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="20" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="jsonValueReaderWriter" Type="Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" Index="21" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="22" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="sentinel" Type="System.Object" Index="23" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="clrType">To be added.</param>
        <param name="propertyInfo">To be added.</param>
        <param name="fieldInfo">To be added.</param>
        <param name="declaringType">To be added.</param>
        <param name="propertyAccessMode">To be added.</param>
        <param name="nullable">To be added.</param>
        <param name="concurrencyToken">To be added.</param>
        <param name="valueGenerated">To be added.</param>
        <param name="beforeSaveBehavior">To be added.</param>
        <param name="afterSaveBehavior">To be added.</param>
        <param name="maxLength">To be added.</param>
        <param name="unicode">To be added.</param>
        <param name="precision">To be added.</param>
        <param name="scale">To be added.</param>
        <param name="providerClrType">To be added.</param>
        <param name="valueGeneratorFactory">To be added.</param>
        <param name="valueConverter">To be added.</param>
        <param name="valueComparer">To be added.</param>
        <param name="keyValueComparer">To be added.</param>
        <param name="providerValueComparer">To be added.</param>
        <param name="jsonValueReaderWriter">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <param name="sentinel">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClrType">
      <MemberSignature Language="C#" Value="protected override Type ClrType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ClrType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.ClrType" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ClrType As Type" />
      <MemberSignature Language="F#" Value="member this.ClrType : Type" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.ClrType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.ClrType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the type of value that this property-like object holds.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugView">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.DebugView" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DebugView As DebugView" />
      <MemberSignature Language="F#" Value="member this.DebugView : Microsoft.EntityFrameworkCore.Infrastructure.DebugView" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.DebugView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.DebugView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringEntityType">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType DeclaringEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringEntityType As RuntimeEntityType" />
      <MemberSignature Language="F#" Value="member this.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.DeclaringEntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the type that this property belongs to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeBase DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeBase DeclaringType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As RuntimeTypeBase" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeBase" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ForeignKeys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.RuntimeForeignKey&gt;? ForeignKeys { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RuntimeForeignKey&gt; ForeignKeys" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.ForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ForeignKeys As List(Of RuntimeForeignKey)" />
      <MemberSignature Language="F#" Value="member this.ForeignKeys : System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.RuntimeForeignKey&gt; with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.ForeignKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.RuntimeForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IElementType? GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IElementType GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetElementType () As IElementType" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IElementType&#xA;override this.GetElementType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IElementType" Usage="runtimeProperty.GetElementType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IElementType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the configuration for elements of the primitive collection represented by this property.
            </summary>
        <returns>The configuration for the elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJsonValueReaderWriter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter? GetJsonValueReaderWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter GetJsonValueReaderWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.GetJsonValueReaderWriter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJsonValueReaderWriter () As JsonValueReaderWriter" />
      <MemberSignature Language="F#" Value="abstract member GetJsonValueReaderWriter : unit -&gt; Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter&#xA;override this.GetJsonValueReaderWriter : unit -&gt; Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" Usage="runtimeProperty.GetJsonValueReaderWriter " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetJsonValueReaderWriter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" /> for this property, or <see langword="null" /> if none is set.
            </summary>
        <returns>The reader/writer, or <see langword="null" /> if none has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Indexes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.RuntimeIndex&gt;? Indexes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RuntimeIndex&gt; Indexes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Indexes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Indexes As List(Of RuntimeIndex)" />
      <MemberSignature Language="F#" Value="member this.Indexes : System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.RuntimeIndex&gt; with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Indexes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.RuntimeIndex&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveCollection">
      <MemberSignature Language="C#" Value="public bool IsPrimitiveCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitiveCollection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.IsPrimitiveCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitiveCollection As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsPrimitiveCollection : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.IsPrimitiveCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.RuntimeKey&gt;? Keys { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Metadata.RuntimeKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Keys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Keys As List(Of RuntimeKey)" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.RuntimeKey&gt; with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Metadata.RuntimeKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IProperty#DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DeclaringEntityType As IEntityType Implements IProperty.DeclaringEntityType" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingForeignKeys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; IProperty.GetContainingForeignKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingForeignKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IProperty#GetContainingForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Function GetContainingForeignKeys () As IEnumerable(Of IForeignKey) Implements IProperty.GetContainingForeignKeys" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingForeignKeys " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingForeignKeys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingIndexes">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt; IProperty.GetContainingIndexes ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IIndex&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingIndexes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IProperty#GetContainingIndexes" />
      <MemberSignature Language="VB.NET" Value="Function GetContainingIndexes () As IEnumerable(Of IIndex) Implements IProperty.GetContainingIndexes" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingIndexes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingIndexes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingKeys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt; IProperty.GetContainingKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IKey&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IProperty#GetContainingKeys" />
      <MemberSignature Language="VB.NET" Value="Function GetContainingKeys () As IEnumerable(Of IKey) Implements IProperty.GetContainingKeys" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingKeys " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingKeys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer IProperty.GetKeyValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IProperty#GetKeyValueComparer" />
      <MemberSignature Language="VB.NET" Value="Function GetKeyValueComparer () As ValueComparer Implements IProperty.GetKeyValueComparer" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer IProperty.GetProviderValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IProperty#GetProviderValueComparer" />
      <MemberSignature Language="VB.NET" Value="Function GetProviderValueComparer () As ValueComparer Implements IProperty.GetProviderValueComparer" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer IProperty.GetValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IProperty#GetValueComparer" />
      <MemberSignature Language="VB.NET" Value="Function GetValueComparer () As ValueComparer Implements IProperty.GetValueComparer" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DeclaringEntityType As IReadOnlyEntityType Implements IReadOnlyProperty.DeclaringEntityType" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindContainingPrimaryKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey? IReadOnlyProperty.FindContainingPrimaryKey ();" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindContainingPrimaryKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#FindContainingPrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Function FindContainingPrimaryKey () As IReadOnlyKey Implements IReadOnlyProperty.FindContainingPrimaryKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindContainingPrimaryKey : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindContainingPrimaryKey : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindContainingPrimaryKey " />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey IReadOnlyProperty.FindContainingPrimaryKey ();" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindContainingPrimaryKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindTypeMapping">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? IReadOnlyProperty.FindTypeMapping ();" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindTypeMapping() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#FindTypeMapping" />
      <MemberSignature Language="VB.NET" Value="Function FindTypeMapping () As CoreTypeMapping Implements IReadOnlyProperty.FindTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindTypeMapping : unit -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindTypeMapping : unit -&gt; Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindTypeMapping " />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping IReadOnlyProperty.FindTypeMapping ();" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindTypeMapping</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetAfterSaveBehavior">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior IReadOnlyProperty.GetAfterSaveBehavior ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetAfterSaveBehavior() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetAfterSaveBehavior" />
      <MemberSignature Language="VB.NET" Value="Function GetAfterSaveBehavior () As PropertySaveBehavior Implements IReadOnlyProperty.GetAfterSaveBehavior" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetAfterSaveBehavior : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetAfterSaveBehavior : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetAfterSaveBehavior " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetAfterSaveBehavior</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetBeforeSaveBehavior">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior IReadOnlyProperty.GetBeforeSaveBehavior ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetBeforeSaveBehavior() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetBeforeSaveBehavior" />
      <MemberSignature Language="VB.NET" Value="Function GetBeforeSaveBehavior () As PropertySaveBehavior Implements IReadOnlyProperty.GetBeforeSaveBehavior" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetBeforeSaveBehavior : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetBeforeSaveBehavior : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetBeforeSaveBehavior " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetBeforeSaveBehavior</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingForeignKeys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt; IReadOnlyProperty.GetContainingForeignKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingForeignKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetContainingForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Function GetContainingForeignKeys () As IEnumerable(Of IReadOnlyForeignKey) Implements IReadOnlyProperty.GetContainingForeignKeys" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingForeignKeys " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingForeignKeys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingIndexes">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex&gt; IReadOnlyProperty.GetContainingIndexes ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingIndexes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetContainingIndexes" />
      <MemberSignature Language="VB.NET" Value="Function GetContainingIndexes () As IEnumerable(Of IReadOnlyIndex) Implements IReadOnlyProperty.GetContainingIndexes" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingIndexes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingIndexes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingKeys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&gt; IReadOnlyProperty.GetContainingKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetContainingKeys" />
      <MemberSignature Language="VB.NET" Value="Function GetContainingKeys () As IEnumerable(Of IReadOnlyKey) Implements IReadOnlyProperty.GetContainingKeys" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingKeys " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingKeys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetElementType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyElementType IReadOnlyProperty.GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyElementType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetElementType" />
      <MemberSignature Language="VB.NET" Value="Function GetElementType () As IReadOnlyElementType Implements IReadOnlyProperty.GetElementType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetElementType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyElementType&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetElementType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyElementType" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetElementType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyElementType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetKeyValueComparer">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? IReadOnlyProperty.GetKeyValueComparer ();" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetKeyValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetKeyValueComparer" />
      <MemberSignature Language="VB.NET" Value="Function GetKeyValueComparer () As ValueComparer Implements IReadOnlyProperty.GetKeyValueComparer" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetKeyValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetKeyValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetKeyValueComparer " />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer IReadOnlyProperty.GetKeyValueComparer ();" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetMaxLength">
      <MemberSignature Language="C#" Value="int? IReadOnlyProperty.GetMaxLength ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Nullable`1&lt;int32&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetMaxLength() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetMaxLength" />
      <MemberSignature Language="VB.NET" Value="Function GetMaxLength () As Nullable(Of Integer) Implements IReadOnlyProperty.GetMaxLength" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetMaxLength : unit -&gt; Nullable&lt;int&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetMaxLength : unit -&gt; Nullable&lt;int&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetMaxLength " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetMaxLength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrecision">
      <MemberSignature Language="C#" Value="int? IReadOnlyProperty.GetPrecision ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Nullable`1&lt;int32&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrecision() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetPrecision" />
      <MemberSignature Language="VB.NET" Value="Function GetPrecision () As Nullable(Of Integer) Implements IReadOnlyProperty.GetPrecision" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrecision : unit -&gt; Nullable&lt;int&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrecision : unit -&gt; Nullable&lt;int&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrecision " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrecision</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderClrType">
      <MemberSignature Language="C#" Value="Type? IReadOnlyProperty.GetProviderClrType ();" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderClrType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetProviderClrType" />
      <MemberSignature Language="VB.NET" Value="Function GetProviderClrType () As Type Implements IReadOnlyProperty.GetProviderClrType" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderClrType : unit -&gt; Type&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderClrType : unit -&gt; Type" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderClrType " />
      <MemberSignature Language="C#" Value="Type IReadOnlyProperty.GetProviderClrType ();" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderClrType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderValueComparer">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer IReadOnlyProperty.GetProviderValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetProviderValueComparer" />
      <MemberSignature Language="VB.NET" Value="Function GetProviderValueComparer () As ValueComparer Implements IReadOnlyProperty.GetProviderValueComparer" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderValueComparer " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetScale">
      <MemberSignature Language="C#" Value="int? IReadOnlyProperty.GetScale ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Nullable`1&lt;int32&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetScale() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetScale" />
      <MemberSignature Language="VB.NET" Value="Function GetScale () As Nullable(Of Integer) Implements IReadOnlyProperty.GetScale" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetScale : unit -&gt; Nullable&lt;int&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetScale : unit -&gt; Nullable&lt;int&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetScale " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetScale</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueComparer">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? IReadOnlyProperty.GetValueComparer ();" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetValueComparer" />
      <MemberSignature Language="VB.NET" Value="Function GetValueComparer () As ValueComparer Implements IReadOnlyProperty.GetValueComparer" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueComparer " />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer IReadOnlyProperty.GetValueComparer ();" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueConverter">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? IReadOnlyProperty.GetValueConverter ();" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetValueConverter" />
      <MemberSignature Language="VB.NET" Value="Function GetValueConverter () As ValueConverter Implements IReadOnlyProperty.GetValueConverter" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueConverter : unit -&gt; Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueConverter : unit -&gt; Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueConverter " />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter IReadOnlyProperty.GetValueConverter ();" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueConverter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory">
      <MemberSignature Language="C#" Value="Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;? IReadOnlyProperty.GetValueGeneratorFactory ();" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory() cil managed" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#GetValueGeneratorFactory" />
      <MemberSignature Language="VB.NET" Value="Function GetValueGeneratorFactory () As Func(Of IProperty, IEntityType, ValueGenerator) Implements IReadOnlyProperty.GetValueGeneratorFactory" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory : unit -&gt; Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory : unit -&gt; Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory " FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="C#" Value="Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; IReadOnlyProperty.GetValueGeneratorFactory ();" FrameworkAlternate="efcore-7.0" />
      <MemberSignature Language="C#" Value="Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; IReadOnlyProperty.GetValueGeneratorFactory ();" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.ITypeBase, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory() cil managed" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Function GetValueGeneratorFactory () As Func(Of IProperty, ITypeBase, ValueGenerator) Implements IReadOnlyProperty.GetValueGeneratorFactory" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory : unit -&gt; Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.ITypeBase, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory : unit -&gt; Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.ITypeBase, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory " FrameworkAlternate="efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-6.0;efcore-7.0">System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-8.0">System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsConcurrencyToken">
      <MemberSignature Language="C#" Value="bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsConcurrencyToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsConcurrencyToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#IsConcurrencyToken" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsConcurrencyToken As Boolean Implements IReadOnlyProperty.IsConcurrencyToken" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsConcurrencyToken : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsConcurrencyToken" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsConcurrencyToken</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsForeignKey">
      <MemberSignature Language="C#" Value="bool IReadOnlyProperty.IsForeignKey ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsForeignKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#IsForeignKey" />
      <MemberSignature Language="VB.NET" Value="Function IsForeignKey () As Boolean Implements IReadOnlyProperty.IsForeignKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsForeignKey : unit -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsForeignKey : unit -&gt; bool" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsForeignKey " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsForeignKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsIndex">
      <MemberSignature Language="C#" Value="bool IReadOnlyProperty.IsIndex ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsIndex() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#IsIndex" />
      <MemberSignature Language="VB.NET" Value="Function IsIndex () As Boolean Implements IReadOnlyProperty.IsIndex" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsIndex : unit -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsIndex : unit -&gt; bool" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsIndex " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsIndex</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsKey">
      <MemberSignature Language="C#" Value="bool IReadOnlyProperty.IsKey ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#IsKey" />
      <MemberSignature Language="VB.NET" Value="Function IsKey () As Boolean Implements IReadOnlyProperty.IsKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsKey : unit -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsKey : unit -&gt; bool" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsKey " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsNullable">
      <MemberSignature Language="C#" Value="bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsNullable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#IsNullable" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsNullable As Boolean Implements IReadOnlyProperty.IsNullable" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsNullable : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsNullable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsNullable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsUnicode">
      <MemberSignature Language="C#" Value="bool? IReadOnlyProperty.IsUnicode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Nullable`1&lt;bool&gt; Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsUnicode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#IsUnicode" />
      <MemberSignature Language="VB.NET" Value="Function IsUnicode () As Nullable(Of Boolean) Implements IReadOnlyProperty.IsUnicode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsUnicode : unit -&gt; Nullable&lt;bool&gt;&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsUnicode : unit -&gt; Nullable&lt;bool&gt;" Usage="runtimeProperty.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsUnicode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsUnicode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ValueGenerated">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.ValueGenerated Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ValueGenerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ValueGenerated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyProperty#ValueGenerated" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ValueGenerated As ValueGenerated Implements IReadOnlyProperty.ValueGenerated" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ValueGenerated : Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ValueGenerated" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ValueGenerated</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ValueGenerated</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeKey? PrimaryKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeKey PrimaryKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.PrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PrimaryKey As RuntimeKey" />
      <MemberSignature Language="F#" Value="member this.PrimaryKey : Microsoft.EntityFrameworkCore.Metadata.RuntimeKey with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.PrimaryKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternal&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sentinel">
      <MemberSignature Language="C#" Value="public override object? Sentinel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Sentinel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Sentinel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Sentinel As Object" />
      <MemberSignature Language="F#" Value="member this.Sentinel : obj" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Sentinel" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.Sentinel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="SetElementType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeElementType SetElementType (Type clrType, bool nullable = false, int? maxLength = default, bool? unicode = default, int? precision = default, int? scale = default, Type? providerPropertyType = default, Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter? valueConverter = default, Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer? valueComparer = default, Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter? jsonValueReaderWriter = default, Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping = default, bool primitiveCollection = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeElementType SetElementType(class System.Type clrType, bool nullable, valuetype System.Nullable`1&lt;int32&gt; maxLength, valuetype System.Nullable`1&lt;bool&gt; unicode, valuetype System.Nullable`1&lt;int32&gt; precision, valuetype System.Nullable`1&lt;int32&gt; scale, class System.Type providerPropertyType, class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter valueConverter, class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer valueComparer, class Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter jsonValueReaderWriter, class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping typeMapping, bool primitiveCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.SetElementType(System.Type,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Type,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetElementType (clrType As Type, Optional nullable As Boolean = false, Optional maxLength As Nullable(Of Integer) = Nothing, Optional unicode As Nullable(Of Boolean) = Nothing, Optional precision As Nullable(Of Integer) = Nothing, Optional scale As Nullable(Of Integer) = Nothing, Optional providerPropertyType As Type = Nothing, Optional valueConverter As ValueConverter = Nothing, Optional valueComparer As ValueComparer = Nothing, Optional jsonValueReaderWriter As JsonValueReaderWriter = Nothing, Optional typeMapping As CoreTypeMapping = Nothing, Optional primitiveCollection As Boolean = false) As RuntimeElementType" />
      <MemberSignature Language="F#" Value="abstract member SetElementType : Type * bool * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Type * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeElementType&#xA;override this.SetElementType : Type * bool * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Type * Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter * Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeElementType" Usage="runtimeProperty.SetElementType (clrType, nullable, maxLength, unicode, precision, scale, providerPropertyType, valueConverter, valueComparer, jsonValueReaderWriter, typeMapping, primitiveCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeElementType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="nullable" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" Index="4" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" Index="5" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="providerPropertyType" Type="System.Type" Index="6" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="valueConverter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" Index="7" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="valueComparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Index="8" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="jsonValueReaderWriter" Type="Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" Index="9" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" Index="10" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="primitiveCollection" Type="System.Boolean" Index="11" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="clrType">The type of value the property will hold.</param>
        <param name="nullable">A value indicating whether this property can contain <see langword="null" />.</param>
        <param name="maxLength">The maximum length of data that is allowed in this property.</param>
        <param name="unicode">A value indicating whether or not the property can persist Unicode characters.</param>
        <param name="precision">The precision of data that is allowed in this property.</param>
        <param name="scale">The scale of data that is allowed in this property.</param>
        <param name="providerPropertyType">
                The type that the property value will be converted to before being sent to the database provider.
            </param>
        <param name="valueConverter">The custom <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> set for this property.</param>
        <param name="valueComparer">The <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property.</param>
        <param name="jsonValueReaderWriter">The <see cref="T:Microsoft.EntityFrameworkCore.Storage.Json.JsonValueReaderWriter" /> for this property.</param>
        <param name="typeMapping">The <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> for this property.</param>
        <param name="primitiveCollection">A value indicating whether this property represents a primitive collection.</param>
        <summary>
                Sets the element type for this property.
            </summary>
        <returns>The newly created property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSentinelFromProviderValue">
      <MemberSignature Language="C#" Value="public virtual void SetSentinelFromProviderValue (object? providerValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSentinelFromProviderValue(object providerValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.SetSentinelFromProviderValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetSentinelFromProviderValue (providerValue As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetSentinelFromProviderValue : obj -&gt; unit&#xA;override this.SetSentinelFromProviderValue : obj -&gt; unit" Usage="runtimeProperty.SetSentinelFromProviderValue providerValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerValue" Type="System.Object" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="providerValue">The value, as a provider value if a value converter is being used.</param>
        <summary>
                Sets the <see cref="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.Sentinel" /> value, converting from the provider type if needed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="runtimeProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping TypeMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping TypeMapping" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.TypeMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TypeMapping As CoreTypeMapping" />
      <MemberSignature Language="F#" Value="member this.TypeMapping : Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty.TypeMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets the type mapping for this property.
            </summary>
        <value>The type mapping.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
