<Type Name="SequenceBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder">
  <TypeSignature Language="C#" Value="public class SequenceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SequenceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class SequenceBuilder" />
  <TypeSignature Language="F#" Value="type SequenceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                A fluent API builder for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> objects.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceBuilder (Microsoft.EntityFrameworkCore.Metadata.IMutableSequence sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IMutableSequence sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableSequence)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sequence As IMutableSequence)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder : Microsoft.EntityFrameworkCore.Metadata.IMutableSequence -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder sequence" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sequence" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" />
      </Parameters>
      <Docs>
        <param name="sequence"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" /> to configure. </param>
        <summary>
                Creates a new builder for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sequenceBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="obj"> The object to compare with the current object. </param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sequenceBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Serves as the default hash function.
            </summary>
        <returns> A hash code for the current object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMax">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder HasMax (long maximum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder HasMax(int64 maximum) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.HasMax(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMax (maximum As Long) As SequenceBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasMax : int64 -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&#xA;override this.HasMax : int64 -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder" Usage="sequenceBuilder.HasMax maximum" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maximum" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="maximum"> The maximum value for the sequence. </param>
        <summary>
                Sets the maximum value for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
        <returns> The same builder so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMin">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder HasMin (long minimum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder HasMin(int64 minimum) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.HasMin(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasMin (minimum As Long) As SequenceBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasMin : int64 -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&#xA;override this.HasMin : int64 -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder" Usage="sequenceBuilder.HasMin minimum" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minimum" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="minimum"> The minimum value for the sequence. </param>
        <summary>
                Sets the minimum value for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
        <returns> The same builder so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementsBy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder IncrementsBy (int increment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder IncrementsBy(int32 increment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.IncrementsBy(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IncrementsBy (increment As Integer) As SequenceBuilder" />
      <MemberSignature Language="F#" Value="abstract member IncrementsBy : int -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&#xA;override this.IncrementsBy : int -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder" Usage="sequenceBuilder.IncrementsBy increment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="increment" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="increment"> The amount to increment between values. </param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> to increment by the given amount when generating each next value.
            </summary>
        <returns> The same builder so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCyclic">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder IsCyclic (bool cyclic = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder IsCyclic(bool cyclic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.IsCyclic(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsCyclic (Optional cyclic As Boolean = true) As SequenceBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsCyclic : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&#xA;override this.IsCyclic : bool -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder" Usage="sequenceBuilder.IsCyclic cyclic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cyclic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cyclic"> If <c>true</c>, then the sequence with restart when the maximum is reached. </param>
        <summary>
                Sets whether or not the sequence will start again from the beginning once
                the maximum value is reached.
            </summary>
        <returns> The same builder so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IMutableSequence Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableSequence Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Metadata As IMutableSequence" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" Usage="Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableSequence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsAt">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder StartsAt (long startValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder StartsAt(int64 startValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.StartsAt(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartsAt (startValue As Long) As SequenceBuilder" />
      <MemberSignature Language="F#" Value="abstract member StartsAt : int64 -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder&#xA;override this.StartsAt : int64 -&gt; Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder" Usage="sequenceBuilder.StartsAt startValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startValue" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="startValue"> The starting value for the sequence. </param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> to start at the given value.
            </summary>
        <returns> The same builder so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.SequenceBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sequenceBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns> A string that represents the current object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
