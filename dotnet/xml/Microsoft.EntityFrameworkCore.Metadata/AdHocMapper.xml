<Type Name="AdHocMapper" FullName="Microsoft.EntityFrameworkCore.Metadata.AdHocMapper">
  <TypeSignature Language="C#" Value="public class AdHocMapper : Microsoft.EntityFrameworkCore.Metadata.IAdHocMapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AdHocMapper extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.IAdHocMapper" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.AdHocMapper" />
  <TypeSignature Language="VB.NET" Value="Public Class AdHocMapper&#xA;Implements IAdHocMapper" />
  <TypeSignature Language="F#" Value="type AdHocMapper = class&#xA;    interface IAdHocMapper" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IAdHocMapper</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Creates ad-hoc mappings of CLR types to entity types after the model has been built.
            </summary>
    <remarks>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-providers">Implementation of database providers and extensions</see>
                    for more information and examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AdHocMapper (Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.AdHocMapper.#ctor(Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As AdHocMapperDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.AdHocMapper : Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.AdHocMapper" Usage="new Microsoft.EntityFrameworkCore.Metadata.AdHocMapper dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>
                Do not call this constructor directly from either provider or application code as it may change
                as new dependencies are added. Instead, use this type in your constructor so that an instance
                will be created and injected automatically by the dependency injection container. To create
                an instance with some dependent services replaced, first resolve the object from the dependency
                injection container, then replace selected services using the C# 'with' operator. Do not call
                the constructor at any point in this process.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildConventionSet">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet BuildConventionSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet BuildConventionSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.AdHocMapper.BuildConventionSet" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BuildConventionSet () As ConventionSet" />
      <MemberSignature Language="F#" Value="abstract member BuildConventionSet : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet&#xA;override this.BuildConventionSet : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" Usage="adHocMapper.BuildConventionSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Builds the convention set to be used by the ad-hoc mapper.
            </summary>
        <returns>The convention set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.AdHocMapper.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As AdHocMapperDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies" Usage="Microsoft.EntityFrameworkCore.Metadata.AdHocMapper.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.AdHocMapperDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies for this service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType GetOrAddEntityType (Type clrType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType GetOrAddEntityType(class System.Type clrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.AdHocMapper.GetOrAddEntityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrAddEntityType (clrType As Type) As RuntimeEntityType" />
      <MemberSignature Language="F#" Value="abstract member GetOrAddEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType&#xA;override this.GetOrAddEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Usage="adHocMapper.GetOrAddEntityType clrType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IAdHocMapper.GetOrAddEntityType(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
