<Type Name="IConventionEntityType" FullName="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType">
  <TypeSignature Language="C#" Value="public interface IConventionEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase, Microsoft.EntityFrameworkCore.Metadata.IEntityType" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConventionEntityType implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.Metadata.ITypeBase" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConventionEntityType&#xA;Implements IConventionTypeBase, IEntityType" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type IConventionEntityType = interface&#xA;    interface IEntityType&#xA;    interface ITypeBase&#xA;    interface IAnnotatable&#xA;    interface IConventionTypeBase&#xA;    interface IConventionAnnotatable" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="C#" Value="public interface IConventionEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConventionEntityType implements class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConventionEntityType&#xA;Implements IConventionTypeBase, IReadOnlyEntityType" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type IConventionEntityType = interface&#xA;    interface IReadOnlyEntityType&#xA;    interface IReadOnlyTypeBase&#xA;    interface IReadOnlyAnnotatable&#xA;    interface IConventionTypeBase&#xA;    interface IConventionAnnotatable" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IConventionEntityType implements class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IEntityType</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.ITypeBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Represents an entity type in an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionModel" />.
                </para>
      <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> represents a read-only view of the same metadata.
                </para>
    </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey? AddForeignKey (Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey AddForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.IConventionKey,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddForeignKey (property As IConventionProperty, principalKey As IConventionKey, principalEntityType As IConventionEntityType, Optional fromDataAnnotation As Boolean = false) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="abstract member AddForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&#xA;override this.AddForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="iConventionEntityType.AddForeignKey (property, principalKey, principalEntityType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property that the foreign key is defined on.</param>
        <param name="principalKey">The primary or alternate key that is referenced.</param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a new relationship to this entity type.
            </summary>
        <returns>The newly created foreign key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddForeignKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey AddForeignKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool setComponentConfigurationSource = true, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey AddForeignKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool setComponentConfigurationSource, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},Microsoft.EntityFrameworkCore.Metadata.IConventionKey,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddForeignKey (properties As IReadOnlyList(Of IConventionProperty), principalKey As IConventionKey, principalEntityType As IConventionEntityType, Optional setComponentConfigurationSource As Boolean = true, Optional fromDataAnnotation As Boolean = false) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="abstract member AddForeignKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="iConventionEntityType.AddForeignKey (properties, principalKey, principalEntityType, setComponentConfigurationSource, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey? AddForeignKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, bool setComponentConfigurationSource = true, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />
        <Parameter Name="setComponentConfigurationSource" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that the foreign key is defined on.</param>
        <param name="principalKey">The primary or alternate key that is referenced.</param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <param name="setComponentConfigurationSource">
                Indicates whether the configuration source should be set for the properties, principal key and principal end.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a new relationship to this entity type.
            </summary>
        <returns>The newly created foreign key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionIndex? AddIndex (Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex AddIndex(class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddIndex (property As IConventionProperty, Optional fromDataAnnotation As Boolean = false) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member AddIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&#xA;override this.AddIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.AddIndex (property, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to be indexed.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds an index to this entity type.
            </summary>
        <returns>The newly created index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndex">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex AddIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex AddIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddIndex (properties As IReadOnlyList(Of IConventionProperty), Optional fromDataAnnotation As Boolean = false) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member AddIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.AddIndex (properties, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex? AddIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that are to be indexed.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds an unnamed index to this entity type.
            </summary>
        <returns>The newly created index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionIndex? AddIndex (Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, string name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex AddIndex(class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddIndex (property As IConventionProperty, name As String, Optional fromDataAnnotation As Boolean = false) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member AddIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&#xA;override this.AddIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.AddIndex (property, name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to be indexed.</param>
        <param name="name">The name of the index.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a named index to this entity type.
            </summary>
        <returns>The newly created index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndex">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex AddIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex AddIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddIndex (properties As IReadOnlyList(Of IConventionProperty), name As String, Optional fromDataAnnotation As Boolean = false) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member AddIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.AddIndex (properties, name, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex? AddIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, string name, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that are to be indexed.</param>
        <param name="name">The name of the index.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a named index to this entity type.
            </summary>
        <returns>The newly created index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndexerProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? AddIndexerProperty (string name, Type propertyType, bool setTypeConfigurationSource = true, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddIndexerProperty(string name, class System.Type propertyType, bool setTypeConfigurationSource, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddIndexerProperty(System.String,System.Type,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddIndexerProperty (name As String, propertyType As Type, Optional setTypeConfigurationSource As Boolean = true, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member AddIndexerProperty : string * Type * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&#xA;override this.AddIndexerProperty : string * Type * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.AddIndexerProperty (name, propertyType, setTypeConfigurationSource, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyType" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="setTypeConfigurationSource" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to add.</param>
        <param name="propertyType">The type of value the property will hold.</param>
        <param name="setTypeConfigurationSource">Indicates whether the type configuration source should be set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a property backed by and indexer to this entity type.
            </summary>
        <returns>The newly created property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionKey? AddKey (Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey AddKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddKey(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddKey (property As IConventionProperty, Optional fromDataAnnotation As Boolean = false) As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member AddKey : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey&#xA;override this.AddKey : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.AddKey (property, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to use as an alternate key.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a new alternate key to this entity type.
            </summary>
        <returns>The newly created key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey AddKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey AddKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddKey (properties As IReadOnlyList(Of IConventionProperty), Optional fromDataAnnotation As Boolean = false) As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member AddKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.AddKey (properties, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey? AddKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that make up the alternate key.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a new alternate key to this entity type.
            </summary>
        <returns>The newly created key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? AddProperty (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty(class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddProperty(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddProperty (memberInfo As MemberInfo, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member AddProperty : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&#xA;override this.AddProperty : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.AddProperty (memberInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Currently used only in tests")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Currently used only in tests")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">The corresponding member on the entity class.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns>The newly created property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? AddProperty (string name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddProperty(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddProperty (name As String, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member AddProperty : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.AddProperty (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to add.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns>The newly created property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? AddProperty (string name, Type propertyType, bool setTypeConfigurationSource = true, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty(string name, class System.Type propertyType, bool setTypeConfigurationSource, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddProperty(System.String,System.Type,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddProperty (name As String, propertyType As Type, Optional setTypeConfigurationSource As Boolean = true, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member AddProperty : string * Type * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.AddProperty (name, propertyType, setTypeConfigurationSource, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyType" Type="System.Type" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="setTypeConfigurationSource" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to add.</param>
        <param name="propertyType">The type of value the property will hold.</param>
        <param name="setTypeConfigurationSource">Indicates whether the type configuration source should be set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns>The newly created property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty (string name, Type propertyType, System.Reflection.MemberInfo memberInfo, bool setTypeConfigurationSource = true, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty AddProperty(string name, class System.Type propertyType, class System.Reflection.MemberInfo memberInfo, bool setTypeConfigurationSource, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddProperty(System.String,System.Type,System.Reflection.MemberInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddProperty (name As String, propertyType As Type, memberInfo As MemberInfo, Optional setTypeConfigurationSource As Boolean = true, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member AddProperty : string * Type * System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.AddProperty (name, propertyType, memberInfo, setTypeConfigurationSource, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? AddProperty (string name, Type propertyType, System.Reflection.MemberInfo? memberInfo, bool setTypeConfigurationSource = true, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="propertyType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="setTypeConfigurationSource" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to add.</param>
        <param name="propertyType">The type of value the property will hold.</param>
        <param name="memberInfo">
          <para>
                    The corresponding CLR type member or <see langword="null" /> for a shadow property.
                </para>
          <para>
                    An indexer with a <see cref="T:System.String" /> parameter and <see cref="T:System.Object" /> return type can be used.
                </para>
        </param>
        <param name="setTypeConfigurationSource">Indicates whether the type configuration source should be set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a property to this entity type.
            </summary>
        <returns>The newly created property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddServiceProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty AddServiceProperty (System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty AddServiceProperty(class System.Reflection.MemberInfo memberInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddServiceProperty(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddServiceProperty (memberInfo As MemberInfo, Optional fromDataAnnotation As Boolean = false) As IConventionServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member AddServiceProperty : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty" Usage="iConventionEntityType.AddServiceProperty (memberInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">The <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> of the property to add.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a service property to this entity type.
            </summary>
        <returns>The newly created service property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddServiceProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty AddServiceProperty (System.Reflection.MemberInfo memberInfo, Type? serviceType = default, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty AddServiceProperty(class System.Reflection.MemberInfo memberInfo, class System.Type serviceType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddServiceProperty(System.Reflection.MemberInfo,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddServiceProperty (memberInfo As MemberInfo, Optional serviceType As Type = Nothing, Optional fromDataAnnotation As Boolean = false) As IConventionServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member AddServiceProperty : System.Reflection.MemberInfo * Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty" Usage="iConventionEntityType.AddServiceProperty (memberInfo, serviceType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="serviceType" Type="System.Type" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">The <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> of the property to add.</param>
        <param name="serviceType">The type of the service, or <see langword="null" /> to use the type of the member.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a service property to this entity type.
            </summary>
        <returns>The newly created service property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSkipNavigation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation AddSkipNavigation (string name, System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool collection, bool onDependent, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation AddSkipNavigation(string name, class System.Reflection.MemberInfo memberInfo, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool collection, bool onDependent, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddSkipNavigation(System.String,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSkipNavigation (name As String, memberInfo As MemberInfo, targetEntityType As IConventionEntityType, collection As Boolean, onDependent As Boolean, Optional fromDataAnnotation As Boolean = false) As IConventionSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member AddSkipNavigation : string * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Usage="iConventionEntityType.AddSkipNavigation (name, memberInfo, targetEntityType, collection, onDependent, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation? AddSkipNavigation (string name, System.Reflection.MemberInfo? memberInfo, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool collection, bool onDependent, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="collection" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="onDependent" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the skip navigation property to add.</param>
        <param name="memberInfo">
          <para>
                    The corresponding CLR type member or <see langword="null" /> for a shadow navigation.
                </para>
          <para>
                    An indexer with a <see cref="T:System.String" /> parameter and <see cref="T:System.Object" /> return type can be used.
                </para>
        </param>
        <param name="targetEntityType">The entity type that the skip navigation property will hold an instance(s) of.</param>
        <param name="collection">Whether the navigation property is a collection property.</param>
        <param name="onDependent">
                Whether the navigation property is defined on the dependent side of the underlying foreign key.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a new skip navigation property to this entity type.
            </summary>
        <returns>The newly created skip navigation property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSkipNavigation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation? AddSkipNavigation (string name, Type? navigationType, System.Reflection.MemberInfo? memberInfo, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool collection, bool onDependent, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation AddSkipNavigation(string name, class System.Type navigationType, class System.Reflection.MemberInfo memberInfo, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType targetEntityType, bool collection, bool onDependent, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddSkipNavigation(System.String,System.Type,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSkipNavigation (name As String, navigationType As Type, memberInfo As MemberInfo, targetEntityType As IConventionEntityType, collection As Boolean, onDependent As Boolean, Optional fromDataAnnotation As Boolean = false) As IConventionSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member AddSkipNavigation : string * Type * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Usage="iConventionEntityType.AddSkipNavigation (name, navigationType, memberInfo, targetEntityType, collection, onDependent, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="navigationType" Type="System.Type" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="3" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="collection" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="onDependent" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="6" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the skip navigation property to add.</param>
        <param name="navigationType">The navigation type.</param>
        <param name="memberInfo">
          <para>
                    The corresponding CLR type member or <see langword="null" /> for a shadow navigation.
                </para>
          <para>
                    An indexer with a <see cref="T:System.String" /> parameter and <see cref="T:System.Object" /> return type can be used.
                </para>
        </param>
        <param name="targetEntityType">The entity type that the skip navigation property will hold an instance(s) of.</param>
        <param name="collection">Whether the navigation property is a collection property.</param>
        <param name="onDependent">
                Whether the navigation property is defined on the dependent side of the underlying foreign key.
            </param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Adds a new skip navigation property to this entity type.
            </summary>
        <returns>The newly created skip navigation property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTrigger">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger? AddTrigger (string name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger AddTrigger(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddTrigger(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTrigger (name As String, Optional fromDataAnnotation As Boolean = false) As IConventionTrigger" />
      <MemberSignature Language="F#" Value="abstract member AddTrigger : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger" Usage="iConventionEntityType.AddTrigger (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The trigger name.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Creates a new trigger with the given name on entity type. Throws an exception if a trigger with the same name exists on the same
                entity type.
            </summary>
        <returns>The trigger.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType BaseType { get; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType BaseType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As IConventionEntityType" />
      <MemberSignature Language="F#" Value="member this.BaseType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.BaseType" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType? BaseType { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the base type of this entity type. Returns <see langword="null" /> if this is not a derived type in an inheritance hierarchy.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Builder">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Builder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder Builder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.Builder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Builder As IConventionEntityTypeBuilder" />
      <MemberSignature Language="F#" Value="member this.Builder : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.Builder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the builder that can be used to configure this entity type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">If the entity type has been removed from the model.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefiningEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType DefiningEntityType { get; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType DefiningEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.DefiningEntityType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefiningEntityType As IConventionEntityType" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.DefiningEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.DefiningEntityType" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType? DefiningEntityType { get; }" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DefiningEntityType As IConventionEntityType" FrameworkAlternate="efcore-6.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Entity types with defining navigations have been replaced by shared-type entity types")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Entity types with defining navigations have been replaced by shared-type entity types")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the defining entity type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindClosestCommonParent">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType? FindClosestCommonParent (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType otherEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType FindClosestCommonParent(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType otherEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindClosestCommonParent(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindClosestCommonParent (otherEntityType As IReadOnlyEntityType) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindClosestCommonParent : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&#xA;override this.FindClosestCommonParent : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionEntityType.FindClosestCommonParent otherEntityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="otherEntityType">Another entity type.</param>
        <summary>
                Returns the closest entity type that is a parent of both given entity types. If one of the given entities is
                a parent of the other, that parent is returned. Returns <see langword="null" /> if the two entity types aren't
                in the same hierarchy.
            </summary>
        <returns>
                The closest common parent of this entity type and <paramref name="otherEntityType" />,
                or <see langword="null" /> if they have not common parent.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredForeignKeys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindDeclaredForeignKeys (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindDeclaredForeignKeys(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindDeclaredForeignKeys(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindDeclaredForeignKeys (properties As IReadOnlyList(Of IReadOnlyProperty)) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member FindDeclaredForeignKeys : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;&#xA;override this.FindDeclaredForeignKeys : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="iConventionEntityType.FindDeclaredForeignKeys properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties to find the foreign keys on.</param>
        <summary>
                Gets the foreign keys declared on this entity type using the given properties.
            </summary>
        <returns>Declared foreign keys.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation? FindDeclaredNavigation (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindDeclaredNavigation(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindDeclaredNavigation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindDeclaredNavigation (name As String) As IConventionNavigation" />
      <MemberSignature Language="F#" Value="abstract member FindDeclaredNavigation : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&#xA;override this.FindDeclaredNavigation : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Usage="iConventionEntityType.FindDeclaredNavigation name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the navigation property on the entity class.</param>
        <summary>
                Gets a navigation property on the given entity type. Does not return navigation properties defined on a base type.
                Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns>The navigation property, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? FindDeclaredProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty FindDeclaredProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindDeclaredProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindDeclaredProperty (name As String) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member FindDeclaredProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&#xA;override this.FindDeclaredProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.FindDeclaredProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">The property name.</param>
        <summary>
                Finds a property declared on the type with the given name.
                Does not return properties defined on a base type.
            </summary>
        <returns>The property, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation FindDeclaredSkipNavigation (string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation FindDeclaredSkipNavigation(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindDeclaredSkipNavigation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindDeclaredSkipNavigation (name As String) As IConventionSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member FindDeclaredSkipNavigation : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&#xA;override this.FindDeclaredSkipNavigation : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Usage="iConventionEntityType.FindDeclaredSkipNavigation name" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation? FindDeclaredSkipNavigation (string name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the navigation property on the entity class.</param>
        <summary>
                Gets a skip navigation property on this entity type. Does not return skip navigation properties defined on a base type.
                Returns <see langword="null" /> if no skip navigation property is found.
            </summary>
        <returns>The navigation property, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDeclaredTrigger">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger? FindDeclaredTrigger (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger FindDeclaredTrigger(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindDeclaredTrigger(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindDeclaredTrigger (name As String) As IConventionTrigger" />
      <MemberSignature Language="F#" Value="abstract member FindDeclaredTrigger : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger" Usage="iConventionEntityType.FindDeclaredTrigger name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The trigger name.</param>
        <summary>
                Finds a trigger with the given name.
            </summary>
        <returns>The trigger or <see langword="null" /> if no trigger with the given name was found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDiscriminatorProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? FindDiscriminatorProperty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty FindDiscriminatorProperty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindDiscriminatorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindDiscriminatorProperty () As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member FindDiscriminatorProperty : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&#xA;override this.FindDiscriminatorProperty : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.FindDiscriminatorProperty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the property that will be used for storing a discriminator value.
            </summary>
        <returns>The property that will be used for storing a discriminator value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey? FindForeignKey (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey FindForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindForeignKey (property As IReadOnlyProperty, principalKey As IReadOnlyKey, principalEntityType As IReadOnlyEntityType) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="abstract member FindForeignKey : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&#xA;override this.FindForeignKey : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="iConventionEntityType.FindForeignKey (property, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property that the foreign key is defined on.</param>
        <param name="principalKey">The primary or alternate key that is referenced.</param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key. Returns <see langword="null" />
                if no foreign key is found.
            </summary>
        <returns>The foreign key, or <see langword="null" /> if none is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey FindForeignKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey FindForeignKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, class Microsoft.EntityFrameworkCore.Metadata.IKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindForeignKey (properties As IReadOnlyList(Of IProperty), principalKey As IKey, principalEntityType As IEntityType) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="abstract member FindForeignKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IKey * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="iConventionEntityType.FindForeignKey (properties, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IKey" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="properties"> The properties that the foreign key is defined on. </param>
        <param name="principalKey"> The primary or alternate key that is referenced. </param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key.
                Returns <see langword="null" /> if no foreign key is found.
            </summary>
        <returns> The foreign key, or <see langword="null" /> if none is defined. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey? FindForeignKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey FindForeignKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty},Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindForeignKey (properties As IReadOnlyList(Of IReadOnlyProperty), principalKey As IReadOnlyKey, principalEntityType As IReadOnlyEntityType) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="abstract member FindForeignKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey * Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="iConventionEntityType.FindForeignKey (properties, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that the foreign key is defined on.</param>
        <param name="principalKey">The primary or alternate key that is referenced.</param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Gets the foreign key for the given properties that points to a given primary or alternate key.
                Returns <see langword="null" /> if no foreign key is found.
            </summary>
        <returns>The foreign key, or <see langword="null" /> if none is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKeys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindForeignKeys (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindForeignKeys(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindForeignKeys (property As IReadOnlyProperty) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;&#xA;override this.FindForeignKeys : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="iConventionEntityType.FindForeignKeys property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to find the foreign keys on.</param>
        <summary>
                Gets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified
                property are returned. Composite foreign keys that include the specified property are not returned.
            </summary>
        <returns>The foreign keys.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindForeignKeys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindForeignKeys (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; FindForeignKeys(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindForeignKeys(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindForeignKeys (properties As IReadOnlyList(Of IReadOnlyProperty)) As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member FindForeignKeys : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;&#xA;override this.FindForeignKeys : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="iConventionEntityType.FindForeignKeys properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties to find the foreign keys on.</param>
        <summary>
                Gets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified
                set of properties are returned.
            </summary>
        <returns>The foreign keys.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionIndex? FindIndex (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex FindIndex(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindIndex (property As IReadOnlyProperty) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member FindIndex : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&#xA;override this.FindIndex : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.FindIndex property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to find the index on.</param>
        <summary>
                Gets the unnamed index defined on the given property. Returns <see langword="null" /> if no such index is defined.
            </summary>
        <returns>The index, or <see langword="null" /> if none is found.</returns>
        <remarks>
                Named indexes will not be returned even if the list of properties matches.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex FindIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex FindIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (properties As IReadOnlyList(Of IProperty)) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member FindIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.FindIndex properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="properties"> The properties to find the index on. </param>
        <summary>
          <para>
                    Gets the unnamed index defined on the given properties. Returns <see langword="null" /> if no index is defined.
                </para>
          <para>
                    Named indexes will not be returned even if the list of properties matches.
                </para>
        </summary>
        <returns> The index, or <see langword="null" /> if none is found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex? FindIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex FindIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (properties As IReadOnlyList(Of IReadOnlyProperty)) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member FindIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.FindIndex properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties to find the index on.</param>
        <summary>
                Gets the unnamed index defined on the given properties. Returns <see langword="null" /> if no index is defined.
            </summary>
        <returns>The index, or <see langword="null" /> if none is found.</returns>
        <remarks>
                Named indexes will not be returned even if the list of properties matches.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex FindIndex (string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex FindIndex(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindIndex(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (name As String) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member FindIndex : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.FindIndex name" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex? FindIndex (string name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the index to find.</param>
        <summary>
                Gets the index with the given name. Returns <see langword="null" /> if no such index exists.
            </summary>
        <returns>The index, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionKey? FindKey (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey FindKey(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindKey(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindKey (property As IReadOnlyProperty) As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member FindKey : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey&#xA;override this.FindKey : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.FindKey property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property that the key is defined on.</param>
        <summary>
                Gets the primary or alternate key that is defined on the given property. Returns <see langword="null" /> if no key is defined
                for the given property.
            </summary>
        <returns>The key, or null if none is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey FindKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey FindKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindKey (properties As IReadOnlyList(Of IProperty)) As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member FindKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.FindKey properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="properties"> The properties that make up the key. </param>
        <summary>
                Gets the primary or alternate key that is defined on the given properties.
                Returns <see langword="null" /> if no key is defined for the given properties.
            </summary>
        <returns> The key, or <see langword="null" /> if none is defined. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey? FindKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey FindKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindKey (properties As IReadOnlyList(Of IReadOnlyProperty)) As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member FindKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.FindKey properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that make up the key.</param>
        <summary>
                Gets the primary or alternate key that is defined on the given properties.
                Returns <see langword="null" /> if no key is defined for the given properties.
            </summary>
        <returns>The key, or <see langword="null" /> if none is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation? FindNavigation (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindNavigation(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindNavigation(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindNavigation (memberInfo As MemberInfo) As IConventionNavigation" />
      <MemberSignature Language="F#" Value="abstract member FindNavigation : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&#xA;override this.FindNavigation : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Usage="iConventionEntityType.FindNavigation memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">The navigation property on the entity class.</param>
        <summary>
                Gets a navigation property on the given entity type. Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns>The navigation property, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation? FindNavigation (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation FindNavigation(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindNavigation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindNavigation (name As String) As IConventionNavigation" />
      <MemberSignature Language="F#" Value="abstract member FindNavigation : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&#xA;override this.FindNavigation : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Usage="iConventionEntityType.FindNavigation name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the navigation property on the entity class.</param>
        <summary>
                Gets a navigation property on the given entity type. Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns>The navigation property, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindOwnership">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey? FindOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey FindOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindOwnership () As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="abstract member FindOwnership : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&#xA;override this.FindOwnership : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="iConventionEntityType.FindOwnership " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the relationship to the owner if this is an owned type or <see langword="null" /> otherwise.
            </summary>
        <returns>The relationship to the owner if this is an owned type or <see langword="null" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPrimaryKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey FindPrimaryKey ();" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey FindPrimaryKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindPrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Public Function FindPrimaryKey () As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member FindPrimaryKey : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.FindPrimaryKey " />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey? FindPrimaryKey ();" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets primary key for this entity type. Returns <see langword="null" /> if no primary key is defined.
            </summary>
        <returns>The primary key, or <see langword="null" /> if none is defined.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;? FindProperties (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; FindProperties(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindProperties(System.Collections.Generic.IReadOnlyList{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindProperties (propertyNames As IReadOnlyList(Of String)) As IReadOnlyList(Of IConventionProperty)" />
      <MemberSignature Language="F#" Value="abstract member FindProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;&#xA;override this.FindProperties : System.Collections.Generic.IReadOnlyList&lt;string&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Usage="iConventionEntityType.FindProperties propertyNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyNames">The property names.</param>
        <summary>
                Finds matching properties on the given entity type. Returns <see langword="null" /> if any property is not found.
            </summary>
        <returns>The properties, or <see langword="null" /> if any property is not found.</returns>
        <remarks>
                This API only finds scalar properties and does not find navigation or service properties.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? FindProperty (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty FindProperty(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindProperty(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindProperty (memberInfo As MemberInfo) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member FindProperty : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&#xA;override this.FindProperty : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.FindProperty memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">The property on the entity class.</param>
        <summary>
                Gets a property on the given entity type. Returns <see langword="null" /> if no property is found.
            </summary>
        <returns>The property, or <see langword="null" /> if none is found.</returns>
        <remarks>
                This API only finds scalar properties and does not find navigation properties. Use
                <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindNavigation(System.Reflection.MemberInfo)" /> to find a navigation property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty FindProperty (string name);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty FindProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindProperty (name As String) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member FindProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.FindProperty name" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? FindProperty (string name);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property.</param>
        <summary>
                Gets the property with a given name. Returns <see langword="null" /> if no property with the given name is defined.
            </summary>
        <returns>The property, or <see langword="null" /> if none is found.</returns>
        <remarks>
                This API only finds scalar properties and does not find navigation properties. Use
                <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindNavigation(System.String)" /> to find a navigation property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindServiceProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty FindServiceProperty (string name);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty FindServiceProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindServiceProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindServiceProperty (name As String) As IConventionServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member FindServiceProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty" Usage="iConventionEntityType.FindServiceProperty name" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty? FindServiceProperty (string name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the service property.</param>
        <summary>
                Gets the service property with a given name.
                Returns <see langword="null" /> if no property with the given name is defined.
            </summary>
        <returns>The service property, or <see langword="null" /> if none is found.</returns>
        <remarks>
                This API only finds service properties and does not find scalar or navigation properties.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSkipNavigation">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation FindSkipNavigation (System.Reflection.MemberInfo memberInfo);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation FindSkipNavigation(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindSkipNavigation(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSkipNavigation (memberInfo As MemberInfo) As IConventionSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member FindSkipNavigation : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&#xA;override this.FindSkipNavigation : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Usage="iConventionEntityType.FindSkipNavigation memberInfo" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation? FindSkipNavigation (System.Reflection.MemberInfo memberInfo);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">The navigation property on the entity class.</param>
        <summary>
                Gets a skip navigation property on this entity type. Returns <see langword="null" /> if no navigation property is found.
            </summary>
        <returns>The navigation property, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSkipNavigation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation FindSkipNavigation (string name);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation FindSkipNavigation(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindSkipNavigation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindSkipNavigation (name As String) As IConventionSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member FindSkipNavigation : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Usage="iConventionEntityType.FindSkipNavigation name" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation? FindSkipNavigation (string name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the navigation property on the entity class.</param>
        <summary>
                Gets a skip navigation property on this entity type. Returns <see langword="null" /> if no skip navigation property is found.
            </summary>
        <returns>The navigation property, or <see langword="null" /> if none is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetAllBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllBaseTypes () As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetAllBaseTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;&#xA;override this.GetAllBaseTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="iConventionEntityType.GetAllBaseTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all types in the model from which this entity type derives, starting with the root.
            </summary>
        <returns>
                The base types.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypesAscending">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesAscending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesAscending() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetAllBaseTypesAscending" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllBaseTypesAscending () As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetAllBaseTypesAscending : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;&#xA;override this.GetAllBaseTypesAscending : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="iConventionEntityType.GetAllBaseTypesAscending " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all types in the model from which this entity type derives, starting with the closest one.
            </summary>
        <returns>
                The base types.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypesInclusive">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesInclusive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesInclusive() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetAllBaseTypesInclusive" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllBaseTypesInclusive () As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetAllBaseTypesInclusive : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;&#xA;override this.GetAllBaseTypesInclusive : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="iConventionEntityType.GetAllBaseTypesInclusive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns all base types of this entity type, including the type itself, top to bottom.
            </summary>
        <returns>Base types.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllBaseTypesInclusiveAscending">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesInclusiveAscending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetAllBaseTypesInclusiveAscending() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetAllBaseTypesInclusiveAscending" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllBaseTypesInclusiveAscending () As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetAllBaseTypesInclusiveAscending : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;&#xA;override this.GetAllBaseTypesInclusiveAscending : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="iConventionEntityType.GetAllBaseTypesInclusiveAscending " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns all base types of this entity type, including the type itself, bottom to top.
            </summary>
        <returns>Base types.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseTypeConfigurationSource">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetBaseTypeConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetBaseTypeConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetBaseTypeConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBaseTypeConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetBaseTypeConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionEntityType.GetBaseTypeConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the configuration source for the <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.BaseType" /> property.
            </summary>
        <returns>The configuration source for the <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.BaseType" /> property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangeTrackingStrategyConfigurationSource">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetChangeTrackingStrategyConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetChangeTrackingStrategyConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetChangeTrackingStrategyConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChangeTrackingStrategyConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetChangeTrackingStrategyConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionEntityType.GetChangeTrackingStrategyConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetChangeTrackingStrategy" />.
            </summary>
        <returns>The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetChangeTrackingStrategy" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConfigurationSource">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource GetConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource GetConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConfigurationSource () As ConfigurationSource" />
      <MemberSignature Language="F#" Value="abstract member GetConfigurationSource : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Usage="iConventionEntityType.GetConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the configuration source for this entity type.
            </summary>
        <returns>The configuration source.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredForeignKeys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDeclaredForeignKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDeclaredForeignKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredForeignKeys () As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;&#xA;override this.GetDeclaredForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="iConventionEntityType.GetDeclaredForeignKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all foreign keys declared on this entity type.
            </summary>
        <returns>Declared foreign keys.</returns>
        <remarks>
                This method does not return foreign keys declared on base types.
                It is useful when iterating over all entity types to avoid processing the same foreign key more than once.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetForeignKeys" /> to also return foreign keys declared on base types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredIndexes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt; GetDeclaredIndexes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt; GetDeclaredIndexes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredIndexes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredIndexes () As IEnumerable(Of IConventionIndex)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;&#xA;override this.GetDeclaredIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;" Usage="iConventionEntityType.GetDeclaredIndexes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all indexes declared on this entity type.
            </summary>
        <returns>Declared indexes.</returns>
        <remarks>
                This method does not return indexes declared on base types.
                It is useful when iterating over all entity types to avoid processing the same index more than once.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetIndexes" /> to also return indexes declared on base types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredKeys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt; GetDeclaredKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt; GetDeclaredKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredKeys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredKeys () As IEnumerable(Of IConventionKey)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt;&#xA;override this.GetDeclaredKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt;" Usage="iConventionEntityType.GetDeclaredKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all keys declared on the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" />.
            </summary>
        <returns>Declared keys.</returns>
        <remarks>
                This method does not return keys declared on base types.
                It is useful when iterating over all entity types to avoid processing the same key more than once.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetKeys" /> to also return keys declared on base types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredNavigations">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetDeclaredNavigations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetDeclaredNavigations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredNavigations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredNavigations () As IEnumerable(Of IConventionNavigation)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;&#xA;override this.GetDeclaredNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;" Usage="iConventionEntityType.GetDeclaredNavigations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all navigation properties declared on this entity type.
            </summary>
        <returns>Declared navigation properties.</returns>
        <remarks>
                This method does not return navigation properties declared on base types.
                It is useful when iterating over all entity types to avoid processing the same navigation property more than once.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetNavigations" /> to also return navigation properties declared on base types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; GetDeclaredProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; GetDeclaredProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredProperties" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredProperties () As IEnumerable(Of IConventionProperty)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;&#xA;override this.GetDeclaredProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Usage="iConventionEntityType.GetDeclaredProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all non-navigation properties declared on this entity type.
            </summary>
        <returns>Declared non-navigation properties.</returns>
        <remarks>
                This method does not return properties declared on base types.
                It is useful when iterating over all entity types to avoid processing the same property more than once.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetProperties" /> to also return properties declared on base types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredReferencingForeignKeys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDeclaredReferencingForeignKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDeclaredReferencingForeignKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredReferencingForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredReferencingForeignKeys () As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredReferencingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;&#xA;override this.GetDeclaredReferencingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="iConventionEntityType.GetDeclaredReferencingForeignKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                is the principal).
            </summary>
        <returns>The foreign keys that reference the given entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredServiceProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt; GetDeclaredServiceProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt; GetDeclaredServiceProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredServiceProperties" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredServiceProperties () As IEnumerable(Of IConventionServiceProperty)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredServiceProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;&#xA;override this.GetDeclaredServiceProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;" Usage="iConventionEntityType.GetDeclaredServiceProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all service properties declared on this entity type.
            </summary>
        <returns>Declared service properties.</returns>
        <remarks>
                This method does not return properties declared on base types.
                It is useful when iterating over all entity types to avoid processing the same property more than once.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetServiceProperties" /> to also return properties declared on base types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSkipNavigations">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt; GetDeclaredSkipNavigations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt; GetDeclaredSkipNavigations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredSkipNavigations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredSkipNavigations () As IEnumerable(Of IConventionSkipNavigation)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredSkipNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt;&#xA;override this.GetDeclaredSkipNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt;" Usage="iConventionEntityType.GetDeclaredSkipNavigations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the skip navigation properties declared on this entity type.
            </summary>
        <returns>Declared foreign keys.</returns>
        <remarks>
                This method does not return skip navigation properties declared declared on base types.
                It is useful when iterating over all entity types to avoid processing the same foreign key more than once.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetSkipNavigations" /> to also return skip navigation properties declared on base types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredTriggers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger&gt; GetDeclaredTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger&gt; GetDeclaredTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeclaredTriggers () As IEnumerable(Of IConventionTrigger)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredTriggers : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger&gt;" Usage="iConventionEntityType.GetDeclaredTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the declared triggers on the entity type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedForeignKeys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDerivedForeignKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetDerivedForeignKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDerivedForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDerivedForeignKeys () As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member GetDerivedForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;&#xA;override this.GetDerivedForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="iConventionEntityType.GetDerivedForeignKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all foreign keys declared on the types derived from this entity type.
            </summary>
        <returns>Derived foreign keys.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedIndexes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt; GetDerivedIndexes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt; GetDerivedIndexes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDerivedIndexes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDerivedIndexes () As IEnumerable(Of IConventionIndex)" />
      <MemberSignature Language="F#" Value="abstract member GetDerivedIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;&#xA;override this.GetDerivedIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;" Usage="iConventionEntityType.GetDerivedIndexes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all indexes declared on the types derived from this entity type.
            </summary>
        <returns>Derived indexes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedNavigations">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetDerivedNavigations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetDerivedNavigations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDerivedNavigations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDerivedNavigations () As IEnumerable(Of IConventionNavigation)" />
      <MemberSignature Language="F#" Value="abstract member GetDerivedNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;&#xA;override this.GetDerivedNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;" Usage="iConventionEntityType.GetDerivedNavigations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all navigation properties declared on the types derived from this entity type.
            </summary>
        <returns>Derived navigation properties.</returns>
        <remarks>
                This method does not return navigation properties declared on the given entity type itself.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetNavigations" /> to return navigation properties declared on this
                and base entity typed types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; GetDerivedProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; GetDerivedProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDerivedProperties" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDerivedProperties () As IEnumerable(Of IConventionProperty)" />
      <MemberSignature Language="F#" Value="abstract member GetDerivedProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;&#xA;override this.GetDerivedProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Usage="iConventionEntityType.GetDerivedProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all non-navigation properties declared on the types derived from this entity type.
            </summary>
        <returns>Derived non-navigation properties.</returns>
        <remarks>
                This method does not return properties declared on the given entity type itself.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetProperties" /> to return properties declared on this
                and base entity typed types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedServiceProperties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt; GetDerivedServiceProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt; GetDerivedServiceProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDerivedServiceProperties" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDerivedServiceProperties () As IEnumerable(Of IConventionServiceProperty)" />
      <MemberSignature Language="F#" Value="abstract member GetDerivedServiceProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;&#xA;override this.GetDerivedServiceProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;" Usage="iConventionEntityType.GetDerivedServiceProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all service properties declared on the types derived from this entity type.
            </summary>
        <returns>Derived service properties.</returns>
        <remarks>
                This method does not return service properties declared on the given entity type itself.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetServiceProperties" /> to return service properties declared on this
                and base entity typed types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedSkipNavigations">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt; GetDerivedSkipNavigations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt; GetDerivedSkipNavigations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDerivedSkipNavigations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDerivedSkipNavigations () As IEnumerable(Of IConventionSkipNavigation)" />
      <MemberSignature Language="F#" Value="abstract member GetDerivedSkipNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt;&#xA;override this.GetDerivedSkipNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt;" Usage="iConventionEntityType.GetDerivedSkipNavigations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all skip navigation properties declared on the types derived from this entity type.
            </summary>
        <returns>Derived skip navigation properties.</returns>
        <remarks>
                This method does not return skip navigation properties declared on the given entity type itself.
                Use <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetSkipNavigations" /> to return skip navigation properties declared on this
                and base entity typed types.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDerivedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDerivedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDerivedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDerivedTypes () As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetDerivedTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;&#xA;override this.GetDerivedTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="iConventionEntityType.GetDerivedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all types in the model that derive from this entity type.
            </summary>
        <returns>The derived types.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDerivedTypesInclusive">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDerivedTypesInclusive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDerivedTypesInclusive() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDerivedTypesInclusive" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDerivedTypesInclusive () As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetDerivedTypesInclusive : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;&#xA;override this.GetDerivedTypesInclusive : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="iConventionEntityType.GetDerivedTypesInclusive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns all derived types of this entity type, including the type itself.
            </summary>
        <returns>Derived types.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectlyDerivedTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDirectlyDerivedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetDirectlyDerivedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDirectlyDerivedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectlyDerivedTypes () As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetDirectlyDerivedTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;&#xA;override this.GetDirectlyDerivedTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="iConventionEntityType.GetDirectlyDerivedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all types in the model that directly derive from this entity type.
            </summary>
        <returns>The derived types.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiscriminatorMappingCompleteConfigurationSource">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetDiscriminatorMappingCompleteConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetDiscriminatorMappingCompleteConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDiscriminatorMappingCompleteConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDiscriminatorMappingCompleteConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetDiscriminatorMappingCompleteConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&#xA;override this.GetDiscriminatorMappingCompleteConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionEntityType.GetDiscriminatorMappingCompleteConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the discriminator value completeness.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> or <see langword="null" /> if discriminator completeness has not been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiscriminatorPropertyConfigurationSource">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetDiscriminatorPropertyConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetDiscriminatorPropertyConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDiscriminatorPropertyConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDiscriminatorPropertyConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetDiscriminatorPropertyConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionEntityType.GetDiscriminatorPropertyConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the discriminator property.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> or <see langword="null" /> if no discriminator property has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiscriminatorValueConfigurationSource">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetDiscriminatorValueConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetDiscriminatorValueConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDiscriminatorValueConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDiscriminatorValueConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetDiscriminatorValueConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&#xA;override this.GetDiscriminatorValueConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionEntityType.GetDiscriminatorValueConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the discriminator value.
            </summary>
        <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> or <see langword="null" /> if no discriminator value has been set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForeignKeys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetForeignKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetForeignKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForeignKeys () As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member GetForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="iConventionEntityType.GetForeignKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the foreign keys defined on this entity type.
            </summary>
        <returns>The foreign keys defined on this entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt; GetIndexes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt; GetIndexes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetIndexes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIndexes () As IEnumerable(Of IConventionIndex)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;" Usage="iConventionEntityType.GetIndexes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the indexes defined on this entity type.
            </summary>
        <returns>The indexes defined on this entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsKeylessConfigurationSource">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetIsKeylessConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetIsKeylessConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetIsKeylessConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIsKeylessConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetIsKeylessConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionEntityType.GetIsKeylessConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the configuration source for the IsKeyless property.
            </summary>
        <returns>The configuration source for the IsKeyless property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt; GetKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt; GetKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetKeys" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKeys () As IEnumerable(Of IConventionKey)" />
      <MemberSignature Language="F#" Value="abstract member GetKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt;" Usage="iConventionEntityType.GetKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the primary and alternate keys for this entity type.
            </summary>
        <returns>The primary and alternate keys.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNavigationAccessModeConfigurationSource">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetNavigationAccessModeConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetNavigationAccessModeConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetNavigationAccessModeConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNavigationAccessModeConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetNavigationAccessModeConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&#xA;override this.GetNavigationAccessModeConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionEntityType.GetNavigationAccessModeConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetNavigationAccessMode" />.
            </summary>
        <returns>The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetNavigationAccessMode" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNavigations">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetNavigations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt; GetNavigations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetNavigations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNavigations () As IEnumerable(Of IConventionNavigation)" />
      <MemberSignature Language="F#" Value="abstract member GetNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;&#xA;override this.GetNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;" Usage="iConventionEntityType.GetNavigations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all navigation properties on the given entity type.
            </summary>
        <returns>All navigation properties on the given entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrimaryKeyConfigurationSource">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetPrimaryKeyConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetPrimaryKeyConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetPrimaryKeyConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrimaryKeyConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetPrimaryKeyConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionEntityType.GetPrimaryKeyConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the configuration source for the primary key.
            </summary>
        <returns>The configuration source for the primary key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As IEnumerable(Of IConventionProperty)" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" Usage="iConventionEntityType.GetProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the properties defined on this entity type.
            </summary>
        <returns>The properties defined on this entity type.</returns>
        <remarks>
                This API only returns scalar properties and does not return navigation properties. Use
                <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetNavigations" /> to get navigation properties.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionProperty GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProperty (name As String) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&#xA;override this.GetProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.GetProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">The property name.</param>
        <summary>
                Gets a property with the given name.
            </summary>
        <returns>The property.</returns>
        <remarks>
                This API only finds scalar properties and does not find navigation properties. Use
                <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindNavigation(System.String)" /> to find a navigation property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryFilterConfigurationSource">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetQueryFilterConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetQueryFilterConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetQueryFilterConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Function GetQueryFilterConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetQueryFilterConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionEntityType.GetQueryFilterConfigurationSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetQueryFilter" />.
            </summary>
        <returns>The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetQueryFilter" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencingForeignKeys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetReferencingForeignKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt; GetReferencingForeignKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetReferencingForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReferencingForeignKeys () As IEnumerable(Of IConventionForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member GetReferencingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;&#xA;override this.GetReferencingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;" Usage="iConventionEntityType.GetReferencingForeignKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type
                or a type it's derived from is the principal).
            </summary>
        <returns>The foreign keys that reference the given entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRootType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType GetRootType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType GetRootType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetRootType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRootType () As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member GetRootType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&#xA;override this.GetRootType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionEntityType.GetRootType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the root base type for this entity type.
            </summary>
        <returns>
                The root base type. If this entity type is not a derived type, then the same entity type is returned.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceProperties">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt; GetServiceProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt; GetServiceProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetServiceProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetServiceProperties () As IEnumerable(Of IConventionServiceProperty)" />
      <MemberSignature Language="F#" Value="abstract member GetServiceProperties : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;" Usage="iConventionEntityType.GetServiceProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all the service properties defined on this entity type.
            </summary>
        <returns>The service properties defined on this entity type.</returns>
        <remarks>
                This API only returns service properties and does not return scalar or navigation properties.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSkipNavigations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt; GetSkipNavigations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt; GetSkipNavigations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetSkipNavigations" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSkipNavigations () As IEnumerable(Of IConventionSkipNavigation)" />
      <MemberSignature Language="F#" Value="abstract member GetSkipNavigations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt;" Usage="iConventionEntityType.GetSkipNavigations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all skip navigation properties on this entity type.
            </summary>
        <returns>All skip navigation properties on this entity type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBaseType">
      <MemberSignature Language="C#" Value="public void HasBaseType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HasBaseType(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.HasBaseType(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HasBaseType (entityType As IConventionEntityType, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasBaseType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; unit" Usage="iConventionEntityType.HasBaseType (entityType, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual void HasBaseType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HasBaseType (entityType As IConventionEntityType, Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member HasBaseType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; unit&#xA;override this.HasBaseType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; unit" Usage="iConventionEntityType.HasBaseType (entityType, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="C#" Value="public virtual void HasBaseType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType? entityType, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use SetBaseType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use SetBaseType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The base entity type.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the base type of this entity type. Returns <see langword="null" /> if this is not a derived type in an inheritance hierarchy.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNoKey">
      <MemberSignature Language="C#" Value="public void HasNoKey (bool? keyless, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HasNoKey(valuetype System.Nullable`1&lt;bool&gt; keyless, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.HasNoKey(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HasNoKey (keyless As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member HasNoKey : Nullable&lt;bool&gt; * bool -&gt; unit" Usage="iConventionEntityType.HasNoKey (keyless, fromDataAnnotation)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual void HasNoKey (bool? keyless, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub HasNoKey (keyless As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberSignature Language="F#" Value="abstract member HasNoKey : Nullable&lt;bool&gt; * bool -&gt; unit&#xA;override this.HasNoKey : Nullable&lt;bool&gt; * bool -&gt; unit" Usage="iConventionEntityType.HasNoKey (keyless, fromDataAnnotation)" FrameworkAlternate="efcore-5.0;efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0">
          <AttributeName Language="C#">[System.Obsolete("Use SetIsKeyless")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use SetIsKeyless")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyless" Type="System.Nullable&lt;System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0" />
      </Parameters>
      <Docs>
        <param name="keyless">A value indicating whether the entity type to has no keys.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value indicating whether the entity type has no keys.
                When set to <see langword="true" /> it will only be usable for queries.
                <see langword="null" /> to reset to default.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyless">
      <MemberSignature Language="C#" Value="public bool IsKeyless { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyless" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.IsKeyless" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyless As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsKeyless : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.IsKeyless" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether the entity type has no keys.
                If <see langword="true" /> it will only be usable for queries.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeastDerivedType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType? LeastDerivedType (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType otherEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType LeastDerivedType(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType otherEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LeastDerivedType (otherEntityType As IReadOnlyEntityType) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member LeastDerivedType : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&#xA;override this.LeastDerivedType : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionEntityType.LeastDerivedType otherEntityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="otherEntityType">The other entity type to compare with.</param>
        <summary>
                Gets the least derived type between the specified two.
            </summary>
        <returns>
                The least derived type between the specified two.
                If the given entity types are not related, then <see langword="null" /> is returned.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionModel Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionModel Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.Model" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Model As IConventionModel" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.EntityFrameworkCore.Metadata.IConventionModel" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.Model" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase.Model</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the model this entity belongs to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDiscriminatorValue">
      <MemberSignature Language="C#" Value="public virtual object? RemoveDiscriminatorValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RemoveDiscriminatorValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveDiscriminatorValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveDiscriminatorValue () As Object" />
      <MemberSignature Language="F#" Value="abstract member RemoveDiscriminatorValue : unit -&gt; obj&#xA;override this.RemoveDiscriminatorValue : unit -&gt; obj" Usage="iConventionEntityType.RemoveDiscriminatorValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Removes the discriminator value for this entity type.
            </summary>
        <returns>The removed discriminator value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveForeignKey">
      <MemberSignature Language="C#" Value="public void RemoveForeignKey (Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveForeignKey (foreignKey As IConventionForeignKey)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey -&gt; unit" Usage="iConventionEntityType.RemoveForeignKey foreignKey" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey RemoveForeignKey (Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey RemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveForeignKey (foreignKey As IConventionForeignKey) As IConventionForeignKey" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="iConventionEntityType.RemoveForeignKey foreignKey" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey"> The foreign key to be removed. </param>
        <summary>
                Removes a foreign key from this entity type.
            </summary>
        <returns> The removed foreign key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveForeignKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey? RemoveForeignKey (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey RemoveForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveForeignKey(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveForeignKey (foreignKey As IReadOnlyForeignKey) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="abstract member RemoveForeignKey : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="iConventionEntityType.RemoveForeignKey foreignKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="foreignKey">The foreign key to be removed.</param>
        <summary>
                Removes a foreign key from this entity type.
            </summary>
        <returns>The removed foreign key, or <see langword="null" /> if the index was not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveForeignKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey? RemoveForeignKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties, Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey RemoveForeignKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties, class Microsoft.EntityFrameworkCore.Metadata.IConventionKey principalKey, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty},Microsoft.EntityFrameworkCore.Metadata.IConventionKey,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveForeignKey (properties As IReadOnlyList(Of IReadOnlyProperty), principalKey As IConventionKey, principalEntityType As IConventionEntityType) As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="abstract member RemoveForeignKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; * Microsoft.EntityFrameworkCore.Metadata.IConventionKey * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="iConventionEntityType.RemoveForeignKey (properties, principalKey, principalEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that the foreign key is defined on.</param>
        <param name="principalKey">The primary or alternate key that is referenced.</param>
        <param name="principalEntityType">
                The entity type that the relationship targets. This may be different from the type that <paramref name="principalKey" />
                is defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the
                base type of the hierarchy).
            </param>
        <summary>
                Removes a foreign key from this entity type.
            </summary>
        <returns>The foreign key that was removed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIndex">
      <MemberSignature Language="C#" Value="public void RemoveIndex (Microsoft.EntityFrameworkCore.Metadata.IConventionIndex index);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveIndex(class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex index) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveIndex (index As IConventionIndex)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member RemoveIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionIndex -&gt; unit" Usage="iConventionEntityType.RemoveIndex index" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex RemoveIndex (Microsoft.EntityFrameworkCore.Metadata.IConventionIndex index);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex RemoveIndex(class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex index) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveIndex (index As IConventionIndex) As IConventionIndex" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member RemoveIndex : Microsoft.EntityFrameworkCore.Metadata.IConventionIndex -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.RemoveIndex index" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="index"> The index to remove. </param>
        <summary>
                Removes an index from this entity type.
            </summary>
        <returns> The removed index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIndex">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex? RemoveIndex (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex RemoveIndex(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveIndex(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveIndex (index As IReadOnlyIndex) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member RemoveIndex : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.RemoveIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="index">The index to remove.</param>
        <summary>
                Removes an index from this entity type.
            </summary>
        <returns>The removed index, or <see langword="null" /> if the index was not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIndex">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionIndex? RemoveIndex (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionIndex RemoveIndex(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveIndex(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveIndex (properties As IReadOnlyList(Of IReadOnlyProperty)) As IConventionIndex" />
      <MemberSignature Language="F#" Value="abstract member RemoveIndex : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" Usage="iConventionEntityType.RemoveIndex properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that make up the index.</param>
        <summary>
                Removes an index from this entity type.
            </summary>
        <returns>The index that was removed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKey">
      <MemberSignature Language="C#" Value="public void RemoveKey (Microsoft.EntityFrameworkCore.Metadata.IConventionKey key);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionKey key) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveKey(Microsoft.EntityFrameworkCore.Metadata.IConventionKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveKey (key As IConventionKey)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member RemoveKey : Microsoft.EntityFrameworkCore.Metadata.IConventionKey -&gt; unit" Usage="iConventionEntityType.RemoveKey key" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey RemoveKey (Microsoft.EntityFrameworkCore.Metadata.IConventionKey key);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey RemoveKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionKey key) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveKey (key As IConventionKey) As IConventionKey" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member RemoveKey : Microsoft.EntityFrameworkCore.Metadata.IConventionKey -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.RemoveKey key" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="key"> The key to be removed. </param>
        <summary>
                Removes a primary or alternate key from this entity type.
            </summary>
        <returns> The removed key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey? RemoveKey (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey RemoveKey(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveKey(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveKey (key As IReadOnlyKey) As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member RemoveKey : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.RemoveKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="key">The key to be removed.</param>
        <summary>
                Removes a primary or alternate key from this entity type.
            </summary>
        <returns>The removed key, or <see langword="null" /> if the key was not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey? RemoveKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey RemoveKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveKey (properties As IReadOnlyList(Of IReadOnlyProperty)) As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member RemoveKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.RemoveKey properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that make up the key.</param>
        <summary>
                Removes a primary or alternate key from this entity type.
            </summary>
        <returns>The key that was removed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public void RemoveProperty (Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property);" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property) cil managed" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveProperty (property As IConventionProperty)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="abstract member RemoveProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty -&gt; unit" Usage="iConventionEntityType.RemoveProperty property" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty RemoveProperty (Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty RemoveProperty(class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property) cil managed" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveProperty (property As IConventionProperty) As IConventionProperty" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member RemoveProperty : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.RemoveProperty property" FrameworkAlternate="efcore-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1">System.Void</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0">Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="property"> The property to remove. </param>
        <summary>
                Removes a property from this entity type.
            </summary>
        <returns> The removed property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? RemoveProperty (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty RemoveProperty(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveProperty(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveProperty (property As IReadOnlyProperty) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member RemoveProperty : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.RemoveProperty property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to remove.</param>
        <summary>
                Removes a property from this entity type.
            </summary>
        <returns>The removed property, or <see langword="null" /> if the property was not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? RemoveProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty RemoveProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveProperty (name As String) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member RemoveProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.RemoveProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to remove.</param>
        <summary>
                Removes a property from this entity type.
            </summary>
        <returns>The property that was removed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveServiceProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty? RemoveServiceProperty (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty RemoveServiceProperty(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveServiceProperty(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveServiceProperty (property As IReadOnlyServiceProperty) As IConventionServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member RemoveServiceProperty : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty" Usage="iConventionEntityType.RemoveServiceProperty property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to remove.</param>
        <summary>
                Removes a service property from this entity type.
            </summary>
        <returns>The removed property, or <see langword="null" /> if the property was not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveServiceProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty RemoveServiceProperty (string name);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty RemoveServiceProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveServiceProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveServiceProperty (name As String) As IConventionServiceProperty" />
      <MemberSignature Language="F#" Value="abstract member RemoveServiceProperty : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty" Usage="iConventionEntityType.RemoveServiceProperty name" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty? RemoveServiceProperty (string name);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to remove.</param>
        <summary>
                Removes a service property from this entity type.
            </summary>
        <returns>The property that was removed, or <see langword="null" /> if the property was not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSkipNavigation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation RemoveSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation RemoveSkipNavigation(class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveSkipNavigation (navigation As IConventionSkipNavigation) As IConventionSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member RemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Usage="iConventionEntityType.RemoveSkipNavigation navigation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Index="0" FrameworkAlternate="efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="navigation"> The skip navigation to be removed. </param>
        <summary>
                Removes a skip navigation property from this entity type.
            </summary>
        <returns> The removed skip navigation. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSkipNavigation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation? RemoveSkipNavigation (Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation RemoveSkipNavigation(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveSkipNavigation(Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveSkipNavigation (navigation As IReadOnlySkipNavigation) As IConventionSkipNavigation" />
      <MemberSignature Language="F#" Value="abstract member RemoveSkipNavigation : Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Usage="iConventionEntityType.RemoveSkipNavigation navigation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigation">The skip navigation to be removed.</param>
        <summary>
                Removes a skip navigation property from this entity type.
            </summary>
        <returns>The removed skip navigation, or <see langword="null" /> if the skip navigation was not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTrigger">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger? RemoveTrigger (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger RemoveTrigger(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveTrigger(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveTrigger (name As String) As IConventionTrigger" />
      <MemberSignature Language="F#" Value="abstract member RemoveTrigger : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger" Usage="iConventionEntityType.RemoveTrigger name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The trigger name.</param>
        <summary>
                Removes the trigger with the given name.
            </summary>
        <returns>
                The removed trigger or <see langword="null" /> if no trigger with the given name was found
                or the existing trigger was configured from a higher source.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBaseType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType SetBaseType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType SetBaseType(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetBaseType(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBaseType (entityType As IConventionEntityType, Optional fromDataAnnotation As Boolean = false) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member SetBaseType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionEntityType.SetBaseType (entityType, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType? SetBaseType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType? entityType, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">The base entity type.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the base type of this entity type. Returns <see langword="null" /> if this is not a derived type in an inheritance hierarchy.
            </summary>
        <returns>The new base type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? SetChangeTrackingStrategy (Microsoft.EntityFrameworkCore.ChangeTrackingStrategy? changeTrackingStrategy, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; SetChangeTrackingStrategy(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetChangeTrackingStrategy(System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetChangeTrackingStrategy (changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy), Optional fromDataAnnotation As Boolean = false) As Nullable(Of ChangeTrackingStrategy)" />
      <MemberSignature Language="F#" Value="abstract member SetChangeTrackingStrategy : Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Usage="iConventionEntityType.SetChangeTrackingStrategy (changeTrackingStrategy, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeTrackingStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="changeTrackingStrategy">The strategy to use.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the change tracking strategy to use for this entity type. This strategy indicates how the
                context detects changes to properties for an instance of the entity type.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDiscriminatorMappingComplete">
      <MemberSignature Language="C#" Value="public virtual bool? SetDiscriminatorMappingComplete (bool? complete, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;bool&gt; SetDiscriminatorMappingComplete(valuetype System.Nullable`1&lt;bool&gt; complete, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetDiscriminatorMappingComplete(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetDiscriminatorMappingComplete (complete As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetDiscriminatorMappingComplete : Nullable&lt;bool&gt; * bool -&gt; Nullable&lt;bool&gt;&#xA;override this.SetDiscriminatorMappingComplete : Nullable&lt;bool&gt; * bool -&gt; Nullable&lt;bool&gt;" Usage="iConventionEntityType.SetDiscriminatorMappingComplete (complete, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complete" Type="System.Nullable&lt;System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complete">The value indicating whether the discriminator mapping is complete.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the value indicating whether the discriminator mapping is complete.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDiscriminatorProperty">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? SetDiscriminatorProperty (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty? property, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty SetDiscriminatorProperty(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty property, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetDiscriminatorProperty(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetDiscriminatorProperty (property As IReadOnlyProperty, Optional fromDataAnnotation As Boolean = false) As IConventionProperty" />
      <MemberSignature Language="F#" Value="abstract member SetDiscriminatorProperty : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="iConventionEntityType.SetDiscriminatorProperty (property, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The property to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" /> that will be used for storing a discriminator value.
            </summary>
        <returns>The discriminator property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDiscriminatorValue">
      <MemberSignature Language="C#" Value="public virtual object? SetDiscriminatorValue (object? value, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object SetDiscriminatorValue(object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetDiscriminatorValue(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetDiscriminatorValue (value As Object, Optional fromDataAnnotation As Boolean = false) As Object" />
      <MemberSignature Language="F#" Value="abstract member SetDiscriminatorValue : obj * bool -&gt; obj&#xA;override this.SetDiscriminatorValue : obj * bool -&gt; obj" Usage="iConventionEntityType.SetDiscriminatorValue (value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the discriminator value for this entity type.
            </summary>
        <returns>The configured value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsKeyless">
      <MemberSignature Language="C#" Value="public bool? SetIsKeyless (bool? keyless, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;bool&gt; SetIsKeyless(valuetype System.Nullable`1&lt;bool&gt; keyless, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetIsKeyless(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetIsKeyless (keyless As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetIsKeyless : Nullable&lt;bool&gt; * bool -&gt; Nullable&lt;bool&gt;" Usage="iConventionEntityType.SetIsKeyless (keyless, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyless" Type="System.Nullable&lt;System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="keyless">A value indicating whether the entity type to has no keys.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets a value indicating whether the entity type has no keys.
                When set to <see langword="true" /> it will only be usable for queries.
                <see langword="null" /> to reset to default.
            </summary>
        <returns>The new configuration value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNavigationAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.PropertyAccessMode? SetNavigationAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; SetNavigationAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetNavigationAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetNavigationAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), Optional fromDataAnnotation As Boolean = false) As Nullable(Of PropertyAccessMode)" />
      <MemberSignature Language="F#" Value="abstract member SetNavigationAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;&#xA;override this.SetNavigationAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Usage="iConventionEntityType.SetNavigationAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or <see langword="null" /> to clear the mode set.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for navigations of this entity type.
            </summary>
        <returns>The configured value.</returns>
        <remarks>
                Note that individual navigations can override this access mode. The value set here will
                be used for any navigation for which no override has been specified.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPrimaryKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionKey SetPrimaryKey (Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey SetPrimaryKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty property, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetPrimaryKey (property As IConventionProperty, Optional fromDataAnnotation As Boolean = false) As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member SetPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey&#xA;override this.SetPrimaryKey : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.SetPrimaryKey (property, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IConventionKey? SetPrimaryKey (Microsoft.EntityFrameworkCore.Metadata.IConventionProperty? property, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">The primary key property.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the primary key for this entity type.
            </summary>
        <returns>The newly created key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPrimaryKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey SetPrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionKey SetPrimaryKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetPrimaryKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetPrimaryKey (properties As IReadOnlyList(Of IConventionProperty), Optional fromDataAnnotation As Boolean = false) As IConventionKey" />
      <MemberSignature Language="F#" Value="abstract member SetPrimaryKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionKey" Usage="iConventionEntityType.SetPrimaryKey (properties, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionKey? SetPrimaryKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;? properties, bool fromDataAnnotation = false);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="properties">The properties that make up the primary key.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the primary key for this entity type.
            </summary>
        <returns>The newly created key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetQueryFilter">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LambdaExpression? SetQueryFilter (System.Linq.Expressions.LambdaExpression? queryFilter, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.LambdaExpression SetQueryFilter(class System.Linq.Expressions.LambdaExpression queryFilter, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetQueryFilter(System.Linq.Expressions.LambdaExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetQueryFilter (queryFilter As LambdaExpression, Optional fromDataAnnotation As Boolean = false) As LambdaExpression" />
      <MemberSignature Language="F#" Value="abstract member SetQueryFilter : System.Linq.Expressions.LambdaExpression * bool -&gt; System.Linq.Expressions.LambdaExpression" Usage="iConventionEntityType.SetQueryFilter (queryFilter, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryFilter" Type="System.Linq.Expressions.LambdaExpression" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="queryFilter">The LINQ expression filter.</param>
        <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
        <summary>
                Sets the LINQ expression filter automatically applied to queries for this entity type.
            </summary>
        <returns>The configured filter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
