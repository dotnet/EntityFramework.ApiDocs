<Type Name="IMutablePropertyBase" FullName="Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase">
  <TypeSignature Language="C#" Value="public interface IMutablePropertyBase : Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMutablePropertyBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMutablePropertyBase&#xA;Implements IMutableAnnotatable, IPropertyBase" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type IMutablePropertyBase = interface&#xA;    interface IPropertyBase&#xA;    interface IAnnotatable&#xA;    interface IMutableAnnotatable" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="C#" Value="public interface IMutablePropertyBase : Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMutablePropertyBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMutablePropertyBase&#xA;Implements IMutableAnnotatable, IReadOnlyPropertyBase" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type IMutablePropertyBase = interface&#xA;    interface IReadOnlyPropertyBase&#xA;    interface IReadOnlyAnnotatable&#xA;    interface IMutableAnnotatable" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IMutablePropertyBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IPropertyBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Base type for navigation and scalar properties.
            </summary>
    <remarks>
      <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" /> represents a read-only view of the same metadata.
                </para>
      <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and
                    examples.
                </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase DeclaringType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As IMutableTypeBase" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase" Usage="Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the type that this property belongs to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo FieldInfo { get; set; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.FieldInfo FieldInfo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.FieldInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldInfo As FieldInfo" />
      <MemberSignature Language="F#" Value="member this.FieldInfo : System.Reflection.FieldInfo with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.FieldInfo" />
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo? FieldInfo { get; set; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets the underlying CLR field for this property.
                This may be <see langword="null" /> for shadow properties or if the backing field for the property is not known.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetField">
      <MemberSignature Language="C#" Value="public virtual void SetField (string fieldName);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetField(string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.SetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetField (fieldName As String)" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member SetField : string -&gt; unit&#xA;override this.SetField : string -&gt; unit" Usage="iMutablePropertyBase.SetField fieldName" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="C#" Value="public void SetField (string? fieldName);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetField (fieldName As String)" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member SetField : string -&gt; unit" Usage="iMutablePropertyBase.SetField fieldName" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">The name of the field to use.</param>
        <summary>
                Sets the underlying CLR field that this property should use.
            </summary>
        <remarks>
          <para>
                    Backing fields are normally found by convention.
                    This method is useful for setting backing fields explicitly in cases where the
                    correct field is not found by convention.
                </para>
          <para>
                    By default, the backing field, if one is found or has been specified, is used when
                    new objects are constructed, typically when entities are queried from the database.
                    Properties are used for all other accesses. This can be changed by calling
                    <see cref="M:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.SetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />.
                </para>
          <para>
                    See <see href="https://aka.ms/efcore-docs-backing-fields">Backing fields</see> for more information and examples.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public void SetPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.SetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode))" />
      <MemberSignature Language="F#" Value="abstract member SetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; -&gt; unit" Usage="iMutablePropertyBase.SetPropertyAccessMode propertyAccessMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">
                The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or <see langword="null" />
                to clear the mode set.
            </param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
