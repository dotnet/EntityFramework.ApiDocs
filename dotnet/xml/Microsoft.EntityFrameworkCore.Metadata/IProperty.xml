<Type Name="IProperty" FullName="Microsoft.EntityFrameworkCore.Metadata.IProperty">
  <TypeSignature Language="C#" Value="public interface IProperty : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProperty implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProperty&#xA;Implements IPropertyBase" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type IProperty = interface&#xA;    interface IPropertyBase&#xA;    interface IAnnotatable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="C#" Value="public interface IProperty : Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProperty implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" FrameworkAlternate="efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProperty&#xA;Implements IPropertyBase, IReadOnlyProperty" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type IProperty = interface&#xA;    interface IReadOnlyProperty&#xA;    interface IReadOnlyPropertyBase&#xA;    interface IReadOnlyAnnotatable&#xA;    interface IPropertyBase&#xA;    interface IAnnotatable" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IProperty implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IPropertyBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Represents a scalar property of a structural type.
            </summary>
    <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterSaveBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior AfterSaveBehavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior AfterSaveBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.AfterSaveBehavior" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AfterSaveBehavior As PropertySaveBehavior" />
      <MemberSignature Language="F#" Value="member this.AfterSaveBehavior : Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.AfterSaveBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Gets a value indicating whether or not this property can be modified after the entity is
                    saved to the database.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a new value is assigned to this property after the entity exists in the database.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any modification to the
                    property value of an entity that already exists in the database will be ignored.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSaveBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior BeforeSaveBehavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior BeforeSaveBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeforeSaveBehavior As PropertySaveBehavior" />
      <MemberSignature Language="F#" Value="member this.BeforeSaveBehavior : Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
                    Gets a value indicating whether or not this property can be modified before the entity is
                    saved to the database.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Throw" />, then an exception
                    will be thrown if a value is assigned to this property when it is in
                    the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
          <para>
                    If <see cref="F:Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior.Ignore" />, then any value
                    set will be ignored when it is in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" /> state.
                </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClrType">
      <MemberSignature Language="C#" Value="public Type ClrType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ClrType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.ClrType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClrType As Type" />
      <MemberSignature Language="F#" Value="member this.ClrType : Type" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.ClrType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.ClrType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the type of value that this property holds.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyEqualityComparer&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEqualityComparer&lt;TProperty&gt; CreateKeyEqualityComparer&lt;TProperty&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEqualityComparer`1&lt;!!TProperty&gt; CreateKeyEqualityComparer&lt;TProperty&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.CreateKeyEqualityComparer``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateKeyEqualityComparer(Of TProperty) () As IEqualityComparer(Of TProperty)" />
      <MemberSignature Language="F#" Value="abstract member CreateKeyEqualityComparer : unit -&gt; System.Collections.Generic.IEqualityComparer&lt;'Property&gt;&#xA;override this.CreateKeyEqualityComparer : unit -&gt; System.Collections.Generic.IEqualityComparer&lt;'Property&gt;" Usage="iProperty.CreateKeyEqualityComparer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TProperty">The property type.</typeparam>
        <summary>
                Creates an <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for values of the given property type.
            </summary>
        <returns>A new equality comparer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IEntityType DeclaringEntityType { get; }" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringEntityType As IEntityType" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      <MemberSignature Language="F#" Value="member this.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IEntityType DeclaringEntityType { get; }" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringEntityType As IEntityType" FrameworkAlternate="efcore-8.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.1">P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringEntityType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Obsolete("Use DeclaringType and cast to IEntityType or IComplexType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use DeclaringType and cast to IEntityType or IComplexType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the entity type that this property belongs to.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContainingPrimaryKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IKey? FindContainingPrimaryKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IKey FindContainingPrimaryKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.FindContainingPrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindContainingPrimaryKey () As IKey" />
      <MemberSignature Language="F#" Value="abstract member FindContainingPrimaryKey : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IKey&#xA;override this.FindContainingPrimaryKey : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IKey" Usage="iProperty.FindContainingPrimaryKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IKey</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the primary key that uses this property (including a composite primary key in which this property
                is included).
            </summary>
        <returns>
                The primary that use this property, or <see langword="null" /> if it is not part of the primary key.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFirstPrincipal">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IProperty? FindFirstPrincipal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IProperty FindFirstPrincipal() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.FindFirstPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindFirstPrincipal () As IProperty" />
      <MemberSignature Language="F#" Value="abstract member FindFirstPrincipal : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty&#xA;override this.FindFirstPrincipal : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IProperty" Usage="iProperty.FindFirstPrincipal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IProperty</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Finds the first principal property that the given property is constrained by
                if the given property is part of a foreign key.
            </summary>
        <returns>The first associated principal property, or <see langword="null" /> if none exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingForeignKeys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetContainingForeignKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt; GetContainingForeignKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingForeignKeys" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainingForeignKeys () As IEnumerable(Of IForeignKey)" />
      <MemberSignature Language="F#" Value="abstract member GetContainingForeignKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;" Usage="iProperty.GetContainingForeignKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IForeignKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all foreign keys that use this property (including composite foreign keys in which this property
                is included).
            </summary>
        <returns>
                The foreign keys that use this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingIndexes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt; GetContainingIndexes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IIndex&gt; GetContainingIndexes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingIndexes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainingIndexes () As IEnumerable(Of IIndex)" />
      <MemberSignature Language="F#" Value="abstract member GetContainingIndexes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt;" Usage="iProperty.GetContainingIndexes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IIndex&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all indexes that use this property (including composite indexes in which this property
                is included).
            </summary>
        <returns>
                The indexes that use this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainingKeys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt; GetContainingKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IKey&gt; GetContainingKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingKeys" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainingKeys () As IEnumerable(Of IKey)" />
      <MemberSignature Language="F#" Value="abstract member GetContainingKeys : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;" Usage="iProperty.GetContainingKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all primary or alternate keys that use this property (including composite keys in which this property
                is included).
            </summary>
        <returns>
                The primary and alternate keys that use this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IElementType? GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IElementType GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementType () As IElementType" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IElementType" Usage="iProperty.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IElementType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the configuration for elements of the primitive collection represented by this property.
            </summary>
        <returns>The configuration for the elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetKeyValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetKeyValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKeyValueComparer () As ValueComparer" />
      <MemberSignature Language="F#" Value="abstract member GetKeyValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="iProperty.GetKeyValueComparer " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetKeyValueComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> to use with keys for this property.
            </summary>
        <returns>The comparer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrincipals">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; GetPrincipals ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; GetPrincipals() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetPrincipals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPrincipals () As IReadOnlyList(Of IProperty)" />
      <MemberSignature Language="F#" Value="abstract member GetPrincipals : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;&#xA;override this.GetPrincipals : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" Usage="iProperty.GetPrincipals " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Finds the list of principal properties including the given property that the given property is constrained by
                if the given property is part of a foreign key.
            </summary>
        <returns>The list of all associated principal properties including the given property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviderValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetProviderValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetProviderValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProviderValueComparer () As ValueComparer" />
      <MemberSignature Language="F#" Value="abstract member GetProviderValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="iProperty.GetProviderValueComparer " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderValueComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> to use for the provider values for this property.
            </summary>
        <returns>The comparer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetValueComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer GetValueComparer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueComparer () As ValueComparer" />
      <MemberSignature Language="F#" Value="abstract member GetValueComparer : unit -&gt; Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" Usage="iProperty.GetValueComparer " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueComparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property.
            </summary>
        <returns>The comparer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConcurrencyToken">
      <MemberSignature Language="C#" Value="public bool IsConcurrencyToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConcurrencyToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsConcurrencyToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConcurrencyToken As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsConcurrencyToken : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.IsConcurrencyToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether this property is used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether this property can contain <see langword="null" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnlyAfterSave">
      <MemberSignature Language="C#" Value="public bool IsReadOnlyAfterSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnlyAfterSave" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsReadOnlyAfterSave" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnlyAfterSave As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsReadOnlyAfterSave : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.IsReadOnlyAfterSave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use AfterSaveBehavior instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use AfterSaveBehavior instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This property is obsolete. Use <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior" /> instead.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnlyBeforeSave">
      <MemberSignature Language="C#" Value="public bool IsReadOnlyBeforeSave { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnlyBeforeSave" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsReadOnlyBeforeSave" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnlyBeforeSave As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsReadOnlyBeforeSave : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.IsReadOnlyBeforeSave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use BeforeSaveBehavior instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use BeforeSaveBehavior instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This property is obsolete. Use <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior" /> instead.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShadowProperty">
      <MemberSignature Language="C#" Value="public bool IsShadowProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShadowProperty" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsShadowProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShadowProperty As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsShadowProperty : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.IsShadowProperty" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.IsShadowProperty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether this is a shadow property. A shadow property is one that does not have a
                corresponding property in the entity class. The current value for the property is stored in
                the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker" /> rather than being stored in instances of the entity class.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStoreGeneratedAlways">
      <MemberSignature Language="C#" Value="public bool IsStoreGeneratedAlways { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStoreGeneratedAlways" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.IsStoreGeneratedAlways" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStoreGeneratedAlways As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsStoreGeneratedAlways : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.IsStoreGeneratedAlways" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Use BeforeSaveBehavior or AfterSaveBehavior instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use BeforeSaveBehavior or AfterSaveBehavior instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This property is obsolete. Use <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.BeforeSaveBehavior" /> or <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.AfterSaveBehavior" /> instead.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetPropertyAccessMode">
      <MemberSignature Language="C#" Value="override sealed Microsoft.EntityFrameworkCore.PropertyAccessMode IPropertyBase.GetPropertyAccessMode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig virtual instance valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetPropertyAccessMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IProperty.Microsoft#EntityFrameworkCore#Metadata#IPropertyBase#GetPropertyAccessMode" />
      <MemberSignature Language="VB.NET" Value=" Overrides NotOverridable Function GetPropertyAccessMode () As PropertyAccessMode Implements IPropertyBase.GetPropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetPropertyAccessMode : unit -&gt; Microsoft.EntityFrameworkCore.PropertyAccessMode&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetPropertyAccessMode : unit -&gt; Microsoft.EntityFrameworkCore.PropertyAccessMode" Usage="iProperty.Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetPropertyAccessMode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetPropertyAccessMode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.PropertyAccessMode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>
                    Gets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> being used for this property.
                    <see langword="null" /> indicates that the default property access mode is being used.
                </para>
        </summary>
        <returns> The access mode being used, or <see langword="null" /> if the default access mode is being used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresValueGenerator">
      <MemberSignature Language="C#" Value="public bool RequiresValueGenerator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresValueGenerator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.RequiresValueGenerator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequiresValueGenerator As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresValueGenerator : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.RequiresValueGenerator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether this property requires a <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> to generate
                values when new entities are added to the context.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueGenerated">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ValueGenerated ValueGenerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated ValueGenerated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IProperty.ValueGenerated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueGenerated As ValueGenerated" />
      <MemberSignature Language="F#" Value="member this.ValueGenerated : Microsoft.EntityFrameworkCore.Metadata.ValueGenerated" Usage="Microsoft.EntityFrameworkCore.Metadata.IProperty.ValueGenerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ValueGenerated</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating when a value for this property will be generated by the database. Even when the
                property is set to be generated by the database, EF may still attempt to save a specific value (rather than
                having one generated by the database) when the entity is added and a value is assigned, or the property is
                marked as modified for an existing entity. See <see cref="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetBeforeSaveBehavior(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                and <see cref="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetAfterSaveBehavior(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /> for more information.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
