<Type Name="DefaultQuerySqlGenerator" FullName="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator">
  <TypeSignature Language="C#" Value="public class DefaultQuerySqlGenerator : Remotion.Linq.Parsing.ThrowingExpressionVisitor, Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator, Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultQuerySqlGenerator extends Remotion.Linq.Parsing.ThrowingExpressionVisitor implements class Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator, class Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultQuerySqlGenerator&#xA;Inherits ThrowingExpressionVisitor&#xA;Implements IQuerySqlGenerator, ISqlExpressionVisitor" />
  <TypeSignature Language="F#" Value="type DefaultQuerySqlGenerator = class&#xA;    inherit ThrowingExpressionVisitor&#xA;    interface ISqlExpressionVisitor&#xA;    interface IQuerySqlGenerator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Remotion.Linq.Parsing.ThrowingExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                The default query SQL generator.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DefaultQuerySqlGenerator (Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorDependencies,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (dependencies As QuerySqlGeneratorDependencies, selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator : Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorDependencies * Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator" Usage="new Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator (dependencies, selectExpression)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorDependencies" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        <param name="selectExpression"> The select expression. </param>
        <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultQuerySqlGenerator (Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory relationalCommandBuilderFactory, Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper sqlGenerationHelper, Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory parameterNameGeneratorFactory, Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper relationalTypeMapper, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory relationalCommandBuilderFactory, class Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper sqlGenerationHelper, class Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory parameterNameGeneratorFactory, class Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper relationalTypeMapper, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (relationalCommandBuilderFactory As IRelationalCommandBuilderFactory, sqlGenerationHelper As ISqlGenerationHelper, parameterNameGeneratorFactory As IParameterNameGeneratorFactory, relationalTypeMapper As IRelationalTypeMapper, selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory * Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper * Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory * Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper * Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator" Usage="new Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator (relationalCommandBuilderFactory, sqlGenerationHelper, parameterNameGeneratorFactory, relationalTypeMapper, selectExpression)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="relationalCommandBuilderFactory" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="sqlGenerationHelper" Type="Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="parameterNameGeneratorFactory" Type="Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="relationalTypeMapper" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" Index="4" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="relationalCommandBuilderFactory"> The relational command builder factory. </param>
        <param name="sqlGenerationHelper"> The SQL generation helper. </param>
        <param name="parameterNameGeneratorFactory"> The parameter name generator factory. </param>
        <param name="relationalTypeMapper"> The relational type mapper. </param>
        <param name="selectExpression"> The select expression. </param>
        <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AliasSeparator">
      <MemberSignature Language="C#" Value="protected virtual string AliasSeparator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AliasSeparator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.AliasSeparator" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property AliasSeparator As String" />
      <MemberSignature Language="F#" Value="member this.AliasSeparator : string" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.AliasSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The default alias separator.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyExplicitCastToBoolInProjectionOptimization">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression ApplyExplicitCastToBoolInProjectionOptimization (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression ApplyExplicitCastToBoolInProjectionOptimization(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ApplyExplicitCastToBoolInProjectionOptimization(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ApplyExplicitCastToBoolInProjectionOptimization (expression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member ApplyExplicitCastToBoolInProjectionOptimization : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.ApplyExplicitCastToBoolInProjectionOptimization : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.ApplyExplicitCastToBoolInProjectionOptimization expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.2;efcore-2.1" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatOperator">
      <MemberSignature Language="C#" Value="protected virtual string ConcatOperator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConcatOperator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ConcatOperator As String" />
      <MemberSignature Language="F#" Value="member this.ConcatOperator : string" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The default string concatenation operator SQL.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUnhandledItemException&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected override Exception CreateUnhandledItemException&lt;T&gt; (T unhandledItem, string visitMethod);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Exception CreateUnhandledItemException&lt;T&gt;(!!T unhandledItem, string visitMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException``1(``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateUnhandledItemException(Of T) (unhandledItem As T, visitMethod As String) As Exception" />
      <MemberSignature Language="F#" Value="override this.CreateUnhandledItemException : 'T * string -&gt; Exception" Usage="defaultQuerySqlGenerator.CreateUnhandledItemException (unhandledItem, visitMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="unhandledItem" Type="T" />
        <Parameter Name="visitMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T"> Generic type parameter. </typeparam>
        <param name="unhandledItem"> The unhandled item. </param>
        <param name="visitMethod"> The visit method. </param>
        <summary>
                Creates unhandled item exception.
            </summary>
        <returns>
                The new unhandled item exception.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValueBufferFactory">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory CreateValueBufferFactory (Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory relationalValueBufferFactoryFactory, System.Data.Common.DbDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory CreateValueBufferFactory(class Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory relationalValueBufferFactoryFactory, class System.Data.Common.DbDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValueBufferFactory (relationalValueBufferFactoryFactory As IRelationalValueBufferFactoryFactory, dataReader As DbDataReader) As IRelationalValueBufferFactory" />
      <MemberSignature Language="F#" Value="abstract member CreateValueBufferFactory : Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory * System.Data.Common.DbDataReader -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory&#xA;override this.CreateValueBufferFactory : Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory * System.Data.Common.DbDataReader -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" Usage="defaultQuerySqlGenerator.CreateValueBufferFactory (relationalValueBufferFactoryFactory, dataReader)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationalValueBufferFactoryFactory" Type="Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory" />
        <Parameter Name="dataReader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="relationalValueBufferFactoryFactory"> The relational value buffer factory. </param>
        <param name="dataReader"> The data reader. </param>
        <summary>
                Creates a relational value buffer factory.
            </summary>
        <returns>
                The new value buffer factory.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As QuerySqlGeneratorDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorDependencies" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Parameter object containing service dependencies.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractNonNullExpressionValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; ExtractNonNullExpressionValues (System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; inExpressionValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; ExtractNonNullExpressionValues(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; inExpressionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExtractNonNullExpressionValues (inExpressionValues As IReadOnlyList(Of Expression)) As IReadOnlyList(Of Expression)" />
      <MemberSignature Language="F#" Value="abstract member ExtractNonNullExpressionValues : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;&#xA;override this.ExtractNonNullExpressionValues : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Usage="defaultQuerySqlGenerator.ExtractNonNullExpressionValues inExpressionValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("If you need to override this method then raise an issue at https://github.com/aspnet/EntityFrameworkCore")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("If you need to override this method then raise an issue at https://github.com/aspnet/EntityFrameworkCore")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inExpressionValues" Type="System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="inExpressionValues"> The list of expressions. </param>
        <summary>
                Extracts the non null expression values from a list of expressions.
            </summary>
        <returns>
                The extracted non null expression values.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateBinaryOperator">
      <MemberSignature Language="C#" Value="protected virtual string GenerateBinaryOperator (System.Linq.Expressions.ExpressionType op);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GenerateBinaryOperator(valuetype System.Linq.Expressions.ExpressionType op) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateBinaryOperator (op As ExpressionType) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateBinaryOperator : System.Linq.Expressions.ExpressionType -&gt; string&#xA;override this.GenerateBinaryOperator : System.Linq.Expressions.ExpressionType -&gt; string" Usage="defaultQuerySqlGenerator.GenerateBinaryOperator op" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Override GenerateOperator method instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Override GenerateOperator method instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="op" Type="System.Linq.Expressions.ExpressionType" />
      </Parameters>
      <Docs>
        <param name="op"> The operation. </param>
        <summary>
                Generates SQL for a given binary operation type.
            </summary>
        <returns>
                The binary operator.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFromSql">
      <MemberSignature Language="C#" Value="protected virtual void GenerateFromSql (string sql, System.Linq.Expressions.Expression arguments, System.Collections.Generic.IReadOnlyDictionary&lt;string,object&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateFromSql(string sql, class System.Linq.Expressions.Expression arguments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String,System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateFromSql (sql As String, arguments As Expression, parameters As IReadOnlyDictionary(Of String, Object))" />
      <MemberSignature Language="F#" Value="abstract member GenerateFromSql : string * System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; -&gt; unit&#xA;override this.GenerateFromSql : string * System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateFromSql (sql, arguments, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="sql"> The FromSql SQL query. </param>
        <param name="arguments"> The arguments. </param>
        <param name="parameters"> The parameters for this query. </param>
        <summary>
                Generate SQL corresponding to a FromSql query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateFunctionCall">
      <MemberSignature Language="C#" Value="protected virtual void GenerateFunctionCall (string functionName, System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; arguments, string schema = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateFunctionCall(string functionName, class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; arguments, string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateFunctionCall(System.String,System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression},System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateFunctionCall (functionName As String, arguments As IReadOnlyList(Of Expression), Optional schema As String = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member GenerateFunctionCall : string * System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; * string -&gt; unit&#xA;override this.GenerateFunctionCall : string * System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; * string -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateFunctionCall (functionName, arguments, schema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Override VisitSqlFunction method instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Override VisitSqlFunction method instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="schema" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="functionName">The function name</param>
        <param name="arguments">The function arguments</param>
        <param name="schema">The function schema</param>
        <summary>
                Generates a SQL function call.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateHaving">
      <MemberSignature Language="C#" Value="protected virtual void GenerateHaving (System.Linq.Expressions.Expression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateHaving(class System.Linq.Expressions.Expression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateHaving(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateHaving (predicate As Expression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateHaving : System.Linq.Expressions.Expression -&gt; unit&#xA;override this.GenerateHaving : System.Linq.Expressions.Expression -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateHaving predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="predicate"> The having predicate expression. </param>
        <summary>
                Visit the predicate in SQL HAVING clause
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateIn">
      <MemberSignature Language="C#" Value="protected virtual void GenerateIn (Microsoft.EntityFrameworkCore.Query.Expressions.InExpression inExpression, bool negated = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateIn(class Microsoft.EntityFrameworkCore.Query.Expressions.InExpression inExpression, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateIn (inExpression As InExpression, Optional negated As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member GenerateIn : Microsoft.EntityFrameworkCore.Query.Expressions.InExpression * bool -&gt; unit&#xA;override this.GenerateIn : Microsoft.EntityFrameworkCore.Query.Expressions.InExpression * bool -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateIn (inExpression, negated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.InExpression" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="negated" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="inExpression"> The in expression. </param>
        <param name="negated"> Whether the InExpression is negated or not. </param>
        <summary>
                Generates SQL for an InExpression.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateIsNotNull">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression GenerateIsNotNull (Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression isNotNullExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression GenerateIsNotNull(class Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression isNotNullExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateIsNotNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateIsNotNull (isNotNullExpression As IsNullExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member GenerateIsNotNull : Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.GenerateIsNotNull : Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.GenerateIsNotNull isNotNullExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isNotNullExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="isNotNullExpression"> The is not null expression. </param>
        <summary>
                Visits an IsNotNullExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateLimitOffset">
      <MemberSignature Language="C#" Value="protected virtual void GenerateLimitOffset (Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateLimitOffset(class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateLimitOffset (selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateLimitOffset : Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; unit&#xA;override this.GenerateLimitOffset : Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateLimitOffset selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="selectExpression"> The select expression. </param>
        <summary>
                Generates the LIMIT OFFSET part of the SELECT statement,
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateList">
      <MemberSignature Language="C#" Value="protected virtual void GenerateList (System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; items, Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction = default);" FrameworkAlternate="efcore-2.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateList(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; items, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateList(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression},System.Action{Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateList (items As IReadOnlyList(Of Expression), Optional joinAction As Action(Of IRelationalCommandBuilder) = Nothing)" FrameworkAlternate="efcore-2.1" />
      <MemberSignature Language="F#" Value="abstract member GenerateList : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; * Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; -&gt; unit&#xA;override this.GenerateList : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; * Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateList (items, joinAction)" />
      <MemberSignature Language="C#" Value="protected virtual void GenerateList (System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; items, Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction);" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateList (items As IReadOnlyList(Of Expression), joinAction As Action(Of IRelationalCommandBuilder))" FrameworkAlternate="efcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="joinAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="items">The list of items.</param>
        <param name="joinAction">An optional join action.</param>
        <summary>
                Performs generation over a list of items by visiting each item.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateList">
      <MemberSignature Language="C#" Value="protected virtual void GenerateList (System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; items, Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction = default, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; typeMappings = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateList(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; items, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; typeMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateList(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression},System.Action{Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateList (items As IReadOnlyList(Of Expression), Optional joinAction As Action(Of IRelationalCommandBuilder) = Nothing, Optional typeMappings As IReadOnlyList(Of RelationalTypeMapping) = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member GenerateList : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; * Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; unit&#xA;override this.GenerateList : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; * Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateList (items, joinAction, typeMappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="joinAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt;" Index="1" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="typeMappings" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" Index="2" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="items">The list of items.</param>
        <param name="joinAction">An optional join action.</param>
        <param name="typeMappings">Option type mappings for each item.</param>
        <summary>
                Performs generation over a list of items by visiting each item.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateList&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected virtual void GenerateList&lt;T&gt; (System.Collections.Generic.IReadOnlyList&lt;T&gt; items, Action&lt;T&gt; generationAction, Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction = default);" FrameworkAlternate="efcore-2.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateList&lt;T&gt;(class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; items, class System.Action`1&lt;!!T&gt; generationAction, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateList``1(System.Collections.Generic.IReadOnlyList{``0},System.Action{``0},System.Action{Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateList(Of T) (items As IReadOnlyList(Of T), generationAction As Action(Of T), Optional joinAction As Action(Of IRelationalCommandBuilder) = Nothing)" FrameworkAlternate="efcore-2.1" />
      <MemberSignature Language="F#" Value="abstract member GenerateList : System.Collections.Generic.IReadOnlyList&lt;'T&gt; * Action&lt;'T&gt; * Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; -&gt; unit&#xA;override this.GenerateList : System.Collections.Generic.IReadOnlyList&lt;'T&gt; * Action&lt;'T&gt; * Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateList (items, generationAction, joinAction)" />
      <MemberSignature Language="C#" Value="protected virtual void GenerateList&lt;T&gt; (System.Collections.Generic.IReadOnlyList&lt;T&gt; items, Action&lt;T&gt; generationAction, Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction);" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateList(Of T) (items As IReadOnlyList(Of T), generationAction As Action(Of T), joinAction As Action(Of IRelationalCommandBuilder))" FrameworkAlternate="efcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="generationAction" Type="System.Action&lt;T&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="joinAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt;" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item type.</typeparam>
        <param name="items">The list of items.</param>
        <param name="generationAction">The generation action.</param>
        <param name="joinAction">An optional join action.</param>
        <summary>
                Perform generation over a list of items using a provided generation action
                and optional join action.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateList&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected virtual void GenerateList&lt;T&gt; (System.Collections.Generic.IReadOnlyList&lt;T&gt; items, Action&lt;T&gt; generationAction, Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction = default, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; typeMappings = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateList&lt;T&gt;(class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; items, class System.Action`1&lt;!!T&gt; generationAction, class System.Action`1&lt;class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; joinAction, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; typeMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateList``1(System.Collections.Generic.IReadOnlyList{``0},System.Action{``0},System.Action{Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateList(Of T) (items As IReadOnlyList(Of T), generationAction As Action(Of T), Optional joinAction As Action(Of IRelationalCommandBuilder) = Nothing, Optional typeMappings As IReadOnlyList(Of RelationalTypeMapping) = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member GenerateList : System.Collections.Generic.IReadOnlyList&lt;'T&gt; * Action&lt;'T&gt; * Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; unit&#xA;override this.GenerateList : System.Collections.Generic.IReadOnlyList&lt;'T&gt; * Action&lt;'T&gt; * Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt; * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt; -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateList (items, generationAction, joinAction, typeMappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="generationAction" Type="System.Action&lt;T&gt;" Index="1" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="joinAction" Type="System.Action&lt;Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder&gt;" Index="2" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="typeMappings" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&gt;" Index="3" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T">The item type.</typeparam>
        <param name="items">The list of items.</param>
        <param name="generationAction">The generation action.</param>
        <param name="joinAction">An optional join action.</param>
        <param name="typeMappings">Option type mappings for each item.</param>
        <summary>
                Perform generation over a list of items using a provided generation action
                and optional join action.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateNotIn">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression GenerateNotIn (Microsoft.EntityFrameworkCore.Query.Expressions.InExpression inExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression GenerateNotIn(class Microsoft.EntityFrameworkCore.Query.Expressions.InExpression inExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateNotIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateNotIn (inExpression As InExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member GenerateNotIn : Microsoft.EntityFrameworkCore.Query.Expressions.InExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.GenerateNotIn : Microsoft.EntityFrameworkCore.Query.Expressions.InExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.GenerateNotIn inExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Override GenerateIn method instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Override GenerateIn method instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.InExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="inExpression"> The in expression. </param>
        <summary>
                Visit a negated InExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOperator">
      <MemberSignature Language="C#" Value="protected virtual string GenerateOperator (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GenerateOperator(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOperator(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GenerateOperator (expression As Expression) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateOperator : System.Linq.Expressions.Expression -&gt; string&#xA;override this.GenerateOperator : System.Linq.Expressions.Expression -&gt; string" Usage="defaultQuerySqlGenerator.GenerateOperator expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expression"> The expression. </param>
        <summary>
                Generates an SQL operator for a given expression.
            </summary>
        <returns>
                The operator.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOrderBy">
      <MemberSignature Language="C#" Value="protected virtual void GenerateOrderBy (System.Collections.Generic.IReadOnlyList&lt;Remotion.Linq.Clauses.Ordering&gt; orderings);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateOrderBy(class System.Collections.Generic.IReadOnlyList`1&lt;class Remotion.Linq.Clauses.Ordering&gt; orderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateOrderBy (orderings As IReadOnlyList(Of Ordering))" />
      <MemberSignature Language="F#" Value="abstract member GenerateOrderBy : System.Collections.Generic.IReadOnlyList&lt;Remotion.Linq.Clauses.Ordering&gt; -&gt; unit&#xA;override this.GenerateOrderBy : System.Collections.Generic.IReadOnlyList&lt;Remotion.Linq.Clauses.Ordering&gt; -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateOrderBy orderings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderings" Type="System.Collections.Generic.IReadOnlyList&lt;Remotion.Linq.Clauses.Ordering&gt;" />
      </Parameters>
      <Docs>
        <param name="orderings"> The orderings. </param>
        <summary>
                Generates the ORDER BY SQL.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOrdering">
      <MemberSignature Language="C#" Value="protected virtual void GenerateOrdering (Remotion.Linq.Clauses.Ordering ordering);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateOrdering(class Remotion.Linq.Clauses.Ordering ordering) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOrdering(Remotion.Linq.Clauses.Ordering)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateOrdering (ordering As Ordering)" />
      <MemberSignature Language="F#" Value="abstract member GenerateOrdering : Remotion.Linq.Clauses.Ordering -&gt; unit&#xA;override this.GenerateOrdering : Remotion.Linq.Clauses.Ordering -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateOrdering ordering" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordering" Type="Remotion.Linq.Clauses.Ordering" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="ordering"> The ordering. </param>
        <summary>
                Generates a single ordering in an SQL ORDER BY clause.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratePredicate">
      <MemberSignature Language="C#" Value="protected virtual void GeneratePredicate (System.Linq.Expressions.Expression predicate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GeneratePredicate(class System.Linq.Expressions.Expression predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GeneratePredicate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GeneratePredicate (predicate As Expression)" />
      <MemberSignature Language="F#" Value="abstract member GeneratePredicate : System.Linq.Expressions.Expression -&gt; unit&#xA;override this.GeneratePredicate : System.Linq.Expressions.Expression -&gt; unit" Usage="defaultQuerySqlGenerator.GeneratePredicate predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="predicate"> The predicate expression. </param>
        <summary>
                Visit the predicate in SQL WHERE clause
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateProjection">
      <MemberSignature Language="C#" Value="protected virtual void GenerateProjection (System.Linq.Expressions.Expression projection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateProjection(class System.Linq.Expressions.Expression projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateProjection(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateProjection (projection As Expression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateProjection : System.Linq.Expressions.Expression -&gt; unit&#xA;override this.GenerateProjection : System.Linq.Expressions.Expression -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateProjection projection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="projection"> The projection expression. </param>
        <summary>
                Visit a single projection in SQL SELECT clause
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratePseudoFromClause">
      <MemberSignature Language="C#" Value="protected virtual void GeneratePseudoFromClause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GeneratePseudoFromClause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GeneratePseudoFromClause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GeneratePseudoFromClause ()" />
      <MemberSignature Language="F#" Value="abstract member GeneratePseudoFromClause : unit -&gt; unit&#xA;override this.GeneratePseudoFromClause : unit -&gt; unit" Usage="defaultQuerySqlGenerator.GeneratePseudoFromClause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Generates a pseudo FROM clause. Required by some providers
                when a query has no actual FROM clause.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSql">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IRelationalCommand GenerateSql (System.Collections.Generic.IReadOnlyDictionary&lt;string,object&gt; parameterValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand GenerateSql(class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parameterValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateSql (parameterValues As IReadOnlyDictionary(Of String, Object)) As IRelationalCommand" />
      <MemberSignature Language="F#" Value="abstract member GenerateSql : System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommand&#xA;override this.GenerateSql : System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" Usage="defaultQuerySqlGenerator.GenerateSql parameterValues" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="parameterValues"> The parameter values. </param>
        <summary>
                Generates SQL for the given parameter values.
            </summary>
        <returns>
                A relational command.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateTagsHeaderComment">
      <MemberSignature Language="C#" Value="protected virtual void GenerateTagsHeaderComment ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTagsHeaderComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateTagsHeaderComment" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateTagsHeaderComment ()" />
      <MemberSignature Language="F#" Value="abstract member GenerateTagsHeaderComment : unit -&gt; unit&#xA;override this.GenerateTagsHeaderComment : unit -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateTagsHeaderComment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Generates the tags header comment.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateTop">
      <MemberSignature Language="C#" Value="protected virtual void GenerateTop (Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTop(class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateTop(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateTop (selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="abstract member GenerateTop : Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; unit&#xA;override this.GenerateTop : Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; unit" Usage="defaultQuerySqlGenerator.GenerateTop selectExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="selectExpression"> The select expression. </param>
        <summary>
                Generates the TOP part of the SELECT statement,
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeMaterializationInfos">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo&gt; GetTypeMaterializationInfos ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo&gt; GetTypeMaterializationInfos() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GetTypeMaterializationInfos" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeMaterializationInfos () As IReadOnlyList(Of TypeMaterializationInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeMaterializationInfos : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo&gt;&#xA;override this.GetTypeMaterializationInfos : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo&gt;" Usage="defaultQuerySqlGenerator.GetTypeMaterializationInfos " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Information about the types being projected by this query.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InferTypeMappingFromColumn">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping InferTypeMappingFromColumn (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping InferTypeMappingFromColumn(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.InferTypeMappingFromColumn(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function InferTypeMappingFromColumn (expression As Expression) As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member InferTypeMappingFromColumn : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&#xA;override this.InferTypeMappingFromColumn : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="defaultQuerySqlGenerator.InferTypeMappingFromColumn expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"> The expression to infer a type mapping for. </param>
        <summary>
                Infers a type mapping from a column expression.
            </summary>
        <returns>
                A RelationalTypeMapping.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCacheable">
      <MemberSignature Language="C#" Value="public bool IsCacheable { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCacheable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.IsCacheable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCacheable As Boolean" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1" />
      <MemberSignature Language="F#" Value="member this.IsCacheable : bool" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.IsCacheable" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1" />
      <MemberSignature Language="C#" Value="public virtual bool IsCacheable { get; protected set; }" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IsCacheable As Boolean" FrameworkAlternate="efcore-2.2" />
      <MemberSignature Language="F#" Value="member this.IsCacheable : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.IsCacheable" FrameworkAlternate="efcore-2.2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether this SQL query is cacheable.
            </summary>
        <value>
                true if this SQL query is cacheable, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyDictionary&lt;string,object&gt; ParameterValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; ParameterValues" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ParameterValues" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ParameterValues As IReadOnlyDictionary(Of String, Object)" />
      <MemberSignature Language="F#" Value="member this.ParameterValues : System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ParameterValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the parameter values.
            </summary>
        <value>
                The parameter values.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessInExpressionValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; ProcessInExpressionValues (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; inExpressionValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; ProcessInExpressionValues(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; inExpressionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessInExpressionValues (inExpressionValues As IEnumerable(Of Expression)) As IReadOnlyList(Of Expression)" />
      <MemberSignature Language="F#" Value="abstract member ProcessInExpressionValues : seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;&#xA;override this.ProcessInExpressionValues : seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Usage="defaultQuerySqlGenerator.ProcessInExpressionValues inExpressionValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("If you need to override this method then raise an issue at https://github.com/aspnet/EntityFrameworkCore")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("If you need to override this method then raise an issue at https://github.com/aspnet/EntityFrameworkCore")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inExpressionValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="inExpressionValues"> The in expression values. </param>
        <summary>
                Process the InExpression values.
            </summary>
        <returns>
                A list of expressions.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresRuntimeProjectionRemapping">
      <MemberSignature Language="C#" Value="public virtual bool RequiresRuntimeProjectionRemapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresRuntimeProjectionRemapping" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.RequiresRuntimeProjectionRemapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RequiresRuntimeProjectionRemapping As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresRuntimeProjectionRemapping : bool" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.RequiresRuntimeProjectionRemapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Whether or not the generated SQL could have out-of-order projection columns.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectExpression">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression SelectExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression SelectExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SelectExpression" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property SelectExpression As SelectExpression" />
      <MemberSignature Language="F#" Value="member this.SelectExpression : Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SelectExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the select expression.
            </summary>
        <value>
                The select expression.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineCommentToken">
      <MemberSignature Language="C#" Value="protected virtual string SingleLineCommentToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SingleLineCommentToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SingleLineCommentToken" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property SingleLineCommentToken As String" />
      <MemberSignature Language="F#" Value="member this.SingleLineCommentToken : string" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SingleLineCommentToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The default single line comment prefix.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sql">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder Sql { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder Sql" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.Sql" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Sql As IRelationalCommandBuilder" />
      <MemberSignature Language="F#" Value="member this.Sql : Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.Sql" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The generated SQL.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SqlGenerator">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper SqlGenerator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper SqlGenerator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property SqlGenerator As ISqlGenerationHelper" />
      <MemberSignature Language="F#" Value="member this.SqlGenerator : Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the SQL generation helper.
            </summary>
        <value>
                The SQL generation helper.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGenerateBinaryOperator">
      <MemberSignature Language="C#" Value="protected virtual bool TryGenerateBinaryOperator (System.Linq.Expressions.ExpressionType op, out string result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryGenerateBinaryOperator(valuetype System.Linq.Expressions.ExpressionType op, [out] string&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryGenerateBinaryOperator (op As ExpressionType, ByRef result As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGenerateBinaryOperator : System.Linq.Expressions.ExpressionType * string -&gt; bool&#xA;override this.TryGenerateBinaryOperator : System.Linq.Expressions.ExpressionType * string -&gt; bool" Usage="defaultQuerySqlGenerator.TryGenerateBinaryOperator (op, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
          <AttributeName Language="C#">[System.Obsolete("Override GenerateOperator method instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Override GenerateOperator method instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="op" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="result" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="op"> The operation. </param>
        <param name="result"> [out] The SQL binary operator. </param>
        <summary>
                Attempts to generate binary operator for a given expression type.
            </summary>
        <returns>
                true if it succeeds, false if it fails.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypedFalseLiteral">
      <MemberSignature Language="C#" Value="protected virtual string TypedFalseLiteral { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypedFalseLiteral" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property TypedFalseLiteral As String" />
      <MemberSignature Language="F#" Value="member this.TypedFalseLiteral : string" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The default false literal SQL.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypedTrueLiteral">
      <MemberSignature Language="C#" Value="protected virtual string TypedTrueLiteral { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypedTrueLiteral" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property TypedTrueLiteral As String" />
      <MemberSignature Language="F#" Value="member this.TypedTrueLiteral : string" Usage="Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The default true literal SQL.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAlias">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitAlias (Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression aliasExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitAlias(class Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression aliasExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAlias (aliasExpression As AliasExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitAlias : Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitAlias : Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitAlias aliasExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aliasExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression" />
      </Parameters>
      <Docs>
        <param name="aliasExpression"> The alias expression. </param>
        <summary>
                Visits an AliasExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression expression);" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression expression) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitBinary (expression As BinaryExpression) As Expression" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="F#" Value="override this.VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitBinary expression" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression binaryExpression);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression binaryExpression) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitBinary (binaryExpression As BinaryExpression) As Expression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="override this.VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitBinary binaryExpression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.BinaryExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="binaryExpression" Type="System.Linq.Expressions.BinaryExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expression"> The binary expression to visit. </param>
        <param name="binaryExpression"> The binary expression to visit. </param>
        <summary>
                Visit a BinaryExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCase">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitCase (Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression caseExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitCase(class Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression caseExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCase(Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCase (caseExpression As CaseExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitCase : Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitCase : Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitCase caseExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCase(Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" Index="0" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="caseExpression"> The case expression. </param>
        <summary>
                Visits a case expression.
            </summary>
        <returns> An expression. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitColumn">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitColumn (Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression columnExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitColumn(class Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression columnExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitColumn (columnExpression As ColumnExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitColumn : Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitColumn : Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitColumn columnExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression" />
      </Parameters>
      <Docs>
        <param name="columnExpression"> The column expression. </param>
        <summary>
                Visits a ColumnExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitColumnReference">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitColumnReference (Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression columnReferenceExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitColumnReference(class Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression columnReferenceExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitColumnReference(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitColumnReference (columnReferenceExpression As ColumnReferenceExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitColumnReference : Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitColumnReference : Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitColumnReference columnReferenceExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumnReference(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnReferenceExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.ColumnReferenceExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="columnReferenceExpression"> The column reference expression. </param>
        <summary>
                Visits a ColumnReferenceExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditional">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConditional (System.Linq.Expressions.ConditionalExpression expression);" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConditional(class System.Linq.Expressions.ConditionalExpression expression) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConditional (expression As ConditionalExpression) As Expression" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="F#" Value="override this.VisitConditional : System.Linq.Expressions.ConditionalExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitConditional expression" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConditional (System.Linq.Expressions.ConditionalExpression conditionalExpression);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConditional(class System.Linq.Expressions.ConditionalExpression conditionalExpression) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConditional (conditionalExpression As ConditionalExpression) As Expression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="override this.VisitConditional : System.Linq.Expressions.ConditionalExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitConditional conditionalExpression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.ConditionalExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="conditionalExpression" Type="System.Linq.Expressions.ConditionalExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expression"> The conditional expression to visit. </param>
        <param name="conditionalExpression"> The conditional expression to visit. </param>
        <summary>
                Visit a ConditionalExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstant">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConstant (System.Linq.Expressions.ConstantExpression expression);" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConstant(class System.Linq.Expressions.ConstantExpression expression) cil managed" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConstant (expression As ConstantExpression) As Expression" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="F#" Value="override this.VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitConstant expression" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConstant (System.Linq.Expressions.ConstantExpression constantExpression);" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConstant(class System.Linq.Expressions.ConstantExpression constantExpression) cil managed" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitConstant (constantExpression As ConstantExpression) As Expression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="F#" Value="override this.VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitConstant constantExpression" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.ConstantExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="constantExpression" Type="System.Linq.Expressions.ConstantExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="expression"> The constant expression to visit. </param>
        <param name="constantExpression"> The constant expression to visit. </param>
        <summary>
                Visits a ConstantExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCount">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitCount (Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression countExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitCount(class Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression countExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCount (countExpression As CountExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitCount : Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitCount : Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitCount countExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="countExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="countExpression"> The count expression. </param>
        <summary>
                Visit a CountExpression
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrossJoin">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitCrossJoin (Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression crossJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitCrossJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression crossJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCrossJoin (crossJoinExpression As CrossJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitCrossJoin : Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitCrossJoin : Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitCrossJoin crossJoinExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="crossJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression" />
      </Parameters>
      <Docs>
        <param name="crossJoinExpression"> The cross join expression. </param>
        <summary>
                Visit a CrossJoin expression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrossJoinLateral">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitCrossJoinLateral (Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinLateralExpression crossJoinLateralExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitCrossJoinLateral(class Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinLateralExpression crossJoinLateralExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoinLateral(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinLateralExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCrossJoinLateral (crossJoinLateralExpression As CrossJoinLateralExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitCrossJoinLateral : Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinLateralExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitCrossJoinLateral : Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinLateralExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitCrossJoinLateral crossJoinLateralExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoinLateral(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinLateralExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="crossJoinLateralExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinLateralExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="crossJoinLateralExpression"> The cross join lateral expression. </param>
        <summary>
                Visit a CrossJoinLateralExpression expression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExists">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitExists (Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression existsExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitExists(class Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression existsExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitExists (existsExpression As ExistsExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitExists : Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitExists : Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitExists existsExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existsExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression" />
      </Parameters>
      <Docs>
        <param name="existsExpression"> The exists expression. </param>
        <summary>
                Visit an ExistsExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExplicitCast">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitExplicitCast (Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression explicitCastExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitExplicitCast(class Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression explicitCastExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitExplicitCast (explicitCastExpression As ExplicitCastExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitExplicitCast : Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitExplicitCast : Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitExplicitCast explicitCastExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitCastExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression" />
      </Parameters>
      <Docs>
        <param name="explicitCastExpression"> The explicit cast expression. </param>
        <summary>
                Visit a SQL ExplicitCastExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFromSql">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitFromSql (Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression fromSqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitFromSql(class Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression fromSqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitFromSql (fromSqlExpression As FromSqlExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitFromSql : Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitFromSql : Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitFromSql fromSqlExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromSqlExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression" />
      </Parameters>
      <Docs>
        <param name="fromSqlExpression"> The FromSql expression. </param>
        <summary>
                Visit a FromSqlExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIn">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitIn (Microsoft.EntityFrameworkCore.Query.Expressions.InExpression inExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitIn(class Microsoft.EntityFrameworkCore.Query.Expressions.InExpression inExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIn (inExpression As InExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitIn : Microsoft.EntityFrameworkCore.Query.Expressions.InExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitIn : Microsoft.EntityFrameworkCore.Query.Expressions.InExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitIn inExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.InExpression" />
      </Parameters>
      <Docs>
        <param name="inExpression"> The in expression. </param>
        <summary>
                Visit an InExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInnerJoin">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitInnerJoin (Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression innerJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitInnerJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression innerJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitInnerJoin (innerJoinExpression As InnerJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitInnerJoin : Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitInnerJoin : Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitInnerJoin innerJoinExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression" />
      </Parameters>
      <Docs>
        <param name="innerJoinExpression"> The inner join expression. </param>
        <summary>
                Visit an InnerJoinExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIsNotNull">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitIsNotNull (Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression isNotNullExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitIsNotNull(class Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression isNotNullExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNotNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIsNotNull (isNotNullExpression As IsNullExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitIsNotNull : Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitIsNotNull : Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitIsNotNull isNotNullExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isNotNullExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="isNotNullExpression"> The is not null expression. </param>
        <summary>
                Visits an IsNotNullExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIsNull">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitIsNull (Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression isNullExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitIsNull(class Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression isNullExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIsNull (isNullExpression As IsNullExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitIsNull : Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitIsNull : Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitIsNull isNullExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isNullExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression" />
      </Parameters>
      <Docs>
        <param name="isNullExpression"> The is null expression. </param>
        <summary>
                Visits an IsNullExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLateralJoin">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitLateralJoin (Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression lateralJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitLateralJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression lateralJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLateralJoin (lateralJoinExpression As LateralJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitLateralJoin : Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitLateralJoin : Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitLateralJoin lateralJoinExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lateralJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="lateralJoinExpression"> The lateral join expression. </param>
        <summary>
                Visit a LateralJoin expression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLeftOuterJoin">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitLeftOuterJoin (Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression leftOuterJoinExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitLeftOuterJoin(class Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression leftOuterJoinExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLeftOuterJoin (leftOuterJoinExpression As LeftOuterJoinExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitLeftOuterJoin : Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitLeftOuterJoin : Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitLeftOuterJoin leftOuterJoinExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftOuterJoinExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression" />
      </Parameters>
      <Docs>
        <param name="leftOuterJoinExpression"> The left outer join expression. </param>
        <summary>
                Visit an LeftOuterJoinExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLike">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitLike (Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression likeExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitLike(class Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression likeExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLike (likeExpression As LikeExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitLike : Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitLike : Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitLike likeExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="likeExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression" />
      </Parameters>
      <Docs>
        <param name="likeExpression"> The like expression. </param>
        <summary>
                Visit a LikeExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMax">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitMax (Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression maxExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitMax(class Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression maxExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitMax (maxExpression As MaxExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitMax : Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitMax : Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitMax maxExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="maxExpression"> The max expression. </param>
        <summary>
                Visit a MaxExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMin">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitMin (Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression minExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitMin(class Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression minExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitMin (minExpression As MinExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitMin : Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitMin : Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitMin minExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="minExpression"> The min expression. </param>
        <summary>
                Visit a MinExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNotIn">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitNotIn (Microsoft.EntityFrameworkCore.Query.Expressions.InExpression inExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitNotIn(class Microsoft.EntityFrameworkCore.Query.Expressions.InExpression inExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitNotIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitNotIn (inExpression As InExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitNotIn : Microsoft.EntityFrameworkCore.Query.Expressions.InExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitNotIn : Microsoft.EntityFrameworkCore.Query.Expressions.InExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitNotIn inExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.InExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="inExpression"> The in expression. </param>
        <summary>
                Visit a negated InExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParameter">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitParameter (System.Linq.Expressions.ParameterExpression parameterExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitParameter(class System.Linq.Expressions.ParameterExpression parameterExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitParameter(System.Linq.Expressions.ParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitParameter (parameterExpression As ParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitParameter : System.Linq.Expressions.ParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitParameter parameterExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterExpression" Type="System.Linq.Expressions.ParameterExpression" />
      </Parameters>
      <Docs>
        <param name="parameterExpression"> The parameter expression to visit. </param>
        <summary>
                Visits a ParameterExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitProjection">
      <MemberSignature Language="C#" Value="protected virtual void VisitProjection (System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; projections);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void VisitProjection(class System.Collections.Generic.IReadOnlyList`1&lt;class System.Linq.Expressions.Expression&gt; projections) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitProjection(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub VisitProjection (projections As IReadOnlyList(Of Expression))" />
      <MemberSignature Language="F#" Value="abstract member VisitProjection : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; -&gt; unit&#xA;override this.VisitProjection : System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt; -&gt; unit" Usage="defaultQuerySqlGenerator.VisitProjection projections" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projections" Type="System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="projections"> The projection expression. </param>
        <summary>
                Visit the projection.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPropertyParameter">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitPropertyParameter (Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression propertyParameterExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitPropertyParameter(class Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression propertyParameterExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitPropertyParameter (propertyParameterExpression As PropertyParameterExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitPropertyParameter : Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitPropertyParameter : Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitPropertyParameter propertyParameterExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyParameterExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression" />
      </Parameters>
      <Docs>
        <param name="propertyParameterExpression"> The property parameter expression. </param>
        <summary>
                Visits a PropertyParameterExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelect">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitSelect (Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitSelect(class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSelect (selectExpression As SelectExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitSelect : Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitSelect : Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitSelect selectExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="selectExpression"> The select expression. </param>
        <summary>
                Visit a top-level SelectExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlFragment">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitSqlFragment (Microsoft.EntityFrameworkCore.Query.Expressions.SqlFragmentExpression sqlFragmentExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitSqlFragment(class Microsoft.EntityFrameworkCore.Query.Expressions.SqlFragmentExpression sqlFragmentExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFragment(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFragmentExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSqlFragment (sqlFragmentExpression As SqlFragmentExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitSqlFragment : Microsoft.EntityFrameworkCore.Query.Expressions.SqlFragmentExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitSqlFragment : Microsoft.EntityFrameworkCore.Query.Expressions.SqlFragmentExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitSqlFragment sqlFragmentExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFragment(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFragmentExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlFragmentExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFragmentExpression" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="sqlFragmentExpression"> The SqlFragmentExpression expression. </param>
        <summary>
                Visit a SqlFragmentExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlFunction">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitSqlFunction (Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression sqlFunctionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitSqlFunction(class Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression sqlFunctionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSqlFunction (sqlFunctionExpression As SqlFunctionExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitSqlFunction : Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitSqlFunction : Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitSqlFunction sqlFunctionExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlFunctionExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression" />
      </Parameters>
      <Docs>
        <param name="sqlFunctionExpression"> The SQL function expression. </param>
        <summary>
                Visits a SqlFunctionExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitStringCompare">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitStringCompare (Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression stringCompareExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitStringCompare(class Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression stringCompareExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitStringCompare (stringCompareExpression As StringCompareExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitStringCompare : Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitStringCompare : Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitStringCompare stringCompareExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringCompareExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression" />
      </Parameters>
      <Docs>
        <param name="stringCompareExpression"> The string compare expression. </param>
        <summary>
                Visit a StringCompareExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSum">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitSum (Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression sumExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitSum(class Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression sumExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSum (sumExpression As SumExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitSum : Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitSum : Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitSum sumExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sumExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="sumExpression"> The sum expression. </param>
        <summary>
                Visit a SumExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTable">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression VisitTable (Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression tableExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitTable(class Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression tableExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTable (tableExpression As TableExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitTable : Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitTable : Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitTable tableExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression" />
      </Parameters>
      <Docs>
        <param name="tableExpression"> The table expression. </param>
        <summary>
                Visit a TableExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUnary (System.Linq.Expressions.UnaryExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUnary(class System.Linq.Expressions.UnaryExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitUnary (expression As UnaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitUnary : System.Linq.Expressions.UnaryExpression -&gt; System.Linq.Expressions.Expression" Usage="defaultQuerySqlGenerator.VisitUnary expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.UnaryExpression" />
      </Parameters>
      <Docs>
        <param name="expression"> The unary expression to visit. </param>
        <summary>
                Visits a UnaryExpression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
