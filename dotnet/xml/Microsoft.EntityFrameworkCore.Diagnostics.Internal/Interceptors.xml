<Type Name="Interceptors" FullName="Microsoft.EntityFrameworkCore.Diagnostics.Internal.Interceptors">
  <TypeSignature Language="C#" Value="public class Interceptors : Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Interceptors extends System.Object implements class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.Internal.Interceptors" />
  <TypeSignature Language="VB.NET" Value="Public Class Interceptors&#xA;Implements IInterceptors" />
  <TypeSignature Language="F#" Value="type Interceptors = class&#xA;    interface IInterceptors" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Interceptors (IServiceProvider serviceProvider, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; injectedInterceptors, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator&gt; interceptorAggregators);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; injectedInterceptors, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator&gt; interceptorAggregators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.Interceptors.#ctor(System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider, injectedInterceptors As IEnumerable(Of IInterceptor), interceptorAggregators As IEnumerable(Of IInterceptorAggregator))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Diagnostics.Internal.Interceptors : IServiceProvider * seq&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt; * seq&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator&gt; -&gt; Microsoft.EntityFrameworkCore.Diagnostics.Internal.Interceptors" Usage="new Microsoft.EntityFrameworkCore.Diagnostics.Internal.Interceptors (serviceProvider, injectedInterceptors, interceptorAggregators)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="injectedInterceptors" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor&gt;" />
        <Parameter Name="interceptorAggregators" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">To be added.</param>
        <param name="injectedInterceptors">To be added.</param>
        <param name="interceptorAggregators">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TInterceptor&gt;">
      <MemberSignature Language="C#" Value="public virtual TInterceptor Aggregate&lt;TInterceptor&gt; () where TInterceptor : class, Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor;" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TInterceptor Aggregate&lt;class (class Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor) TInterceptor&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.Interceptors.Aggregate``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Aggregate(Of TInterceptor As {Class, IInterceptor}) () As TInterceptor" />
      <MemberSignature Language="F#" Value="abstract member Aggregate : unit -&gt; 'Interceptor (requires 'Interceptor : null and 'Interceptor :&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor)&#xA;override this.Aggregate : unit -&gt; 'Interceptor (requires 'Interceptor : null and 'Interceptor :&gt; Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor)" Usage="interceptors.Aggregate " />
      <MemberSignature Language="C#" Value="public virtual TInterceptor? Aggregate&lt;TInterceptor&gt; () where TInterceptor : class, Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor;" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors.Aggregate``1</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TInterceptor</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInterceptor">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInterceptor">To be added.</typeparam>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
