<Type Name="LoggingOptions" FullName="Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions">
  <TypeSignature Language="C#" Value="public class LoggingOptions : Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LoggingOptions extends System.Object implements class Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions, class Microsoft.EntityFrameworkCore.Infrastructure.ISingletonOptions" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class LoggingOptions&#xA;Implements ILoggingOptions" />
  <TypeSignature Language="F#" Value="type LoggingOptions = class&#xA;    interface ILoggingOptions&#xA;    interface ISingletonOptions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.ISingletonOptions</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LoggingOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetailedErrorsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool DetailedErrorsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DetailedErrorsEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.DetailedErrorsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DetailedErrorsEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.DetailedErrorsEnabled : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.DetailedErrorsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.Initialize(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (options As IDbContextOptions)" />
      <MemberSignature Language="F#" Value="abstract member Initialize : Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions -&gt; unit&#xA;override this.Initialize : Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions -&gt; unit" Usage="loggingOptions.Initialize options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.ISingletonOptions.Initialize(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSensitiveDataLoggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsSensitiveDataLoggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSensitiveDataLoggingEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.IsSensitiveDataLoggingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSensitiveDataLoggingEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSensitiveDataLoggingEnabled : bool" Usage="Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.IsSensitiveDataLoggingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSensitiveDataLoggingWarned">
      <MemberSignature Language="C#" Value="public virtual bool IsSensitiveDataLoggingWarned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSensitiveDataLoggingWarned" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.IsSensitiveDataLoggingWarned" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IsSensitiveDataLoggingWarned As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSensitiveDataLoggingWarned : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.IsSensitiveDataLoggingWarned" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions.IsSensitiveDataLoggingWarned</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldWarnForStringEnumValueInJson">
      <MemberSignature Language="C#" Value="public virtual bool ShouldWarnForStringEnumValueInJson (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldWarnForStringEnumValueInJson(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.ShouldWarnForStringEnumValueInJson(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldWarnForStringEnumValueInJson (enumType As Type) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldWarnForStringEnumValueInJson : Type -&gt; bool&#xA;override this.ShouldWarnForStringEnumValueInJson : Type -&gt; bool" Usage="loggingOptions.ShouldWarnForStringEnumValueInJson enumType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions.ShouldWarnForStringEnumValueInJson(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual void Validate (Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Validate (options As IDbContextOptions)" />
      <MemberSignature Language="F#" Value="abstract member Validate : Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions -&gt; unit&#xA;override this.Validate : Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions -&gt; unit" Usage="loggingOptions.Validate options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.ISingletonOptions.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningsConfiguration">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration WarningsConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration WarningsConfiguration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.WarningsConfiguration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WarningsConfiguration As WarningsConfiguration" />
      <MemberSignature Language="F#" Value="member this.WarningsConfiguration : Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration" Usage="Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions.WarningsConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
