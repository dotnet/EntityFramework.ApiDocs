<Type Name="FormattingDbContextLogger" FullName="Microsoft.EntityFrameworkCore.Diagnostics.Internal.FormattingDbContextLogger">
  <TypeSignature Language="C#" Value="public class FormattingDbContextLogger : Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormattingDbContextLogger extends System.Object implements class Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Diagnostics.Internal.FormattingDbContextLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class FormattingDbContextLogger&#xA;Implements IDbContextLogger" />
  <TypeSignature Language="F#" Value="type FormattingDbContextLogger = class&#xA;    interface IDbContextLogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormattingDbContextLogger (Action&lt;string&gt; sink, Func&lt;Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter, Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;string&gt; sink, class System.Func`3&lt;valuetype Microsoft.Extensions.Logging.EventId, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter, valuetype Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.FormattingDbContextLogger.#ctor(System.Action{System.String},System.Func{Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean},Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sink As Action(Of String), filter As Func(Of EventId, LogLevel, Boolean), options As DbContextLoggerOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Diagnostics.Internal.FormattingDbContextLogger : Action&lt;string&gt; * Func&lt;Microsoft.Extensions.Logging.EventId, Microsoft.Extensions.Logging.LogLevel, bool&gt; * Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions -&gt; Microsoft.EntityFrameworkCore.Diagnostics.Internal.FormattingDbContextLogger" Usage="new Microsoft.EntityFrameworkCore.Diagnostics.Internal.FormattingDbContextLogger (sink, filter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sink" Type="System.Action&lt;System.String&gt;" />
        <Parameter Name="filter" Type="System.Func&lt;Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions" />
      </Parameters>
      <Docs>
        <param name="sink">To be added.</param>
        <param name="filter">To be added.</param>
        <param name="options">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public virtual void Log (Microsoft.EntityFrameworkCore.Diagnostics.EventData eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log(class Microsoft.EntityFrameworkCore.Diagnostics.EventData eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.FormattingDbContextLogger.Log(Microsoft.EntityFrameworkCore.Diagnostics.EventData)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Log (eventData As EventData)" />
      <MemberSignature Language="F#" Value="abstract member Log : Microsoft.EntityFrameworkCore.Diagnostics.EventData -&gt; unit&#xA;override this.Log : Microsoft.EntityFrameworkCore.Diagnostics.EventData -&gt; unit" Usage="formattingDbContextLogger.Log eventData" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger.Log(Microsoft.EntityFrameworkCore.Diagnostics.EventData)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventData" Type="Microsoft.EntityFrameworkCore.Diagnostics.EventData" />
      </Parameters>
      <Docs>
        <param name="eventData">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldLog">
      <MemberSignature Language="C#" Value="public virtual bool ShouldLog (Microsoft.Extensions.Logging.EventId eventId, Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldLog(valuetype Microsoft.Extensions.Logging.EventId eventId, valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.FormattingDbContextLogger.ShouldLog(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldLog (eventId As EventId, logLevel As LogLevel) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ShouldLog : Microsoft.Extensions.Logging.EventId * Microsoft.Extensions.Logging.LogLevel -&gt; bool&#xA;override this.ShouldLog : Microsoft.Extensions.Logging.EventId * Microsoft.Extensions.Logging.LogLevel -&gt; bool" Usage="formattingDbContextLogger.ShouldLog (eventId, logLevel)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger.ShouldLog(Microsoft.Extensions.Logging.EventId,Microsoft.Extensions.Logging.LogLevel)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="eventId">To be added.</param>
        <param name="logLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
