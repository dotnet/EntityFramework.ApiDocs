<Type Name="InternalServicePropertyBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder">
  <TypeSignature Language="C#" Value="public class InternalServicePropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataItemBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt;" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalServicePropertyBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataItemBuilder`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt;" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalServicePropertyBuilder&#xA;Inherits InternalMetadataItemBuilder(Of ServiceProperty)" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type InternalServicePropertyBuilder = class&#xA;    inherit InternalMetadataItemBuilder&lt;ServiceProperty&gt;" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public class InternalServicePropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelItemBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalServicePropertyBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelItemBuilder`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt; implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalServicePropertyBuilder&#xA;Inherits InternalModelItemBuilder(Of ServiceProperty)&#xA;Implements IConventionServicePropertyBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="F#" Value="type InternalServicePropertyBuilder = class&#xA;    inherit InternalModelItemBuilder&lt;ServiceProperty&gt;&#xA;    interface IConventionServicePropertyBuilder&#xA;    interface IConventionAnnotatableBuilder" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="C#" Value="public class InternalServicePropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalServicePropertyBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt; implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalServicePropertyBuilder&#xA;Inherits InternalPropertyBaseBuilder(Of ServiceProperty)&#xA;Implements IConventionServicePropertyBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="F#" Value="type InternalServicePropertyBuilder = class&#xA;    inherit InternalPropertyBaseBuilder&lt;ServiceProperty&gt;&#xA;    interface IConventionServicePropertyBuilder&#xA;    interface IConventionPropertyBaseBuilder&#xA;    interface IConventionAnnotatableBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="C#" Value="public class InternalServicePropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalServicePropertyBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder, class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt; implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalServicePropertyBuilder&#xA;Inherits InternalPropertyBaseBuilder(Of IConventionServicePropertyBuilder, ServiceProperty)&#xA;Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder), IConventionServicePropertyBuilder" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="F#" Value="type InternalServicePropertyBuilder = class&#xA;    inherit InternalPropertyBaseBuilder&lt;IConventionServicePropertyBuilder, ServiceProperty&gt;&#xA;    interface IConventionServicePropertyBuilder&#xA;    interface IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;&#xA;    interface IConventionAnnotatableBuilder" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalMetadataItemBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelItemBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TBuilder">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TPropertyBase">Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{Metadata,nq}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{Metadata,nq}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalServicePropertyBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty property, Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder modelBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty property, class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder modelBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As ServiceProperty, modelBuilder As InternalModelBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty * Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder (property, modelBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty" />
        <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="modelBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder Attach (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder entityTypeBuilder = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder Attach(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder entityTypeBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Attach(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Attach (Optional entityTypeBuilder As InternalEntityTypeBuilder = Nothing) As InternalServicePropertyBuilder" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member Attach : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder&#xA;override this.Attach : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalServicePropertyBuilder.Attach entityTypeBuilder" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder? Attach (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder entityTypeBuilder);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Attach (entityTypeBuilder As InternalEntityTypeBuilder) As InternalServicePropertyBuilder" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetField">
      <MemberSignature Language="C#" Value="public virtual bool CanSetField (System.Reflection.FieldInfo fieldInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetField(class System.Reflection.FieldInfo fieldInfo, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.CanSetField(System.Reflection.FieldInfo,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetField (fieldInfo As FieldInfo, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetField : System.Reflection.FieldInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanSetField : System.Reflection.FieldInfo * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalServicePropertyBuilder.CanSetField (fieldInfo, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetField">
      <MemberSignature Language="C#" Value="public virtual bool CanSetField (string fieldName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetField(string fieldName, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.CanSetField(System.String,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetField (fieldName As String, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetField : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanSetField : string * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalServicePropertyBuilder.CanSetField (fieldName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetParameterBinding">
      <MemberSignature Language="C#" Value="public virtual bool CanSetParameterBinding (Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetParameterBinding(class Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.CanSetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetParameterBinding (parameterBinding As ServiceParameterBinding, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalServicePropertyBuilder.CanSetParameterBinding (parameterBinding, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterBinding" Type="Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="parameterBinding">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetParameterBinding">
      <MemberSignature Language="C#" Value="public virtual bool CanSetParameterBinding (Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetParameterBinding(class Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.CanSetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetParameterBinding (parameterBinding As ServiceParameterBinding, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanSetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalServicePropertyBuilder.CanSetParameterBinding (parameterBinding, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual bool CanSetParameterBinding (Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding? parameterBinding, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterBinding" Type="Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="parameterBinding">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder HasField (System.Reflection.FieldInfo fieldInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder HasField(class System.Reflection.FieldInfo fieldInfo, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.HasField(System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasField (fieldInfo As FieldInfo, configurationSource As ConfigurationSource) As InternalServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasField : System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder&#xA;override this.HasField : System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalServicePropertyBuilder.HasField (fieldInfo, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="override this.HasField : System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalServicePropertyBuilder.HasField (fieldInfo, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder? HasField (System.Reflection.FieldInfo? fieldInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder HasField (string fieldName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder HasField(string fieldName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.HasField(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasField (fieldName As String, configurationSource As ConfigurationSource) As InternalServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasField : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder&#xA;override this.HasField : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalServicePropertyBuilder.HasField (fieldName, configurationSource)" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="override this.HasField : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalServicePropertyBuilder.HasField (fieldName, configurationSource)" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder? HasField (string? fieldName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public virtual bool HasField (string fieldName, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasField(string fieldName, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.HasField(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasField (fieldName As String, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member HasField : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.HasField : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalServicePropertyBuilder.HasField (fieldName, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFieldInfo">
      <MemberSignature Language="C#" Value="public virtual bool HasFieldInfo (System.Reflection.FieldInfo fieldInfo, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasFieldInfo(class System.Reflection.FieldInfo fieldInfo, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.HasFieldInfo(System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasFieldInfo (fieldInfo As FieldInfo, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member HasFieldInfo : System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.HasFieldInfo : System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalServicePropertyBuilder.HasFieldInfo (fieldInfo, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasParameterBinding">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder HasParameterBinding (Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder HasParameterBinding(class Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.HasParameterBinding(Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasParameterBinding (parameterBinding As ServiceParameterBinding, configurationSource As ConfigurationSource) As InternalServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder&#xA;override this.HasParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalServicePropertyBuilder.HasParameterBinding (parameterBinding, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder? HasParameterBinding (Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding? parameterBinding, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterBinding" Type="Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="parameterBinding">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#CanSetField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder.CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField (fieldInfo, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetField (System.Reflection.FieldInfo? fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetField (string fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#CanSetField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder.CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField : string * bool -&gt; bool" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField (fieldName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetField (string? fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetPropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder.CanSetPropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder IConventionPropertyBaseBuilder.HasField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#HasField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As IConventionPropertyBaseBuilder Implements IConventionPropertyBaseBuilder.HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField (fieldInfo, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder? IConventionPropertyBaseBuilder.HasField (System.Reflection.FieldInfo? fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder IConventionPropertyBaseBuilder.HasField (string fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#HasField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldName As String, fromDataAnnotation As Boolean) As IConventionPropertyBaseBuilder Implements IConventionPropertyBaseBuilder.HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField (fieldName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder? IConventionPropertyBaseBuilder.HasField (string? fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionPropertyBase Implements IConventionPropertyBaseBuilder.Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder IConventionPropertyBaseBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As IConventionPropertyBaseBuilder Implements IConventionPropertyBaseBuilder.UsePropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder? IConventionPropertyBaseBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;.CanSetField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#CanSetField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField (fieldInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.CanSetField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;.CanSetField (string fieldName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#CanSetField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField : string * bool -&gt; bool" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetField (fieldName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.CanSetField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetPropertyAccessMode">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;.CanSetPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetPropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetPropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).CanSetPropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.CanSetPropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;.HasAnnotation (string name, object value, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#HasAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasAnnotation (name As String, value As Object, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).HasAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasAnnotation(System.String,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;.HasField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#HasField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField (fieldInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;.HasField (string fieldName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#HasField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldName As String, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasField (fieldName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNoAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;.HasNoAnnotation (string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNoAnnotation(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#HasNoAnnotation(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoAnnotation (name As String, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).HasNoAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNoAnnotation (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasNoAnnotation(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNonNullAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;.HasNonNullAnnotation (string name, object value, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNonNullAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#HasNonNullAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNonNullAnnotation (name As String, value As Object, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).HasNonNullAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.HasNonNullAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasNonNullAnnotation(System.String,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionPropertyBase Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionServicePropertyBuilder&gt;.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder&gt;#UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionServicePropertyBuilder).UsePropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&gt;.UsePropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionServicePropertyBuilder.CanSetField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder#CanSetField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As Boolean Implements IConventionServicePropertyBuilder.CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField (fieldInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionServicePropertyBuilder.CanSetField (string fieldName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder#CanSetField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionServicePropertyBuilder.CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField : string * bool -&gt; bool" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField (fieldName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetParameterBinding">
      <MemberSignature Language="C#" Value="bool IConventionServicePropertyBuilder.CanSetParameterBinding (Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetParameterBinding(class Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder#CanSetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetParameterBinding (parameterBinding As ServiceParameterBinding, fromDataAnnotation As Boolean) As Boolean Implements IConventionServicePropertyBuilder.CanSetParameterBinding" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * bool -&gt; bool" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetParameterBinding (parameterBinding, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionServicePropertyBuilder.CanSetParameterBinding (Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding? parameterBinding, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterBinding" Type="Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="parameterBinding">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionServicePropertyBuilder.HasField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder#HasField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionServicePropertyBuilder.HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField (fieldInfo, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder? IConventionServicePropertyBuilder.HasField (System.Reflection.FieldInfo? fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionServicePropertyBuilder.HasField (string fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder#HasField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldName As String, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionServicePropertyBuilder.HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField (fieldName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder? IConventionServicePropertyBuilder.HasField (string? fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasParameterBinding">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionServicePropertyBuilder.HasParameterBinding (Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, bool fromDataAnnotation);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasParameterBinding(class Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding parameterBinding, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder#HasParameterBinding(Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasParameterBinding (parameterBinding As ServiceParameterBinding, fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionServicePropertyBuilder.HasParameterBinding" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasParameterBinding : Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasParameterBinding (parameterBinding, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder? IConventionServicePropertyBuilder.HasParameterBinding (Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding? parameterBinding, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasParameterBinding(Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterBinding" Type="Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="parameterBinding">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionServiceProperty Implements IConventionServicePropertyBuilder.Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder IConventionServicePropertyBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionServicePropertyBuilder#UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As IConventionServicePropertyBuilder Implements IConventionServicePropertyBuilder.UsePropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="internalServicePropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.UsePropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder? IConventionServicePropertyBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameterBinding">
      <MemberSignature Language="C#" Value="public virtual bool SetParameterBinding (Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding parameterBinding, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetParameterBinding(class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding parameterBinding, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.SetParameterBinding(Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetParameterBinding (parameterBinding As ServiceParameterBinding, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member SetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.SetParameterBinding : Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalServicePropertyBuilder.SetParameterBinding (parameterBinding, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterBinding" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceParameterBinding" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="parameterBinding">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="This">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder This { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder This" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.This" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property This As IConventionServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="member this.This : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.This" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As PropertyAccessMode, configurationSource As ConfigurationSource) As InternalServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder&#xA;override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalServicePropertyBuilder.UsePropertyAccessMode (propertyAccessMode, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual bool UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool UsePropertyAccessMode(valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode propertyAccessMode, valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.PropertyAccessMode,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As PropertyAccessMode, configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool&#xA;override this.UsePropertyAccessMode : Microsoft.EntityFrameworkCore.PropertyAccessMode * Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource -&gt; bool" Usage="internalServicePropertyBuilder.UsePropertyAccessMode (propertyAccessMode, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="Microsoft.EntityFrameworkCore.PropertyAccessMode" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), configurationSource As ConfigurationSource) As InternalServicePropertyBuilder" />
      <MemberSignature Language="F#" Value="override this.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder" Usage="internalServicePropertyBuilder.UsePropertyAccessMode (propertyAccessMode, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder? UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
