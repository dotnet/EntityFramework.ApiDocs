<Type Name="DebugView&lt;TMetadata&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;TMetadata&gt;">
  <TypeSignature Language="C#" Value="public class DebugView&lt;TMetadata&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DebugView`1&lt;TMetadata&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView`1" />
  <TypeSignature Language="VB.NET" Value="Public Class DebugView(Of TMetadata)" />
  <TypeSignature Language="F#" Value="type DebugView&lt;'Metadata&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TMetadata" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TMetadata">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DebugView (TMetadata metadata, Func&lt;TMetadata,string&gt; toDebugString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!TMetadata metadata, class System.Func`2&lt;!TMetadata, string&gt; toDebugString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView`1.#ctor(`0,System.Func{`0,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (metadata As TMetadata, toDebugString As Func(Of TMetadata, String))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;'Metadata&gt; : 'Metadata * Func&lt;'Metadata, string&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;'Metadata&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;'Metadata&gt; (metadata, toDebugString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="metadata" Type="TMetadata" />
        <Parameter Name="toDebugString" Type="System.Func&lt;TMetadata,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <param name="toDebugString">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public virtual string View { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string View" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView`1.View" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property View As String" />
      <MemberSignature Language="F#" Value="member this.View : string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;'Metadata&gt;.View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
