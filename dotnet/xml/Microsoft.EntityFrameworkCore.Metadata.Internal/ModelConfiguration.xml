<Type Name="ModelConfiguration" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration">
  <TypeSignature Language="C#" Value="public class ModelConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ModelConfiguration extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration" />
  <TypeSignature Language="VB.NET" Value="Public Class ModelConfiguration" />
  <TypeSignature Language="F#" Value="type ModelConfiguration = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModelConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIgnored">
      <MemberSignature Language="C#" Value="public virtual void AddIgnored (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddIgnored(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.AddIgnored(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddIgnored (type As Type)" />
      <MemberSignature Language="F#" Value="abstract member AddIgnored : Type -&gt; unit&#xA;override this.AddIgnored : Type -&gt; unit" Usage="modelConfiguration.AddIgnored type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureComplexProperty">
      <MemberSignature Language="C#" Value="public virtual void ConfigureComplexProperty (Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConfigureComplexProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.ConfigureComplexProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConfigureComplexProperty (property As IMutableComplexProperty)" />
      <MemberSignature Language="F#" Value="abstract member ConfigureComplexProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty -&gt; unit&#xA;override this.ConfigureComplexProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty -&gt; unit" Usage="modelConfiguration.ConfigureComplexProperty property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableComplexProperty" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureProperty">
      <MemberSignature Language="C#" Value="public virtual void ConfigureProperty (Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConfigureProperty(class Microsoft.EntityFrameworkCore.Metadata.IMutableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.ConfigureProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ConfigureProperty (property As IMutableProperty)" />
      <MemberSignature Language="F#" Value="abstract member ConfigureProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; unit&#xA;override this.ConfigureProperty : Microsoft.EntityFrameworkCore.Metadata.IMutableProperty -&gt; unit" Usage="modelConfiguration.ConfigureProperty property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableProperty" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration? FindComplexProperty (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration FindComplexProperty(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.FindComplexProperty(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindComplexProperty (type As Type) As ComplexPropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member FindComplexProperty : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration&#xA;override this.FindComplexProperty : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration" Usage="modelConfiguration.FindComplexProperty type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration? FindProperty (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration FindProperty(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.FindProperty(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindProperty (type As Type) As PropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member FindProperty : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration&#xA;override this.FindProperty : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration" Usage="modelConfiguration.FindProperty type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration? FindTypeMapping (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration FindTypeMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.FindTypeMapping(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindTypeMapping (type As Type) As PropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member FindTypeMapping : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration&#xA;override this.FindTypeMapping : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration" Usage="modelConfiguration.FindTypeMapping type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTypeMappingConfiguration">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration? FindTypeMappingConfiguration (Type scalarType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration FindTypeMappingConfiguration(class System.Type scalarType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.FindTypeMappingConfiguration(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindTypeMappingConfiguration (scalarType As Type) As ITypeMappingConfiguration" />
      <MemberSignature Language="F#" Value="abstract member FindTypeMappingConfiguration : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&#xA;override this.FindTypeMappingConfiguration : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration" Usage="modelConfiguration.FindTypeMappingConfiguration scalarType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalarType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="scalarType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConfigurationType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType? GetConfigurationType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType&gt; GetConfigurationType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.GetConfigurationType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConfigurationType (type As Type) As Nullable(Of TypeConfigurationType)" />
      <MemberSignature Language="F#" Value="abstract member GetConfigurationType : Type -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType&gt;&#xA;override this.GetConfigurationType : Type -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType&gt;" Usage="modelConfiguration.GetConfigurationType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddComplexProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration GetOrAddComplexProperty (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration GetOrAddComplexProperty(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.GetOrAddComplexProperty(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrAddComplexProperty (type As Type) As ComplexPropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member GetOrAddComplexProperty : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration&#xA;override this.GetOrAddComplexProperty : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration" Usage="modelConfiguration.GetOrAddComplexProperty type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddProperty">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration GetOrAddProperty (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration GetOrAddProperty(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.GetOrAddProperty(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrAddProperty (type As Type) As PropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member GetOrAddProperty : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration&#xA;override this.GetOrAddProperty : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration" Usage="modelConfiguration.GetOrAddProperty type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration GetOrAddTypeMapping (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration GetOrAddTypeMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.GetOrAddTypeMapping(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrAddTypeMapping (type As Type) As PropertyConfiguration" />
      <MemberSignature Language="F#" Value="abstract member GetOrAddTypeMapping : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration&#xA;override this.GetOrAddTypeMapping : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration" Usage="modelConfiguration.GetOrAddTypeMapping type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeMappingConfigurations">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt; GetTypeMappingConfigurations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt; GetTypeMappingConfigurations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.GetTypeMappingConfigurations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeMappingConfigurations () As IEnumerable(Of ITypeMappingConfiguration)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeMappingConfigurations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt;&#xA;override this.GetTypeMappingConfigurations : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt;" Usage="modelConfiguration.GetTypeMappingConfigurations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public virtual bool IsEmpty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEmpty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEmpty () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEmpty : unit -&gt; bool&#xA;override this.IsEmpty : unit -&gt; bool" Usage="modelConfiguration.IsEmpty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIgnored">
      <MemberSignature Language="C#" Value="public virtual bool IsIgnored (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIgnored(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.IsIgnored(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsIgnored (type As Type) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsIgnored : Type -&gt; bool&#xA;override this.IsIgnored : Type -&gt; bool" Usage="modelConfiguration.IsIgnored type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveComplexProperty">
      <MemberSignature Language="C#" Value="public virtual bool RemoveComplexProperty (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveComplexProperty(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.RemoveComplexProperty(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveComplexProperty (type As Type) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member RemoveComplexProperty : Type -&gt; bool&#xA;override this.RemoveComplexProperty : Type -&gt; bool" Usage="modelConfiguration.RemoveComplexProperty type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIgnored">
      <MemberSignature Language="C#" Value="public virtual bool RemoveIgnored (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveIgnored(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.RemoveIgnored(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveIgnored (type As Type) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member RemoveIgnored : Type -&gt; bool&#xA;override this.RemoveIgnored : Type -&gt; bool" Usage="modelConfiguration.RemoveIgnored type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public virtual bool RemoveProperty (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveProperty(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.RemoveProperty(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveProperty (type As Type) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member RemoveProperty : Type -&gt; bool&#xA;override this.RemoveProperty : Type -&gt; bool" Usage="modelConfiguration.RemoveProperty type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Validate () As ModelConfiguration" />
      <MemberSignature Language="F#" Value="abstract member Validate : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration&#xA;override this.Validate : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration" Usage="modelConfiguration.Validate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
