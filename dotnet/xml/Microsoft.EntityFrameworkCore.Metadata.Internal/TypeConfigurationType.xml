<Type Name="TypeConfigurationType" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType">
  <TypeSignature Language="C#" Value="public enum TypeConfigurationType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TypeConfigurationType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType" />
  <TypeSignature Language="VB.NET" Value="Public Enum TypeConfigurationType" />
  <TypeSignature Language="F#" Value="type TypeConfigurationType = " />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ComplexType">
      <MemberSignature Language="C#" Value="ComplexType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType ComplexType = int32(4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.ComplexType" />
      <MemberSignature Language="VB.NET" Value="ComplexType" />
      <MemberSignature Language="F#" Value="ComplexType = 4" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.ComplexType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="EntityType">
      <MemberSignature Language="C#" Value="EntityType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType EntityType = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.EntityType" />
      <MemberSignature Language="VB.NET" Value="EntityType" />
      <MemberSignature Language="F#" Value="EntityType = 1" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.EntityType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Ignored">
      <MemberSignature Language="C#" Value="Ignored" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType Ignored = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.Ignored" />
      <MemberSignature Language="VB.NET" Value="Ignored" />
      <MemberSignature Language="F#" Value="Ignored = 0" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.Ignored" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="OwnedEntityType">
      <MemberSignature Language="C#" Value="OwnedEntityType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType OwnedEntityType = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.OwnedEntityType" />
      <MemberSignature Language="VB.NET" Value="OwnedEntityType" />
      <MemberSignature Language="F#" Value="OwnedEntityType = 3" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.OwnedEntityType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="Property" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType Property = int32(4)" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.Property" />
      <MemberSignature Language="VB.NET" Value="Property" />
      <MemberSignature Language="F#" Value="Property = 4" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.Property" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType Property = int32(5)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="Property = 5" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.Property" FrameworkAlternate="efcore-8.0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="ServiceProperty">
      <MemberSignature Language="C#" Value="ServiceProperty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType ServiceProperty = int32(5)" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.ServiceProperty" />
      <MemberSignature Language="VB.NET" Value="ServiceProperty" />
      <MemberSignature Language="F#" Value="ServiceProperty = 5" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.ServiceProperty" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType ServiceProperty = int32(6)" FrameworkAlternate="efcore-8.0" />
      <MemberSignature Language="F#" Value="ServiceProperty = 6" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.ServiceProperty" FrameworkAlternate="efcore-8.0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="SharedTypeEntityType">
      <MemberSignature Language="C#" Value="SharedTypeEntityType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType SharedTypeEntityType = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.SharedTypeEntityType" />
      <MemberSignature Language="VB.NET" Value="SharedTypeEntityType" />
      <MemberSignature Language="F#" Value="SharedTypeEntityType = 2" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType.SharedTypeEntityType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>
