<Type Name="AdHocMapper" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.AdHocMapper">
  <TypeSignature Language="C#" Value="public class AdHocMapper : Microsoft.EntityFrameworkCore.Metadata.IAdHocMapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AdHocMapper extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.IAdHocMapper" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.AdHocMapper" />
  <TypeSignature Language="VB.NET" Value="Public Class AdHocMapper&#xA;Implements IAdHocMapper" />
  <TypeSignature Language="F#" Value="type AdHocMapper = class&#xA;    interface IAdHocMapper" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IAdHocMapper</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AdHocMapper (Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.ModelCreationDependencies modelCreationDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.ModelCreationDependencies modelCreationDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.AdHocMapper.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.ModelCreationDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (model As IModel, modelCreationDependencies As ModelCreationDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.AdHocMapper : Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.ModelCreationDependencies -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.AdHocMapper" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.AdHocMapper (model, modelCreationDependencies)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="modelCreationDependencies" Type="Microsoft.EntityFrameworkCore.ModelCreationDependencies" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="modelCreationDependencies">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType GetOrAddEntityType (Type clrType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType GetOrAddEntityType(class System.Type clrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.AdHocMapper.GetOrAddEntityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrAddEntityType (clrType As Type) As RuntimeEntityType" />
      <MemberSignature Language="F#" Value="abstract member GetOrAddEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType&#xA;override this.GetOrAddEntityType : Type -&gt; Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType" Usage="adHocMapper.GetOrAddEntityType clrType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IAdHocMapper.GetOrAddEntityType(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
