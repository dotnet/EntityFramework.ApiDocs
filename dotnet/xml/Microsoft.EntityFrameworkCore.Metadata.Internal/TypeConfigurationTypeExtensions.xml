<Type Name="TypeConfigurationTypeExtensions" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationTypeExtensions">
  <TypeSignature Language="C#" Value="public static class TypeConfigurationTypeExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TypeConfigurationTypeExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationTypeExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TypeConfigurationTypeExtensions" />
  <TypeSignature Language="F#" Value="type TypeConfigurationTypeExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="IsEntityType">
      <MemberSignature Language="C#" Value="public static bool IsEntityType (this Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType configurationType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntityType(valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType configurationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationTypeExtensions.IsEntityType(Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsEntityType (configurationType As TypeConfigurationType) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsEntityType : Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationTypeExtensions.IsEntityType configurationType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType" RefType="this" />
      </Parameters>
      <Docs>
        <param name="configurationType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEntityType">
      <MemberSignature Language="C#" Value="public static bool? IsEntityType (this Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType? configurationType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;bool&gt; IsEntityType(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType&gt; configurationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationTypeExtensions.IsEntityType(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsEntityType (configurationType As Nullable(Of TypeConfigurationType)) As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member IsEntityType : Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType&gt; -&gt; Nullable&lt;bool&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationTypeExtensions.IsEntityType configurationType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationType" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="configurationType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
