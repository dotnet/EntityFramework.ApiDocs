<Type Name="ScaffoldingModelExtensions" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions">
  <TypeSignature Language="C#" Value="public static class ScaffoldingModelExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ScaffoldingModelExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ScaffoldingModelExtensions" />
  <TypeSignature Language="F#" Value="type ScaffoldingModelExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetDatabaseName">
      <MemberSignature Language="C#" Value="public static string GetDatabaseName (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDatabaseName(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetDatabaseName(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDatabaseName (model As IModel) As String" />
      <MemberSignature Language="F#" Value="static member GetDatabaseName : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetDatabaseName model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseName">
      <MemberSignature Language="C#" Value="public static string? GetDatabaseName (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDatabaseName(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetDatabaseName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDatabaseName (model As IReadOnlyModel) As String" />
      <MemberSignature Language="F#" Value="static member GetDatabaseName : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel -&gt; string" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetDatabaseName model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypeErrors">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; GetEntityTypeErrors (this Microsoft.EntityFrameworkCore.Metadata.IModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetEntityTypeErrors(class Microsoft.EntityFrameworkCore.Metadata.IModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetEntityTypeErrors(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypeErrors (model As IModel) As IDictionary(Of String, String)" />
      <MemberSignature Language="F#" Value="static member GetEntityTypeErrors : Microsoft.EntityFrameworkCore.Metadata.IModel -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetEntityTypeErrors model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypeErrors">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; GetEntityTypeErrors (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; GetEntityTypeErrors(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetEntityTypeErrors(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypeErrors (model As IReadOnlyModel) As IReadOnlyDictionary(Of String, String)" />
      <MemberSignature Language="F#" Value="static member GetEntityTypeErrors : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetEntityTypeErrors model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateEntityTypeErrors">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; GetOrCreateEntityTypeErrors (this Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetOrCreateEntityTypeErrors(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetOrCreateEntityTypeErrors(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrCreateEntityTypeErrors (model As IReadOnlyModel) As IDictionary(Of String, String)" />
      <MemberSignature Language="F#" Value="static member GetOrCreateEntityTypeErrors : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.GetOrCreateEntityTypeErrors model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel" Index="0" FrameworkAlternate="efcore-6.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDatabaseName">
      <MemberSignature Language="C#" Value="public static void SetDatabaseName (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string value);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDatabaseName(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.SetDatabaseName(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetDatabaseName (model As IMutableModel, value As String)" />
      <MemberSignature Language="F#" Value="static member SetDatabaseName : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * string -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.SetDatabaseName (model, value)" />
      <MemberSignature Language="C#" Value="public static void SetDatabaseName (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string? value);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEntityTypeErrors">
      <MemberSignature Language="C#" Value="public static void SetEntityTypeErrors (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, System.Collections.Generic.IDictionary&lt;string,string&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetEntityTypeErrors(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.SetEntityTypeErrors(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetEntityTypeErrors (model As IMutableModel, value As IDictionary(Of String, String))" />
      <MemberSignature Language="F#" Value="static member SetEntityTypeErrors : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.ScaffoldingModelExtensions.SetEntityTypeErrors (model, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Design</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
        <Parameter Name="value" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
