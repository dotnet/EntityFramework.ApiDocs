<Type Name="ConstructorBindingFactory" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory">
  <TypeSignature Language="C#" Value="public class ConstructorBindingFactory : Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConstructorBindingFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory" FrameworkAlternate="efcore-2.1;efcore-2.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class ConstructorBindingFactory&#xA;Implements IConstructorBindingFactory" />
  <TypeSignature Language="F#" Value="type ConstructorBindingFactory = class&#xA;    interface IConstructorBindingFactory" />
  <TypeSignature Language="C#" Value="public class ConstructorBindingFactory : Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConstructorBindingFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="efcore-2.1;efcore-2.2">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstructorBindingFactory (Microsoft.EntityFrameworkCore.Metadata.Internal.IPropertyParameterBindingFactory propertyFactory, Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories factories);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.IPropertyParameterBindingFactory propertyFactory, class Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories factories) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.IPropertyParameterBindingFactory,Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyFactory As IPropertyParameterBindingFactory, factories As IParameterBindingFactories)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory : Microsoft.EntityFrameworkCore.Metadata.Internal.IPropertyParameterBindingFactory * Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory (propertyFactory, factories)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyFactory" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IPropertyParameterBindingFactory" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="factories" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IParameterBindingFactories" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyFactory">To be added.</param>
        <param name="factories">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstructorBindingFactory (Microsoft.EntityFrameworkCore.Metadata.IPropertyParameterBindingFactory propertyFactory, Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactories factories);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.IPropertyParameterBindingFactory propertyFactory, class Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactories factories) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.IPropertyParameterBindingFactory,Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactories)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyFactory As IPropertyParameterBindingFactory, factories As IParameterBindingFactories)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory : Microsoft.EntityFrameworkCore.Metadata.IPropertyParameterBindingFactory * Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactories -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory (propertyFactory, factories)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyFactory" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyParameterBindingFactory" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="factories" Type="Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactories" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyFactory">To be added.</param>
        <param name="factories">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindings">
      <MemberSignature Language="C#" Value="public virtual void GetBindings (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? serviceOnlyBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBindings(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; constructorBinding, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; serviceOnlyBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetBindings (entityType As IConventionEntityType, ByRef constructorBinding As InstantiationBinding, ByRef serviceOnlyBinding As InstantiationBinding)" />
      <MemberSignature Language="F#" Value="abstract member GetBindings : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * InstantiationBinding * InstantiationBinding -&gt; unit&#xA;override this.GetBindings : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * InstantiationBinding * InstantiationBinding -&gt; unit" Usage="constructorBindingFactory.GetBindings (entityType, constructorBinding, serviceOnlyBinding)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="serviceOnlyBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="constructorBinding">To be added.</param>
        <param name="serviceOnlyBinding">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindings">
      <MemberSignature Language="C#" Value="public virtual void GetBindings (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? serviceOnlyBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBindings(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; constructorBinding, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; serviceOnlyBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetBindings (entityType As IMutableEntityType, ByRef constructorBinding As InstantiationBinding, ByRef serviceOnlyBinding As InstantiationBinding)" />
      <MemberSignature Language="F#" Value="abstract member GetBindings : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * InstantiationBinding * InstantiationBinding -&gt; unit&#xA;override this.GetBindings : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * InstantiationBinding * InstantiationBinding -&gt; unit" Usage="constructorBindingFactory.GetBindings (entityType, constructorBinding, serviceOnlyBinding)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="serviceOnlyBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="constructorBinding">To be added.</param>
        <param name="serviceOnlyBinding">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindings">
      <MemberSignature Language="C#" Value="public virtual void GetBindings (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType complexType, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? serviceOnlyBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBindings(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType complexType, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; constructorBinding, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; serviceOnlyBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetBindings (complexType As IReadOnlyComplexType, ByRef constructorBinding As InstantiationBinding, ByRef serviceOnlyBinding As InstantiationBinding)" />
      <MemberSignature Language="F#" Value="abstract member GetBindings : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType * InstantiationBinding * InstantiationBinding -&gt; unit&#xA;override this.GetBindings : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType * InstantiationBinding * InstantiationBinding -&gt; unit" Usage="constructorBindingFactory.GetBindings (complexType, constructorBinding, serviceOnlyBinding)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyComplexType" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="serviceOnlyBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="complexType">To be added.</param>
        <param name="constructorBinding">To be added.</param>
        <param name="serviceOnlyBinding">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindings">
      <MemberSignature Language="C#" Value="public virtual void GetBindings (Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding constructorBinding, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? serviceOnlyBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBindings(class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType entityType, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; constructorBinding, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; serviceOnlyBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetBindings (entityType As IReadOnlyEntityType, ByRef constructorBinding As InstantiationBinding, ByRef serviceOnlyBinding As InstantiationBinding)" />
      <MemberSignature Language="F#" Value="abstract member GetBindings : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType * InstantiationBinding * InstantiationBinding -&gt; unit&#xA;override this.GetBindings : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType * InstantiationBinding * InstantiationBinding -&gt; unit" Usage="constructorBindingFactory.GetBindings (entityType, constructorBinding, serviceOnlyBinding)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.GetBindings(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructorBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="serviceOnlyBinding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="constructorBinding">To be added.</param>
        <param name="serviceOnlyBinding">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBindConstructor">
      <MemberSignature Language="C#" Value="public virtual bool TryBindConstructor (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Reflection.ConstructorInfo constructor, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding binding, out System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt; unboundParameters);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBindConstructor(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, class System.Reflection.ConstructorInfo constructor, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; binding, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.ParameterInfo&gt;&amp; unboundParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBindConstructor (entityType As IConventionEntityType, constructor As ConstructorInfo, ByRef binding As InstantiationBinding, ByRef unboundParameters As IEnumerable(Of ParameterInfo)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryBindConstructor : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.ConstructorInfo * InstantiationBinding * seq -&gt; bool&#xA;override this.TryBindConstructor : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * System.Reflection.ConstructorInfo * InstantiationBinding * seq -&gt; bool" Usage="constructorBindingFactory.TryBindConstructor (entityType, constructor, binding, unboundParameters)" />
      <MemberSignature Language="C#" Value="public virtual bool TryBindConstructor (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType, System.Reflection.ConstructorInfo constructor, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? binding, out System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt;? unboundParameters);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="binding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="unboundParameters" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt;" RefType="out" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(false)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(false)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="constructor">To be added.</param>
        <param name="binding">To be added.</param>
        <param name="unboundParameters">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBindConstructor">
      <MemberSignature Language="C#" Value="public virtual bool TryBindConstructor (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.ConstructorInfo constructor, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding binding, out System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt; unboundParameters);" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBindConstructor(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.ConstructorInfo constructor, [out] class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding&amp; binding, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.ParameterInfo&gt;&amp; unboundParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBindConstructor (entityType As IMutableEntityType, constructor As ConstructorInfo, ByRef binding As InstantiationBinding, ByRef unboundParameters As IEnumerable(Of ParameterInfo)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryBindConstructor : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.ConstructorInfo * InstantiationBinding * seq -&gt; bool&#xA;override this.TryBindConstructor : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.ConstructorInfo * InstantiationBinding * seq -&gt; bool" Usage="constructorBindingFactory.TryBindConstructor (entityType, constructor, binding, unboundParameters)" />
      <MemberSignature Language="C#" Value="public virtual bool TryBindConstructor (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.ConstructorInfo constructor, out Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding? binding, out System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt;? unboundParameters);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="binding" Type="Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding" RefType="out" Index="2" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="unboundParameters" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt;" RefType="out" Index="3" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(false)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(false)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="constructor">To be added.</param>
        <param name="binding">To be added.</param>
        <param name="unboundParameters">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBindConstructor">
      <MemberSignature Language="C#" Value="public virtual bool TryBindConstructor (Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, System.Reflection.ConstructorInfo constructor, out Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding binding, out System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt; failedBindings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBindConstructor(class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType, class System.Reflection.ConstructorInfo constructor, [out] class Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding&amp; binding, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.ParameterInfo&gt;&amp; failedBindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBindConstructor (entityType As IMutableEntityType, constructor As ConstructorInfo, ByRef binding As ConstructorBinding, ByRef failedBindings As IEnumerable(Of ParameterInfo)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryBindConstructor : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.ConstructorInfo * ConstructorBinding * seq -&gt; bool&#xA;override this.TryBindConstructor : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType * System.Reflection.ConstructorInfo * ConstructorBinding * seq -&gt; bool" Usage="constructorBindingFactory.TryBindConstructor (entityType, constructor, binding, failedBindings)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory.TryBindConstructor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.ConstructorInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding@,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="binding" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBinding" RefType="out" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="failedBindings" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.ParameterInfo&gt;" RefType="out" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="constructor">To be added.</param>
        <param name="binding">To be added.</param>
        <param name="failedBindings">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
