<Type Name="InternalEntityTypeMappingFragmentBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder">
  <TypeSignature Language="C#" Value="public class InternalEntityTypeMappingFragmentBuilder : Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment,Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalEntityTypeMappingFragmentBuilder extends Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBuilder`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt; implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalEntityTypeMappingFragmentBuilder&#xA;Inherits AnnotatableBuilder(Of EntityTypeMappingFragment, IConventionModelBuilder)&#xA;Implements IConventionEntityTypeMappingFragmentBuilder" />
  <TypeSignature Language="F#" Value="type InternalEntityTypeMappingFragmentBuilder = class&#xA;    inherit AnnotatableBuilder&lt;EntityTypeMappingFragment, IConventionModelBuilder&gt;&#xA;    interface IConventionEntityTypeMappingFragmentBuilder&#xA;    interface IConventionAnnotatableBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment,Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalEntityTypeMappingFragmentBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment fragment, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder modelBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment fragment, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder modelBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment,Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fragment As EntityTypeMappingFragment, modelBuilder As IConventionModelBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment * Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder (fragment, modelBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fragment" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeMappingFragment" />
        <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder" />
      </Parameters>
      <Docs>
        <param name="fragment">To be added.</param>
        <param name="modelBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExcludeTableFromMigrations">
      <MemberSignature Language="C#" Value="public virtual bool CanExcludeTableFromMigrations (bool? excludedFromMigrations, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExcludeTableFromMigrations(valuetype System.Nullable`1&lt;bool&gt; excludedFromMigrations, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder.CanExcludeTableFromMigrations(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanExcludeTableFromMigrations (excludedFromMigrations As Nullable(Of Boolean), configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanExcludeTableFromMigrations : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanExcludeTableFromMigrations : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalEntityTypeMappingFragmentBuilder.CanExcludeTableFromMigrations (excludedFromMigrations, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="excludedFromMigrations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="excludedFromMigrations">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeTableFromMigrations">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder? ExcludeTableFromMigrations (bool? excludedFromMigrations, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder ExcludeTableFromMigrations(valuetype System.Nullable`1&lt;bool&gt; excludedFromMigrations, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder.ExcludeTableFromMigrations(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExcludeTableFromMigrations (excludedFromMigrations As Nullable(Of Boolean), configurationSource As ConfigurationSource) As InternalEntityTypeMappingFragmentBuilder" />
      <MemberSignature Language="F#" Value="abstract member ExcludeTableFromMigrations : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder&#xA;override this.ExcludeTableFromMigrations : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder" Usage="internalEntityTypeMappingFragmentBuilder.ExcludeTableFromMigrations (excludedFromMigrations, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="excludedFromMigrations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="excludedFromMigrations">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeMappingFragmentBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionEntityTypeMappingFragmentBuilder#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionEntityTypeMappingFragment Implements IConventionEntityTypeMappingFragmentBuilder.Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeMappingFragmentBuilder.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
