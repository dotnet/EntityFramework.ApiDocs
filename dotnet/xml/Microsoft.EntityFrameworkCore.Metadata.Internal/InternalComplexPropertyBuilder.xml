<Type Name="InternalComplexPropertyBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder">
  <TypeSignature Language="C#" Value="public class InternalComplexPropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalComplexPropertyBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder, class Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty&gt; implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalComplexPropertyBuilder&#xA;Inherits InternalPropertyBaseBuilder(Of IConventionComplexPropertyBuilder, ComplexProperty)&#xA;Implements IConventionComplexPropertyBuilder, IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder)" />
  <TypeSignature Language="F#" Value="type InternalComplexPropertyBuilder = class&#xA;    inherit InternalPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder, ComplexProperty&gt;&#xA;    interface IConventionComplexPropertyBuilder&#xA;    interface IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;&#xA;    interface IConventionAnnotatableBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TBuilder">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TPropertyBase">Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalComplexPropertyBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty metadata, Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder modelBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty metadata, class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder modelBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (metadata As ComplexProperty, modelBuilder As InternalModelBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty * Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder (metadata, modelBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="metadata" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty" />
        <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <param name="modelBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsRequired">
      <MemberSignature Language="C#" Value="public virtual bool CanSetIsRequired (bool? required, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsRequired(valuetype System.Nullable`1&lt;bool&gt; required, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.CanSetIsRequired(System.Nullable{System.Boolean},System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetIsRequired (required As Nullable(Of Boolean), configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsRequired : Nullable&lt;bool&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanSetIsRequired : Nullable&lt;bool&gt; * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalComplexPropertyBuilder.CanSetIsRequired (required, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" />
      </Parameters>
      <Docs>
        <param name="required">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexTypeBuilder">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexTypeBuilder ComplexTypeBuilder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexTypeBuilder ComplexTypeBuilder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.ComplexTypeBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ComplexTypeBuilder As InternalComplexTypeBuilder" />
      <MemberSignature Language="F#" Value="member this.ComplexTypeBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexTypeBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.ComplexTypeBuilder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexTypeBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertySnapshot? Detach (Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty complexProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertySnapshot Detach(class Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty complexProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Detach(Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Detach (complexProperty As ComplexProperty) As ComplexPropertySnapshot" />
      <MemberSignature Language="F#" Value="static member Detach : Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertySnapshot" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Detach complexProperty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexPropertySnapshot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="complexProperty" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ComplexProperty" />
      </Parameters>
      <Docs>
        <param name="complexProperty">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder? IsRequired (bool? required, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder IsRequired(valuetype System.Nullable`1&lt;bool&gt; required, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.IsRequired(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsRequired (required As Nullable(Of Boolean), configurationSource As ConfigurationSource) As InternalComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsRequired : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder&#xA;override this.IsRequired : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder" Usage="internalComplexPropertyBuilder.IsRequired (required, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="required">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.CanSetIsRequired">
      <MemberSignature Language="C#" Value="bool IConventionComplexPropertyBuilder.CanSetIsRequired (bool? required, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.CanSetIsRequired(valuetype System.Nullable`1&lt;bool&gt; required, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder#CanSetIsRequired(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetIsRequired (required As Nullable(Of Boolean), fromDataAnnotation As Boolean) As Boolean Implements IConventionComplexPropertyBuilder.CanSetIsRequired" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.CanSetIsRequired : Nullable&lt;bool&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.CanSetIsRequired : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.CanSetIsRequired (required, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.CanSetIsRequired(System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.IsRequired">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder IConventionComplexPropertyBuilder.IsRequired (bool? required, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.IsRequired(valuetype System.Nullable`1&lt;bool&gt; required, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder#IsRequired(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsRequired (required As Nullable(Of Boolean), fromDataAnnotation As Boolean) As IConventionComplexPropertyBuilder Implements IConventionComplexPropertyBuilder.IsRequired" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.IsRequired : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.IsRequired : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.IsRequired (required, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.IsRequired(System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionComplexProperty Implements IConventionComplexPropertyBuilder.Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionComplexProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;.CanSetField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#CanSetField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField (fieldInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.CanSetField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;.CanSetField (string fieldName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#CanSetField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField : string * bool -&gt; bool" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetField (fieldName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.CanSetField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetPropertyAccessMode">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;.CanSetPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetPropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetPropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).CanSetPropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.CanSetPropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;.HasAnnotation (string name, object value, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#HasAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasAnnotation (name As String, value As Object, fromDataAnnotation As Boolean) As IConventionComplexPropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).HasAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasAnnotation(System.String,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;.HasField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#HasField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As IConventionComplexPropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField (fieldInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;.HasField (string fieldName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#HasField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldName As String, fromDataAnnotation As Boolean) As IConventionComplexPropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasField (fieldName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNoAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;.HasNoAnnotation (string name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNoAnnotation(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#HasNoAnnotation(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoAnnotation (name As String, fromDataAnnotation As Boolean) As IConventionComplexPropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).HasNoAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNoAnnotation (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasNoAnnotation(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNonNullAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;.HasNonNullAnnotation (string name, object value, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNonNullAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#HasNonNullAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNonNullAnnotation (name As String, value As Object, fromDataAnnotation As Boolean) As IConventionComplexPropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).HasNonNullAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.HasNonNullAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasNonNullAnnotation(System.String,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionPropertyBase Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder IConventionPropertyBaseBuilder&lt;IConventionComplexPropertyBuilder&gt;.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionComplexPropertyBuilder&gt;#UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As IConventionComplexPropertyBuilder Implements IConventionPropertyBaseBuilder(Of IConventionComplexPropertyBuilder).UsePropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder" Usage="internalComplexPropertyBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder&gt;.UsePropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="This">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder This { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder This" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder.This" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property This As InternalComplexPropertyBuilder" />
      <MemberSignature Language="F#" Value="member this.This : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder" Usage="This" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.PreserveBaseOverrides]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.PreserveBaseOverrides&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalComplexPropertyBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
