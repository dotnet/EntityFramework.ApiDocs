<Type Name="IMemberClassifier" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier">
  <TypeSignature Language="C#" Value="public interface IMemberClassifier" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemberClassifier" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemberClassifier" />
  <TypeSignature Language="F#" Value="type IMemberClassifier = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IMemberClassifier" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>
                The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="FindCandidateNavigationPropertyType">
      <MemberSignature Language="C#" Value="public Type FindCandidateNavigationPropertyType (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type FindCandidateNavigationPropertyType(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.FindCandidateNavigationPropertyType(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindCandidateNavigationPropertyType (memberInfo As MemberInfo) As Type" />
      <MemberSignature Language="F#" Value="abstract member FindCandidateNavigationPropertyType : System.Reflection.MemberInfo -&gt; Type" Usage="iMemberClassifier.FindCandidateNavigationPropertyType memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindCandidateNavigationPropertyType">
      <MemberSignature Language="C#" Value="public Type FindCandidateNavigationPropertyType (System.Reflection.PropertyInfo propertyInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type FindCandidateNavigationPropertyType(class System.Reflection.PropertyInfo propertyInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.FindCandidateNavigationPropertyType(System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindCandidateNavigationPropertyType (propertyInfo As PropertyInfo) As Type" />
      <MemberSignature Language="F#" Value="abstract member FindCandidateNavigationPropertyType : System.Reflection.PropertyInfo -&gt; Type" Usage="iMemberClassifier.FindCandidateNavigationPropertyType propertyInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindCandidateNavigationPropertyType">
      <MemberSignature Language="C#" Value="public Type? FindCandidateNavigationPropertyType (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, out bool? shouldBeOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type FindCandidateNavigationPropertyType(class System.Reflection.MemberInfo memberInfo, class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, [out] valuetype System.Nullable`1&lt;bool&gt;&amp; shouldBeOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.FindCandidateNavigationPropertyType(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{System.Boolean}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindCandidateNavigationPropertyType (memberInfo As MemberInfo, model As IConventionModel, ByRef shouldBeOwned As Nullable(Of Boolean)) As Type" />
      <MemberSignature Language="F#" Value="abstract member FindCandidateNavigationPropertyType : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Nullable -&gt; Type" Usage="iMemberClassifier.FindCandidateNavigationPropertyType (memberInfo, model, shouldBeOwned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="shouldBeOwned" Type="System.Nullable&lt;System.Boolean&gt;" RefType="out" Index="2" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="model">To be added.</param>
        <param name="shouldBeOwned">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindServicePropertyCandidateBindingFactory">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory? FindServicePropertyCandidateBindingFactory (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.IConventionModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory FindServicePropertyCandidateBindingFactory(class System.Reflection.MemberInfo memberInfo, class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.FindServicePropertyCandidateBindingFactory(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionModel)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindServicePropertyCandidateBindingFactory (memberInfo As MemberInfo, model As IConventionModel) As IParameterBindingFactory" />
      <MemberSignature Language="F#" Value="abstract member FindServicePropertyCandidateBindingFactory : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionModel -&gt; Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory" Usage="iMemberClassifier.FindServicePropertyCandidateBindingFactory (memberInfo, model)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindServicePropertyCandidateBindingFactory">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory? FindServicePropertyCandidateBindingFactory (System.Reflection.PropertyInfo propertyInfo, Microsoft.EntityFrameworkCore.Metadata.IConventionModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory FindServicePropertyCandidateBindingFactory(class System.Reflection.PropertyInfo propertyInfo, class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.FindServicePropertyCandidateBindingFactory(System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionModel)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindServicePropertyCandidateBindingFactory (propertyInfo As PropertyInfo, model As IConventionModel) As IParameterBindingFactory" />
      <MemberSignature Language="F#" Value="abstract member FindServicePropertyCandidateBindingFactory : System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionModel -&gt; Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory" Usage="iMemberClassifier.FindServicePropertyCandidateBindingFactory (propertyInfo, model)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">To be added.</param>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInverseCandidateTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyCollection&lt;Type&gt; GetInverseCandidateTypes (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyCollection`1&lt;class System.Type&gt; GetInverseCandidateTypes(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.GetInverseCandidateTypes(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInverseCandidateTypes (entityType As IConventionEntityType) As IReadOnlyCollection(Of Type)" />
      <MemberSignature Language="F#" Value="abstract member GetInverseCandidateTypes : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Type&gt;" Usage="iMemberClassifier.GetInverseCandidateTypes entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNavigationCandidates">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedDictionary&lt;System.Reflection.PropertyInfo,(Type Type, bool? ShouldBeOwned)&gt; GetNavigationCandidates (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.ImmutableSortedDictionary`2&lt;class System.Reflection.PropertyInfo, valuetype System.ValueTuple`2&lt;class System.Type, valuetype System.Nullable`1&lt;bool&gt;&gt;&gt; GetNavigationCandidates(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.GetNavigationCandidates(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNavigationCandidates (entityType As IConventionEntityType) As ImmutableSortedDictionary(Of PropertyInfo, ValueTuple(Of Type, Nullable(Of Boolean)))" />
      <MemberSignature Language="F#" Value="abstract member GetNavigationCandidates : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; System.Collections.Immutable.ImmutableSortedDictionary&lt;System.Reflection.PropertyInfo, ValueTuple&lt;Type, Nullable&lt;bool&gt;&gt;&gt;" Usage="iMemberClassifier.GetNavigationCandidates entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedDictionary&lt;System.Reflection.PropertyInfo,System.ValueTuple&lt;System.Type,System.Nullable&lt;System.Boolean&gt;&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="efcore-6.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Type", "ShouldBeOwned" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Type", "ShouldBeOwned" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCandidateComplexProperty">
      <MemberSignature Language="C#" Value="public bool IsCandidateComplexProperty (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, out Type? elementType, out bool explicitlyConfigured);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsCandidateComplexProperty(class System.Reflection.MemberInfo memberInfo, class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, [out] class System.Type&amp; elementType, [out] bool&amp; explicitlyConfigured) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.IsCandidateComplexProperty(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Type@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCandidateComplexProperty (memberInfo As MemberInfo, model As IConventionModel, ByRef elementType As Type, ByRef explicitlyConfigured As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsCandidateComplexProperty : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionModel * Type * bool -&gt; bool" Usage="iMemberClassifier.IsCandidateComplexProperty (memberInfo, model, elementType, explicitlyConfigured)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="elementType" Type="System.Type" RefType="out" Index="2" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="explicitlyConfigured" Type="System.Boolean" RefType="out" Index="3" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="model">To be added.</param>
        <param name="elementType">To be added.</param>
        <param name="explicitlyConfigured">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCandidatePrimitiveProperty">
      <MemberSignature Language="C#" Value="public bool IsCandidatePrimitiveProperty (System.Reflection.PropertyInfo propertyInfo, Microsoft.EntityFrameworkCore.Metadata.IConventionModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsCandidatePrimitiveProperty(class System.Reflection.PropertyInfo propertyInfo, class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.IsCandidatePrimitiveProperty(System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionModel)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCandidatePrimitiveProperty (propertyInfo As PropertyInfo, model As IConventionModel) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsCandidatePrimitiveProperty : System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionModel -&gt; bool" Usage="iMemberClassifier.IsCandidatePrimitiveProperty (propertyInfo, model)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="efcore-6.0;efcore-7.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" Index="1" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">To be added.</param>
        <param name="model">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCandidatePrimitiveProperty">
      <MemberSignature Language="C#" Value="public bool IsCandidatePrimitiveProperty (System.Reflection.MemberInfo memberInfo, Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, out Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping? typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsCandidatePrimitiveProperty(class System.Reflection.MemberInfo memberInfo, class Microsoft.EntityFrameworkCore.Metadata.IConventionModel model, [out] class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping&amp; typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier.IsCandidatePrimitiveProperty(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.IConventionModel,Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping@)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCandidatePrimitiveProperty (memberInfo As MemberInfo, model As IConventionModel, ByRef typeMapping As CoreTypeMapping) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsCandidatePrimitiveProperty : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.IConventionModel * CoreTypeMapping -&gt; bool" Usage="iMemberClassifier.IsCandidatePrimitiveProperty (memberInfo, model, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionModel" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" RefType="out" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="model">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
