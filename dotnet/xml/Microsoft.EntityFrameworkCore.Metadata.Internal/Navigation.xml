<Type Name="Navigation" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation">
  <TypeSignature Language="C#" Value="public class Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase, Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Navigation extends Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation, class Microsoft.EntityFrameworkCore.Metadata.INavigation, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" FrameworkAlternate="efcore-1.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" />
  <TypeSignature Language="VB.NET" Value="Public Class Navigation&#xA;Inherits PropertyBase&#xA;Implements IMutableNavigation" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type Navigation = class&#xA;    inherit PropertyBase&#xA;    interface IMutableNavigation&#xA;    interface INavigation&#xA;    interface IPropertyBase&#xA;    interface IAnnotatable&#xA;    interface IMutableAnnotatable" FrameworkAlternate="efcore-1.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Navigation extends Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation, class Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase, class Microsoft.EntityFrameworkCore.Metadata.INavigation, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="F#" Value="type Navigation = class&#xA;    inherit PropertyBase&#xA;    interface IMutableNavigation&#xA;    interface INavigation&#xA;    interface IPropertyBase&#xA;    interface IAnnotatable&#xA;    interface IMutablePropertyBase&#xA;    interface IMutableAnnotatable" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
  <TypeSignature Language="C#" Value="public class Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase, Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation, Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Navigation extends Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation, class Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase, class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation, class Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase, class Microsoft.EntityFrameworkCore.Metadata.INavigation, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public Class Navigation&#xA;Inherits PropertyBase&#xA;Implements IConventionNavigation, IMutableNavigation" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
  <TypeSignature Language="F#" Value="type Navigation = class&#xA;    inherit PropertyBase&#xA;    interface IMutableNavigation&#xA;    interface INavigation&#xA;    interface IPropertyBase&#xA;    interface IAnnotatable&#xA;    interface IMutablePropertyBase&#xA;    interface IMutableAnnotatable&#xA;    interface IConventionNavigation&#xA;    interface IConventionPropertyBase&#xA;    interface IConventionAnnotatable" FrameworkAlternate="efcore-3.0;efcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Navigation extends Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation, class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigationBase, class Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase, class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation, class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase, class Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase, class Microsoft.EntityFrameworkCore.Metadata.INavigation, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="F#" Value="type Navigation = class&#xA;    inherit PropertyBase&#xA;    interface IMutableNavigation&#xA;    interface INavigation&#xA;    interface INavigationBase&#xA;    interface IPropertyBase&#xA;    interface IAnnotatable&#xA;    interface IMutableNavigationBase&#xA;    interface IMutablePropertyBase&#xA;    interface IMutableAnnotatable&#xA;    interface IConventionNavigation&#xA;    interface IConventionNavigationBase&#xA;    interface IConventionPropertyBase&#xA;    interface IConventionAnnotatable" FrameworkAlternate="efcore-5.0" />
  <TypeSignature Language="C#" Value="public class Navigation : Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase, Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation, Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation, Microsoft.EntityFrameworkCore.Metadata.INavigation" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Navigation extends Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation, class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigationBase, class Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase, class Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation, class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase, class Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase, class Microsoft.EntityFrameworkCore.Metadata.INavigation, class Microsoft.EntityFrameworkCore.Metadata.INavigationBase, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase, class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class Navigation&#xA;Inherits PropertyBase&#xA;Implements IConventionNavigation, IMutableNavigation, INavigation" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <TypeSignature Language="F#" Value="type Navigation = class&#xA;    inherit PropertyBase&#xA;    interface IMutableNavigation&#xA;    interface IReadOnlyNavigation&#xA;    interface IReadOnlyNavigationBase&#xA;    interface IReadOnlyPropertyBase&#xA;    interface IReadOnlyAnnotatable&#xA;    interface IMutableNavigationBase&#xA;    interface IMutablePropertyBase&#xA;    interface IMutableAnnotatable&#xA;    interface IConventionNavigation&#xA;    interface IConventionNavigationBase&#xA;    interface IConventionPropertyBase&#xA;    interface IConventionAnnotatable&#xA;    interface INavigation&#xA;    interface INavigationBase&#xA;    interface IPropertyBase&#xA;    interface IAnnotatable" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.INavigation</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IPropertyBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigationBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.INavigationBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="efcore-1.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{DeclaringEntityType.Name,nq}.{Name,nq}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{DeclaringEntityType.Name,nq}.{Name,nq}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Navigation (System.Reflection.PropertyInfo navigationProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo navigationProperty, class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.#ctor(System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (navigationProperty As PropertyInfo, foreignKey As ForeignKey)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation : System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation (navigationProperty, foreignKey)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="navigationProperty" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="1" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="navigationProperty">To be added.</param>
        <param name="foreignKey">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Navigation (string navigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string navigationName, class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.#ctor(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (navigationName As String, foreignKey As ForeignKey)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation : string * Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation (navigationName, foreignKey)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0" />
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="1" FrameworkAlternate="efcore-1.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="foreignKey">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used 
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Navigation (string name, System.Reflection.PropertyInfo propertyInfo, System.Reflection.FieldInfo fieldInfo, Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey);" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Reflection.PropertyInfo propertyInfo, class System.Reflection.FieldInfo fieldInfo, class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.#ctor(System.String,System.Reflection.PropertyInfo,System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, propertyInfo As PropertyInfo, fieldInfo As FieldInfo, foreignKey As ForeignKey)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation : string * System.Reflection.PropertyInfo * System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation (name, propertyInfo, fieldInfo, foreignKey)" />
      <MemberSignature Language="C#" Value="public Navigation (string name, System.Reflection.PropertyInfo? propertyInfo, System.Reflection.FieldInfo? fieldInfo, Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="2" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Index="3" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="propertyInfo">To be added.</param>
        <param name="fieldInfo">To be added.</param>
        <param name="foreignKey">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Builder">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder Builder { get; set; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder Builder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Builder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Builder As InternalNavigationBuilder" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="F#" Value="member this.Builder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Builder" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder Builder { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Builder As InternalNavigationBuilder" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.Builder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Builder" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[set: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClrType">
      <MemberSignature Language="C#" Value="public override Type ClrType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ClrType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.ClrType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ClrType As Type" />
      <MemberSignature Language="F#" Value="member this.ClrType : Type" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.ClrType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0">P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.ClrType</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.ClrType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionAccessor">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor CollectionAccessor { get; }" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor CollectionAccessor" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.CollectionAccessor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CollectionAccessor As IClrCollectionAccessor" />
      <MemberSignature Language="F#" Value="member this.CollectionAccessor : Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.CollectionAccessor" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor CollectionAccessor { get; }" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor CollectionAccessor" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.CollectionAccessor : Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.CollectionAccessor" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor? CollectionAccessor { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2">Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor</ReturnType>
        <ReturnType FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugView">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation&gt; DebugView { get; }" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation&gt; DebugView" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DebugView" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DebugView As DebugView(Of Navigation)" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="F#" Value="member this.DebugView : Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation&gt;" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DebugView" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView { get; }" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.DebugView DebugView" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DebugView As DebugView" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.DebugView : Microsoft.EntityFrameworkCore.Infrastructure.DebugView" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DebugView" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1">Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation&gt;</ReturnType>
        <ReturnType FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Infrastructure.DebugView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringEntityType">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType DeclaringEntityType { get; }" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringEntityType As EntityType" FrameworkAlternate="efcore-1.0" />
      <MemberSignature Language="F#" Value="member this.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DeclaringEntityType" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType DeclaringEntityType { get; }" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringEntityType As EntityType" FrameworkAlternate="efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType DeclaringType { get; }" FrameworkAlternate="efcore-1.1;efcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType DeclaringType" FrameworkAlternate="efcore-1.1;efcore-2.0" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringType As EntityType" FrameworkAlternate="efcore-1.1;efcore-2.0" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DeclaringType" FrameworkAlternate="efcore-1.1;efcore-2.0" />
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase DeclaringType { get; }" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase DeclaringType" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As TypeBase" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.DeclaringType" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType FrameworkAlternate="efcore-1.1;efcore-2.0">Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
        <ReturnType FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInverse">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation FindInverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation FindInverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.FindInverse" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInverse () As Navigation" />
      <MemberSignature Language="F#" Value="abstract member FindInverse : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation&#xA;override this.FindInverse : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Usage="navigation.FindInverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey ForeignKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey ForeignKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.ForeignKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ForeignKey As ForeignKey" />
      <MemberSignature Language="F#" Value="member this.ForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.ForeignKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClrMember">
      <MemberSignature Language="C#" Value="public static System.Reflection.MemberInfo GetClrMember (string navigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType sourceType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType, bool shouldThrow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MemberInfo GetClrMember(string navigationName, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType sourceType, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType, bool shouldThrow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetClrMember(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetClrMember (navigationName As String, sourceType As EntityType, targetType As EntityType, shouldThrow As Boolean) As MemberInfo" />
      <MemberSignature Language="F#" Value="static member GetClrMember : string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * bool -&gt; System.Reflection.MemberInfo" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetClrMember (navigationName, sourceType, targetType, shouldThrow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="sourceType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="targetType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="shouldThrow" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="sourceType">To be added.</param>
        <param name="targetType">To be added.</param>
        <param name="shouldThrow">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClrProperty">
      <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo GetClrProperty (string navigationName, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType sourceType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType, bool shouldThrow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo GetClrProperty(string navigationName, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType sourceType, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType, bool shouldThrow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetClrProperty(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetClrProperty (navigationName As String, sourceType As EntityType, targetType As EntityType, shouldThrow As Boolean) As PropertyInfo" />
      <MemberSignature Language="F#" Value="static member GetClrProperty : string * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * bool -&gt; System.Reflection.PropertyInfo" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetClrProperty (navigationName, sourceType, targetType, shouldThrow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="sourceType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="targetType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="shouldThrow" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="sourceType">To be added.</param>
        <param name="targetType">To be added.</param>
        <param name="shouldThrow">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConfigurationSource">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource GetConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource GetConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConfigurationSource () As ConfigurationSource" />
      <MemberSignature Language="F#" Value="override this.GetConfigurationSource : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Usage="navigation.GetConfigurationSource " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.Microsoft#EntityFrameworkCore#Metadata#IConventionPropertyBase#GetConfigurationSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInverseConfigurationSource">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? GetInverseConfigurationSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; GetInverseConfigurationSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetInverseConfigurationSource" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInverseConfigurationSource () As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member GetInverseConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;&#xA;override this.GetInverseConfigurationSource : unit -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="navigation.GetInverseConfigurationSource " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.GetInverseConfigurationSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public override Microsoft.EntityFrameworkCore.PropertyAccessMode GetPropertyAccessMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode GetPropertyAccessMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetPropertyAccessMode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPropertyAccessMode () As PropertyAccessMode" />
      <MemberSignature Language="F#" Value="override this.GetPropertyAccessMode : unit -&gt; Microsoft.EntityFrameworkCore.PropertyAccessMode" Usage="navigation.GetPropertyAccessMode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.GetPropertyAccessMode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.PropertyAccessMode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType GetTargetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType GetTargetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.GetTargetType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTargetType () As EntityType" />
      <MemberSignature Language="F#" Value="abstract member GetTargetType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType&#xA;override this.GetTargetType : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="navigation.GetTargetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inverse">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation Inverse { get; }" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation Inverse" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Inverse" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Inverse As Navigation" />
      <MemberSignature Language="F#" Value="member this.Inverse : Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Inverse" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation? Inverse { get; }" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompatible">
      <MemberSignature Language="C#" Value="public static bool IsCompatible (System.Reflection.MemberInfo navigationProperty, Type sourceClrType, Type targetClrType, bool? shouldBeCollection, bool shouldThrow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCompatible(class System.Reflection.MemberInfo navigationProperty, class System.Type sourceClrType, class System.Type targetClrType, valuetype System.Nullable`1&lt;bool&gt; shouldBeCollection, bool shouldThrow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible(System.Reflection.MemberInfo,System.Type,System.Type,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsCompatible (navigationProperty As MemberInfo, sourceClrType As Type, targetClrType As Type, shouldBeCollection As Nullable(Of Boolean), shouldThrow As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsCompatible : System.Reflection.MemberInfo * Type * Type * Nullable&lt;bool&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible (navigationProperty, sourceClrType, targetClrType, shouldBeCollection, shouldThrow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationProperty" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="sourceClrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="targetClrType" Type="System.Type" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="shouldBeCollection" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="shouldThrow" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="navigationProperty">To be added.</param>
        <param name="sourceClrType">To be added.</param>
        <param name="targetClrType">To be added.</param>
        <param name="shouldBeCollection">To be added.</param>
        <param name="shouldThrow">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompatible">
      <MemberSignature Language="C#" Value="public static bool IsCompatible (System.Reflection.PropertyInfo navigationProperty, Type sourceClrType, Type targetClrType, bool? shouldBeCollection, bool shouldThrow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCompatible(class System.Reflection.PropertyInfo navigationProperty, class System.Type sourceClrType, class System.Type targetClrType, valuetype System.Nullable`1&lt;bool&gt; shouldBeCollection, bool shouldThrow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible(System.Reflection.PropertyInfo,System.Type,System.Type,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsCompatible (navigationProperty As PropertyInfo, sourceClrType As Type, targetClrType As Type, shouldBeCollection As Nullable(Of Boolean), shouldThrow As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsCompatible : System.Reflection.PropertyInfo * Type * Type * Nullable&lt;bool&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible (navigationProperty, sourceClrType, targetClrType, shouldBeCollection, shouldThrow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationProperty" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="sourceClrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="targetClrType" Type="System.Type" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="shouldBeCollection" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="shouldThrow" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="navigationProperty">To be added.</param>
        <param name="sourceClrType">To be added.</param>
        <param name="targetClrType">To be added.</param>
        <param name="shouldBeCollection">To be added.</param>
        <param name="shouldThrow">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompatible">
      <MemberSignature Language="C#" Value="public static bool IsCompatible (string navigationName, System.Reflection.MemberInfo navigationProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType sourceType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType, bool? shouldBeCollection, bool shouldThrow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCompatible(string navigationName, class System.Reflection.MemberInfo navigationProperty, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType sourceType, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType, valuetype System.Nullable`1&lt;bool&gt; shouldBeCollection, bool shouldThrow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible(System.String,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsCompatible (navigationName As String, navigationProperty As MemberInfo, sourceType As EntityType, targetType As EntityType, shouldBeCollection As Nullable(Of Boolean), shouldThrow As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsCompatible : string * System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Nullable&lt;bool&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible (navigationName, navigationProperty, sourceType, targetType, shouldBeCollection, shouldThrow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="navigationProperty" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="sourceType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="targetType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="3" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="shouldBeCollection" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="shouldThrow" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-2.1;efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="sourceType">To be added.</param>
        <param name="targetType">To be added.</param>
        <param name="shouldBeCollection">To be added.</param>
        <param name="shouldThrow">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompatible">
      <MemberSignature Language="C#" Value="public static bool IsCompatible (string navigationName, System.Reflection.PropertyInfo navigationProperty, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType sourceType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType, bool? shouldBeCollection, bool shouldThrow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCompatible(string navigationName, class System.Reflection.PropertyInfo navigationProperty, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType sourceType, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetType, valuetype System.Nullable`1&lt;bool&gt; shouldBeCollection, bool shouldThrow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible(System.String,System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsCompatible (navigationName As String, navigationProperty As PropertyInfo, sourceType As EntityType, targetType As EntityType, shouldBeCollection As Nullable(Of Boolean), shouldThrow As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsCompatible : string * System.Reflection.PropertyInfo * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Nullable&lt;bool&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsCompatible (navigationName, navigationProperty, sourceType, targetType, shouldBeCollection, shouldThrow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationName" Type="System.String" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="navigationProperty" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="sourceType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="2" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="targetType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Index="3" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="shouldBeCollection" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
        <Parameter Name="shouldThrow" Type="System.Boolean" Index="5" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0" />
      </Parameters>
      <Docs>
        <param name="navigationName">To be added.</param>
        <param name="navigationProperty">To be added.</param>
        <param name="sourceType">To be added.</param>
        <param name="targetType">To be added.</param>
        <param name="shouldBeCollection">To be added.</param>
        <param name="shouldThrow">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEagerLoaded">
      <MemberSignature Language="C#" Value="public virtual bool IsEagerLoaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEagerLoaded" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsEagerLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IsEagerLoaded As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsEagerLoaded : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsEagerLoaded" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.IsEagerLoaded</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInModel">
      <MemberSignature Language="C#" Value="public virtual bool IsInModel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInModel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsInModel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsInModel As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsInModel : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsInModel" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.IsInModel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOnDependent">
      <MemberSignature Language="C#" Value="public virtual bool IsOnDependent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOnDependent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsOnDependent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsOnDependent As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsOnDependent : bool" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.IsOnDependent" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="efcore-5.0">P:Microsoft.EntityFrameworkCore.Metadata.INavigation.IsOnDependent</InterfaceMember>
        <InterfaceMember FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.IsOnDependent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IConventionAnnotatable#Builder" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Builder As IConventionAnnotatableBuilder Implements IConventionAnnotatable.Builder" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.Builder">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.Builder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.Builder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IConventionNavigation#Builder" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Builder As IConventionNavigationBuilder Implements IConventionNavigation.Builder" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.Builder : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.Builder" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.Builder</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.DeclaringEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.DeclaringEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IConventionNavigation#DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DeclaringEntityType As IConventionEntityType Implements IConventionNavigation.DeclaringEntityType" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.DeclaringEntityType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.DeclaringEntityType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.ForeignKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.ForeignKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.ForeignKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IConventionNavigation#ForeignKey" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ForeignKey As IConventionForeignKey Implements IConventionNavigation.ForeignKey" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.ForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.ForeignKey" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.ForeignKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation IConventionNavigation.SetInverse (System.Reflection.MemberInfo inverse, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse(class System.Reflection.MemberInfo inverse, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IConventionNavigation#SetInverse(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function SetInverse (inverse As MemberInfo, fromDataAnnotation As Boolean) As IConventionNavigation Implements IConventionNavigation.SetInverse" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse : System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Usage="navigation.Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse (inverse, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation? IConventionNavigation.SetInverse (System.Reflection.MemberInfo? inverse, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse(System.Reflection.MemberInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverse" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="inverse">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation IConventionNavigation.SetInverse (string inverseName, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse(string inverseName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IConventionNavigation#SetInverse(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function SetInverse (inverseName As String, fromDataAnnotation As Boolean) As IConventionNavigation Implements IConventionNavigation.SetInverse" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation" Usage="navigation.Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse (inverseName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation? IConventionNavigation.SetInverse (string? inverseName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverseName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="inverseName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.DeclaringEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.DeclaringEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IMutableNavigation#DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DeclaringEntityType As IMutableEntityType Implements IMutableNavigation.DeclaringEntityType" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.DeclaringEntityType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.DeclaringEntityType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.ForeignKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.ForeignKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.ForeignKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IMutableNavigation#ForeignKey" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ForeignKey As IMutableForeignKey Implements IMutableNavigation.ForeignKey" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.ForeignKey : Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.ForeignKey" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.ForeignKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation IMutableNavigation.SetInverse (System.Reflection.MemberInfo inverse);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse(class System.Reflection.MemberInfo inverse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IMutableNavigation#SetInverse(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Function SetInverse (inverse As MemberInfo) As IMutableNavigation Implements IMutableNavigation.SetInverse" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="navigation.Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse inverse" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation? IMutableNavigation.SetInverse (System.Reflection.MemberInfo? inverse);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse(System.Reflection.MemberInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverse" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="inverse">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation IMutableNavigation.SetInverse (string inverseName);" FrameworkAlternate="efcore-5.0;efcore-7.0;efcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse(string inverseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IMutableNavigation#SetInverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function SetInverse (inverseName As String) As IMutableNavigation Implements IMutableNavigation.SetInverse" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation" Usage="navigation.Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse inverseName" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation? IMutableNavigation.SetInverse (string? inverseName);" FrameworkAlternate="efcore-6.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverseName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="inverseName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IMutablePropertyBase#DeclaringType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DeclaringType As IMutableTypeBase Implements IMutablePropertyBase.DeclaringType" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType : Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase" Usage="Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.INavigation.DeclaringEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.INavigation.DeclaringEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.INavigation.DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#INavigation#DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DeclaringEntityType As IEntityType Implements INavigation.DeclaringEntityType" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.INavigation.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.INavigation.DeclaringEntityType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.INavigation.DeclaringEntityType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.INavigation.ForeignKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IForeignKey Microsoft.EntityFrameworkCore.Metadata.INavigation.ForeignKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IForeignKey Microsoft.EntityFrameworkCore.Metadata.INavigation.ForeignKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#INavigation#ForeignKey" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ForeignKey As IForeignKey Implements INavigation.ForeignKey" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.INavigation.ForeignKey : Microsoft.EntityFrameworkCore.Metadata.IForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.INavigation.ForeignKey" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.INavigation.ForeignKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-2.2;efcore-3.0;efcore-3.1;efcore-5.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IForeignKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor? INavigationBase.GetCollectionAccessor ();" FrameworkAlternate="efcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#INavigationBase#GetCollectionAccessor" />
      <MemberSignature Language="VB.NET" Value="Function GetCollectionAccessor () As IClrCollectionAccessor Implements INavigationBase.GetCollectionAccessor" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor : unit -&gt; Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor" Usage="navigation.Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor " />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor INavigationBase.GetCollectionAccessor ();" FrameworkAlternate="efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringEntityType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IPropertyBase#DeclaringEntityType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DeclaringEntityType As IEntityType Implements IPropertyBase.DeclaringEntityType" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringEntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringEntityType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringEntityType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringType">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.ITypeBase Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.ITypeBase Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IPropertyBase#DeclaringType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DeclaringType As ITypeBase Implements IPropertyBase.DeclaringType" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringType : Microsoft.EntityFrameworkCore.Metadata.ITypeBase" Usage="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.ITypeBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.ForeignKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.ForeignKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.ForeignKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Microsoft#EntityFrameworkCore#Metadata#IReadOnlyNavigation#ForeignKey" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ForeignKey As IReadOnlyForeignKey Implements IReadOnlyNavigation.ForeignKey" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.ForeignKey : Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.ForeignKey" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.ForeignKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAnnotationSet">
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation OnAnnotationSet (string name, Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation annotation, Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation oldAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation OnAnnotationSet(string name, class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation annotation, class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation oldAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.OnAnnotationSet(System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAnnotationSet (name As String, annotation As IConventionAnnotation, oldAnnotation As IConventionAnnotation) As IConventionAnnotation" />
      <MemberSignature Language="F#" Value="override this.OnAnnotationSet : string * Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation * Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation" Usage="navigation.OnAnnotationSet (name, annotation, oldAnnotation)" />
      <MemberSignature Language="C#" Value="protected override Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation? OnAnnotationSet (string name, Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation? annotation, Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation? oldAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="annotation" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="oldAnnotation" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation" Index="2" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">The key of the set annotation.</param>
        <param name="annotation">The annotation set.</param>
        <param name="oldAnnotation">The old annotation.</param>
        <summary>
                Runs the conventions when an annotation was set or removed.
            </summary>
        <returns>The annotation that was set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyIndexes">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes PropertyIndexes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes PropertyIndexes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.PropertyIndexes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PropertyIndexes As PropertyIndexes" />
      <MemberSignature Language="F#" Value="member this.PropertyIndexes : Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes with get, set" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.PropertyIndexes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyMetadataChanged">
      <MemberSignature Language="C#" Value="protected override void PropertyMetadataChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void PropertyMetadataChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.PropertyMetadataChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub PropertyMetadataChanged ()" />
      <MemberSignature Language="F#" Value="override this.PropertyMetadataChanged : unit -&gt; unit" Usage="navigation.PropertyMetadataChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sentinel">
      <MemberSignature Language="C#" Value="public virtual object? Sentinel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Sentinel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Sentinel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Sentinel As Object" />
      <MemberSignature Language="F#" Value="member this.Sentinel : obj" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.Sentinel" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.Sentinel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInverse">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation SetInverse (System.Reflection.MemberInfo inverse, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation SetInverse(class System.Reflection.MemberInfo inverse, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.SetInverse(System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetInverse (inverse As MemberInfo, configurationSource As ConfigurationSource) As Navigation" />
      <MemberSignature Language="F#" Value="abstract member SetInverse : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation&#xA;override this.SetInverse : System.Reflection.MemberInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Usage="navigation.SetInverse (inverse, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation? SetInverse (System.Reflection.MemberInfo? inverse, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverse" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="inverse">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInverse">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation SetInverse (string inverseName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation SetInverse(string inverseName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.SetInverse(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetInverse (inverseName As String, configurationSource As ConfigurationSource) As Navigation" />
      <MemberSignature Language="F#" Value="abstract member SetInverse : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation&#xA;override this.SetInverse : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation" Usage="navigation.SetInverse (inverseName, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation? SetInverse (string? inverseName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverseName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="inverseName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEagerLoaded">
      <MemberSignature Language="C#" Value="public virtual void SetIsEagerLoaded (bool? eagerLoaded, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIsEagerLoaded(valuetype System.Nullable`1&lt;bool&gt; eagerLoaded, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.SetIsEagerLoaded(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetIsEagerLoaded (eagerLoaded As Nullable(Of Boolean), configurationSource As ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member SetIsEagerLoaded : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; unit&#xA;override this.SetIsEagerLoaded : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; unit" Usage="navigation.SetIsEagerLoaded (eagerLoaded, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eagerLoaded" Type="System.Nullable&lt;System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1;efcore-5.0" />
      </Parameters>
      <Docs>
        <param name="eagerLoaded">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRemovedFromModel">
      <MemberSignature Language="C#" Value="public virtual void SetRemovedFromModel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRemovedFromModel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.SetRemovedFromModel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetRemovedFromModel ()" />
      <MemberSignature Language="F#" Value="abstract member SetRemovedFromModel : unit -&gt; unit&#xA;override this.SetRemovedFromModel : unit -&gt; unit" Usage="navigation.SetRemovedFromModel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetEntityType">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType TargetEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType TargetEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.TargetEntityType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TargetEntityType As EntityType" />
      <MemberSignature Language="F#" Value="member this.TargetEntityType : Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.TargetEntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="navigation.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateConfigurationSource">
      <MemberSignature Language="C#" Value="public override void UpdateConfigurationSource (Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpdateConfigurationSource(valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub UpdateConfigurationSource (configurationSource As ConfigurationSource)" />
      <MemberSignature Language="F#" Value="override this.UpdateConfigurationSource : Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; unit" Usage="navigation.UpdateConfigurationSource configurationSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0;efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
