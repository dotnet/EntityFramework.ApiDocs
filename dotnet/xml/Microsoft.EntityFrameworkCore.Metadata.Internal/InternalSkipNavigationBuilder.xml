<Type Name="InternalSkipNavigationBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder">
  <TypeSignature Language="C#" Value="public class InternalSkipNavigationBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalSkipNavigationBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation&gt; implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalSkipNavigationBuilder&#xA;Inherits InternalPropertyBaseBuilder(Of SkipNavigation)&#xA;Implements IConventionSkipNavigationBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="F#" Value="type InternalSkipNavigationBuilder = class&#xA;    inherit InternalPropertyBaseBuilder&lt;SkipNavigation&gt;&#xA;    interface IConventionSkipNavigationBuilder&#xA;    interface IConventionPropertyBaseBuilder&#xA;    interface IConventionAnnotatableBuilder" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
  <TypeSignature Language="C#" Value="public class InternalSkipNavigationBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;, Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternalSkipNavigationBuilder extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder`2&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder, class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation&gt; implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1&lt;class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;, class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class InternalSkipNavigationBuilder&#xA;Inherits InternalPropertyBaseBuilder(Of IConventionSkipNavigationBuilder, SkipNavigation)&#xA;Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder), IConventionSkipNavigationBuilder" FrameworkAlternate="efcore-8.0" />
  <TypeSignature Language="F#" Value="type InternalSkipNavigationBuilder = class&#xA;    inherit InternalPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder, SkipNavigation&gt;&#xA;    interface IConventionSkipNavigationBuilder&#xA;    interface IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;&#xA;    interface IConventionAnnotatableBuilder" FrameworkAlternate="efcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation&gt;</BaseTypeName>
    <BaseTypeName FrameworkAlternate="efcore-8.0">Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TBuilder">Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TPropertyBase">Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="efcore-8.0">
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalSkipNavigationBuilder (Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation metadata, Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder modelBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation metadata, class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder modelBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (metadata As SkipNavigation, modelBuilder As InternalModelBuilder)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder (metadata, modelBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="metadata" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation" />
        <Parameter Name="modelBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <param name="modelBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder Attach (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder entityTypeBuilder = default, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType = default, Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder inverseBuilder = default);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder Attach(class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder entityTypeBuilder, class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType targetEntityType, class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder inverseBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Attach(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Attach (Optional entityTypeBuilder As InternalEntityTypeBuilder = Nothing, Optional targetEntityType As EntityType = Nothing, Optional inverseBuilder As InternalSkipNavigationBuilder = Nothing) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member Attach : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.Attach : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder * Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType * Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Attach (entityTypeBuilder, targetEntityType, inverseBuilder)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? Attach (Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder? entityTypeBuilder = default, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType? targetEntityType = default, Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? inverseBuilder = default);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityTypeBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" />
        <Parameter Name="targetEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" />
        <Parameter Name="inverseBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" />
      </Parameters>
      <Docs>
        <param name="entityTypeBuilder">To be added.</param>
        <param name="targetEntityType">To be added.</param>
        <param name="inverseBuilder">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoInclude">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder AutoInclude (bool? autoInclude, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder AutoInclude(valuetype System.Nullable`1&lt;bool&gt; autoInclude, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.AutoInclude(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AutoInclude (autoInclude As Nullable(Of Boolean), configurationSource As ConfigurationSource) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member AutoInclude : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.AutoInclude : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.AutoInclude (autoInclude, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? AutoInclude (bool? autoInclude, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoInclude" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="autoInclude">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetAutoInclude">
      <MemberSignature Language="C#" Value="public virtual bool CanSetAutoInclude (bool? autoInclude, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetAutoInclude(valuetype System.Nullable`1&lt;bool&gt; autoInclude, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.CanSetAutoInclude(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetAutoInclude (autoInclude As Nullable(Of Boolean), configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetAutoInclude : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetAutoInclude : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalSkipNavigationBuilder.CanSetAutoInclude (autoInclude, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoInclude" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="autoInclude">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetForeignKey">
      <MemberSignature Language="C#" Value="public virtual bool CanSetForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.CanSetForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetForeignKey (foreignKey As ForeignKey, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanSetForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalSkipNavigationBuilder.CanSetForeignKey (foreignKey, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual bool CanSetForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey? foreignKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetInverse">
      <MemberSignature Language="C#" Value="public virtual bool CanSetInverse (Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation inverse, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetInverse(class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation inverse, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.CanSetInverse(Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetInverse (inverse As SkipNavigation, configurationSource As Nullable(Of ConfigurationSource)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetInverse : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool&#xA;override this.CanSetInverse : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; -&gt; bool" Usage="internalSkipNavigationBuilder.CanSetInverse (inverse, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual bool CanSetInverse (Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation? inverse, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverse" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation" />
        <Parameter Name="configurationSource" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" />
      </Parameters>
      <Docs>
        <param name="inverse">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetLazyLoadingEnabled">
      <MemberSignature Language="C#" Value="public virtual bool CanSetLazyLoadingEnabled (bool? lazyLoadingEnabled, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetLazyLoadingEnabled(valuetype System.Nullable`1&lt;bool&gt; lazyLoadingEnabled, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.CanSetLazyLoadingEnabled(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSetLazyLoadingEnabled (lazyLoadingEnabled As Nullable(Of Boolean), configurationSource As ConfigurationSource) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetLazyLoadingEnabled : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool&#xA;override this.CanSetLazyLoadingEnabled : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; bool" Usage="internalSkipNavigationBuilder.CanSetLazyLoadingEnabled (lazyLoadingEnabled, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lazyLoadingEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="lazyLoadingEnabled">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableLazyLoading">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? EnableLazyLoading (bool? lazyLoadingEnabled, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder EnableLazyLoading(valuetype System.Nullable`1&lt;bool&gt; lazyLoadingEnabled, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.EnableLazyLoading(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableLazyLoading (lazyLoadingEnabled As Nullable(Of Boolean), configurationSource As ConfigurationSource) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member EnableLazyLoading : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.EnableLazyLoading : Nullable&lt;bool&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.EnableLazyLoading (lazyLoadingEnabled, configurationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lazyLoadingEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="lazyLoadingEnabled">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasField (System.Reflection.FieldInfo fieldInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasField(class System.Reflection.FieldInfo fieldInfo, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.HasField(System.Reflection.FieldInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasField (fieldInfo As FieldInfo, configurationSource As ConfigurationSource) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="override this.HasField : System.Reflection.FieldInfo * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.HasField (fieldInfo, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasField (System.Reflection.FieldInfo? fieldInfo, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasField (string fieldName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasField(string fieldName, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.HasField(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasField (fieldName As String, configurationSource As ConfigurationSource) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="override this.HasField : string * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.HasField (fieldName, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasField (string? fieldName, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasForeignKey(class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey foreignKey, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.HasForeignKey(Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasForeignKey (foreignKey As ForeignKey, configurationSource As ConfigurationSource) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.HasForeignKey : Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.HasForeignKey (foreignKey, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasForeignKey (Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey? foreignKey, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasInverse">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasInverse (Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation inverse, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder HasInverse(class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation inverse, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.HasInverse(Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasInverse (inverse As SkipNavigation, configurationSource As ConfigurationSource) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasInverse : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder&#xA;override this.HasInverse : Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.HasInverse (inverse, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? HasInverse (Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation? inverse, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverse" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="inverse">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#CanSetField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder.CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField (fieldInfo, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetField (System.Reflection.FieldInfo? fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetField (string fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#CanSetField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder.CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField : string * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField (fieldName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetField (string? fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder.CanSetPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetPropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder.CanSetPropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder IConventionPropertyBaseBuilder.HasField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#HasField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As IConventionPropertyBaseBuilder Implements IConventionPropertyBaseBuilder.HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField (fieldInfo, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder? IConventionPropertyBaseBuilder.HasField (System.Reflection.FieldInfo? fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder IConventionPropertyBaseBuilder.HasField (string fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#HasField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldName As String, fromDataAnnotation As Boolean) As IConventionPropertyBaseBuilder Implements IConventionPropertyBaseBuilder.HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField (fieldName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder? IConventionPropertyBaseBuilder.HasField (string? fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionPropertyBase Implements IConventionPropertyBaseBuilder.Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder IConventionPropertyBaseBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder#UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As IConventionPropertyBaseBuilder Implements IConventionPropertyBaseBuilder.UsePropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder? IConventionPropertyBaseBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;.CanSetField (System.Reflection.FieldInfo? fieldInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#CanSetField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField : System.Reflection.FieldInfo * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField (fieldInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.CanSetField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;.CanSetField (string? fieldName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#CanSetField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetField (fieldName As String, fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).CanSetField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField : string * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField : string * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetField (fieldName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.CanSetField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetPropertyAccessMode">
      <MemberSignature Language="C#" Value="bool IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;.CanSetPropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetPropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetPropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As Boolean Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).CanSetPropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.CanSetPropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;.HasAnnotation (string? name, object? value, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#HasAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasAnnotation (name As String, value As Object, fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).HasAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasAnnotation(System.String,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;.HasField (System.Reflection.FieldInfo? fieldInfo, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#HasField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField (fieldInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;.HasField (string? fieldName, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#HasField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldName As String, fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasField (fieldName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNoAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;.HasNoAnnotation (string? name, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNoAnnotation(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#HasNoAnnotation(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNoAnnotation (name As String, fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).HasNoAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNoAnnotation : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNoAnnotation (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasNoAnnotation(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNonNullAnnotation">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;.HasNonNullAnnotation (string? name, object? value, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNonNullAnnotation(string name, object value, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#HasNonNullAnnotation(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasNonNullAnnotation (name As String, value As Object, fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).HasNonNullAnnotation" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNonNullAnnotation : string * obj * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.HasNonNullAnnotation (name, value, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.HasNonNullAnnotation(System.String,System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionPropertyBase Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionPropertyBaseBuilder&lt;IConventionSkipNavigationBuilder&gt;.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionPropertyBaseBuilder&lt;Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder&gt;#UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionPropertyBaseBuilder(Of IConventionSkipNavigationBuilder).UsePropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder&lt;Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&gt;.UsePropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder`1.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.AutoInclude">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionSkipNavigationBuilder.AutoInclude (bool? autoInclude, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.AutoInclude(valuetype System.Nullable`1&lt;bool&gt; autoInclude, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#AutoInclude(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function AutoInclude (autoInclude As Nullable(Of Boolean), fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionSkipNavigationBuilder.AutoInclude" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.AutoInclude : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.AutoInclude : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.AutoInclude (autoInclude, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionSkipNavigationBuilder.AutoInclude (bool? autoInclude, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.AutoInclude(System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoInclude" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoInclude">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetAutoInclude">
      <MemberSignature Language="C#" Value="bool IConventionSkipNavigationBuilder.CanSetAutoInclude (bool? autoInclude, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetAutoInclude(valuetype System.Nullable`1&lt;bool&gt; autoInclude, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#CanSetAutoInclude(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetAutoInclude (autoInclude As Nullable(Of Boolean), fromDataAnnotation As Boolean) As Boolean Implements IConventionSkipNavigationBuilder.CanSetAutoInclude" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetAutoInclude : Nullable&lt;bool&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetAutoInclude : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetAutoInclude (autoInclude, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetAutoInclude(System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoInclude" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoInclude">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetForeignKey">
      <MemberSignature Language="C#" Value="bool IConventionSkipNavigationBuilder.CanSetForeignKey (Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#CanSetForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetForeignKey (foreignKey As IConventionForeignKey, fromDataAnnotation As Boolean) As Boolean Implements IConventionSkipNavigationBuilder.CanSetForeignKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetForeignKey (foreignKey, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionSkipNavigationBuilder.CanSetForeignKey (Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey? foreignKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetInverse">
      <MemberSignature Language="C#" Value="bool IConventionSkipNavigationBuilder.CanSetInverse (Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation inverse, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetInverse(class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation inverse, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#CanSetInverse(Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetInverse (inverse As IConventionSkipNavigation, fromDataAnnotation As Boolean) As Boolean Implements IConventionSkipNavigationBuilder.CanSetInverse" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetInverse : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetInverse : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetInverse (inverse, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="bool IConventionSkipNavigationBuilder.CanSetInverse (Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation? inverse, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetInverse(Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverse" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inverse">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetLazyLoadingEnabled">
      <MemberSignature Language="C#" Value="bool IConventionSkipNavigationBuilder.CanSetLazyLoadingEnabled (bool? lazyLoadingEnabled, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetLazyLoadingEnabled(valuetype System.Nullable`1&lt;bool&gt; lazyLoadingEnabled, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#CanSetLazyLoadingEnabled(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function CanSetLazyLoadingEnabled (lazyLoadingEnabled As Nullable(Of Boolean), fromDataAnnotation As Boolean) As Boolean Implements IConventionSkipNavigationBuilder.CanSetLazyLoadingEnabled" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetLazyLoadingEnabled : Nullable&lt;bool&gt; * bool -&gt; bool&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetLazyLoadingEnabled : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetLazyLoadingEnabled (lazyLoadingEnabled, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetLazyLoadingEnabled(System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lazyLoadingEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="lazyLoadingEnabled">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.EnableLazyLoading">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionSkipNavigationBuilder.EnableLazyLoading (bool? lazyLoadingEnabled, bool fromDataAnnotation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.EnableLazyLoading(valuetype System.Nullable`1&lt;bool&gt; lazyLoadingEnabled, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#EnableLazyLoading(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function EnableLazyLoading (lazyLoadingEnabled As Nullable(Of Boolean), fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionSkipNavigationBuilder.EnableLazyLoading" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.EnableLazyLoading : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.EnableLazyLoading : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.EnableLazyLoading (lazyLoadingEnabled, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.EnableLazyLoading(System.Nullable{System.Boolean},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lazyLoadingEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="0" FrameworkAlternate="efcore-8.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-8.0" />
      </Parameters>
      <Docs>
        <param name="lazyLoadingEnabled">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionSkipNavigationBuilder.HasField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#HasField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldInfo As FieldInfo, fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionSkipNavigationBuilder.HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField (fieldInfo, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionSkipNavigationBuilder.HasField (System.Reflection.FieldInfo? fieldInfo, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField(System.Reflection.FieldInfo,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldInfo">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionSkipNavigationBuilder.HasField (string fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#HasField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasField (fieldName As String, fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionSkipNavigationBuilder.HasField" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField (fieldName, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionSkipNavigationBuilder.HasField (string? fieldName, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="fieldName">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasForeignKey">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionSkipNavigationBuilder.HasForeignKey (Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasForeignKey(class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey foreignKey, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#HasForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasForeignKey (foreignKey As IConventionForeignKey, fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionSkipNavigationBuilder.HasForeignKey" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasForeignKey : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasForeignKey (foreignKey, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionSkipNavigationBuilder.HasForeignKey (Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey? foreignKey, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="foreignKey" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="foreignKey">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasInverse">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionSkipNavigationBuilder.HasInverse (Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation inverse, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasInverse(class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation inverse, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#HasInverse(Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function HasInverse (inverse As IConventionSkipNavigation, fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionSkipNavigationBuilder.HasInverse" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasInverse : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasInverse : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasInverse (inverse, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionSkipNavigationBuilder.HasInverse (Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation? inverse, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0;efcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasInverse(Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inverse" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inverse">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.Metadata">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#Metadata" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Metadata As IConventionSkipNavigation Implements IConventionSkipNavigationBuilder.Metadata" />
      <MemberSignature Language="F#" Value="member this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.Metadata</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder IConventionSkipNavigationBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSkipNavigationBuilder#UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), fromDataAnnotation As Boolean) As IConventionSkipNavigationBuilder Implements IConventionSkipNavigationBuilder.UsePropertyAccessMode" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder&#xA;override this.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.UsePropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberSignature Language="C#" Value="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder? IConventionSkipNavigationBuilder.UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="fromDataAnnotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="This">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder This { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder This" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.This" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property This As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="member this.This : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="This" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-8.0">
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.PreserveBaseOverrides]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.PreserveBaseOverrides&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), configurationSource As ConfigurationSource) As InternalSkipNavigationBuilder" />
      <MemberSignature Language="F#" Value="override this.UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder" Usage="internalSkipNavigationBuilder.UsePropertyAccessMode (propertyAccessMode, configurationSource)" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder? UsePropertyAccessMode (Microsoft.EntityFrameworkCore.PropertyAccessMode? propertyAccessMode, Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource configurationSource);" FrameworkAlternate="efcore-6.0;efcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="0" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
        <Parameter Name="configurationSource" Type="Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" Index="1" FrameworkAlternate="efcore-5.0;efcore-6.0;efcore-7.0" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode">To be added.</param>
        <param name="configurationSource">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
